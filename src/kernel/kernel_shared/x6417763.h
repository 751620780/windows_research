
#ifdef __cplusplus
extern "C" {
#endif

//////////////////
//   C Define   //
//////////////////

#define VOID void
#define STDCALL __stdcall
#define FASTCALL __fastcall
#define CDECL __cdecl
#define THISCALL __thiscall
#define NEAR 
#define FAR 
//---------------------------------------------------------------------

//////////////////
// C Basic Type //
//////////////////

typedef signed char INT8;
typedef signed char CHAR;
typedef signed short INT16;
typedef signed int INT32;
typedef signed int BOOL;
typedef signed __int64 INT64;
typedef signed __int64 LONG64;
typedef signed long LONG32;
typedef unsigned char UINT8;
typedef unsigned char BYTE;
typedef unsigned short UINT16;
typedef unsigned short WCHAR;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned __int64 ULONG64;
typedef unsigned long ULONG32;
typedef float FLOAT32;
typedef double FLOAT64;
typedef struct {unsigned short W[5];} FLOAT80;
typedef struct { __int64 LowPart;__int64 HighPart;} FLOAT128;
typedef double DATE;
typedef signed long HRESULT;
typedef union { struct {unsigned long Lo; long Hi;}; __int64 int64;} CURRENCY;
typedef wchar_t OLECHAR;
//---------------------------------------------------------------------

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Enum types

typedef enum _<unnamed-enum-KTMOH_CommitTransaction_Result>  // 2 elements, 0x4 bytes
{
    KTMOH_CommitTransaction_Result   = 1 /*0x1*/,
    KTMOH_RollbackTransaction_Result = 2 /*0x2*/
}<unnamed-enum-KTMOH_CommitTransaction_Result>, *P<unnamed-enum-KTMOH_CommitTransaction_Result>;

typedef enum _ADD_DRIVER_STAGE  // 7 elements, 0x4 bytes
{
    ClassConfigFilters = 0 /*0x0*/,
    LowerDeviceFilters = 1 /*0x1*/,
    LowerClassFilters  = 2 /*0x2*/,
    DeviceService      = 3 /*0x3*/,
    UpperDeviceFilters = 4 /*0x4*/,
    UpperClassFilters  = 5 /*0x5*/,
    MaximumAddStage    = 6 /*0x6*/
}ADD_DRIVER_STAGE, *PADD_DRIVER_STAGE;

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE  // 3 elements, 0x4 bytes
{
    StandardDesign  = 0 /*0x0*/,
    NEC98x86        = 1 /*0x1*/,
    EndAlternatives = 2 /*0x2*/
}ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef enum _ARBITER_ACTION  // 10 elements, 0x4 bytes
{
    ArbiterActionTestAllocation          = 0 /*0x0*/,
    ArbiterActionRetestAllocation        = 1 /*0x1*/,
    ArbiterActionCommitAllocation        = 2 /*0x2*/,
    ArbiterActionRollbackAllocation      = 3 /*0x3*/,
    ArbiterActionQueryAllocatedResources = 4 /*0x4*/,
    ArbiterActionWriteReservedResources  = 5 /*0x5*/,
    ArbiterActionQueryConflict           = 6 /*0x6*/,
    ArbiterActionQueryArbitrate          = 7 /*0x7*/,
    ArbiterActionAddReserved             = 8 /*0x8*/,
    ArbiterActionBootAllocation          = 9 /*0x9*/
}ARBITER_ACTION, *PARBITER_ACTION;

typedef enum _ARBITER_REQUEST_SOURCE  // 6 elements, 0x4 bytes
{
    ArbiterRequestUndefined      = -1 /*0xFF*/,
    ArbiterRequestLegacyReported = 0 /*0x0*/,
    ArbiterRequestHalReported    = 1 /*0x1*/,
    ArbiterRequestLegacyAssigned = 2 /*0x2*/,
    ArbiterRequestPnpDetected    = 3 /*0x3*/,
    ArbiterRequestPnpEnumerated  = 4 /*0x4*/
}ARBITER_REQUEST_SOURCE, *PARBITER_REQUEST_SOURCE;

typedef enum _ARBITER_RESULT  // 4 elements, 0x4 bytes
{
    ArbiterResultUndefined        = -1 /*0xFF*/,
    ArbiterResultSuccess          = 0 /*0x0*/,
    ArbiterResultExternalConflict = 1 /*0x1*/,
    ArbiterResultNullRequest      = 2 /*0x2*/
}ARBITER_RESULT, *PARBITER_RESULT;

typedef enum _BLOB_ID  // 11 elements, 0x4 bytes
{
    BLOB_TYPE_UNKNOWN          = 0 /*0x0*/,
    BLOB_TYPE_CONNECTION_INFO  = 1 /*0x1*/,
    BLOB_TYPE_MESSAGE          = 2 /*0x2*/,
    BLOB_TYPE_SECURITY_CONTEXT = 3 /*0x3*/,
    BLOB_TYPE_SECTION          = 4 /*0x4*/,
    BLOB_TYPE_REGION           = 5 /*0x5*/,
    BLOB_TYPE_VIEW             = 6 /*0x6*/,
    BLOB_TYPE_RESERVE          = 7 /*0x7*/,
    BLOB_TYPE_DIRECT_TRANSFER  = 8 /*0x8*/,
    BLOB_TYPE_HANDLE_DATA      = 9 /*0x9*/,
    BLOB_TYPE_MAX_ID           = 10 /*0xA*/
}BLOB_ID, *PBLOB_ID;

typedef enum _BOOT_ENTROPY_SOURCE_ID  // 12 elements, 0x4 bytes
{
    BootEntropySourceNone      = 0 /*0x0*/,
    BootEntropySourceSeedfile  = 1 /*0x1*/,
    BootEntropySourceExternal  = 2 /*0x2*/,
    BootEntropySourceTpm       = 3 /*0x3*/,
    BootEntropySourceRdrand    = 4 /*0x4*/,
    BootEntropySourceTime      = 5 /*0x5*/,
    BootEntropySourceAcpiOem0  = 6 /*0x6*/,
    BootEntropySourceUefi      = 7 /*0x7*/,
    BootEntropySourceCng       = 8 /*0x8*/,
    BootEntropySourceTcbTpm    = 9 /*0x9*/,
    BootEntropySourceTcbRdrand = 10 /*0xA*/,
    BootMaxEntropySources      = 10 /*0xA*/
}BOOT_ENTROPY_SOURCE_ID, *PBOOT_ENTROPY_SOURCE_ID;

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE  // 5 elements, 0x4 bytes
{
    BootEntropySourceStructureUninitialized = 0 /*0x0*/,
    BootEntropySourceDisabledByPolicy       = 1 /*0x1*/,
    BootEntropySourceNotPresent             = 2 /*0x2*/,
    BootEntropySourceError                  = 3 /*0x3*/,
    BootEntropySourceSuccess                = 4 /*0x4*/
}BOOT_ENTROPY_SOURCE_RESULT_CODE, *PBOOT_ENTROPY_SOURCE_RESULT_CODE;

typedef enum _BUS_DATA_TYPE  // 14 elements, 0x4 bytes
{
    ConfigurationSpaceUndefined = -1 /*0xFF*/,
    Cmos                        = 0 /*0x0*/,
    EisaConfiguration           = 1 /*0x1*/,
    Pos                         = 2 /*0x2*/,
    CbusConfiguration           = 3 /*0x3*/,
    PCIConfiguration            = 4 /*0x4*/,
    VMEConfiguration            = 5 /*0x5*/,
    NuBusConfiguration          = 6 /*0x6*/,
    PCMCIAConfiguration         = 7 /*0x7*/,
    MPIConfiguration            = 8 /*0x8*/,
    MPSAConfiguration           = 9 /*0x9*/,
    PNPISAConfiguration         = 10 /*0xA*/,
    SgiInternalConfiguration    = 11 /*0xB*/,
    MaximumBusDataType          = 12 /*0xC*/
}BUS_DATA_TYPE, *PBUS_DATA_TYPE;

typedef enum _BUS_QUERY_ID_TYPE  // 6 elements, 0x4 bytes
{
    BusQueryDeviceID           = 0 /*0x0*/,
    BusQueryHardwareIDs        = 1 /*0x1*/,
    BusQueryCompatibleIDs      = 2 /*0x2*/,
    BusQueryInstanceID         = 3 /*0x3*/,
    BusQueryDeviceSerialNumber = 4 /*0x4*/,
    BusQueryContainerID        = 5 /*0x5*/
}BUS_QUERY_ID_TYPE, *PBUS_QUERY_ID_TYPE;

typedef enum _CM_DIRTY_VECTOR_OPERATION  // 3 elements, 0x4 bytes
{
    DirtyVectorModified   = 0 /*0x0*/,
    DirtyDataCaptureStart = 1 /*0x1*/,
    DirtyDataCaptureEnd   = 2 /*0x2*/
}CM_DIRTY_VECTOR_OPERATION, *PCM_DIRTY_VECTOR_OPERATION;

typedef enum _CM_LOAD_FAILURE_TYPE  // 27 elements, 0x4 bytes
{
    _None                               = 0 /*0x0*/,
    _CmCreateHive                       = 1 /*0x1*/,
    _HvpBuildMap                        = 3 /*0x3*/,
    _HvpBuildMapForLoaderHive           = 4 /*0x4*/,
    _HvpInitMap                         = 5 /*0x5*/,
    _HvLoadHive                         = 6 /*0x6*/,
    _HvpMapHiveImage                    = 7 /*0x7*/,
    _HvpRecoverData                     = 8 /*0x8*/,
    _CmpValidateHiveSecurityDescriptors = 9 /*0x9*/,
    _HvpEnlistBinInMap                  = 10 /*0xA*/,
    _CmCheckRegistry                    = 11 /*0xB*/,
    _CmRegistryIO                       = 12 /*0xC*/,
    _CmCheckRegistry2                   = 13 /*0xD*/,
    _CmpCheckKey                        = 14 /*0xE*/,
    _CmpCheckValueList                  = 15 /*0xF*/,
    _HvCheckHive                        = 16 /*0x10*/,
    _HvCheckBin                         = 17 /*0x11*/,
    _HvpGetLogEntryDirtyVector          = 18 /*0x12*/,
    _HvpReadLogEntryHeader              = 19 /*0x13*/,
    _HvpReadLogEntry                    = 20 /*0x14*/,
    _CmpMountPreloadedHives             = 21 /*0x15*/,
    _CmpLoadHiveThread                  = 22 /*0x16*/,
    _CmpCheckLeaf                       = 23 /*0x17*/,
    _HvHiveStartFileBacked              = 24 /*0x18*/,
    _HvStartHiveMemoryBacked            = 25 /*0x19*/,
    _HvpEnlistFreeCells                 = 26 /*0x1A*/,
    _HvpPerformLogFileRecovery          = 27 /*0x1B*/
}CM_LOAD_FAILURE_TYPE, *PCM_LOAD_FAILURE_TYPE;

typedef enum _CM_SHARE_DISPOSITION  // 4 elements, 0x4 bytes
{
    CmResourceShareUndetermined    = 0 /*0x0*/,
    CmResourceShareDeviceExclusive = 1 /*0x1*/,
    CmResourceShareDriverExclusive = 2 /*0x2*/,
    CmResourceShareShared          = 3 /*0x3*/
}CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

typedef enum _CMP_FAILURE_INJECTION_POINT  // 22 elements, 0x4 bytes
{
    CmpFailurePointPoolAllocation                   = 0 /*0x0*/,
    CmpFailurePointViewMapping                      = 1 /*0x1*/,
    CmpFailurePointViewPinning                      = 2 /*0x2*/,
    CmpFailurePointResourceCharging                 = 3 /*0x3*/,
    CmpFailurePointFileWrite                        = 4 /*0x4*/,
    CmpFailurePointFileRead                         = 5 /*0x5*/,
    CmpFailurePointCacheFlush                       = 6 /*0x6*/,
    CmpFailurePointFlush                            = 7 /*0x7*/,
    CmpFailurePointFlushAndPurge                    = 8 /*0x8*/,
    CmpFailurePointForceLargeBin                    = 9 /*0x9*/,
    CmpFailurePointDontFixAlignment                 = 10 /*0xA*/,
    CmpFailurePointAllocateCell                     = 11 /*0xB*/,
    CmpFailurePointMarkDirty                        = 12 /*0xC*/,
    CmpFailurePointForceMultiLevelMap               = 13 /*0xD*/,
    CmpFailurePointAllocateKcb                      = 14 /*0xE*/,
    CmpFailurePointCreateKeyBody                    = 15 /*0xF*/,
    CmpFailurePointForcePoolAllocateKcb             = 16 /*0x10*/,
    CmpFailurePointForceFreeKcb                     = 17 /*0x11*/,
    CmpFailurePointKeyEnumResumeContextVerification = 18 /*0x12*/,
    CmpFailurePointKeyEnumForceRetry                = 19 /*0x13*/,
    CmpFailurePointForceLazyCOWByPolicy             = 20 /*0x14*/,
    CmpFailureInjectionPointCount                   = 21 /*0x15*/
}CMP_FAILURE_INJECTION_POINT, *PCMP_FAILURE_INJECTION_POINT;

typedef enum _CONFIGURATION_CLASS  // 8 elements, 0x4 bytes
{
    SystemClass     = 0 /*0x0*/,
    ProcessorClass  = 1 /*0x1*/,
    CacheClass      = 2 /*0x2*/,
    AdapterClass    = 3 /*0x3*/,
    ControllerClass = 4 /*0x4*/,
    PeripheralClass = 5 /*0x5*/,
    MemoryClass     = 6 /*0x6*/,
    MaximumClass    = 7 /*0x7*/
}CONFIGURATION_CLASS, *PCONFIGURATION_CLASS;

typedef enum _CONFIGURATION_TYPE  // 42 elements, 0x4 bytes
{
    ArcSystem               = 0 /*0x0*/,
    CentralProcessor        = 1 /*0x1*/,
    FloatingPointProcessor  = 2 /*0x2*/,
    PrimaryIcache           = 3 /*0x3*/,
    PrimaryDcache           = 4 /*0x4*/,
    SecondaryIcache         = 5 /*0x5*/,
    SecondaryDcache         = 6 /*0x6*/,
    SecondaryCache          = 7 /*0x7*/,
    EisaAdapter             = 8 /*0x8*/,
    TcAdapter               = 9 /*0x9*/,
    ScsiAdapter             = 10 /*0xA*/,
    DtiAdapter              = 11 /*0xB*/,
    MultiFunctionAdapter    = 12 /*0xC*/,
    DiskController          = 13 /*0xD*/,
    TapeController          = 14 /*0xE*/,
    CdromController         = 15 /*0xF*/,
    WormController          = 16 /*0x10*/,
    SerialController        = 17 /*0x11*/,
    NetworkController       = 18 /*0x12*/,
    DisplayController       = 19 /*0x13*/,
    ParallelController      = 20 /*0x14*/,
    PointerController       = 21 /*0x15*/,
    KeyboardController      = 22 /*0x16*/,
    AudioController         = 23 /*0x17*/,
    OtherController         = 24 /*0x18*/,
    DiskPeripheral          = 25 /*0x19*/,
    FloppyDiskPeripheral    = 26 /*0x1A*/,
    TapePeripheral          = 27 /*0x1B*/,
    ModemPeripheral         = 28 /*0x1C*/,
    MonitorPeripheral       = 29 /*0x1D*/,
    PrinterPeripheral       = 30 /*0x1E*/,
    PointerPeripheral       = 31 /*0x1F*/,
    KeyboardPeripheral      = 32 /*0x20*/,
    TerminalPeripheral      = 33 /*0x21*/,
    OtherPeripheral         = 34 /*0x22*/,
    LinePeripheral          = 35 /*0x23*/,
    NetworkPeripheral       = 36 /*0x24*/,
    SystemMemory            = 37 /*0x25*/,
    DockingInformation      = 38 /*0x26*/,
    RealModeIrqRoutingTable = 39 /*0x27*/,
    RealModePCIEnumeration  = 40 /*0x28*/,
    MaximumType             = 41 /*0x29*/
}CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;

typedef enum _ConnectionResourceConsumerDesc  // 4 elements, 0x4 bytes
{
    ConnectionResourceConsumerDescIsUndefined = 0 /*0x0*/,
    ConnectionResourceConsumerDescIsDevice    = 1 /*0x1*/,
    ConnectionResourceConsumerDescIsOpregion  = 2 /*0x2*/,
    ConnectionResourceConsumerDescMax         = 3 /*0x3*/
}ConnectionResourceConsumerDesc, *PConnectionResourceConsumerDesc;

typedef enum _CREATE_FILE_TYPE  // 3 elements, 0x4 bytes
{
    CreateFileTypeNone      = 0 /*0x0*/,
    CreateFileTypeNamedPipe = 1 /*0x1*/,
    CreateFileTypeMailslot  = 2 /*0x2*/
}CREATE_FILE_TYPE, *PCREATE_FILE_TYPE;

typedef enum _DEVICE_POWER_STATE  // 6 elements, 0x4 bytes
{
    PowerDeviceUnspecified = 0 /*0x0*/,
    PowerDeviceD0          = 1 /*0x1*/,
    PowerDeviceD1          = 2 /*0x2*/,
    PowerDeviceD2          = 3 /*0x3*/,
    PowerDeviceD3          = 4 /*0x4*/,
    PowerDeviceMaximum     = 5 /*0x5*/
}DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _DEVICE_RELATION_LEVEL  // 3 elements, 0x4 bytes
{
    RELATION_LEVEL_REMOVE_EJECT      = 0 /*0x0*/,
    RELATION_LEVEL_DEPENDENT         = 1 /*0x1*/,
    RELATION_LEVEL_DIRECT_DESCENDANT = 2 /*0x2*/
}DEVICE_RELATION_LEVEL, *PDEVICE_RELATION_LEVEL;

typedef enum _DEVICE_RELATION_TYPE  // 7 elements, 0x4 bytes
{
    BusRelations         = 0 /*0x0*/,
    EjectionRelations    = 1 /*0x1*/,
    PowerRelations       = 2 /*0x2*/,
    RemovalRelations     = 3 /*0x3*/,
    TargetDeviceRelation = 4 /*0x4*/,
    SingleBusRelations   = 5 /*0x5*/,
    TransportRelations   = 6 /*0x6*/
}DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _DEVICE_TEXT_TYPE  // 2 elements, 0x4 bytes
{
    DeviceTextDescription         = 0 /*0x0*/,
    DeviceTextLocationInformation = 1 /*0x1*/
}DEVICE_TEXT_TYPE, *PDEVICE_TEXT_TYPE;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE  // 6 elements, 0x4 bytes
{
    DeviceUsageTypeUndefined   = 0 /*0x0*/,
    DeviceUsageTypePaging      = 1 /*0x1*/,
    DeviceUsageTypeHibernation = 2 /*0x2*/,
    DeviceUsageTypeDumpFile    = 3 /*0x3*/,
    DeviceUsageTypeBoot        = 4 /*0x4*/,
    DeviceUsageTypePostDisplay = 5 /*0x5*/
}DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _DEVICE_WAKE_DEPTH  // 7 elements, 0x4 bytes
{
    DeviceWakeDepthNotWakeable = 0 /*0x0*/,
    DeviceWakeDepthD0          = 1 /*0x1*/,
    DeviceWakeDepthD1          = 2 /*0x2*/,
    DeviceWakeDepthD2          = 3 /*0x3*/,
    DeviceWakeDepthD3hot       = 4 /*0x4*/,
    DeviceWakeDepthD3cold      = 5 /*0x5*/,
    DeviceWakeDepthMaximum     = 6 /*0x6*/
}DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _DEVPROP_OPERATOR  // 42 elements, 0x4 bytes
{
    DEVPROP_OPERATOR_MODIFIER_NOT                         = 65536 /*0x10000*/,
    DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE                 = 131072 /*0x20000*/,
    DEVPROP_OPERATOR_NONE                                 = 0 /*0x0*/,
    DEVPROP_OPERATOR_EXISTS                               = 1 /*0x1*/,
    DEVPROP_OPERATOR_NOT_EXISTS                           = 65537 /*0x10001*/,
    DEVPROP_OPERATOR_EQUALS                               = 2 /*0x2*/,
    DEVPROP_OPERATOR_NOT_EQUALS                           = 65538 /*0x10002*/,
    DEVPROP_OPERATOR_GREATER_THAN                         = 3 /*0x3*/,
    DEVPROP_OPERATOR_LESS_THAN                            = 4 /*0x4*/,
    DEVPROP_OPERATOR_GREATER_THAN_EQUALS                  = 5 /*0x5*/,
    DEVPROP_OPERATOR_LESS_THAN_EQUALS                     = 6 /*0x6*/,
    DEVPROP_OPERATOR_EQUALS_IGNORE_CASE                   = 131074 /*0x20002*/,
    DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE               = 196610 /*0x30002*/,
    DEVPROP_OPERATOR_BITWISE_AND                          = 7 /*0x7*/,
    DEVPROP_OPERATOR_BITWISE_OR                           = 8 /*0x8*/,
    DEVPROP_OPERATOR_BEGINS_WITH                          = 9 /*0x9*/,
    DEVPROP_OPERATOR_ENDS_WITH                            = 10 /*0xA*/,
    DEVPROP_OPERATOR_CONTAINS                             = 11 /*0xB*/,
    DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE              = 131081 /*0x20009*/,
    DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE                = 131082 /*0x2000A*/,
    DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE                 = 131083 /*0x2000B*/,
    DEVPROP_OPERATOR_LIST_CONTAINS                        = 4096 /*0x1000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH             = 8192 /*0x2000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH               = 12288 /*0x3000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS                = 16384 /*0x4000*/,
    DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE            = 135168 /*0x21000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 139264 /*0x22000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE   = 143360 /*0x23000*/,
    DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE    = 147456 /*0x24000*/,
    DEVPROP_OPERATOR_AND_OPEN                             = 1048576 /*0x100000*/,
    DEVPROP_OPERATOR_AND_CLOSE                            = 2097152 /*0x200000*/,
    DEVPROP_OPERATOR_OR_OPEN                              = 3145728 /*0x300000*/,
    DEVPROP_OPERATOR_OR_CLOSE                             = 4194304 /*0x400000*/,
    DEVPROP_OPERATOR_NOT_OPEN                             = 5242880 /*0x500000*/,
    DEVPROP_OPERATOR_NOT_CLOSE                            = 6291456 /*0x600000*/,
    DEVPROP_OPERATOR_ARRAY_CONTAINS                       = 268435456 /*0x10000000*/,
    DEVPROP_OPERATOR_MASK_EVAL                            = 4095 /*0xFFF*/,
    DEVPROP_OPERATOR_MASK_LIST                            = 61440 /*0xF000*/,
    DEVPROP_OPERATOR_MASK_MODIFIER                        = 983040 /*0xF0000*/,
    DEVPROP_OPERATOR_MASK_NOT_LOGICAL                     = -267386881 /*0xF00FFFFF*/,
    DEVPROP_OPERATOR_MASK_LOGICAL                         = 267386880 /*0xFF00000*/,
    DEVPROP_OPERATOR_MASK_ARRAY                           = -268435456 /*0xF0000000*/
}DEVPROP_OPERATOR, *PDEVPROP_OPERATOR;

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS  // 2 elements, 0x4 bytes
{
    DirectoryNotifyInformation         = 1 /*0x1*/,
    DirectoryNotifyExtendedInformation = 2 /*0x2*/
}DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum _DMA_SPEED  // 6 elements, 0x4 bytes
{
    Compatible      = 0 /*0x0*/,
    TypeA           = 1 /*0x1*/,
    TypeB           = 2 /*0x2*/,
    TypeC           = 3 /*0x3*/,
    TypeF           = 4 /*0x4*/,
    MaximumDmaSpeed = 5 /*0x5*/
}DMA_SPEED, *PDMA_SPEED;

typedef enum _DMA_WIDTH  // 6 elements, 0x4 bytes
{
    Width8Bits      = 0 /*0x0*/,
    Width16Bits     = 1 /*0x1*/,
    Width32Bits     = 2 /*0x2*/,
    Width64Bits     = 3 /*0x3*/,
    WidthNoWrap     = 4 /*0x4*/,
    MaximumDmaWidth = 5 /*0x5*/
}DMA_WIDTH, *PDMA_WIDTH;

typedef enum _DOMAIN_CONFIGURATION_ARCH  // 2 elements, 0x4 bytes
{
    DomainConfigurationArm64   = 0 /*0x0*/,
    DomainConfigurationInvalid = 1 /*0x1*/
}DOMAIN_CONFIGURATION_ARCH, *PDOMAIN_CONFIGURATION_ARCH;

typedef enum _DUMP_EVENTS  // 3 elements, 0x4 bytes
{
    DUMP_EVENT_NONE             = 0 /*0x0*/,
    DUMP_EVENT_HIBER_RESUME     = 1 /*0x1*/,
    DUMP_EVENT_HIBER_RESUME_END = 2 /*0x2*/
}DUMP_EVENTS, *PDUMP_EVENTS;

typedef enum _ETW_BUFFER_STATE  // 8 elements, 0x4 bytes
{
    EtwBufferStateFree               = 0 /*0x0*/,
    EtwBufferStateGeneralLogging     = 1 /*0x1*/,
    EtwBufferStateCSwitch            = 2 /*0x2*/,
    EtwBufferStateFlush              = 3 /*0x3*/,
    EtwBufferStatePendingCompression = 4 /*0x4*/,
    EtwBufferStateCompressed         = 5 /*0x5*/,
    EtwBufferStatePlaceholder        = 6 /*0x6*/,
    EtwBufferStateMaximum            = 7 /*0x7*/
}ETW_BUFFER_STATE, *PETW_BUFFER_STATE;

typedef enum _ETW_COMPRESSION_RESUMPTION_MODE  // 3 elements, 0x4 bytes
{
    EtwCompressionModeRestart   = 0 /*0x0*/,
    EtwCompressionModeNoDisable = 1 /*0x1*/,
    EtwCompressionModeNoRestart = 2 /*0x2*/
}ETW_COMPRESSION_RESUMPTION_MODE, *PETW_COMPRESSION_RESUMPTION_MODE;

typedef enum _ETW_GUID_TYPE  // 4 elements, 0x4 bytes
{
    EtwTraceGuidType        = 0 /*0x0*/,
    EtwNotificationGuidType = 1 /*0x1*/,
    EtwGroupGuidType        = 2 /*0x2*/,
    EtwGuidTypeMax          = 3 /*0x3*/
}ETW_GUID_TYPE, *PETW_GUID_TYPE;

typedef enum _ETW_HEADER_TYPE  // 3 elements, 0x4 bytes
{
    EtwHeaderTypeNative = 0 /*0x0*/,
    EtwHeaderTypeWow    = 1 /*0x1*/,
    EtwHeaderTypeMax    = 2 /*0x2*/
}ETW_HEADER_TYPE, *PETW_HEADER_TYPE;

typedef enum _ETW_NOTIFICATION_TYPE  // 12 elements, 0x4 bytes
{
    EtwNotificationTypeNoReply               = 1 /*0x1*/,
    EtwNotificationTypeLegacyEnable          = 2 /*0x2*/,
    EtwNotificationTypeEnable                = 3 /*0x3*/,
    EtwNotificationTypePrivateLogger         = 4 /*0x4*/,
    EtwNotificationTypePerflib               = 5 /*0x5*/,
    EtwNotificationTypeAudio                 = 6 /*0x6*/,
    EtwNotificationTypeSession               = 7 /*0x7*/,
    EtwNotificationTypeReserved              = 8 /*0x8*/,
    EtwNotificationTypeCredentialUI          = 9 /*0x9*/,
    EtwNotificationTypeInProcSession         = 10 /*0xA*/,
    EtwNotificationTypeFilteredPrivateLogger = 11 /*0xB*/,
    EtwNotificationTypeMax                   = 12 /*0xC*/
}ETW_NOTIFICATION_TYPE, *PETW_NOTIFICATION_TYPE;

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE  // 3 elements, 0x4 bytes
{
    ETW_PHF_EVENT_ID   = 0 /*0x0*/,
    ETW_PHF_STACK_WALK = 1 /*0x1*/,
    ETW_PHF_MAX_COUNT  = 2 /*0x2*/
}ETW_PERFECT_HASH_FUNCTION_TYPE, *PETW_PERFECT_HASH_FUNCTION_TYPE;

typedef enum _ETW_PERIODIC_TIMER_STATE  // 2 elements, 0x4 bytes
{
    EtwpPeriodicTimerUnset = 0 /*0x0*/,
    EtwpPeriodicTimerSet   = 1 /*0x1*/
}ETW_PERIODIC_TIMER_STATE, *PETW_PERIODIC_TIMER_STATE;

typedef enum _ETW_RT_EVENT_LOSS  // 5 elements, 0x4 bytes
{
    EtwRtEventNoLoss  = 0 /*0x0*/,
    EtwRtEventLost    = 1 /*0x1*/,
    EtwRtBufferLost   = 2 /*0x2*/,
    EtwRtBackupLost   = 3 /*0x3*/,
    EtwRtEventLossMax = 4 /*0x4*/
}ETW_RT_EVENT_LOSS, *PETW_RT_EVENT_LOSS;

typedef enum _ETW_STRING_TOKEN_TYPE  // 4 elements, 0x4 bytes
{
    ETW_STRING_TOKEN_EXE        = 0 /*0x0*/,
    ETW_STRING_TOKEN_PACKAGE_ID = 1 /*0x1*/,
    ETW_STRING_TOKEN_PKG_APP_ID = 2 /*0x2*/,
    ETW_STRING_TOKEN_MAX_COUNT  = 3 /*0x3*/
}ETW_STRING_TOKEN_TYPE, *PETW_STRING_TOKEN_TYPE;

typedef enum _EVENT_INFO_CLASS  // 5 elements, 0x4 bytes
{
    EventProviderBinaryTrackInfo   = 0 /*0x0*/,
    EventProviderSetReserved1      = 1 /*0x1*/,
    EventProviderSetTraits         = 2 /*0x2*/,
    EventProviderUseDescriptorType = 3 /*0x3*/,
    MaxEventInfo                   = 4 /*0x4*/
}EVENT_INFO_CLASS, *PEVENT_INFO_CLASS;

typedef enum _EVENT_TYPE  // 2 elements, 0x4 bytes
{
    NotificationEvent    = 0 /*0x0*/,
    SynchronizationEvent = 1 /*0x1*/
}EVENT_TYPE, *PEVENT_TYPE;

typedef enum _EX_GEN_RANDOM_DOMAIN  // 4 elements, 0x4 bytes
{
    ExGenRandomDomainKernel      = 0 /*0x0*/,
    ExGenRandomDomainFirst       = 0 /*0x0*/,
    ExGenRandomDomainUserVisible = 1 /*0x1*/,
    ExGenRandomDomainMax         = 2 /*0x2*/
}EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _EX_POOL_PRIORITY  // 9 elements, 0x4 bytes
{
    LowPoolPriority                       = 0 /*0x0*/,
    LowPoolPrioritySpecialPoolOverrun     = 8 /*0x8*/,
    LowPoolPrioritySpecialPoolUnderrun    = 9 /*0x9*/,
    NormalPoolPriority                    = 16 /*0x10*/,
    NormalPoolPrioritySpecialPoolOverrun  = 24 /*0x18*/,
    NormalPoolPrioritySpecialPoolUnderrun = 25 /*0x19*/,
    HighPoolPriority                      = 32 /*0x20*/,
    HighPoolPrioritySpecialPoolOverrun    = 40 /*0x28*/,
    HighPoolPrioritySpecialPoolUnderrun   = 41 /*0x29*/
}EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef enum _EXCEPTION_DISPOSITION  // 4 elements, 0x4 bytes
{
    ExceptionContinueExecution = 0 /*0x0*/,
    ExceptionContinueSearch    = 1 /*0x1*/,
    ExceptionNestedException   = 2 /*0x2*/,
    ExceptionCollidedUnwind    = 3 /*0x3*/
}EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _EXQUEUEINDEX  // 3 elements, 0x4 bytes
{
    ExPoolUntrusted = 0 /*0x0*/,
    IoPoolUntrusted = 1 /*0x1*/,
    ExPoolMax       = 8 /*0x8*/
}EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef enum _EXT_IOMMU_DEVICE_TYPE  // 8 elements, 0x4 bytes
{
    EXT_IOMMU_DEVICE_TYPE_INVALID = 0 /*0x0*/,
    EXT_IOMMU_DEVICE_TYPE_PCI     = 1 /*0x1*/,
    EXT_IOMMU_DEVICE_TYPE_ACPI    = 2 /*0x2*/,
    EXT_IOMMU_DEVICE_TYPE_IOAPIC  = 3 /*0x3*/,
    EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4 /*0x4*/,
    EXT_IOMMU_DEVICE_TYPE_GIC     = 5 /*0x5*/,
    EXT_IOMMU_DEVICE_TYPE_TEST    = 6 /*0x6*/,
    EXT_IOMMU_DEVICE_TYPE_MAX     = 7 /*0x7*/
}EXT_IOMMU_DEVICE_TYPE, *PEXT_IOMMU_DEVICE_TYPE;

typedef enum _FAULT_INFORMATION_ARCH  // 2 elements, 0x4 bytes
{
    FaultInformationInvalid = 0 /*0x0*/,
    FaultInformationArm64   = 1 /*0x1*/
}FAULT_INFORMATION_ARCH, *PFAULT_INFORMATION_ARCH;

typedef enum _FAULT_INFORMATION_ARM64_TYPE  // 8 elements, 0x4 bytes
{
    UnsupportedUpstreamTransaction = 0 /*0x0*/,
    AddressSizeFault               = 1 /*0x1*/,
    TlbMatchConflict               = 2 /*0x2*/,
    ExternalFault                  = 3 /*0x3*/,
    PermissionFault                = 4 /*0x4*/,
    AccessFlagFault                = 5 /*0x5*/,
    TranslationFault               = 6 /*0x6*/,
    MaxFaultType                   = 7 /*0x7*/
}FAULT_INFORMATION_ARM64_TYPE, *PFAULT_INFORMATION_ARM64_TYPE;

typedef enum _FEATURE_CHANGE_TIME  // 5 elements, 0x4 bytes
{
    FEATURE_CHANGE_TIME_READ          = 0 /*0x0*/,
    FEATURE_CHANGE_TIME_MODULE_RELOAD = 1 /*0x1*/,
    FEATURE_CHANGE_TIME_SESSION       = 2 /*0x2*/,
    FEATURE_CHANGE_TIME_REBOOT        = 3 /*0x3*/,
    FEATURE_CHANGE_TIME_USER_FLAG     = 128 /*0x80*/
}FEATURE_CHANGE_TIME, *PFEATURE_CHANGE_TIME;

typedef enum _FEATURE_ENABLED_STATE  // 5 elements, 0x4 bytes
{
    FEATURE_ENABLED_STATE_DEFAULT                   = 0 /*0x0*/,
    FEATURE_ENABLED_STATE_DISABLED                  = 1 /*0x1*/,
    FEATURE_ENABLED_STATE_ENABLED                   = 2 /*0x2*/,
    FEATURE_ENABLED_STATE_HAS_NOTIFICATION          = 128 /*0x80*/,
    FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64 /*0x40*/
}FEATURE_ENABLED_STATE, *PFEATURE_ENABLED_STATE;

typedef enum _FILE_INFORMATION_CLASS  // 76 elements, 0x4 bytes
{
    FileDirectoryInformation                     = 1 /*0x1*/,
    FileFullDirectoryInformation                 = 2 /*0x2*/,
    FileBothDirectoryInformation                 = 3 /*0x3*/,
    FileBasicInformation                         = 4 /*0x4*/,
    FileStandardInformation                      = 5 /*0x5*/,
    FileInternalInformation                      = 6 /*0x6*/,
    FileEaInformation                            = 7 /*0x7*/,
    FileAccessInformation                        = 8 /*0x8*/,
    FileNameInformation                          = 9 /*0x9*/,
    FileRenameInformation                        = 10 /*0xA*/,
    FileLinkInformation                          = 11 /*0xB*/,
    FileNamesInformation                         = 12 /*0xC*/,
    FileDispositionInformation                   = 13 /*0xD*/,
    FilePositionInformation                      = 14 /*0xE*/,
    FileFullEaInformation                        = 15 /*0xF*/,
    FileModeInformation                          = 16 /*0x10*/,
    FileAlignmentInformation                     = 17 /*0x11*/,
    FileAllInformation                           = 18 /*0x12*/,
    FileAllocationInformation                    = 19 /*0x13*/,
    FileEndOfFileInformation                     = 20 /*0x14*/,
    FileAlternateNameInformation                 = 21 /*0x15*/,
    FileStreamInformation                        = 22 /*0x16*/,
    FilePipeInformation                          = 23 /*0x17*/,
    FilePipeLocalInformation                     = 24 /*0x18*/,
    FilePipeRemoteInformation                    = 25 /*0x19*/,
    FileMailslotQueryInformation                 = 26 /*0x1A*/,
    FileMailslotSetInformation                   = 27 /*0x1B*/,
    FileCompressionInformation                   = 28 /*0x1C*/,
    FileObjectIdInformation                      = 29 /*0x1D*/,
    FileCompletionInformation                    = 30 /*0x1E*/,
    FileMoveClusterInformation                   = 31 /*0x1F*/,
    FileQuotaInformation                         = 32 /*0x20*/,
    FileReparsePointInformation                  = 33 /*0x21*/,
    FileNetworkOpenInformation                   = 34 /*0x22*/,
    FileAttributeTagInformation                  = 35 /*0x23*/,
    FileTrackingInformation                      = 36 /*0x24*/,
    FileIdBothDirectoryInformation               = 37 /*0x25*/,
    FileIdFullDirectoryInformation               = 38 /*0x26*/,
    FileValidDataLengthInformation               = 39 /*0x27*/,
    FileShortNameInformation                     = 40 /*0x28*/,
    FileIoCompletionNotificationInformation      = 41 /*0x29*/,
    FileIoStatusBlockRangeInformation            = 42 /*0x2A*/,
    FileIoPriorityHintInformation                = 43 /*0x2B*/,
    FileSfioReserveInformation                   = 44 /*0x2C*/,
    FileSfioVolumeInformation                    = 45 /*0x2D*/,
    FileHardLinkInformation                      = 46 /*0x2E*/,
    FileProcessIdsUsingFileInformation           = 47 /*0x2F*/,
    FileNormalizedNameInformation                = 48 /*0x30*/,
    FileNetworkPhysicalNameInformation           = 49 /*0x31*/,
    FileIdGlobalTxDirectoryInformation           = 50 /*0x32*/,
    FileIsRemoteDeviceInformation                = 51 /*0x33*/,
    FileUnusedInformation                        = 52 /*0x34*/,
    FileNumaNodeInformation                      = 53 /*0x35*/,
    FileStandardLinkInformation                  = 54 /*0x36*/,
    FileRemoteProtocolInformation                = 55 /*0x37*/,
    FileRenameInformationBypassAccessCheck       = 56 /*0x38*/,
    FileLinkInformationBypassAccessCheck         = 57 /*0x39*/,
    FileVolumeNameInformation                    = 58 /*0x3A*/,
    FileIdInformation                            = 59 /*0x3B*/,
    FileIdExtdDirectoryInformation               = 60 /*0x3C*/,
    FileReplaceCompletionInformation             = 61 /*0x3D*/,
    FileHardLinkFullIdInformation                = 62 /*0x3E*/,
    FileIdExtdBothDirectoryInformation           = 63 /*0x3F*/,
    FileDispositionInformationEx                 = 64 /*0x40*/,
    FileRenameInformationEx                      = 65 /*0x41*/,
    FileRenameInformationExBypassAccessCheck     = 66 /*0x42*/,
    FileDesiredStorageClassInformation           = 67 /*0x43*/,
    FileStatInformation                          = 68 /*0x44*/,
    FileMemoryPartitionInformation               = 69 /*0x45*/,
    FileStatLxInformation                        = 70 /*0x46*/,
    FileCaseSensitiveInformation                 = 71 /*0x47*/,
    FileLinkInformationEx                        = 72 /*0x48*/,
    FileLinkInformationExBypassAccessCheck       = 73 /*0x49*/,
    FileStorageReserveIdInformation              = 74 /*0x4A*/,
    FileCaseSensitiveInformationForceAccessCheck = 75 /*0x4B*/,
    FileMaximumInformation                       = 76 /*0x4C*/
}FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum _FILE_OBJECT_EXTENSION_TYPE  // 10 elements, 0x4 bytes
{
    FoExtTypeTransactionParams   = 0 /*0x0*/,
    FoExtTypeInternal            = 1 /*0x1*/,
    FoExtTypeIosbRange           = 2 /*0x2*/,
    FoExtTypeGeneric             = 3 /*0x3*/,
    FoExtTypeSfio                = 4 /*0x4*/,
    FoExtTypeSymlink             = 5 /*0x5*/,
    FoExtTypeOplockKey           = 6 /*0x6*/,
    FoExtTypeSilo                = 7 /*0x7*/,
    FoExtTypeMemoryPartitionInfo = 8 /*0x8*/,
    MaxFoExtTypes                = 9 /*0x9*/
}FILE_OBJECT_EXTENSION_TYPE, *PFILE_OBJECT_EXTENSION_TYPE;

typedef enum _FS_FILTER_SECTION_SYNC_TYPE  // 2 elements, 0x4 bytes
{
    SyncTypeOther         = 0 /*0x0*/,
    SyncTypeCreateSection = 1 /*0x1*/
}FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE  // 2 elements, 0x4 bytes
{
    NotifyTypeCreate  = 0 /*0x0*/,
    NotifyTypeRetired = 1 /*0x1*/
}FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;

typedef enum _FSINFOCLASS  // 15 elements, 0x4 bytes
{
    FileFsVolumeInformation       = 1 /*0x1*/,
    FileFsLabelInformation        = 2 /*0x2*/,
    FileFsSizeInformation         = 3 /*0x3*/,
    FileFsDeviceInformation       = 4 /*0x4*/,
    FileFsAttributeInformation    = 5 /*0x5*/,
    FileFsControlInformation      = 6 /*0x6*/,
    FileFsFullSizeInformation     = 7 /*0x7*/,
    FileFsObjectIdInformation     = 8 /*0x8*/,
    FileFsDriverPathInformation   = 9 /*0x9*/,
    FileFsVolumeFlagsInformation  = 10 /*0xA*/,
    FileFsSectorSizeInformation   = 11 /*0xB*/,
    FileFsDataCopyInformation     = 12 /*0xC*/,
    FileFsMetadataSizeInformation = 13 /*0xD*/,
    FileFsFullSizeInformationEx   = 14 /*0xE*/,
    FileFsMaximumInformation      = 15 /*0xF*/
}FSINFOCLASS, *PFSINFOCLASS;

typedef enum _FUNCTION_TABLE_TYPE  // 4 elements, 0x4 bytes
{
    RF_SORTED         = 0 /*0x0*/,
    RF_UNSORTED       = 1 /*0x1*/,
    RF_CALLBACK       = 2 /*0x2*/,
    RF_KERNEL_DYNAMIC = 3 /*0x3*/
}FUNCTION_TABLE_TYPE, *PFUNCTION_TABLE_TYPE;

typedef enum _GPIO_PIN_CONFIG_TYPE  // 4 elements, 0x4 bytes
{
    PullDefault = 0 /*0x0*/,
    PullUp      = 1 /*0x1*/,
    PullDown    = 2 /*0x2*/,
    PullNone    = 3 /*0x3*/
}GPIO_PIN_CONFIG_TYPE, *PGPIO_PIN_CONFIG_TYPE;

typedef enum _GPIO_PIN_IORESTRICTION_TYPE  // 4 elements, 0x4 bytes
{
    IoRestrictionNone            = 0 /*0x0*/,
    IoRestrictionInputOnly       = 1 /*0x1*/,
    IoRestrictionOutputOnly      = 2 /*0x2*/,
    IoRestrictionNoneAndPreserve = 3 /*0x3*/
}GPIO_PIN_IORESTRICTION_TYPE, *PGPIO_PIN_IORESTRICTION_TYPE;

typedef enum _HAL_APIC_DESTINATION_MODE  // 4 elements, 0x4 bytes
{
    ApicDestinationModePhysical         = 1 /*0x1*/,
    ApicDestinationModeLogicalFlat      = 2 /*0x2*/,
    ApicDestinationModeLogicalClustered = 3 /*0x3*/,
    ApicDestinationModeUnknown          = 4 /*0x4*/
}HAL_APIC_DESTINATION_MODE, *PHAL_APIC_DESTINATION_MODE;

typedef enum _HAL_CLOCK_TIMER_MODE  // 3 elements, 0x4 bytes
{
    HalClockTimerModePeriodic = 0 /*0x0*/,
    HalClockTimerModeOneShot  = 1 /*0x1*/,
    HalClockTimerModeMax      = 2 /*0x2*/
}HAL_CLOCK_TIMER_MODE, *PHAL_CLOCK_TIMER_MODE;

typedef enum _HAL_PROCESSOR_STAT_TYPE  // 3 elements, 0x4 bytes
{
    HalProcessorStatResidency = 0 /*0x0*/,
    HalProcessorStatCount     = 1 /*0x1*/,
    HalProcessorStatMax       = 2 /*0x2*/
}HAL_PROCESSOR_STAT_TYPE, *PHAL_PROCESSOR_STAT_TYPE;

typedef enum _HARDWARE_COUNTER_TYPE  // 2 elements, 0x4 bytes
{
    PMCCounter             = 0 /*0x0*/,
    MaxHardwareCounterType = 1 /*0x1*/
}HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef enum _HEAP_FAILURE_TYPE  // 22 elements, 0x4 bytes
{
    heap_failure_internal                      = 0 /*0x0*/,
    heap_failure_unknown                       = 1 /*0x1*/,
    heap_failure_generic                       = 2 /*0x2*/,
    heap_failure_entry_corruption              = 3 /*0x3*/,
    heap_failure_multiple_entries_corruption   = 4 /*0x4*/,
    heap_failure_virtual_block_corruption      = 5 /*0x5*/,
    heap_failure_buffer_overrun                = 6 /*0x6*/,
    heap_failure_buffer_underrun               = 7 /*0x7*/,
    heap_failure_block_not_busy                = 8 /*0x8*/,
    heap_failure_invalid_argument              = 9 /*0x9*/,
    heap_failure_invalid_allocation_type       = 10 /*0xA*/,
    heap_failure_usage_after_free              = 11 /*0xB*/,
    heap_failure_cross_heap_operation          = 12 /*0xC*/,
    heap_failure_freelists_corruption          = 13 /*0xD*/,
    heap_failure_listentry_corruption          = 14 /*0xE*/,
    heap_failure_lfh_bitmap_mismatch           = 15 /*0xF*/,
    heap_failure_segment_lfh_bitmap_corruption = 16 /*0x10*/,
    heap_failure_segment_lfh_double_free       = 17 /*0x11*/,
    heap_failure_vs_subsegment_corruption      = 18 /*0x12*/,
    heap_failure_null_heap                     = 19 /*0x13*/,
    heap_failure_allocation_limit              = 20 /*0x14*/,
    heap_failure_commit_limit                  = 21 /*0x15*/
}HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef enum _HSTORAGE_TYPE  // 3 elements, 0x4 bytes
{
    Stable         = 0 /*0x0*/,
    Volatile       = 1 /*0x1*/,
    InvalidStorage = 2 /*0x2*/
}HSTORAGE_TYPE, *PHSTORAGE_TYPE;

typedef enum _HV_EXT_EPF_MODE  // 3 elements, 0x4 bytes
{
    HvExtEpfModeMin = 0 /*0x0*/,
    HvExtEpfModeNt  = 0 /*0x0*/,
    HvExtEpfModeMax = 1 /*0x1*/
}HV_EXT_EPF_MODE, *PHV_EXT_EPF_MODE;

typedef enum _INTERFACE_TYPE  // 20 elements, 0x4 bytes
{
    InterfaceTypeUndefined = -1 /*0xFF*/,
    Internal               = 0 /*0x0*/,
    Isa                    = 1 /*0x1*/,
    Eisa                   = 2 /*0x2*/,
    MicroChannel           = 3 /*0x3*/,
    TurboChannel           = 4 /*0x4*/,
    PCIBus                 = 5 /*0x5*/,
    VMEBus                 = 6 /*0x6*/,
    NuBus                  = 7 /*0x7*/,
    PCMCIABus              = 8 /*0x8*/,
    CBus                   = 9 /*0x9*/,
    MPIBus                 = 10 /*0xA*/,
    MPSABus                = 11 /*0xB*/,
    ProcessorInternal      = 12 /*0xC*/,
    InternalPowerBus       = 13 /*0xD*/,
    PNPISABus              = 14 /*0xE*/,
    PNPBus                 = 15 /*0xF*/,
    Vmcs                   = 16 /*0x10*/,
    ACPIBus                = 17 /*0x11*/,
    MaximumInterfaceType   = 18 /*0x12*/
}INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _INTERLOCKED_RESULT  // 3 elements, 0x4 bytes
{
    ResultNegative = 1 /*0x1*/,
    ResultZero     = 0 /*0x0*/,
    ResultPositive = 2 /*0x2*/
}INTERLOCKED_RESULT, *PINTERLOCKED_RESULT;

typedef enum _INTERRUPT_CONNECTION_TYPE  // 4 elements, 0x4 bytes
{
    InterruptTypeControllerInput = 0 /*0x0*/,
    InterruptTypeXapicMessage    = 1 /*0x1*/,
    InterruptTypeHypertransport  = 2 /*0x2*/,
    InterruptTypeMessageRequest  = 3 /*0x3*/
}INTERRUPT_CONNECTION_TYPE, *PINTERRUPT_CONNECTION_TYPE;

typedef enum _INVPCID_TYPE  // 4 elements, 0x4 bytes
{
    InvpcidIndividualAddress    = 0 /*0x0*/,
    InvpcidSingleContext        = 1 /*0x1*/,
    InvpcidAllContextAndGlobals = 2 /*0x2*/,
    InvpcidAllContext           = 3 /*0x3*/
}INVPCID_TYPE, *PINVPCID_TYPE;

typedef enum _IO_ALLOCATION_ACTION  // 3 elements, 0x4 bytes
{
    KeepObject                    = 1 /*0x1*/,
    DeallocateObject              = 2 /*0x2*/,
    DeallocateObjectKeepRegisters = 3 /*0x3*/
}IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef enum _IO_PRIORITY_HINT  // 6 elements, 0x4 bytes
{
    IoPriorityVeryLow  = 0 /*0x0*/,
    IoPriorityLow      = 1 /*0x1*/,
    IoPriorityNormal   = 2 /*0x2*/,
    IoPriorityHigh     = 3 /*0x3*/,
    IoPriorityCritical = 4 /*0x4*/,
    MaxIoPriorityTypes = 5 /*0x5*/
}IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef enum _IO_RATE_CONTROL_TYPE  // 26 elements, 0x4 bytes
{
    IoRateControlTypeCapMin                         = 0 /*0x0*/,
    IoRateControlTypeIopsCap                        = 0 /*0x0*/,
    IoRateControlTypeBandwidthCap                   = 1 /*0x1*/,
    IoRateControlTypeTimePercentCap                 = 2 /*0x2*/,
    IoRateControlTypeCapMax                         = 2 /*0x2*/,
    IoRateControlTypeReservationMin                 = 3 /*0x3*/,
    IoRateControlTypeIopsReservation                = 3 /*0x3*/,
    IoRateControlTypeBandwidthReservation           = 4 /*0x4*/,
    IoRateControlTypeTimePercentReservation         = 5 /*0x5*/,
    IoRateControlTypeReservationMax                 = 5 /*0x5*/,
    IoRateControlTypeCriticalReservationMin         = 6 /*0x6*/,
    IoRateControlTypeIopsCriticalReservation        = 6 /*0x6*/,
    IoRateControlTypeBandwidthCriticalReservation   = 7 /*0x7*/,
    IoRateControlTypeTimePercentCriticalReservation = 8 /*0x8*/,
    IoRateControlTypeCriticalReservationMax         = 8 /*0x8*/,
    IoRateControlTypeSoftCapMin                     = 9 /*0x9*/,
    IoRateControlTypeIopsSoftCap                    = 9 /*0x9*/,
    IoRateControlTypeBandwidthSoftCap               = 10 /*0xA*/,
    IoRateControlTypeTimePercentSoftCap             = 11 /*0xB*/,
    IoRateControlTypeSoftCapMax                     = 11 /*0xB*/,
    IoRateControlTypeLimitExcessNotifyMin           = 12 /*0xC*/,
    IoRateControlTypeIopsLimitExcessNotify          = 12 /*0xC*/,
    IoRateControlTypeBandwidthLimitExcessNotify     = 13 /*0xD*/,
    IoRateControlTypeTimePercentLimitExcessNotify   = 14 /*0xE*/,
    IoRateControlTypeLimitExcessNotifyMax           = 14 /*0xE*/,
    IoRateControlTypeMax                            = 15 /*0xF*/
}IO_RATE_CONTROL_TYPE, *PIO_RATE_CONTROL_TYPE;

typedef enum _IO_SESSION_STATE  // 9 elements, 0x4 bytes
{
    IoSessionStateCreated              = 1 /*0x1*/,
    IoSessionStateInitialized          = 2 /*0x2*/,
    IoSessionStateConnected            = 3 /*0x3*/,
    IoSessionStateDisconnected         = 4 /*0x4*/,
    IoSessionStateDisconnectedLoggedOn = 5 /*0x5*/,
    IoSessionStateLoggedOn             = 6 /*0x6*/,
    IoSessionStateLoggedOff            = 7 /*0x7*/,
    IoSessionStateTerminated           = 8 /*0x8*/,
    IoSessionStateMax                  = 9 /*0x9*/
}IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef enum _IOP_PRIORITY_HINT  // 7 elements, 0x4 bytes
{
    IopIoPriorityNotSet   = 0 /*0x0*/,
    IopIoPriorityVeryLow  = 1 /*0x1*/,
    IopIoPriorityLow      = 2 /*0x2*/,
    IopIoPriorityNormal   = 3 /*0x3*/,
    IopIoPriorityHigh     = 4 /*0x4*/,
    IopIoPriorityCritical = 5 /*0x5*/,
    MaxIopIoPriorityTypes = 6 /*0x6*/
}IOP_PRIORITY_HINT, *PIOP_PRIORITY_HINT;

typedef enum _IRPLOCK  // 4 elements, 0x4 bytes
{
    IRPLOCK_CANCELABLE      = 0 /*0x0*/,
    IRPLOCK_CANCEL_STARTED  = 1 /*0x1*/,
    IRPLOCK_CANCEL_COMPLETE = 2 /*0x2*/,
    IRPLOCK_COMPLETED       = 3 /*0x3*/
}IRPLOCK, *PIRPLOCK;

typedef enum _IRQ_PRIORITY  // 4 elements, 0x4 bytes
{
    IrqPriorityUndefined = 0 /*0x0*/,
    IrqPriorityLow       = 1 /*0x1*/,
    IrqPriorityNormal    = 2 /*0x2*/,
    IrqPriorityHigh      = 3 /*0x3*/
}IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _JOB_OBJECT_IO_RATE_CONTROL_FLAGS  // 5 elements, 0x4 bytes
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE                        = 1 /*0x1*/,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME             = 2 /*0x2*/,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL         = 4 /*0x4*/,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8 /*0x8*/,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS                   = 15 /*0xF*/
}JOB_OBJECT_IO_RATE_CONTROL_FLAGS, *PJOB_OBJECT_IO_RATE_CONTROL_FLAGS;

typedef enum _JOB_OBJECT_NET_RATE_CONTROL_FLAGS  // 4 elements, 0x4 bytes
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE        = 1 /*0x1*/,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2 /*0x2*/,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG      = 4 /*0x4*/,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS   = 7 /*0x7*/
}JOB_OBJECT_NET_RATE_CONTROL_FLAGS, *PJOB_OBJECT_NET_RATE_CONTROL_FLAGS;

typedef enum _JOBOBJECTINFOCLASS  // 73 elements, 0x4 bytes
{
    JobObjectBasicAccountingInformation         = 1 /*0x1*/,
    JobObjectBasicLimitInformation              = 2 /*0x2*/,
    JobObjectBasicProcessIdList                 = 3 /*0x3*/,
    JobObjectBasicUIRestrictions                = 4 /*0x4*/,
    JobObjectSecurityLimitInformation           = 5 /*0x5*/,
    JobObjectEndOfJobTimeInformation            = 6 /*0x6*/,
    JobObjectAssociateCompletionPortInformation = 7 /*0x7*/,
    JobObjectBasicAndIoAccountingInformation    = 8 /*0x8*/,
    JobObjectExtendedLimitInformation           = 9 /*0x9*/,
    JobObjectJobSetInformation                  = 10 /*0xA*/,
    JobObjectGroupInformation                   = 11 /*0xB*/,
    JobObjectNotificationLimitInformation       = 12 /*0xC*/,
    JobObjectLimitViolationInformation          = 13 /*0xD*/,
    JobObjectGroupInformationEx                 = 14 /*0xE*/,
    JobObjectCpuRateControlInformation          = 15 /*0xF*/,
    JobObjectCompletionFilter                   = 16 /*0x10*/,
    JobObjectCompletionCounter                  = 17 /*0x11*/,
    JobObjectFreezeInformation                  = 18 /*0x12*/,
    JobObjectExtendedAccountingInformation      = 19 /*0x13*/,
    JobObjectWakeInformation                    = 20 /*0x14*/,
    JobObjectBackgroundInformation              = 21 /*0x15*/,
    JobObjectSchedulingRankBiasInformation      = 22 /*0x16*/,
    JobObjectTimerVirtualizationInformation     = 23 /*0x17*/,
    JobObjectCycleTimeNotification              = 24 /*0x18*/,
    JobObjectClearEvent                         = 25 /*0x19*/,
    JobObjectInterferenceInformation            = 26 /*0x1A*/,
    JobObjectClearPeakJobMemoryUsed             = 27 /*0x1B*/,
    JobObjectMemoryUsageInformation             = 28 /*0x1C*/,
    JobObjectSharedCommit                       = 29 /*0x1D*/,
    JobObjectContainerId                        = 30 /*0x1E*/,
    JobObjectIoRateControlInformation           = 31 /*0x1F*/,
    JobObjectSiloRootDirectory                  = 37 /*0x25*/,
    JobObjectServerSiloBasicInformation         = 38 /*0x26*/,
    JobObjectServerSiloUserSharedData           = 39 /*0x27*/,
    JobObjectServerSiloInitialize               = 40 /*0x28*/,
    JobObjectServerSiloRunningState             = 41 /*0x29*/,
    JobObjectIoAttribution                      = 42 /*0x2A*/,
    JobObjectMemoryPartitionInformation         = 43 /*0x2B*/,
    JobObjectContainerTelemetryId               = 44 /*0x2C*/,
    JobObjectSiloSystemRoot                     = 45 /*0x2D*/,
    JobObjectEnergyTrackingState                = 46 /*0x2E*/,
    JobObjectThreadImpersonationInformation     = 47 /*0x2F*/,
    JobObjectReserved1Information               = 18 /*0x12*/,
    JobObjectReserved2Information               = 19 /*0x13*/,
    JobObjectReserved3Information               = 20 /*0x14*/,
    JobObjectReserved4Information               = 21 /*0x15*/,
    JobObjectReserved5Information               = 22 /*0x16*/,
    JobObjectReserved6Information               = 23 /*0x17*/,
    JobObjectReserved7Information               = 24 /*0x18*/,
    JobObjectReserved8Information               = 25 /*0x19*/,
    JobObjectReserved9Information               = 26 /*0x1A*/,
    JobObjectReserved10Information              = 27 /*0x1B*/,
    JobObjectReserved11Information              = 28 /*0x1C*/,
    JobObjectReserved12Information              = 29 /*0x1D*/,
    JobObjectReserved13Information              = 30 /*0x1E*/,
    JobObjectReserved14Information              = 31 /*0x1F*/,
    JobObjectNetRateControlInformation          = 32 /*0x20*/,
    JobObjectNotificationLimitInformation2      = 33 /*0x21*/,
    JobObjectLimitViolationInformation2         = 34 /*0x22*/,
    JobObjectCreateSilo                         = 35 /*0x23*/,
    JobObjectSiloBasicInformation               = 36 /*0x24*/,
    JobObjectReserved15Information              = 37 /*0x25*/,
    JobObjectReserved16Information              = 38 /*0x26*/,
    JobObjectReserved17Information              = 39 /*0x27*/,
    JobObjectReserved18Information              = 40 /*0x28*/,
    JobObjectReserved19Information              = 41 /*0x29*/,
    JobObjectReserved20Information              = 42 /*0x2A*/,
    JobObjectReserved21Information              = 43 /*0x2B*/,
    JobObjectReserved22Information              = 44 /*0x2C*/,
    JobObjectReserved23Information              = 45 /*0x2D*/,
    JobObjectReserved24Information              = 46 /*0x2E*/,
    JobObjectReserved25Information              = 47 /*0x2F*/,
    MaxJobObjectInfoClass                       = 48 /*0x30*/
}JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _KD_CALLBACK_ACTION  // 4 elements, 0x4 bytes
{
    KdConfigureDeviceAndContinue = 0 /*0x0*/,
    KdSkipDeviceAndContinue      = 1 /*0x1*/,
    KdConfigureDeviceAndStop     = 2 /*0x2*/,
    KdSkipDeviceAndStop          = 3 /*0x3*/
}KD_CALLBACK_ACTION, *PKD_CALLBACK_ACTION;

typedef enum _KD_NAMESPACE_ENUM  // 5 elements, 0x4 bytes
{
    KdNameSpacePCI  = 0 /*0x0*/,
    KdNameSpaceACPI = 1 /*0x1*/,
    KdNameSpaceAny  = 2 /*0x2*/,
    KdNameSpaceNone = 3 /*0x3*/,
    KdNameSpaceMax  = 4 /*0x4*/
}KD_NAMESPACE_ENUM, *PKD_NAMESPACE_ENUM;

typedef enum _KE_WAKE_SOURCE_TYPE  // 9 elements, 0x4 bytes
{
    KeWakeSourceTypeSpuriousWake      = 0 /*0x0*/,
    KeWakeSourceTypeSpuriousClock     = 1 /*0x1*/,
    KeWakeSourceTypeSpuriousInterrupt = 2 /*0x2*/,
    KeWakeSourceTypeQueryFailure      = 3 /*0x3*/,
    KeWakeSourceTypeAccountingFailure = 4 /*0x4*/,
    KeWakeSourceTypeStaticSourceMax   = 4 /*0x4*/,
    KeWakeSourceTypeInterrupt         = 5 /*0x5*/,
    KeWakeSourceTypeIRTimer           = 6 /*0x6*/,
    KeWakeSourceTypeMax               = 7 /*0x7*/
}KE_WAKE_SOURCE_TYPE, *PKE_WAKE_SOURCE_TYPE;

typedef enum _KENLISTMENT_STATE  // 20 elements, 0x4 bytes
{
    KEnlistmentUninitialized         = 0 /*0x0*/,
    KEnlistmentActive                = 256 /*0x100*/,
    KEnlistmentPreparing             = 257 /*0x101*/,
    KEnlistmentPrepared              = 258 /*0x102*/,
    KEnlistmentInDoubt               = 259 /*0x103*/,
    KEnlistmentCommitted             = 260 /*0x104*/,
    KEnlistmentCommittedNotify       = 261 /*0x105*/,
    KEnlistmentCommitRequested       = 262 /*0x106*/,
    KEnlistmentAborted               = 263 /*0x107*/,
    KEnlistmentDelegated             = 264 /*0x108*/,
    KEnlistmentDelegatedDisconnected = 265 /*0x109*/,
    KEnlistmentPrePreparing          = 266 /*0x10A*/,
    KEnlistmentForgotten             = 267 /*0x10B*/,
    KEnlistmentRecovering            = 268 /*0x10C*/,
    KEnlistmentAborting              = 269 /*0x10D*/,
    KEnlistmentReadOnly              = 270 /*0x10E*/,
    KEnlistmentOutcomeUnavailable    = 271 /*0x10F*/,
    KEnlistmentOffline               = 272 /*0x110*/,
    KEnlistmentPrePrepared           = 273 /*0x111*/,
    KEnlistmentInitialized           = 274 /*0x112*/
}KENLISTMENT_STATE, *PKENLISTMENT_STATE;

typedef enum _KERNEL_STACK_LIMITS  // 11 elements, 0x4 bytes
{
    BugcheckStackLimits     = 0 /*0x0*/,
    DPCStackLimits          = 1 /*0x1*/,
    ExpandedStackLimits     = 2 /*0x2*/,
    NormalStackLimits       = 3 /*0x3*/,
    Win32kStackLimits       = 4 /*0x4*/,
    SwapBusyStackLimits     = 5 /*0x5*/,
    IsrStackLimits          = 6 /*0x6*/,
    DebuggerStackLimits     = 7 /*0x7*/,
    NmiStackLimits          = 8 /*0x8*/,
    MachineCheckStackLimits = 9 /*0x9*/,
    MaximumStackLimits      = 10 /*0xA*/
}KERNEL_STACK_LIMITS, *PKERNEL_STACK_LIMITS;

typedef enum _KHETERO_CPU_POLICY  // 11 elements, 0x4 bytes
{
    KHeteroCpuPolicyAll         = 0 /*0x0*/,
    KHeteroCpuPolicyLarge       = 1 /*0x1*/,
    KHeteroCpuPolicyLargeOrIdle = 2 /*0x2*/,
    KHeteroCpuPolicySmall       = 3 /*0x3*/,
    KHeteroCpuPolicySmallOrIdle = 4 /*0x4*/,
    KHeteroCpuPolicyDynamic     = 5 /*0x5*/,
    KHeteroCpuPolicyStaticMax   = 5 /*0x5*/,
    KHeteroCpuPolicyBiasedSmall = 6 /*0x6*/,
    KHeteroCpuPolicyBiasedLarge = 7 /*0x7*/,
    KHeteroCpuPolicyDefault     = 8 /*0x8*/,
    KHeteroCpuPolicyMax         = 9 /*0x9*/
}KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef enum _KHETERO_CPU_QOS  // 7 elements, 0x4 bytes
{
    KHeteroCpuQosDefault    = 0 /*0x0*/,
    KHeteroCpuQosHigh       = 0 /*0x0*/,
    KHeteroCpuQosMedium     = 1 /*0x1*/,
    KHeteroCpuQosLow        = 2 /*0x2*/,
    KHeteroCpuQosMultimedia = 3 /*0x3*/,
    KHeteroCpuQosDynamic    = 4 /*0x4*/,
    KHeteroCpuQosMax        = 4 /*0x4*/
}KHETERO_CPU_QOS, *PKHETERO_CPU_QOS;

typedef enum _KHETERO_RUNNING_TYPE  // 3 elements, 0x4 bytes
{
    KHeteroShortRunning   = 0 /*0x0*/,
    KHeteroLongRunning    = 1 /*0x1*/,
    KHeteroRunningTypeMax = 2 /*0x2*/
}KHETERO_RUNNING_TYPE, *PKHETERO_RUNNING_TYPE;

typedef enum _KI_CALLBACK  // 5 elements, 0x4 bytes
{
    KiCallbackNmi   = 0 /*0x0*/,
    KiCallbackBound = 1 /*0x1*/,
    KiCallbackSx    = 2 /*0x2*/,
    KiCallbackCount = 3 /*0x3*/,
    KiFirstCallback = 0 /*0x0*/
}KI_CALLBACK, *PKI_CALLBACK;

typedef enum _KINTERRUPT_MODE  // 2 elements, 0x4 bytes
{
    LevelSensitive = 0 /*0x0*/,
    Latched        = 1 /*0x1*/
}KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _KINTERRUPT_POLARITY  // 8 elements, 0x4 bytes
{
    InterruptPolarityUnknown       = 0 /*0x0*/,
    InterruptActiveHigh            = 1 /*0x1*/,
    InterruptRisingEdge            = 1 /*0x1*/,
    InterruptActiveLow             = 2 /*0x2*/,
    InterruptFallingEdge           = 2 /*0x2*/,
    InterruptActiveBoth            = 3 /*0x3*/,
    InterruptActiveBothTriggerLow  = 3 /*0x3*/,
    InterruptActiveBothTriggerHigh = 4 /*0x4*/
}KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef enum _KOBJECTS  // 28 elements, 0x4 bytes
{
    EventNotificationObject     = 0 /*0x0*/,
    EventSynchronizationObject  = 1 /*0x1*/,
    MutantObject                = 2 /*0x2*/,
    ProcessObject               = 3 /*0x3*/,
    QueueObject                 = 4 /*0x4*/,
    SemaphoreObject             = 5 /*0x5*/,
    ThreadObject                = 6 /*0x6*/,
    GateObject                  = 7 /*0x7*/,
    TimerNotificationObject     = 8 /*0x8*/,
    TimerSynchronizationObject  = 9 /*0x9*/,
    Spare2Object                = 10 /*0xA*/,
    Spare3Object                = 11 /*0xB*/,
    Spare4Object                = 12 /*0xC*/,
    Spare5Object                = 13 /*0xD*/,
    Spare6Object                = 14 /*0xE*/,
    Spare7Object                = 15 /*0xF*/,
    Spare8Object                = 16 /*0x10*/,
    ProfileCallbackObject       = 17 /*0x11*/,
    ApcObject                   = 18 /*0x12*/,
    DpcObject                   = 19 /*0x13*/,
    DeviceQueueObject           = 20 /*0x14*/,
    PriQueueObject              = 21 /*0x15*/,
    InterruptObject             = 22 /*0x16*/,
    ProfileObject               = 23 /*0x17*/,
    Timer2NotificationObject    = 24 /*0x18*/,
    Timer2SynchronizationObject = 25 /*0x19*/,
    ThreadedDpcObject           = 26 /*0x1A*/,
    MaximumKernelObject         = 27 /*0x1B*/
}KOBJECTS, *PKOBJECTS;

typedef enum _KPROCESS_PPM_POLICY  // 9 elements, 0x4 bytes
{
    ProcessPpmDefault         = 0 /*0x0*/,
    ProcessPpmThrottle        = 1 /*0x1*/,
    ProcessPpmSemiThrottle    = 2 /*0x2*/,
    ProcessPpmNoThrottle      = 3 /*0x3*/,
    ProcessPpmWindowMinimized = 4 /*0x4*/,
    ProcessPpmWindowOccluded  = 5 /*0x5*/,
    ProcessPpmWindowVisible   = 6 /*0x6*/,
    ProcessPpmWindowInFocus   = 7 /*0x7*/,
    MaxProcessPpmPolicy       = 8 /*0x8*/
}KPROCESS_PPM_POLICY, *PKPROCESS_PPM_POLICY;

typedef enum _KPROCESS_STATE  // 8 elements, 0x4 bytes
{
    ProcessInMemory      = 0 /*0x0*/,
    ProcessOutOfMemory   = 1 /*0x1*/,
    ProcessInTransition  = 2 /*0x2*/,
    ProcessOutTransition = 3 /*0x3*/,
    ProcessInSwap        = 4 /*0x4*/,
    ProcessOutSwap       = 5 /*0x5*/,
    ProcessRetryOutSwap  = 6 /*0x6*/,
    ProcessAllSwapStates = 7 /*0x7*/
}KPROCESS_STATE, *PKPROCESS_STATE;

typedef enum _KPROFILE_SOURCE  // 25 elements, 0x4 bytes
{
    ProfileTime                 = 0 /*0x0*/,
    ProfileAlignmentFixup       = 1 /*0x1*/,
    ProfileTotalIssues          = 2 /*0x2*/,
    ProfilePipelineDry          = 3 /*0x3*/,
    ProfileLoadInstructions     = 4 /*0x4*/,
    ProfilePipelineFrozen       = 5 /*0x5*/,
    ProfileBranchInstructions   = 6 /*0x6*/,
    ProfileTotalNonissues       = 7 /*0x7*/,
    ProfileDcacheMisses         = 8 /*0x8*/,
    ProfileIcacheMisses         = 9 /*0x9*/,
    ProfileCacheMisses          = 10 /*0xA*/,
    ProfileBranchMispredictions = 11 /*0xB*/,
    ProfileStoreInstructions    = 12 /*0xC*/,
    ProfileFpInstructions       = 13 /*0xD*/,
    ProfileIntegerInstructions  = 14 /*0xE*/,
    Profile2Issue               = 15 /*0xF*/,
    Profile3Issue               = 16 /*0x10*/,
    Profile4Issue               = 17 /*0x11*/,
    ProfileSpecialInstructions  = 18 /*0x12*/,
    ProfileTotalCycles          = 19 /*0x13*/,
    ProfileIcacheIssues         = 20 /*0x14*/,
    ProfileDcacheAccesses       = 21 /*0x15*/,
    ProfileMemoryBarrierCycles  = 22 /*0x16*/,
    ProfileLoadLinkedIssues     = 23 /*0x17*/,
    ProfileMaximum              = 24 /*0x18*/
}KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef enum _KRESOURCEMANAGER_STATE  // 3 elements, 0x4 bytes
{
    KResourceManagerUninitialized = 0 /*0x0*/,
    KResourceManagerOffline       = 1 /*0x1*/,
    KResourceManagerOnline        = 2 /*0x2*/
}KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef enum _KTHREAD_PPM_POLICY  // 5 elements, 0x4 bytes
{
    ThreadPpmDefault      = 0 /*0x0*/,
    ThreadPpmThrottle     = 1 /*0x1*/,
    ThreadPpmSemiThrottle = 2 /*0x2*/,
    ThreadPpmNoThrottle   = 3 /*0x3*/,
    MaxThreadPpmPolicy    = 4 /*0x4*/
}KTHREAD_PPM_POLICY, *PKTHREAD_PPM_POLICY;

typedef enum _KTHREAD_STATE  // 10 elements, 0x4 bytes
{
    Initialized             = 0 /*0x0*/,
    Ready                   = 1 /*0x1*/,
    Running                 = 2 /*0x2*/,
    Standby                 = 3 /*0x3*/,
    Terminated              = 4 /*0x4*/,
    Waiting                 = 5 /*0x5*/,
    Transition              = 6 /*0x6*/,
    DeferredReady           = 7 /*0x7*/,
    GateWaitObsolete        = 8 /*0x8*/,
    WaitingForProcessInSwap = 9 /*0x9*/
}KTHREAD_STATE, *PKTHREAD_STATE;

typedef enum _KTHREAD_TAG  // 3 elements, 0x4 bytes
{
    KThreadTagNone           = 0 /*0x0*/,
    KThreadTagMediaBuffering = 1 /*0x1*/,
    KThreadTagMax            = 2 /*0x2*/
}KTHREAD_TAG, *PKTHREAD_TAG;

typedef enum _KTIMER2_COLLECTION_INDEX  // 10 elements, 0x4 bytes
{
    KTimer2CollectionNoWake      = 0 /*0x0*/,
    KTimer2CollectionHr          = 1 /*0x1*/,
    KTimer2CollectionFinite      = 2 /*0x2*/,
    KTimer2CollectionIr          = 3 /*0x3*/,
    KTimer2CollectionNotInserted = 16 /*0x10*/,
    KTimer2CollectionInvalid     = 20 /*0x14*/,
    KTimer2CollectionOptional    = 32 /*0x20*/,
    KTimer2CollectionMin         = 0 /*0x0*/,
    KTimer2CollectionMax         = 4 /*0x4*/,
    KTimer2CollectionNode1       = 2 /*0x2*/
}KTIMER2_COLLECTION_INDEX, *PKTIMER2_COLLECTION_INDEX;

typedef enum _KTM_STATE  // 6 elements, 0x4 bytes
{
    KKtmUninitialized  = 0 /*0x0*/,
    KKtmInitialized    = 1 /*0x1*/,
    KKtmRecovering     = 2 /*0x2*/,
    KKtmOnline         = 3 /*0x3*/,
    KKtmRecoveryFailed = 4 /*0x4*/,
    KKtmOffline        = 5 /*0x5*/
}KTM_STATE, *PKTM_STATE;

typedef enum _KTRANSACTION_OUTCOME  // 5 elements, 0x4 bytes
{
    KTxOutcomeUninitialized = 0 /*0x0*/,
    KTxOutcomeUndetermined  = 1 /*0x1*/,
    KTxOutcomeCommitted     = 2 /*0x2*/,
    KTxOutcomeAborted       = 3 /*0x3*/,
    KTxOutcomeUnavailable   = 4 /*0x4*/
}KTRANSACTION_OUTCOME, *PKTRANSACTION_OUTCOME;

typedef enum _KTRANSACTION_STATE  // 12 elements, 0x4 bytes
{
    KTransactionUninitialized = 0 /*0x0*/,
    KTransactionActive        = 1 /*0x1*/,
    KTransactionPreparing     = 2 /*0x2*/,
    KTransactionPrepared      = 3 /*0x3*/,
    KTransactionInDoubt       = 4 /*0x4*/,
    KTransactionCommitted     = 5 /*0x5*/,
    KTransactionAborted       = 6 /*0x6*/,
    KTransactionDelegated     = 7 /*0x7*/,
    KTransactionPrePreparing  = 8 /*0x8*/,
    KTransactionForgotten     = 9 /*0x9*/,
    KTransactionRecovering    = 10 /*0xA*/,
    KTransactionPrePrepared   = 11 /*0xB*/
}KTRANSACTION_STATE, *PKTRANSACTION_STATE;

typedef enum _KWAIT_BLOCK_STATE  // 8 elements, 0x4 bytes
{
    WaitBlockBypassStart           = 0 /*0x0*/,
    WaitBlockBypassComplete        = 1 /*0x1*/,
    WaitBlockSuspendBypassStart    = 2 /*0x2*/,
    WaitBlockSuspendBypassComplete = 3 /*0x3*/,
    WaitBlockActive                = 4 /*0x4*/,
    WaitBlockInactive              = 5 /*0x5*/,
    WaitBlockSuspended             = 6 /*0x6*/,
    WaitBlockAllStates             = 7 /*0x7*/
}KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _KWAIT_REASON  // 41 elements, 0x4 bytes
{
    Executive         = 0 /*0x0*/,
    FreePage          = 1 /*0x1*/,
    PageIn            = 2 /*0x2*/,
    PoolAllocation    = 3 /*0x3*/,
    DelayExecution    = 4 /*0x4*/,
    Suspended         = 5 /*0x5*/,
    UserRequest       = 6 /*0x6*/,
    WrExecutive       = 7 /*0x7*/,
    WrFreePage        = 8 /*0x8*/,
    WrPageIn          = 9 /*0x9*/,
    WrPoolAllocation  = 10 /*0xA*/,
    WrDelayExecution  = 11 /*0xB*/,
    WrSuspended       = 12 /*0xC*/,
    WrUserRequest     = 13 /*0xD*/,
    WrSpare0          = 14 /*0xE*/,
    WrQueue           = 15 /*0xF*/,
    WrLpcReceive      = 16 /*0x10*/,
    WrLpcReply        = 17 /*0x11*/,
    WrVirtualMemory   = 18 /*0x12*/,
    WrPageOut         = 19 /*0x13*/,
    WrRendezvous      = 20 /*0x14*/,
    WrKeyedEvent      = 21 /*0x15*/,
    WrTerminated      = 22 /*0x16*/,
    WrProcessInSwap   = 23 /*0x17*/,
    WrCpuRateControl  = 24 /*0x18*/,
    WrCalloutStack    = 25 /*0x19*/,
    WrKernel          = 26 /*0x1A*/,
    WrResource        = 27 /*0x1B*/,
    WrPushLock        = 28 /*0x1C*/,
    WrMutex           = 29 /*0x1D*/,
    WrQuantumEnd      = 30 /*0x1E*/,
    WrDispatchInt     = 31 /*0x1F*/,
    WrPreempted       = 32 /*0x20*/,
    WrYieldExecution  = 33 /*0x21*/,
    WrFastMutex       = 34 /*0x22*/,
    WrGuardedMutex    = 35 /*0x23*/,
    WrRundown         = 36 /*0x24*/,
    WrAlertByThreadId = 37 /*0x25*/,
    WrDeferredPreempt = 38 /*0x26*/,
    WrPhysicalFault   = 39 /*0x27*/,
    MaximumWaitReason = 40 /*0x28*/
}KWAIT_REASON, *PKWAIT_REASON;

typedef enum _KWAIT_STATE  // 10 elements, 0x4 bytes
{
    WaitInProgress        = 0 /*0x0*/,
    WaitCommitted         = 1 /*0x1*/,
    WaitAborted           = 2 /*0x2*/,
    WaitSuspendInProgress = 3 /*0x3*/,
    WaitSuspended         = 4 /*0x4*/,
    WaitResumeInProgress  = 5 /*0x5*/,
    WaitResumeAborted     = 6 /*0x6*/,
    WaitFirstSuspendState = 3 /*0x3*/,
    WaitLastSuspendState  = 6 /*0x6*/,
    MaximumWaitState      = 7 /*0x7*/
}KWAIT_STATE, *PKWAIT_STATE;

typedef enum _LDR_DDAG_STATE  // 15 elements, 0x4 bytes
{
    LdrModulesMerged                 = -5 /*0xFB*/,
    LdrModulesInitError              = -4 /*0xFC*/,
    LdrModulesSnapError              = -3 /*0xFD*/,
    LdrModulesUnloaded               = -2 /*0xFE*/,
    LdrModulesUnloading              = -1 /*0xFF*/,
    LdrModulesPlaceHolder            = 0 /*0x0*/,
    LdrModulesMapping                = 1 /*0x1*/,
    LdrModulesMapped                 = 2 /*0x2*/,
    LdrModulesWaitingForDependencies = 3 /*0x3*/,
    LdrModulesSnapping               = 4 /*0x4*/,
    LdrModulesSnapped                = 5 /*0x5*/,
    LdrModulesCondensed              = 6 /*0x6*/,
    LdrModulesReadyToInit            = 7 /*0x7*/,
    LdrModulesInitializing           = 8 /*0x8*/,
    LdrModulesReadyToRun             = 9 /*0x9*/
}LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef enum _LDR_DLL_LOAD_REASON  // 10 elements, 0x4 bytes
{
    LoadReasonStaticDependency           = 0 /*0x0*/,
    LoadReasonStaticForwarderDependency  = 1 /*0x1*/,
    LoadReasonDynamicForwarderDependency = 2 /*0x2*/,
    LoadReasonDelayloadDependency        = 3 /*0x3*/,
    LoadReasonDynamicLoad                = 4 /*0x4*/,
    LoadReasonAsImageLoad                = 5 /*0x5*/,
    LoadReasonAsDataLoad                 = 6 /*0x6*/,
    LoadReasonEnclavePrimary             = 7 /*0x7*/,
    LoadReasonEnclaveDependency          = 8 /*0x8*/,
    LoadReasonUnknown                    = -1 /*0xFF*/
}LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef enum _LOCK_OPERATION  // 3 elements, 0x4 bytes
{
    IoReadAccess   = 0 /*0x0*/,
    IoWriteAccess  = 1 /*0x1*/,
    IoModifyAccess = 2 /*0x2*/
}LOCK_OPERATION, *PLOCK_OPERATION;

typedef enum _LSA_FOREST_TRUST_RECORD_TYPE  // 4 elements, 0x4 bytes
{
    ForestTrustTopLevelName   = 0 /*0x0*/,
    ForestTrustTopLevelNameEx = 1 /*0x1*/,
    ForestTrustDomainInfo     = 2 /*0x2*/,
    ForestTrustRecordTypeLast = 2 /*0x2*/
}LSA_FOREST_TRUST_RECORD_TYPE, *PLSA_FOREST_TRUST_RECORD_TYPE;

typedef enum _MACHINE_CHECK_NESTING_LEVEL  // 3 elements, 0x4 bytes
{
    McheckNormal        = 0 /*0x0*/,
    McheckNmi           = 1 /*0x1*/,
    McheckNestingLevels = 2 /*0x2*/
}MACHINE_CHECK_NESTING_LEVEL, *PMACHINE_CHECK_NESTING_LEVEL;

typedef enum _MEMORY_CACHING_TYPE  // 8 elements, 0x4 bytes
{
    MmNonCached              = 0 /*0x0*/,
    MmCached                 = 1 /*0x1*/,
    MmWriteCombined          = 2 /*0x2*/,
    MmHardwareCoherentCached = 3 /*0x3*/,
    MmNonCachedUnordered     = 4 /*0x4*/,
    MmUSWCCached             = 5 /*0x5*/,
    MmMaximumCacheType       = 6 /*0x6*/,
    MmNotMapped              = -1 /*0xFF*/
}MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG  // 1 elements, 0x4 bytes
{
    MmFrameBufferCached = 2 /*0x2*/
}MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _MI_ALTERNATE_LOCK_VA_TYPE  // 5 elements, 0x4 bytes
{
    AlternateLockVaTypeSystemPtes   = 0 /*0x0*/,
    AlternateLockVaTypeNonPagedPool = 1 /*0x1*/,
    AlternateLockVaTypeUser         = 2 /*0x2*/,
    AlternateLockVaTypeSystem       = 3 /*0x3*/,
    AlternateLockVaTypeMaximum      = 4 /*0x4*/
}MI_ALTERNATE_LOCK_VA_TYPE, *PMI_ALTERNATE_LOCK_VA_TYPE;

typedef enum _MI_ASSIGNED_REGION_TYPES  // 15 elements, 0x4 bytes
{
    AssignedRegionNonPagedPool        = 0 /*0x0*/,
    AssignedRegionPagedPool           = 1 /*0x1*/,
    AssignedRegionSystemCache         = 2 /*0x2*/,
    AssignedRegionSystemPtes          = 3 /*0x3*/,
    AssignedRegionUltraZero           = 4 /*0x4*/,
    AssignedRegionPfnDatabase         = 5 /*0x5*/,
    AssignedRegionCfg                 = 6 /*0x6*/,
    AssignedRegionHyperSpace          = 7 /*0x7*/,
    AssignedRegionKernelStacks        = 8 /*0x8*/,
    AssignedRegionPageTables          = 9 /*0x9*/,
    AssignedRegionSpecialPoolPaged    = 10 /*0xA*/,
    AssignedRegionSpecialPoolNonPaged = 11 /*0xB*/,
    AssignedRegionSession             = 12 /*0xC*/,
    AssignedRegionSystemImages        = 13 /*0xD*/,
    AssignedRegionMaximum             = 14 /*0xE*/
}MI_ASSIGNED_REGION_TYPES, *PMI_ASSIGNED_REGION_TYPES;

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES  // 4 elements, 0x4 bytes
{
    AvailablePagesWaitLow      = 0 /*0x0*/,
    AvailablePagesWaitHigh     = 1 /*0x1*/,
    AvailablePagesWaitVeryHigh = 2 /*0x2*/,
    AvailablePagesWaitMaximum  = 3 /*0x3*/
}MI_AVAILABLE_PAGE_WAIT_TYPES, *PMI_AVAILABLE_PAGE_WAIT_TYPES;

typedef enum _MI_CFG_BITMAP_TYPE  // 3 elements, 0x4 bytes
{
    CfgBitMapNative = 0 /*0x0*/,
    CfgBitMapWow64  = 1 /*0x1*/,
    CfgBitMapMax    = 2 /*0x2*/
}MI_CFG_BITMAP_TYPE, *PMI_CFG_BITMAP_TYPE;

typedef enum _MI_CROSS_PARTITION_CHARGE_TYPE  // 8 elements, 0x4 bytes
{
    MiCrossPartitionSectionResAvailCharge     = 0 /*0x0*/,
    MiCrossPartitionSectionCommitCharge       = 1 /*0x1*/,
    MiCrossPartitionPageCombineResAvailCharge = 2 /*0x2*/,
    MiCrossPartitionPageCombineCommitCharge   = 3 /*0x3*/,
    MiCrossPartitionLargePageResAvailCharge   = 4 /*0x4*/,
    MiCrossPartitionLargePageCommitCharge     = 5 /*0x5*/,
    MiCrossPartitionPageCloneResAvailCharge   = 6 /*0x6*/,
    MiCrossPartitionMaximumCharge             = 7 /*0x7*/
}MI_CROSS_PARTITION_CHARGE_TYPE, *PMI_CROSS_PARTITION_CHARGE_TYPE;

typedef enum _MI_DYNAMICBASE_BITMAP  // 5 elements, 0x4 bytes
{
    DynamicBaseBitMap32       = 0 /*0x0*/,
    DynamicBaseBitMap64Low    = 1 /*0x1*/,
    DynamicBaseBitMap64High   = 2 /*0x2*/,
    DynamicBaseBitMapWow64Dll = 3 /*0x3*/,
    LastDynamicBaseBitMap     = 4 /*0x4*/
}MI_DYNAMICBASE_BITMAP, *PMI_DYNAMICBASE_BITMAP;

typedef enum _MI_ENCLAVE_TYPE  // 4 elements, 0x4 bytes
{
    MiEnclaveNone     = 0 /*0x0*/,
    MiEnclaveHardware = 1 /*0x1*/,
    MiEnclaveVsm      = 2 /*0x2*/,
    MiEnclaveMax      = 3 /*0x3*/
}MI_ENCLAVE_TYPE, *PMI_ENCLAVE_TYPE;

typedef enum _MI_IO_PFN_TYPE  // 4 elements, 0x4 bytes
{
    MiIoPfnProbes      = 0 /*0x0*/,
    MiIoPfnMaps        = 1 /*0x1*/,
    MiIoPfnUnmapped    = 2 /*0x2*/,
    MiMaximumIoPfnType = 3 /*0x3*/
}MI_IO_PFN_TYPE, *PMI_IO_PFN_TYPE;

typedef enum _MI_KSTACK_TYPE  // 3 elements, 0x4 bytes
{
    MiRegularKstack    = 0 /*0x0*/,
    MiShortLivedKstack = 1 /*0x1*/,
    MiMaximumKstack    = 2 /*0x2*/
}MI_KSTACK_TYPE, *PMI_KSTACK_TYPE;

typedef enum _MI_MEMORY_EVENT_TYPES  // 12 elements, 0x4 bytes
{
    LowPagedPoolEvent         = 0 /*0x0*/,
    HighPagedPoolEvent        = 1 /*0x1*/,
    LowNonPagedPoolEvent      = 2 /*0x2*/,
    HighNonPagedPoolEvent     = 3 /*0x3*/,
    LowAvailablePagesEvent    = 4 /*0x4*/,
    HighAvailablePagesEvent   = 5 /*0x5*/,
    LowCommitEvent            = 6 /*0x6*/,
    HighCommitEvent           = 7 /*0x7*/,
    MaximumCommitEvent        = 8 /*0x8*/,
    BadMemoryDetectedEvent    = 9 /*0x9*/,
    PhysicalMemoryChangeEvent = 10 /*0xA*/,
    TotalNumberOfMemoryEvents = 11 /*0xB*/
}MI_MEMORY_EVENT_TYPES, *PMI_MEMORY_EVENT_TYPES;

typedef enum _MI_MEMORY_HIGHLOW  // 3 elements, 0x4 bytes
{
    MiMemoryHigh    = 0 /*0x0*/,
    MiMemoryLow     = 1 /*0x1*/,
    MiMemoryHighLow = 2 /*0x2*/
}MI_MEMORY_HIGHLOW, *PMI_MEMORY_HIGHLOW;

typedef enum _MI_MIRROR_BITMAP_TYPES  // 3 elements, 0x4 bytes
{
    MirrorBitmapTypeNormal      = 0 /*0x0*/,
    MirrorBitmapTypeInterlocked = 1 /*0x1*/,
    MirrorBitmapTypeMaximum     = 2 /*0x2*/
}MI_MIRROR_BITMAP_TYPES, *PMI_MIRROR_BITMAP_TYPES;

typedef enum _MI_NODE_NONPAGED_POOL_BITMAP  // 3 elements, 0x4 bytes
{
    NonPagedPoolLargePdeNx = 0 /*0x0*/,
    NonPagedPoolSmallPde   = 1 /*0x1*/,
    NonPagedPoolPerPage    = 2 /*0x2*/
}MI_NODE_NONPAGED_POOL_BITMAP, *PMI_NODE_NONPAGED_POOL_BITMAP;

typedef enum _MI_PARTITION_THREAD  // 6 elements, 0x4 bytes
{
    MiZeroPageThreadSlot             = 0 /*0x0*/,
    MiPartitionWorkingSetManagerSlot = 1 /*0x1*/,
    MiDereferenceSegmentThreadSlot   = 2 /*0x2*/,
    MiModifiedPageWriterSlot         = 3 /*0x3*/,
    MiMappedPageWriterSlot           = 4 /*0x4*/,
    MiNumberOfPartitionThreads       = 5 /*0x5*/
}MI_PARTITION_THREAD, *PMI_PARTITION_THREAD;

typedef enum _MI_PFN_CACHE_ATTRIBUTE  // 4 elements, 0x4 bytes
{
    MiNonCached     = 0 /*0x0*/,
    MiCached        = 1 /*0x1*/,
    MiWriteCombined = 2 /*0x2*/,
    MiNotMapped     = 3 /*0x3*/
}MI_PFN_CACHE_ATTRIBUTE, *PMI_PFN_CACHE_ATTRIBUTE;

typedef enum _MI_SHARED_USER_PAGE_TYPES  // 3 elements, 0x4 bytes
{
    MiSharedUserPageKernel     = 0 /*0x0*/,
    MiSharedUserPageHypervisor = 1 /*0x1*/,
    MiSharedUserPageMaximum    = 2 /*0x2*/
}MI_SHARED_USER_PAGE_TYPES, *PMI_SHARED_USER_PAGE_TYPES;

typedef enum _MI_SLAB_ALLOCATOR_PROTECTION  // 4 elements, 0x4 bytes
{
    MiSlabAllocatorProtectionReadExecute = 0 /*0x0*/,
    MiSlabAllocatorProtectionReadOnly    = 1 /*0x1*/,
    MiSlabAllocatorProtectionNoAccess    = 2 /*0x2*/,
    MiSlabAllocatorProtectionMax         = 3 /*0x3*/
}MI_SLAB_ALLOCATOR_PROTECTION, *PMI_SLAB_ALLOCATOR_PROTECTION;

typedef enum _MI_SUBVAD_LISTS  // 4 elements, 0x4 bytes
{
    MiSubVadPebTebAny      = 0 /*0x0*/,
    MiSubVadPebTebBelow2gb = 1 /*0x1*/,
    MiSubVadPebTebBelow4gb = 2 /*0x2*/,
    MiSubVadMaximum        = 3 /*0x3*/
}MI_SUBVAD_LISTS, *PMI_SUBVAD_LISTS;

typedef enum _MI_SYSTEM_VA_TYPE  // 17 elements, 0x4 bytes
{
    MiVaUnused              = 0 /*0x0*/,
    MiVaSessionSpace        = 1 /*0x1*/,
    MiVaProcessSpace        = 2 /*0x2*/,
    MiVaBootLoaded          = 3 /*0x3*/,
    MiVaPfnDatabase         = 4 /*0x4*/,
    MiVaNonPagedPool        = 5 /*0x5*/,
    MiVaPagedPool           = 6 /*0x6*/,
    MiVaSpecialPoolPaged    = 7 /*0x7*/,
    MiVaSystemCache         = 8 /*0x8*/,
    MiVaSystemPtes          = 9 /*0x9*/,
    MiVaHal                 = 10 /*0xA*/,
    MiVaSessionGlobalSpace  = 11 /*0xB*/,
    MiVaDriverImages        = 12 /*0xC*/,
    MiVaSpecialPoolNonPaged = 13 /*0xD*/,
    MiVaSystemPtesLarge     = 14 /*0xE*/,
    MiVaKernelStacks        = 15 /*0xF*/,
    MiVaMaximumType         = 16 /*0x10*/
}MI_SYSTEM_VA_TYPE, *PMI_SYSTEM_VA_TYPE;

typedef enum _MI_VAD_64K_TYPES  // 3 elements, 0x4 bytes
{
    MiVad64KPrivate = 0 /*0x0*/,
    MiVad64KShared  = 1 /*0x1*/,
    MiVad64KTypes   = 2 /*0x2*/
}MI_VAD_64K_TYPES, *PMI_VAD_64K_TYPES;

typedef enum _MI_VAD_ALLOCATION_CELL_TYPE  // 4 elements, 0x4 bytes
{
    MiVadBottomUp              = 0 /*0x0*/,
    MiVadStackPebTeb           = 1 /*0x1*/,
    MiVadReserved64            = 2 /*0x2*/,
    MiVadAllocationCellMaximum = 3 /*0x3*/
}MI_VAD_ALLOCATION_CELL_TYPE, *PMI_VAD_ALLOCATION_CELL_TYPE;

typedef enum _MI_WORKING_SET_TYPE  // 9 elements, 0x4 bytes
{
    MiWorkingSetTypeSystemCache      = 0 /*0x0*/,
    MiWorkingSetTypeSystemViews      = 1 /*0x1*/,
    MiWorkingSetTypePartitionMaximum = 1 /*0x1*/,
    MiWorkingSetTypePagedPool        = 2 /*0x2*/,
    MiWorkingSetTypePagableMaximum   = 2 /*0x2*/,
    MiWorkingSetTypeSystemPtes       = 3 /*0x3*/,
    MiWorkingSetTypeKernelStacks     = 4 /*0x4*/,
    MiWorkingSetTypeNonPagedPool     = 5 /*0x5*/,
    MiWorkingSetTypeMaximum          = 6 /*0x6*/
}MI_WORKING_SET_TYPE, *PMI_WORKING_SET_TYPE;

typedef enum _MM_PAGE_ACCESS_TYPE  // 4 elements, 0x4 bytes
{
    MmPteAccessType         = 0 /*0x0*/,
    MmCcReadAheadType       = 1 /*0x1*/,
    MmPfnRepurposeType      = 2 /*0x2*/,
    MmMaximumPageAccessType = 3 /*0x3*/
}MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef enum _MM_POOL_PRIORITIES  // 4 elements, 0x4 bytes
{
    MmHighPriority        = 0 /*0x0*/,
    MmNormalPriority      = 1 /*0x1*/,
    MmLowPriority         = 2 /*0x2*/,
    MmMaximumPoolPriority = 3 /*0x3*/
}MM_POOL_PRIORITIES, *PMM_POOL_PRIORITIES;

typedef enum _MM_POOL_TYPES  // 4 elements, 0x4 bytes
{
    MmNonPagedPool     = 0 /*0x0*/,
    MmPagedPool        = 1 /*0x1*/,
    MmSessionPagedPool = 2 /*0x2*/,
    MmMaximumPoolType  = 3 /*0x3*/
}MM_POOL_TYPES, *PMM_POOL_TYPES;

typedef enum _MM_PREEMPTIVE_TRIMS  // 5 elements, 0x4 bytes
{
    MmPreemptForNonPaged         = 0 /*0x0*/,
    MmPreemptForPaged            = 1 /*0x1*/,
    MmPreemptForNonPagedPriority = 2 /*0x2*/,
    MmPreemptForPagedPriority    = 3 /*0x3*/,
    MmMaximumPreempt             = 4 /*0x4*/
}MM_PREEMPTIVE_TRIMS, *PMM_PREEMPTIVE_TRIMS;

typedef enum _MMLISTS  // 8 elements, 0x4 bytes
{
    ZeroedPageList          = 0 /*0x0*/,
    FreePageList            = 1 /*0x1*/,
    StandbyPageList         = 2 /*0x2*/,
    ModifiedPageList        = 3 /*0x3*/,
    ModifiedNoWritePageList = 4 /*0x4*/,
    BadPageList             = 5 /*0x5*/,
    ActiveAndValid          = 6 /*0x6*/,
    TransitionPage          = 7 /*0x7*/
}MMLISTS, *PMMLISTS;

typedef enum _MODE  // 3 elements, 0x4 bytes
{
    KernelMode  = 0 /*0x0*/,
    UserMode    = 1 /*0x1*/,
    MaximumMode = 2 /*0x2*/
}MODE, *PMODE;

typedef enum _NT_PRODUCT_TYPE  // 3 elements, 0x4 bytes
{
    NtProductWinNt    = 1 /*0x1*/,
    NtProductLanManNt = 2 /*0x2*/,
    NtProductServer   = 3 /*0x3*/
}NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _OB_OPEN_REASON  // 5 elements, 0x4 bytes
{
    ObCreateHandle    = 0 /*0x0*/,
    ObOpenHandle      = 1 /*0x1*/,
    ObDuplicateHandle = 2 /*0x2*/,
    ObInheritHandle   = 3 /*0x3*/,
    ObMaxOpenReason   = 4 /*0x4*/
}OB_OPEN_REASON, *POB_OPEN_REASON;

typedef enum _OBJECT_INFORMATION_CLASS  // 8 elements, 0x4 bytes
{
    ObjectBasicInformation         = 0 /*0x0*/,
    ObjectNameInformation          = 1 /*0x1*/,
    ObjectTypeInformation          = 2 /*0x2*/,
    ObjectTypesInformation         = 3 /*0x3*/,
    ObjectHandleFlagInformation    = 4 /*0x4*/,
    ObjectSessionInformation       = 5 /*0x5*/,
    ObjectSessionObjectInformation = 6 /*0x6*/,
    MaxObjectInfoClass             = 7 /*0x7*/
}OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef enum _PCI_BUSMASTER_RID_TYPE  // 3 elements, 0x4 bytes
{
    BusmasterRidFromDeviceRid       = 0 /*0x0*/,
    BusmasterRidFromBridgeRid       = 1 /*0x1*/,
    BusmasterRidFromMultipleBridges = 2 /*0x2*/
}PCI_BUSMASTER_RID_TYPE, *PPCI_BUSMASTER_RID_TYPE;

typedef enum _PCW_CALLBACK_TYPE  // 4 elements, 0x4 bytes
{
    PcwCallbackAddCounter         = 0 /*0x0*/,
    PcwCallbackRemoveCounter      = 1 /*0x1*/,
    PcwCallbackEnumerateInstances = 2 /*0x2*/,
    PcwCallbackCollectData        = 3 /*0x3*/
}PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef enum _PDC_ACTIVITY_TYPE  // 7 elements, 0x4 bytes
{
    PdcNetwork         = 0 /*0x0*/,
    PdcSystem          = 1 /*0x1*/,
    PdcTimer           = 2 /*0x2*/,
    PdcAllNetworks     = 3 /*0x3*/,
    PdcAnyNetwork      = 4 /*0x4*/,
    PdcInvalidActivity = 5 /*0x5*/,
    PdcMaxActivity     = 5 /*0x5*/
}PDC_ACTIVITY_TYPE, *PPDC_ACTIVITY_TYPE;

typedef enum _PDC_CS_PHASE  // 11 elements, 0x4 bytes
{
    PdcNoCsPhase                   = 0 /*0x0*/,
    PdcConnectionPhase             = 1 /*0x1*/,
    PdcShellPhase                  = 2 /*0x2*/,
    PdcPlmPhase                    = 3 /*0x3*/,
    PdcMaintenancePhase            = 4 /*0x4*/,
    PdcDamPhase                    = 5 /*0x5*/,
    PdcLowPowerPhase               = 6 /*0x6*/,
    PdcResiliencyNotificationPhase = 7 /*0x7*/,
    PdcResiliencyPhase             = 8 /*0x8*/,
    PdcInvalidPhase                = 9 /*0x9*/,
    PdcMaxPhase                    = 9 /*0x9*/
}PDC_CS_PHASE, *PPDC_CS_PHASE;

typedef enum _PDC_RESOURCE  // 7 elements, 0x4 bytes
{
    PdcResourceSystemForeground      = 0 /*0x0*/,
    PdcResourceUniversalApplications = 1 /*0x1*/,
    PdcResourceWin32                 = 2 /*0x2*/,
    PdcResourceNetwork               = 3 /*0x3*/,
    PdcResourceSystemBackground      = 4 /*0x4*/,
    PdcResourceMin                   = 0 /*0x0*/,
    PdcResourceMax                   = 4 /*0x4*/
}PDC_RESOURCE, *PPDC_RESOURCE;

typedef enum _PDCCLIENTID  // 107 elements, 0x4 bytes
{
    PDC_INVALID_CLIENT                            = 0 /*0x0*/,
    PDC_PLM_CLIENT                                = 1 /*0x1*/,
    PDC_NQM_CLIENT                                = 2 /*0x2*/,
    PDC_WNS_CLIENT                                = 3 /*0x3*/,
    PDC_DAM_CLIENT                                = 4 /*0x4*/,
    PDC_WCM_CLIENT                                = 5 /*0x5*/,
    PDC_NCSI_CLIENT                               = 7 /*0x7*/,
    PDC_DHCP_CLIENT                               = 8 /*0x8*/,
    PDC_TCPIP_CLIENT                              = 9 /*0x9*/,
    PDC_WU_CLIENT                                 = 11 /*0xB*/,
    PDC_GP_CLIENT                                 = 12 /*0xC*/,
    PDC_NCA_CLIENT                                = 14 /*0xE*/,
    PDC_BI_CLIENT                                 = 15 /*0xF*/,
    PDC_MSCHED_CLIENT                             = 16 /*0x10*/,
    PDC_SUSPENDRESUME_CLIENT                      = 17 /*0x11*/,
    PDC_INTERNAL_CLIENT                           = 18 /*0x12*/,
    PDC_ACTIVATION_TEST_CLIENT                    = 19 /*0x13*/,
    PDC_PLM_PHASE_TEST_CLIENT                     = 20 /*0x14*/,
    PDC_DAM_PHASE_TEST_CLIENT                     = 21 /*0x15*/,
    PDC_LOW_POWER_PHASE_TEST_CLIENT               = 22 /*0x16*/,
    PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23 /*0x17*/,
    PDC_NQM_RESILIENCY_TEST_CLIENT                = 24 /*0x18*/,
    PDC_DAM_RESILIENCY_TEST_CLIENT                = 25 /*0x19*/,
    PDC_DAM_KM_TEST_CLIENT                        = 26 /*0x1A*/,
    PDC_DAM_UM_TEST_CLIENT                        = 27 /*0x1B*/,
    PDC_SINGLETON_TEST_CLIENT                     = 28 /*0x1C*/,
    PDC_NETWORK_SERVICE_TEST_CLIENT               = 29 /*0x1D*/,
    PDC_NETWORK_SERVICE2_TEST_CLIENT              = 30 /*0x1E*/,
    PDC_SYSTEM_SERVICE_TEST_CLIENT                = 31 /*0x1F*/,
    PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT         = 32 /*0x20*/,
    PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT         = 33 /*0x21*/,
    PDC_SHELL_CLIENT                              = 34 /*0x22*/,
    PDC_MAINTENANCE_CLIENT                        = 35 /*0x23*/,
    PDC_SYNC_CLIENT                               = 36 /*0x24*/,
    PDC_IDM_CLIENT                                = 37 /*0x25*/,
    PDC_CORTANA_VOICE_ACTIVATION_CLIENT           = 38 /*0x26*/,
    PDC_TETHERING_CLIENT                          = 39 /*0x27*/,
    PDC_AUDIO_CLIENT                              = 40 /*0x28*/,
    PDC_LOCK_SCREEN                               = 41 /*0x29*/,
    PDC_LREC_CLIENT                               = 42 /*0x2A*/,
    PDC_WP_BW_CLIENT                              = 43 /*0x2B*/,
    PDC_WP_MEDIA_STREAMING_CLIENT                 = 44 /*0x2C*/,
    PDC_WP_MAPS_CLIENT                            = 46 /*0x2E*/,
    PDC_WP_SYNC_CLIENT                            = 47 /*0x2F*/,
    PDC_SETTING_SYNC_CLIENT                       = 48 /*0x30*/,
    PDC_WP_EDM_CLIENT                             = 49 /*0x31*/,
    PDC_WP_WALLET_CLIENT                          = 50 /*0x32*/,
    PDC_WP_LOCATION_CLIENT                        = 51 /*0x33*/,
    PDC_WP_CM_CLIENT                              = 53 /*0x35*/,
    PDC_WP_DCP_CLIENT                             = 54 /*0x36*/,
    PDC_WP_WIFIAUTO_CLIENT                        = 55 /*0x37*/,
    PDC_BITLOCKER_CLIENT                          = 56 /*0x38*/,
    PDC_MDM_CERTINSTALLER_CLIENT                  = 57 /*0x39*/,
    PDC_WP_IM_CLIENT                              = 58 /*0x3A*/,
    PDC_WP_MMS_CLIENT                             = 59 /*0x3B*/,
    PDC_DEVICEENROLLER_CLIENT                     = 60 /*0x3C*/,
    PDC_WP_WIFI_SCANNING_CLIENT                   = 61 /*0x3D*/,
    PDC_WP_OMADM_CLIENT                           = 62 /*0x3E*/,
    PDC_WP_TELEMETRY_CHECK_CLIENT                 = 63 /*0x3F*/,
    PDC_WP_DIS_CLIENT                             = 64 /*0x40*/,
    PDC_BITS_CLIENT                               = 65 /*0x41*/,
    PDC_WP_VOIP_EXECUTION_CLIENT                  = 66 /*0x42*/,
    PDC_WP_RESERVED_CLIENT3                       = 67 /*0x43*/,
    PDC_SLEEP_STUDY_CLIENT                        = 68 /*0x44*/,
    PDC_WP_AUTOTIMEUPDATE_CLIENT                  = 69 /*0x45*/,
    PDC_HYPERV_CLIENT                             = 70 /*0x46*/,
    PDC_KM_SIGNAL_CLIENT                          = 71 /*0x47*/,
    PDC_UM_SIGNAL_CLIENT                          = 72 /*0x48*/,
    PDC_DEVICE_HEALTH_ATTESTATION_CLIENT          = 73 /*0x49*/,
    PDC_XB_SYSTEM_CLIENT                          = 74 /*0x4A*/,
    PDC_XB_HOST_CLIENT                            = 75 /*0x4B*/,
    PDC_PRINT_JOB_MANAGER_CLIENT                  = 76 /*0x4C*/,
    PDC_TELEMETRY_CLIENT                          = 77 /*0x4D*/,
    PDC_ERROR_REPORTING_CLIENT                    = 78 /*0x4E*/,
    PDC_XBOX_NTM                                  = 79 /*0x4F*/,
    PDC_CBE_CLIENT                                = 80 /*0x50*/,
    PDC_FIND_MY_PHONE_CLIENT                      = 81 /*0x51*/,
    PDC_COMMAND_CHANNEL_CLIENT                    = 82 /*0x52*/,
    PDC_PPM_PROFILES_CLIENT                       = 83 /*0x53*/,
    PDC_WIFI_CALLING_CLIENT                       = 84 /*0x54*/,
    PDC_WU_REBOOT_CLIENT                          = 85 /*0x55*/,
    PDC_SYSMAIN_CLIENT                            = 86 /*0x56*/,
    PDC_XBOX_UPDATE_CLIENT                        = 87 /*0x57*/,
    PDC_CHAT_SERVICE_CLIENT                       = 88 /*0x58*/,
    PDC_FIND_MY_DEVICE_CLIENT                     = 89 /*0x59*/,
    PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90 /*0x5A*/,
    PDC_INSTALL_AGENT_CLIENT                      = 91 /*0x5B*/,
    PDC_XBOX_WAKE_ON_VOICE                        = 92 /*0x5C*/,
    PDC_PLM_AUDIO_CLIENT                          = 93 /*0x5D*/,
    PDC_WP_BCKAUDIO_CLIENT                        = 94 /*0x5E*/,
    PDC_WAKE_ON_LAN_CLIENT                        = 95 /*0x5F*/,
    PDC_WP_CLOUD_MESSAGING_CLIENT                 = 96 /*0x60*/,
    PDC_DATA_MIGRATION_MANAGER                    = 97 /*0x61*/,
    PDC_EVENT_SOUND_MANAGER_CLIENT                = 98 /*0x62*/,
    PDC_WWAN_DORMANCY_HINT_CLIENT                 = 99 /*0x63*/,
    PDC_HAM_CLIENT                                = 100 /*0x64*/,
    PDC_FILESHARINGSERVER_CLIENT                  = 101 /*0x65*/,
    PDC_DIRECTED_DRIPS_TASK_CLIENT                = 102 /*0x66*/,
    PDC_DIRECTED_DRIPS_LPE_CLIENT                 = 103 /*0x67*/,
    PDC_DIRECTED_DRIPS_PLM_CLIENT                 = 104 /*0x68*/,
    PDC_HTTPSDATASOURCE_CLIENT                    = 105 /*0x69*/,
    PDC_TERMINALSERVER_CONNECTION_CLIENT          = 106 /*0x6A*/,
    PDC_TERMINALSERVER_SESSION_CLIENT             = 107 /*0x6B*/,
    PDC_ANYNETWORK_RESILIENCY_CLIENT              = 108 /*0x6C*/,
    PDC_XBOX_NUI_CLIENT                           = 110 /*0x6E*/,
    PDC_WIFI_CALLING_IMS_CLIENT                   = 111 /*0x6F*/,
    PDC_NUMBER_OF_CLIENTS                         = 112 /*0x70*/
}PDCCLIENTID, *PPDCCLIENTID;

typedef enum _PEP_ACPI_RESOURCE_TYPE  // 10 elements, 0x4 bytes
{
    PepAcpiMemory         = 0 /*0x0*/,
    PepAcpiIoPort         = 1 /*0x1*/,
    PepAcpiInterrupt      = 2 /*0x2*/,
    PepAcpiGpioIo         = 3 /*0x3*/,
    PepAcpiGpioInt        = 4 /*0x4*/,
    PepAcpiSpbI2c         = 5 /*0x5*/,
    PepAcpiSpbSpi         = 6 /*0x6*/,
    PepAcpiSpbUart        = 7 /*0x7*/,
    PepAcpiExtendedMemory = 8 /*0x8*/,
    PepAcpiExtendedIo     = 9 /*0x9*/
}PEP_ACPI_RESOURCE_TYPE, *PPEP_ACPI_RESOURCE_TYPE;

typedef enum _PEP_WORK_TYPE  // 10 elements, 0x4 bytes
{
    PepWorkActiveComplete                    = 0 /*0x0*/,
    PepWorkRequestIdleState                  = 1 /*0x1*/,
    PepWorkDevicePower                       = 2 /*0x2*/,
    PepWorkRequestPowerControl               = 3 /*0x3*/,
    PepWorkDeviceIdle                        = 4 /*0x4*/,
    PepWorkCompleteIdleState                 = 5 /*0x5*/,
    PepWorkCompletePerfState                 = 6 /*0x6*/,
    PepWorkAcpiNotify                        = 7 /*0x7*/,
    PepWorkAcpiEvaluateControlMethodComplete = 8 /*0x8*/,
    PepWorkMax                               = 9 /*0x9*/
}PEP_WORK_TYPE, *PPEP_WORK_TYPE;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE  // 2 elements, 0x4 bytes
{
    PerfInfoMemUsagePfnMetadata = 0 /*0x0*/,
    PerfInfoMemUsageMax         = 1 /*0x1*/
}PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _PERFINFO_MM_STAT  // 4 elements, 0x4 bytes
{
    PerfInfoMMStatNotUsed              = 0 /*0x0*/,
    PerfInfoMMStatAggregatePageCombine = 1 /*0x1*/,
    PerfInfoMMStatIterationPageCombine = 2 /*0x2*/,
    PerfInfoMMStatMax                  = 3 /*0x3*/
}PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _PF_FILE_ACCESS_TYPE  // 3 elements, 0x4 bytes
{
    PfFileAccessTypeRead  = 0 /*0x0*/,
    PfFileAccessTypeWrite = 1 /*0x1*/,
    PfFileAccessTypeMax   = 2 /*0x2*/
}PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef enum _PLUGPLAY_EVENT_CATEGORY  // 13 elements, 0x4 bytes
{
    HardwareProfileChangeEvent = 0 /*0x0*/,
    TargetDeviceChangeEvent    = 1 /*0x1*/,
    DeviceClassChangeEvent     = 2 /*0x2*/,
    CustomDeviceEvent          = 3 /*0x3*/,
    DeviceInstallEvent         = 4 /*0x4*/,
    DeviceArrivalEvent         = 5 /*0x5*/,
    VetoEvent                  = 6 /*0x6*/,
    BlockedDriverEvent         = 7 /*0x7*/,
    InvalidIDEvent             = 8 /*0x8*/,
    DevicePropertyChangeEvent  = 9 /*0x9*/,
    DeviceInstanceRemovalEvent = 10 /*0xA*/,
    DeviceInstanceStartedEvent = 11 /*0xB*/,
    MaxPlugEventCategory       = 12 /*0xC*/
}PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef enum _PNP_DEVICE_ACTION_REQUEST  // 26 elements, 0x4 bytes
{
    AssignResources                = 0 /*0x0*/,
    ClearDeviceProblem             = 1 /*0x1*/,
    ClearProblem                   = 2 /*0x2*/,
    ClearEjectProblem              = 3 /*0x3*/,
    HaltDevice                     = 4 /*0x4*/,
    QueryPowerRelations            = 5 /*0x5*/,
    Rebalance                      = 6 /*0x6*/,
    ReenumerateBootDevices         = 7 /*0x7*/,
    ReenumerateDeviceOnly          = 8 /*0x8*/,
    ReenumerateDeviceTree          = 9 /*0x9*/,
    ReenumerateRootDevices         = 10 /*0xA*/,
    RequeryDeviceState             = 11 /*0xB*/,
    ResetDevice                    = 12 /*0xC*/,
    ResourceRequirementsChanged    = 13 /*0xD*/,
    RestartEnumeration             = 14 /*0xE*/,
    SetDeviceProblem               = 15 /*0xF*/,
    StartDevice                    = 16 /*0x10*/,
    StartSystemDevicesPass0        = 17 /*0x11*/,
    StartSystemDevicesPass1        = 18 /*0x12*/,
    NotifyTransportRelationsChange = 19 /*0x13*/,
    NotifyEjectionRelationsChange  = 20 /*0x14*/,
    ConfigureDevice                = 21 /*0x15*/,
    ConfigureDeviceClass           = 22 /*0x16*/,
    ConfigureDeviceExtensions      = 23 /*0x17*/,
    ConfigureDeviceReset           = 24 /*0x18*/,
    ClearDmaGuardProblem           = 25 /*0x19*/
}PNP_DEVICE_ACTION_REQUEST, *PPNP_DEVICE_ACTION_REQUEST;

typedef enum _PNP_DEVICE_DELETE_TYPE  // 8 elements, 0x4 bytes
{
    QueryRemoveDevice           = 0 /*0x0*/,
    CancelRemoveDevice          = 1 /*0x1*/,
    RemoveDevice                = 2 /*0x2*/,
    SurpriseRemoveDevice        = 3 /*0x3*/,
    EjectDevice                 = 4 /*0x4*/,
    RemoveFailedDevice          = 5 /*0x5*/,
    RemoveUnstartedFailedDevice = 6 /*0x6*/,
    MaxDeviceDeleteType         = 7 /*0x7*/
}PNP_DEVICE_DELETE_TYPE, *PPNP_DEVICE_DELETE_TYPE;

typedef enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON  // 5 elements, 0x4 bytes
{
    DeviceQueryRebalanceSucceeded         = 0 /*0x0*/,
    DeviceQueryStopFailed                 = 1 /*0x1*/,
    DeviceFailedGetNewResourceRequirement = 2 /*0x2*/,
    DeviceInUnexpectedState               = 3 /*0x3*/,
    DeviceNotSupportQueryRebalance        = 4 /*0x4*/
}PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON, *PPNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;

typedef enum _PNP_DEVNODE_STATE  // 22 elements, 0x4 bytes
{
    DeviceNodeUnspecified            = 768 /*0x300*/,
    DeviceNodeUninitialized          = 769 /*0x301*/,
    DeviceNodeInitialized            = 770 /*0x302*/,
    DeviceNodeDriversAdded           = 771 /*0x303*/,
    DeviceNodeResourcesAssigned      = 772 /*0x304*/,
    DeviceNodeStartPending           = 773 /*0x305*/,
    DeviceNodeStartCompletion        = 774 /*0x306*/,
    DeviceNodeStartPostWork          = 775 /*0x307*/,
    DeviceNodeStarted                = 776 /*0x308*/,
    DeviceNodeQueryStopped           = 777 /*0x309*/,
    DeviceNodeStopped                = 778 /*0x30A*/,
    DeviceNodeRestartCompletion      = 779 /*0x30B*/,
    DeviceNodeEnumeratePending       = 780 /*0x30C*/,
    DeviceNodeEnumerateCompletion    = 781 /*0x30D*/,
    DeviceNodeAwaitingQueuedDeletion = 782 /*0x30E*/,
    DeviceNodeAwaitingQueuedRemoval  = 783 /*0x30F*/,
    DeviceNodeQueryRemoved           = 784 /*0x310*/,
    DeviceNodeRemovePendingCloses    = 785 /*0x311*/,
    DeviceNodeRemoved                = 786 /*0x312*/,
    DeviceNodeDeletePendingCloses    = 787 /*0x313*/,
    DeviceNodeDeleted                = 788 /*0x314*/,
    MaxDeviceNodeState               = 789 /*0x315*/
}PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef enum _PNP_REBALANCE_FAILURE  // 7 elements, 0x4 bytes
{
    RebalanceFailureNone                    = 0 /*0x0*/,
    RebalanceFailureDisabled                = 1 /*0x1*/,
    RebalanceFailureNoMemory                = 2 /*0x2*/,
    RebalanceFailureQueryStopUnexpectedVeto = 3 /*0x3*/,
    RebalanceFailureNoRequirements          = 4 /*0x4*/,
    RebalanceFailureNoCandidates            = 5 /*0x5*/,
    RebalanceFailureNoConfiguration         = 6 /*0x6*/
}PNP_REBALANCE_FAILURE, *PPNP_REBALANCE_FAILURE;

typedef enum _PNP_REBALANCE_REASON  // 3 elements, 0x4 bytes
{
    RebalanceReasonUnknown             = 0 /*0x0*/,
    RebalanceReasonRequirementsChanged = 1 /*0x1*/,
    RebalanceReasonNewDevice           = 2 /*0x2*/
}PNP_REBALANCE_REASON, *PPNP_REBALANCE_REASON;

typedef enum _PNP_VETO_TYPE  // 13 elements, 0x4 bytes
{
    PNP_VetoTypeUnknown          = 0 /*0x0*/,
    PNP_VetoLegacyDevice         = 1 /*0x1*/,
    PNP_VetoPendingClose         = 2 /*0x2*/,
    PNP_VetoWindowsApp           = 3 /*0x3*/,
    PNP_VetoWindowsService       = 4 /*0x4*/,
    PNP_VetoOutstandingOpen      = 5 /*0x5*/,
    PNP_VetoDevice               = 6 /*0x6*/,
    PNP_VetoDriver               = 7 /*0x7*/,
    PNP_VetoIllegalDeviceRequest = 8 /*0x8*/,
    PNP_VetoInsufficientPower    = 9 /*0x9*/,
    PNP_VetoNonDisableable       = 10 /*0xA*/,
    PNP_VetoLegacyDriver         = 11 /*0xB*/,
    PNP_VetoInsufficientRights   = 12 /*0xC*/
}PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef enum _PNP_WATCHDOG_TYPE  // 3 elements, 0x4 bytes
{
    PNP_EVENT_WORKER_WATCHDOG            = 1 /*0x1*/,
    PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2 /*0x2*/,
    PNP_DELAYED_REMOVE_WORKER_WATCHDOG   = 3 /*0x3*/
}PNP_WATCHDOG_TYPE, *PPNP_WATCHDOG_TYPE;

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE  // 6 elements, 0x4 bytes
{
    PoCsDeviceNotificationStorage  = 0 /*0x0*/,
    PoCsDeviceNotificationWiFi     = 1 /*0x1*/,
    PoCsDeviceNotificationMbn      = 2 /*0x2*/,
    PoCsDeviceNotificationAudio    = 3 /*0x3*/,
    PoCsDeviceNotificationEthernet = 4 /*0x4*/,
    PoCsDeviceNotificationMaximum  = 5 /*0x5*/
}PO_CS_DEVICE_NOTIFICATION_TYPE, *PPO_CS_DEVICE_NOTIFICATION_TYPE;

typedef enum _PO_FX_PERF_STATE_TYPE  // 3 elements, 0x4 bytes
{
    PoFxPerfStateTypeDiscrete = 0 /*0x0*/,
    PoFxPerfStateTypeRange    = 1 /*0x1*/,
    PoFxPerfStateTypeMaximum  = 2 /*0x2*/
}PO_FX_PERF_STATE_TYPE, *PPO_FX_PERF_STATE_TYPE;

typedef enum _PO_FX_PERF_STATE_UNIT  // 4 elements, 0x4 bytes
{
    PoFxPerfStateUnitOther     = 0 /*0x0*/,
    PoFxPerfStateUnitFrequency = 1 /*0x1*/,
    PoFxPerfStateUnitBandwidth = 2 /*0x2*/,
    PoFxPerfStateUnitMaximum   = 3 /*0x3*/
}PO_FX_PERF_STATE_UNIT, *PPO_FX_PERF_STATE_UNIT;

typedef enum _PO_HIBER_FORCE_DISABLE_REASON  // 3 elements, 0x4 bytes
{
    PoHiberForceDisableReasonPolicy      = 0 /*0x0*/,
    PoHiberForceDisableReasonGuardedHost = 1 /*0x1*/,
    PoHiberForceDisableReasonMax         = 2 /*0x2*/
}PO_HIBER_FORCE_DISABLE_REASON, *PPO_HIBER_FORCE_DISABLE_REASON;

typedef enum _PO_MODERN_SLEEP_ACTION  // 5 elements, 0x4 bytes
{
    PoModernSleepActionGlobalActivatorsVeto               = 0 /*0x0*/,
    PoModernSleepActionNonBlockingPhases                  = 1 /*0x1*/,
    PoModernSleepActionForceIdle                          = 2 /*0x2*/,
    PoModernSleepActionMinimalBlockingNotificationClients = 3 /*0x3*/,
    PoModernSleepActionMax                                = 4 /*0x4*/
}PO_MODERN_SLEEP_ACTION, *PPO_MODERN_SLEEP_ACTION;

typedef enum _POLICY_AUDIT_EVENT_TYPE  // 9 elements, 0x4 bytes
{
    AuditCategorySystem                 = 0 /*0x0*/,
    AuditCategoryLogon                  = 1 /*0x1*/,
    AuditCategoryObjectAccess           = 2 /*0x2*/,
    AuditCategoryPrivilegeUse           = 3 /*0x3*/,
    AuditCategoryDetailedTracking       = 4 /*0x4*/,
    AuditCategoryPolicyChange           = 5 /*0x5*/,
    AuditCategoryAccountManagement      = 6 /*0x6*/,
    AuditCategoryDirectoryServiceAccess = 7 /*0x7*/,
    AuditCategoryAccountLogon           = 8 /*0x8*/
}POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

typedef enum _POOL_TYPE  // 23 elements, 0x4 bytes
{
    NonPagedPool                         = 0 /*0x0*/,
    NonPagedPoolExecute                  = 0 /*0x0*/,
    PagedPool                            = 1 /*0x1*/,
    NonPagedPoolMustSucceed              = 2 /*0x2*/,
    DontUseThisType                      = 3 /*0x3*/,
    NonPagedPoolCacheAligned             = 4 /*0x4*/,
    PagedPoolCacheAligned                = 5 /*0x5*/,
    NonPagedPoolCacheAlignedMustS        = 6 /*0x6*/,
    MaxPoolType                          = 7 /*0x7*/,
    NonPagedPoolBase                     = 0 /*0x0*/,
    NonPagedPoolBaseMustSucceed          = 2 /*0x2*/,
    NonPagedPoolBaseCacheAligned         = 4 /*0x4*/,
    NonPagedPoolBaseCacheAlignedMustS    = 6 /*0x6*/,
    NonPagedPoolSession                  = 32 /*0x20*/,
    PagedPoolSession                     = 33 /*0x21*/,
    NonPagedPoolMustSucceedSession       = 34 /*0x22*/,
    DontUseThisTypeSession               = 35 /*0x23*/,
    NonPagedPoolCacheAlignedSession      = 36 /*0x24*/,
    PagedPoolCacheAlignedSession         = 37 /*0x25*/,
    NonPagedPoolCacheAlignedMustSSession = 38 /*0x26*/,
    NonPagedPoolNx                       = 512 /*0x200*/,
    NonPagedPoolNxCacheAligned           = 516 /*0x204*/,
    NonPagedPoolSessionNx                = 544 /*0x220*/
}POOL_TYPE, *PPOOL_TYPE;

typedef enum _POP_DEEP_SLEEP_DISENGAGE_REASON  // 11 elements, 0x4 bytes
{
    PopDeepSleepDisengageReasonInactive                = 0 /*0x0*/,
    PopDeepSleepDisengageReasonNonAoAc                 = 1 /*0x1*/,
    PopDeepSleepDisengageReasonPendingIrps             = 2 /*0x2*/,
    PopDeepSleepDisengageReasonPowerSettings           = 3 /*0x3*/,
    PopDeepSleepDisengageReasonDozeS4WorkerQueued      = 4 /*0x4*/,
    PopDeepSleepDisengageReasonSystemPowerTransition   = 5 /*0x5*/,
    PopDeepSleepDisengageReasonDeviceBlockingDrips     = 6 /*0x6*/,
    PopDeepSleepDisengageReasonAcpi                    = 7 /*0x7*/,
    PopDeepSleepDisengageReasonDirectedDripsTransition = 8 /*0x8*/,
    PopDeepSleepDisengageReasonPepPreVeto              = 9 /*0x9*/,
    PopDeepSleepDisengageReasonMax                     = 10 /*0xA*/
}POP_DEEP_SLEEP_DISENGAGE_REASON, *PPOP_DEEP_SLEEP_DISENGAGE_REASON;

typedef enum _POP_DEVICE_IDLE_TYPE  // 2 elements, 0x4 bytes
{
    DeviceIdleNormal = 0 /*0x0*/,
    DeviceIdleDisk   = 1 /*0x1*/
}POP_DEVICE_IDLE_TYPE, *PPOP_DEVICE_IDLE_TYPE;

typedef enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON  // 5 elements, 0x4 bytes
{
    DirectedDripsProblemDeviceReasonSpecialDevice = 0 /*0x0*/,
    DirectedDripsProblemDeviceReasonNoDfx         = 1 /*0x1*/,
    DirectedDripsProblemDeviceReasonNoPs4         = 2 /*0x2*/,
    DirectedDripsProblemDeviceReasonNoPs4Root     = 3 /*0x3*/,
    DirectedDripsProblemDeviceReasonMax           = 4 /*0x4*/
}POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON, *PPOP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;

typedef enum _POP_IO_STATUS  // 3 elements, 0x4 bytes
{
    IoReady   = 0 /*0x0*/,
    IoPending = 1 /*0x1*/,
    IoDone    = 2 /*0x2*/
}POP_IO_STATUS, *PPOP_IO_STATUS;

typedef enum _POP_SLEEP_CHECKPOINT  // 52 elements, 0x4 bytes
{
    PopSleepCheckpointInvalid                                           = 0 /*0x0*/,
    PopSleepCheckpointPowerTransitionStart                              = 1 /*0x1*/,
    PopSleepCheckpointSuspendAppsBefore                                 = 2 /*0x2*/,
    PopSleepCheckpointSuspendAppsAfter                                  = 3 /*0x3*/,
    PopSleepCheckpointSuspendServicesBefore                             = 4 /*0x4*/,
    PopSleepCheckpointSuspendServicesAfter                              = 5 /*0x5*/,
    PopSleepCheckpointNotifySuperfetchBefore                            = 6 /*0x6*/,
    PopSleepCheckpointNotifySuperfetchAfter                             = 7 /*0x7*/,
    PopSleepCheckpointNotifyCallbacksBefore                             = 8 /*0x8*/,
    PopSleepCheckpointNotifyCallbacksAfter                              = 9 /*0x9*/,
    PopSleepCheckpointSleepTransactionCommitted                         = 10 /*0xA*/,
    PopSleepCheckpointQueryDriversBefore                                = 11 /*0xB*/,
    PopSleepCheckpointQueryDriversAfter                                 = 12 /*0xC*/,
    PopSleepCheckpointAllocatingHiberContext                            = 13 /*0xD*/,
    PopSleepCheckpointSuspendDriversBefore                              = 14 /*0xE*/,
    PopSleepCheckpointPreSleepNotification                              = 16 /*0x10*/,
    PopSleepCheckpointInterruptsDisabledBegin                           = 17 /*0x11*/,
    PopSleepCheckpointInvokeHandlerBefore                               = 18 /*0x12*/,
    PopSleepCheckpointSaveHiberContextBegin                             = 19 /*0x13*/,
    PopSleepCheckpointInitializeDumpStackFailed                         = 20 /*0x14*/,
    PopSleepCheckpointHiberWriteFailed                                  = 21 /*0x15*/,
    PopSleepCheckpointHiberFileTooSmall                                 = 22 /*0x16*/,
    PopSleepCheckpointSaveHiberContextFailed                            = 23 /*0x17*/,
    PopSleepCheckpointSaveHiberContextEnd                               = 24 /*0x18*/,
    PopSleepCheckpointHiberKernelHandoff                                = 25 /*0x19*/,
    PopSleepCheckpointInvokeHandlerAfter                                = 26 /*0x1A*/,
    PopSleepCheckpointReadHiberfileBefore                               = 27 /*0x1B*/,
    PopSleepCheckpointInitializeDumpStackForReadFailed                  = 28 /*0x1C*/,
    PopSleepCheckpointHiberReadFailed                                   = 29 /*0x1D*/,
    PopSleepCheckpointChecksumFailure                                   = 30 /*0x1E*/,
    PopSleepCheckpointDecompressionFailed                               = 31 /*0x1F*/,
    PopSleepCheckpointReadHiberfileAfter                                = 32 /*0x20*/,
    PopSleepCheckpointInterruptsDisabledEnd                             = 33 /*0x21*/,
    PopSleepCheckpointWakeDriversAfter                                  = 36 /*0x24*/,
    PopSleepCheckpointResumeAppsBefore                                  = 37 /*0x25*/,
    PopSleepCheckpointResumeAppsAfter                                   = 38 /*0x26*/,
    PopSleepCheckpointResumeServicesBefore                              = 39 /*0x27*/,
    PopSleepCheckpointResumeServicesAfter                               = 40 /*0x28*/,
    PopSleepCheckpointPowerTransitionEnd                                = 41 /*0x29*/,
    PopSleepCheckpointAllocatingHiberContextNoFileObject                = 42 /*0x2A*/,
    PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed          = 43 /*0x2B*/,
    PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed     = 44 /*0x2C*/,
    PopSleepCheckpointAllocatingHiberContextBcdOpenFailed               = 45 /*0x2D*/,
    PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46 /*0x2E*/,
    PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed      = 47 /*0x2F*/,
    PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed  = 48 /*0x30*/,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1      = 49 /*0x31*/,
    PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed     = 50 /*0x32*/,
    PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2      = 51 /*0x33*/,
    PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed       = 52 /*0x34*/,
    PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed       = 53 /*0x35*/,
    PopSleepCheckpointMax                                               = 54 /*0x36*/
}POP_SLEEP_CHECKPOINT, *PPOP_SLEEP_CHECKPOINT;

typedef enum _POP_SLEEP_CHECKPOINT_STATUS  // 8 elements, 0x4 bytes
{
    PopSleepCheckpointStatusDisabled                  = 0 /*0x0*/,
    PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1 /*0x1*/,
    PopSleepCheckpointStatusEnabledManually           = 4 /*0x4*/,
    PopSleepCheckpointStatusEnabledMax                = 7 /*0x7*/,
    PopSleepCheckpointStatusFailedNotEfiSystem        = 8 /*0x8*/,
    PopSleepCheckpointStatusFailedInsufficientSpace   = 9 /*0x9*/,
    PopSleepCheckpointStatusFailedOtherError          = 15 /*0xF*/,
    PopSleepCheckpointStatusMax                       = 15 /*0xF*/
}POP_SLEEP_CHECKPOINT_STATUS, *PPOP_SLEEP_CHECKPOINT_STATUS;

typedef enum _POWER_ACTION  // 9 elements, 0x4 bytes
{
    PowerActionNone          = 0 /*0x0*/,
    PowerActionReserved      = 1 /*0x1*/,
    PowerActionSleep         = 2 /*0x2*/,
    PowerActionHibernate     = 3 /*0x3*/,
    PowerActionShutdown      = 4 /*0x4*/,
    PowerActionShutdownReset = 5 /*0x5*/,
    PowerActionShutdownOff   = 6 /*0x6*/,
    PowerActionWarmEject     = 7 /*0x7*/,
    PowerActionDisplayOff    = 8 /*0x8*/
}POWER_ACTION, *PPOWER_ACTION;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL  // 52 elements, 0x4 bytes
{
    PowerInternalAcpiInterfaceRegister                   = 0 /*0x0*/,
    PowerInternalS0LowPowerIdleInfo                      = 1 /*0x1*/,
    PowerInternalReapplyBrightnessSettings               = 2 /*0x2*/,
    PowerInternalUserAbsencePrediction                   = 3 /*0x3*/,
    PowerInternalUserAbsencePredictionCapability         = 4 /*0x4*/,
    PowerInternalPoProcessorLatencyHint                  = 5 /*0x5*/,
    PowerInternalStandbyNetworkRequest                   = 6 /*0x6*/,
    PowerInternalDirtyTransitionInformation              = 7 /*0x7*/,
    PowerInternalSetBackgroundTaskState                  = 8 /*0x8*/,
    PowerInternalReservedDoNotUseEnum9                   = 9 /*0x9*/,
    PowerInternalReservedDoNotUseEnum10                  = 10 /*0xA*/,
    PowerInternalReservedDoNotUseEnum11                  = 11 /*0xB*/,
    PowerInternalReservedDoNotUseEnum12                  = 12 /*0xC*/,
    PowerInternalReservedDoNotUseEnum13                  = 13 /*0xD*/,
    PowerInternalReservedDoNotUseEnum14                  = 14 /*0xE*/,
    PowerInternalReservedDoNotUseEnum15                  = 15 /*0xF*/,
    PowerInternalReservedDoNotUseEnum16                  = 16 /*0x10*/,
    PowerInternalReservedDoNotUseEnum17                  = 17 /*0x11*/,
    PowerInternalBootSessionStandbyActivationInformation = 18 /*0x12*/,
    PowerInternalSessionPowerState                       = 19 /*0x13*/,
    PowerInternalSessionTerminalInput                    = 20 /*0x14*/,
    PowerInternalSetWatchdog                             = 21 /*0x15*/,
    PowerInternalPhysicalPowerButtonPressInfoAtBoot      = 22 /*0x16*/,
    PowerInternalExternalMonitorConnected                = 23 /*0x17*/,
    PowerInternalHighPrecisionBrightnessSettings         = 24 /*0x18*/,
    PowerInternalWinrtScreenToggle                       = 25 /*0x19*/,
    PowerInternalPpmQosDisable                           = 26 /*0x1A*/,
    PowerInternalTransitionCheckpoint                    = 27 /*0x1B*/,
    PowerInternalInputControllerState                    = 28 /*0x1C*/,
    PowerInternalFirmwareResetReason                     = 29 /*0x1D*/,
    PowerInternalPpmSchedulerQosSupport                  = 30 /*0x1E*/,
    PowerInternalBootStatGet                             = 31 /*0x1F*/,
    PowerInternalBootStatSet                             = 32 /*0x20*/,
    PowerInternalCallHasNotReturnedWatchdog              = 33 /*0x21*/,
    PowerInternalBootStatCheckIntegrity                  = 34 /*0x22*/,
    PowerInternalBootStatRestoreDefaults                 = 35 /*0x23*/,
    PowerInternalHostEsStateUpdate                       = 36 /*0x24*/,
    PowerInternalGetPowerActionState                     = 37 /*0x25*/,
    PowerInternalBootStatUnlock                          = 38 /*0x26*/,
    PowerInternalWakeOnVoiceState                        = 39 /*0x27*/,
    PowerInternalDeepSleepBlock                          = 40 /*0x28*/,
    PowerInternalIsPoFxDevice                            = 41 /*0x29*/,
    PowerInternalPowerTransitionExtensionAtBoot          = 42 /*0x2A*/,
    PowerInternalProcessorBrandedFrequency               = 43 /*0x2B*/,
    PowerInternalTimeBrokerExpirationReason              = 44 /*0x2C*/,
    PowerInternalNotifyUserShutdownStatus                = 45 /*0x2D*/,
    PowerInternalPowerRequestTerminalCoreWindow          = 46 /*0x2E*/,
    PowerInternalProcessorIdleVeto                       = 47 /*0x2F*/,
    PowerInternalPlatformIdleVeto                        = 48 /*0x30*/,
    PowerInternalIsLongPowerButtonBugcheckEnabled        = 49 /*0x31*/,
    PowerInternalAutoChkCausedReboot                     = 50 /*0x32*/,
    PowerInformationInternalMaximum                      = 51 /*0x33*/
}POWER_INFORMATION_LEVEL_INTERNAL, *PPOWER_INFORMATION_LEVEL_INTERNAL;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI  // 12 elements, 0x4 bytes
{
    PowerInformationInternalTtmFirst           = 4096 /*0x1000*/,
    PowerInternalTtmOpenTerminal               = 4096 /*0x1000*/,
    PowerInternalTtmCreateTerminal             = 4097 /*0x1001*/,
    PowerInternalTtmEvacuateDevices            = 4098 /*0x1002*/,
    PowerInternalTtmCreateTerminalEventQueue   = 4099 /*0x1003*/,
    PowerInternalTtmGetTerminalEvent           = 4100 /*0x1004*/,
    PowerInternalTtmSetDefaultDeviceAssignment = 4101 /*0x1005*/,
    PowerInternalTtmAssignDevice               = 4102 /*0x1006*/,
    PowerInternalTtmSetDisplayState            = 4103 /*0x1007*/,
    PowerInternalTtmSetDisplayTimeouts         = 4104 /*0x1008*/,
    PowerInternalTtmSetDisplayPowerRequest     = 4105 /*0x1009*/,
    PowerInformationInternalTtmLast            = 4105 /*0x1009*/
}POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI, *PPOWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;

typedef enum _POWER_POLICY_DEVICE_TYPE  // 17 elements, 0x4 bytes
{
    PolicyDeviceSystemButton                   = 0 /*0x0*/,
    PolicyDeviceThermalZone                    = 1 /*0x1*/,
    PolicyDeviceBattery                        = 2 /*0x2*/,
    PolicyDeviceMemory                         = 3 /*0x3*/,
    PolicyInitiatePowerActionAPI               = 4 /*0x4*/,
    PolicySetPowerStateAPI                     = 5 /*0x5*/,
    PolicyImmediateDozeS4                      = 6 /*0x6*/,
    PolicySystemIdle                           = 7 /*0x7*/,
    PolicyDeviceWakeAlarm                      = 8 /*0x8*/,
    PolicyDeviceFan                            = 9 /*0x9*/,
    PolicyCsBatterySaver                       = 10 /*0xA*/,
    PolicyImmediateDozeS4Predicted             = 11 /*0xB*/,
    PolicyImmediateDozeS4PredictedNoWake       = 12 /*0xC*/,
    PolicyImmediateDozeS4AdaptiveBudget        = 13 /*0xD*/,
    PolicyImmediateDozeS4AdaptiveReserveNoWake = 14 /*0xE*/,
    PolicySystemInitiatedShutdown              = 15 /*0xF*/,
    PolicyDeviceMax                            = 16 /*0x10*/
}POWER_POLICY_DEVICE_TYPE, *PPOWER_POLICY_DEVICE_TYPE;

typedef enum _POWER_REQUEST_TYPE  // 4 elements, 0x4 bytes
{
    PowerRequestDisplayRequired   = 0 /*0x0*/,
    PowerRequestSystemRequired    = 1 /*0x1*/,
    PowerRequestAwayModeRequired  = 2 /*0x2*/,
    PowerRequestExecutionRequired = 3 /*0x3*/
}POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

typedef enum _POWER_REQUEST_TYPE_INTERNAL  // 7 elements, 0x4 bytes
{
    PowerRequestDisplayRequiredInternal   = 0 /*0x0*/,
    PowerRequestSystemRequiredInternal    = 1 /*0x1*/,
    PowerRequestAwayModeRequiredInternal  = 2 /*0x2*/,
    PowerRequestExecutionRequiredInternal = 3 /*0x3*/,
    PowerRequestPerfBoostRequiredInternal = 4 /*0x4*/,
    PowerRequestActiveLockScreenInternal  = 5 /*0x5*/,
    PowerRequestInternalInvalid           = 6 /*0x6*/
}POWER_REQUEST_TYPE_INTERNAL, *PPOWER_REQUEST_TYPE_INTERNAL;

typedef enum _POWER_STATE_TYPE  // 2 elements, 0x4 bytes
{
    SystemPowerState = 0 /*0x0*/,
    DevicePowerState = 1 /*0x1*/
}POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER  // 10 elements, 0x4 bytes
{
    LookasideSmallIrpList      = 0 /*0x0*/,
    LookasideMediumIrpList     = 1 /*0x1*/,
    LookasideLargeIrpList      = 2 /*0x2*/,
    LookasideMdlList           = 3 /*0x3*/,
    LookasideCreateInfoList    = 4 /*0x4*/,
    LookasideNameBufferList    = 5 /*0x5*/,
    LookasideTwilightList      = 6 /*0x6*/,
    LookasideCompletionList    = 7 /*0x7*/,
    LookasideScratchBufferList = 8 /*0x8*/,
    LookasideMaximumList       = 9 /*0x9*/
}PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef enum _PPM_IDLE_BUCKET_TIME_TYPE  // 3 elements, 0x4 bytes
{
    PpmIdleBucketTimeInQpc   = 0 /*0x0*/,
    PpmIdleBucketTimeIn100ns = 1 /*0x1*/,
    PpmIdleBucketTimeMaximum = 2 /*0x2*/
}PPM_IDLE_BUCKET_TIME_TYPE, *PPPM_IDLE_BUCKET_TIME_TYPE;

typedef enum _PPM_PERF_QOS_DISABLE_REASON  // 10 elements, 0x4 bytes
{
    PpmPerfQosDisableInternal           = 0 /*0x0*/,
    PpmPerfQosDisableNoProfile          = 1 /*0x1*/,
    PpmPerfQosDisableNoPolicy           = 2 /*0x2*/,
    PpmPerfQosDisableInsufficientPolicy = 3 /*0x3*/,
    PpmPerfQosDisableMaxOverride        = 4 /*0x4*/,
    PpmPerfQosDisableLowLatency         = 5 /*0x5*/,
    PpmPerfQosDisableSmtScheduler       = 6 /*0x6*/,
    PpmPerfQosDisableNoHardwareSupport  = 7 /*0x7*/,
    PpmPerfQosDisableGroupPolicy        = 8 /*0x8*/,
    PpmPerfQosDisableMax                = 9 /*0x9*/
}PPM_PERF_QOS_DISABLE_REASON, *PPPM_PERF_QOS_DISABLE_REASON;

typedef enum _PROC_HYPERVISOR_STATE  // 4 elements, 0x4 bytes
{
    ProcHypervisorNone       = 0 /*0x0*/,
    ProcHypervisorPresent    = 1 /*0x1*/,
    ProcHypervisorPower      = 2 /*0x2*/,
    ProcHypervisorHvCounters = 3 /*0x3*/
}PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef enum _PROCESS_SECTION_TYPE  // 5 elements, 0x4 bytes
{
    ProcessSectionData           = 0 /*0x0*/,
    ProcessSectionImage          = 1 /*0x1*/,
    ProcessSectionImageNx        = 2 /*0x2*/,
    ProcessSectionPagefileBacked = 3 /*0x3*/,
    ProcessSectionMax            = 4 /*0x4*/
}PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _PROCESS_TERMINATE_REQUEST_REASON  // 5 elements, 0x4 bytes
{
    ProcessTerminateRequestReasonNone            = 0 /*0x0*/,
    ProcessTerminateCommitFail                   = 1 /*0x1*/,
    ProcessTerminateWriteToExecuteMemory         = 2 /*0x2*/,
    ProcessTerminateAttachedWriteToExecuteMemory = 3 /*0x3*/,
    ProcessTerminateRequestReasonMax             = 4 /*0x4*/
}PROCESS_TERMINATE_REQUEST_REASON, *PPROCESS_TERMINATE_REQUEST_REASON;

typedef enum _PROCESS_VA_TYPE  // 4 elements, 0x4 bytes
{
    ProcessVAImage   = 0 /*0x0*/,
    ProcessVASection = 1 /*0x1*/,
    ProcessVAPrivate = 2 /*0x2*/,
    ProcessVAMax     = 3 /*0x3*/
}PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _PROCESSOR_CACHE_TYPE  // 4 elements, 0x4 bytes
{
    CacheUnified     = 0 /*0x0*/,
    CacheInstruction = 1 /*0x1*/,
    CacheData        = 2 /*0x2*/,
    CacheTrace       = 3 /*0x3*/
}PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef enum _PROFILE_DEPARTURE_STYLE  // 4 elements, 0x4 bytes
{
    PDS_UPDATE_DEFAULT      = 1 /*0x1*/,
    PDS_UPDATE_ON_REMOVE    = 2 /*0x2*/,
    PDS_UPDATE_ON_INTERFACE = 3 /*0x3*/,
    PDS_UPDATE_ON_EJECT     = 4 /*0x4*/
}PROFILE_DEPARTURE_STYLE, *PPROFILE_DEPARTURE_STYLE;

typedef enum _PROFILE_STATUS  // 5 elements, 0x4 bytes
{
    DOCK_NOTDOCKDEVICE      = 0 /*0x0*/,
    DOCK_QUIESCENT          = 1 /*0x1*/,
    DOCK_ARRIVING           = 2 /*0x2*/,
    DOCK_DEPARTING          = 3 /*0x3*/,
    DOCK_EJECTIRP_COMPLETED = 4 /*0x4*/
}PROFILE_STATUS, *PPROFILE_STATUS;

typedef enum _PS_ATTRIBUTE_NUM  // 28 elements, 0x4 bytes
{
    PsAttributeParentProcess                = 0 /*0x0*/,
    PsAttributeDebugObject                  = 1 /*0x1*/,
    PsAttributeToken                        = 2 /*0x2*/,
    PsAttributeClientId                     = 3 /*0x3*/,
    PsAttributeTebAddress                   = 4 /*0x4*/,
    PsAttributeImageName                    = 5 /*0x5*/,
    PsAttributeImageInfo                    = 6 /*0x6*/,
    PsAttributeMemoryReserve                = 7 /*0x7*/,
    PsAttributePriorityClass                = 8 /*0x8*/,
    PsAttributeErrorMode                    = 9 /*0x9*/,
    PsAttributeStdHandleInfo                = 10 /*0xA*/,
    PsAttributeHandleList                   = 11 /*0xB*/,
    PsAttributeGroupAffinity                = 12 /*0xC*/,
    PsAttributePreferredNode                = 13 /*0xD*/,
    PsAttributeIdealProcessor               = 14 /*0xE*/,
    PsAttributeUmsThread                    = 15 /*0xF*/,
    PsAttributeMitigationOptions            = 16 /*0x10*/,
    PsAttributeProtectionLevel              = 17 /*0x11*/,
    PsAttributeSecureProcess                = 18 /*0x12*/,
    PsAttributeJobList                      = 19 /*0x13*/,
    PsAttributeChildProcessPolicy           = 20 /*0x14*/,
    PsAttributeAllApplicationPackagesPolicy = 21 /*0x15*/,
    PsAttributeWin32kFilter                 = 22 /*0x16*/,
    PsAttributeSafeOpenPromptOriginClaim    = 23 /*0x17*/,
    PsAttributeBnoIsolation                 = 24 /*0x18*/,
    PsAttributeDesktopAppPolicy             = 25 /*0x19*/,
    PsAttributeChpe                         = 26 /*0x1A*/,
    PsAttributeMax                          = 27 /*0x1B*/
}PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

typedef enum _PS_CREATE_STATE  // 8 elements, 0x4 bytes
{
    PsCreateInitialState        = 0 /*0x0*/,
    PsCreateFailOnFileOpen      = 1 /*0x1*/,
    PsCreateFailOnSectionCreate = 2 /*0x2*/,
    PsCreateFailExeFormat       = 3 /*0x3*/,
    PsCreateFailMachineMismatch = 4 /*0x4*/,
    PsCreateFailExeName         = 5 /*0x5*/,
    PsCreateSuccess             = 6 /*0x6*/,
    PsCreateMaximumStates       = 7 /*0x7*/
}PS_CREATE_STATE, *PPS_CREATE_STATE;

typedef enum _PS_MITIGATION_OPTION  // 32 elements, 0x4 bytes
{
    PS_MITIGATION_OPTION_NX                                  = 0 /*0x0*/,
    PS_MITIGATION_OPTION_SEHOP                               = 1 /*0x1*/,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES               = 2 /*0x2*/,
    PS_MITIGATION_OPTION_HEAP_TERMINATE                      = 3 /*0x3*/,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR                      = 4 /*0x4*/,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR                   = 5 /*0x5*/,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS                = 6 /*0x6*/,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE          = 7 /*0x7*/,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE             = 8 /*0x8*/,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE               = 9 /*0x9*/,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD                  = 10 /*0xA*/,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES        = 11 /*0xB*/,
    PS_MITIGATION_OPTION_FONT_DISABLE                        = 12 /*0xC*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE                = 13 /*0xD*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL             = 14 /*0xE*/,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32          = 15 /*0xF*/,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD                   = 16 /*0x10*/,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY         = 17 /*0x11*/,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD           = 18 /*0x12*/,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT         = 19 /*0x13*/,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT                      = 20 /*0x14*/,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK                    = 21 /*0x15*/,
    PS_MITIGATION_OPTION_ROP_SIMEXEC                         = 22 /*0x16*/,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER               = 23 /*0x17*/,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS          = 24 /*0x18*/,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION     = 25 /*0x19*/,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER               = 26 /*0x1A*/,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION         = 27 /*0x1B*/,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28 /*0x1C*/,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE    = 29 /*0x1D*/,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30 /*0x1E*/,
    PS_MITIGATION_OPTION_CET_SHADOW_STACKS                   = 31 /*0x1F*/
}PS_MITIGATION_OPTION, *PPS_MITIGATION_OPTION;

typedef enum _PS_PROTECTED_SIGNER  // 10 elements, 0x4 bytes
{
    PsProtectedSignerNone         = 0 /*0x0*/,
    PsProtectedSignerAuthenticode = 1 /*0x1*/,
    PsProtectedSignerCodeGen      = 2 /*0x2*/,
    PsProtectedSignerAntimalware  = 3 /*0x3*/,
    PsProtectedSignerLsa          = 4 /*0x4*/,
    PsProtectedSignerWindows      = 5 /*0x5*/,
    PsProtectedSignerWinTcb       = 6 /*0x6*/,
    PsProtectedSignerWinSystem    = 7 /*0x7*/,
    PsProtectedSignerApp          = 8 /*0x8*/,
    PsProtectedSignerMax          = 9 /*0x9*/
}PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef enum _PS_PROTECTED_TYPE  // 4 elements, 0x4 bytes
{
    PsProtectedTypeNone           = 0 /*0x0*/,
    PsProtectedTypeProtectedLight = 1 /*0x1*/,
    PsProtectedTypeProtected      = 2 /*0x2*/,
    PsProtectedTypeMax            = 3 /*0x3*/
}PS_PROTECTED_TYPE, *PPS_PROTECTED_TYPE;

typedef enum _PS_RESOURCE_TYPE  // 5 elements, 0x4 bytes
{
    PsResourceNonPagedPool = 0 /*0x0*/,
    PsResourcePagedPool    = 1 /*0x1*/,
    PsResourcePageFile     = 2 /*0x2*/,
    PsResourceWorkingSet   = 3 /*0x3*/,
    PsResourceMax          = 4 /*0x4*/
}PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef enum _PS_STD_HANDLE_STATE  // 4 elements, 0x4 bytes
{
    PsNeverDuplicate     = 0 /*0x0*/,
    PsRequestDuplicate   = 1 /*0x1*/,
    PsAlwaysDuplicate    = 2 /*0x2*/,
    PsMaxStdHandleStates = 3 /*0x3*/
}PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef enum _PS_WAKE_REASON  // 8 elements, 0x4 bytes
{
    PsWakeReasonUser              = 0 /*0x0*/,
    PsWakeReasonExecutionRequired = 1 /*0x1*/,
    PsWakeReasonKernel            = 2 /*0x2*/,
    PsWakeReasonInstrumentation   = 3 /*0x3*/,
    PsWakeReasonPreserveProcess   = 4 /*0x4*/,
    PsWakeReasonActivityReference = 5 /*0x5*/,
    PsWakeReasonWorkOnBehalf      = 6 /*0x6*/,
    PsMaxWakeReasons              = 7 /*0x7*/
}PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef enum _REG_NOTIFY_CLASS  // 61 elements, 0x4 bytes
{
    RegNtDeleteKey                    = 0 /*0x0*/,
    RegNtPreDeleteKey                 = 0 /*0x0*/,
    RegNtSetValueKey                  = 1 /*0x1*/,
    RegNtPreSetValueKey               = 1 /*0x1*/,
    RegNtDeleteValueKey               = 2 /*0x2*/,
    RegNtPreDeleteValueKey            = 2 /*0x2*/,
    RegNtSetInformationKey            = 3 /*0x3*/,
    RegNtPreSetInformationKey         = 3 /*0x3*/,
    RegNtRenameKey                    = 4 /*0x4*/,
    RegNtPreRenameKey                 = 4 /*0x4*/,
    RegNtEnumerateKey                 = 5 /*0x5*/,
    RegNtPreEnumerateKey              = 5 /*0x5*/,
    RegNtEnumerateValueKey            = 6 /*0x6*/,
    RegNtPreEnumerateValueKey         = 6 /*0x6*/,
    RegNtQueryKey                     = 7 /*0x7*/,
    RegNtPreQueryKey                  = 7 /*0x7*/,
    RegNtQueryValueKey                = 8 /*0x8*/,
    RegNtPreQueryValueKey             = 8 /*0x8*/,
    RegNtQueryMultipleValueKey        = 9 /*0x9*/,
    RegNtPreQueryMultipleValueKey     = 9 /*0x9*/,
    RegNtPreCreateKey                 = 10 /*0xA*/,
    RegNtPostCreateKey                = 11 /*0xB*/,
    RegNtPreOpenKey                   = 12 /*0xC*/,
    RegNtPostOpenKey                  = 13 /*0xD*/,
    RegNtKeyHandleClose               = 14 /*0xE*/,
    RegNtPreKeyHandleClose            = 14 /*0xE*/,
    RegNtPostDeleteKey                = 15 /*0xF*/,
    RegNtPostSetValueKey              = 16 /*0x10*/,
    RegNtPostDeleteValueKey           = 17 /*0x11*/,
    RegNtPostSetInformationKey        = 18 /*0x12*/,
    RegNtPostRenameKey                = 19 /*0x13*/,
    RegNtPostEnumerateKey             = 20 /*0x14*/,
    RegNtPostEnumerateValueKey        = 21 /*0x15*/,
    RegNtPostQueryKey                 = 22 /*0x16*/,
    RegNtPostQueryValueKey            = 23 /*0x17*/,
    RegNtPostQueryMultipleValueKey    = 24 /*0x18*/,
    RegNtPostKeyHandleClose           = 25 /*0x19*/,
    RegNtPreCreateKeyEx               = 26 /*0x1A*/,
    RegNtPostCreateKeyEx              = 27 /*0x1B*/,
    RegNtPreOpenKeyEx                 = 28 /*0x1C*/,
    RegNtPostOpenKeyEx                = 29 /*0x1D*/,
    RegNtPreFlushKey                  = 30 /*0x1E*/,
    RegNtPostFlushKey                 = 31 /*0x1F*/,
    RegNtPreLoadKey                   = 32 /*0x20*/,
    RegNtPostLoadKey                  = 33 /*0x21*/,
    RegNtPreUnLoadKey                 = 34 /*0x22*/,
    RegNtPostUnLoadKey                = 35 /*0x23*/,
    RegNtPreQueryKeySecurity          = 36 /*0x24*/,
    RegNtPostQueryKeySecurity         = 37 /*0x25*/,
    RegNtPreSetKeySecurity            = 38 /*0x26*/,
    RegNtPostSetKeySecurity           = 39 /*0x27*/,
    RegNtCallbackObjectContextCleanup = 40 /*0x28*/,
    RegNtPreRestoreKey                = 41 /*0x29*/,
    RegNtPostRestoreKey               = 42 /*0x2A*/,
    RegNtPreSaveKey                   = 43 /*0x2B*/,
    RegNtPostSaveKey                  = 44 /*0x2C*/,
    RegNtPreReplaceKey                = 45 /*0x2D*/,
    RegNtPostReplaceKey               = 46 /*0x2E*/,
    RegNtPreQueryKeyName              = 47 /*0x2F*/,
    RegNtPostQueryKeyName             = 48 /*0x30*/,
    MaxRegNtNotifyClass               = 49 /*0x31*/
}REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _ReplacesCorHdrNumericDefines  // 25 elements, 0x4 bytes
{
    COMIMAGE_FLAGS_ILONLY                      = 1 /*0x1*/,
    COMIMAGE_FLAGS_32BITREQUIRED               = 2 /*0x2*/,
    COMIMAGE_FLAGS_IL_LIBRARY                  = 4 /*0x4*/,
    COMIMAGE_FLAGS_STRONGNAMESIGNED            = 8 /*0x8*/,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT           = 16 /*0x10*/,
    COMIMAGE_FLAGS_TRACKDEBUGDATA              = 65536 /*0x10000*/,
    COMIMAGE_FLAGS_32BITPREFERRED              = 131072 /*0x20000*/,
    COR_VERSION_MAJOR_V2                       = 2 /*0x2*/,
    COR_VERSION_MAJOR                          = 2 /*0x2*/,
    COR_VERSION_MINOR                          = 5 /*0x5*/,
    COR_DELETED_NAME_LENGTH                    = 8 /*0x8*/,
    COR_VTABLEGAP_NAME_LENGTH                  = 8 /*0x8*/,
    NATIVE_TYPE_MAX_CB                         = 1 /*0x1*/,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE       = 255 /*0xFF*/,
    IMAGE_COR_MIH_METHODRVA                    = 1 /*0x1*/,
    IMAGE_COR_MIH_EHRVA                        = 2 /*0x2*/,
    IMAGE_COR_MIH_BASICBLOCK                   = 8 /*0x8*/,
    COR_VTABLE_32BIT                           = 1 /*0x1*/,
    COR_VTABLE_64BIT                           = 2 /*0x2*/,
    COR_VTABLE_FROM_UNMANAGED                  = 4 /*0x4*/,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8 /*0x8*/,
    COR_VTABLE_CALL_MOST_DERIVED               = 16 /*0x10*/,
    IMAGE_COR_EATJ_THUNK_SIZE                  = 32 /*0x20*/,
    MAX_CLASS_NAME                             = 1024 /*0x400*/,
    MAX_PACKAGE_NAME                           = 1024 /*0x400*/
}ReplacesCorHdrNumericDefines, *PReplacesCorHdrNumericDefines;

typedef enum _REQUESTER_TYPE  // 3 elements, 0x4 bytes
{
    KernelRequester            = 0 /*0x0*/,
    UserProcessRequester       = 1 /*0x1*/,
    UserSharedServiceRequester = 2 /*0x2*/
}REQUESTER_TYPE, *PREQUESTER_TYPE;

typedef enum _RTL_GENERIC_COMPARE_RESULTS  // 3 elements, 0x4 bytes
{
    GenericLessThan    = 0 /*0x0*/,
    GenericGreaterThan = 1 /*0x1*/,
    GenericEqual       = 2 /*0x2*/
}RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef enum _RTL_MEMORY_TYPE  // 5 elements, 0x4 bytes
{
    MemoryTypePaged     = 0 /*0x0*/,
    MemoryTypeNonPaged  = 1 /*0x1*/,
    MemoryTypeLargePage = 2 /*0x2*/,
    MemoryTypeHugePage  = 3 /*0x3*/,
    MemoryTypeMax       = 4 /*0x4*/
}RTL_MEMORY_TYPE, *PRTL_MEMORY_TYPE;

typedef enum _RTLP_CSPARSE_BITMAP_STATE  // 3 elements, 0x4 bytes
{
    CommitBitmapInvalid = 0 /*0x0*/,
    UserBitmapInvalid   = 1 /*0x1*/,
    UserBitmapValid     = 2 /*0x2*/
}RTLP_CSPARSE_BITMAP_STATE, *PRTLP_CSPARSE_BITMAP_STATE;

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE  // 4 elements, 0x4 bytes
{
    HeapAddressUser    = 0 /*0x0*/,
    HeapAddressKernel  = 1 /*0x1*/,
    HeapAddressSession = 2 /*0x2*/,
    HeapAddressTypeMax = 3 /*0x3*/
}RTLP_HP_ADDRESS_SPACE_TYPE, *PRTLP_HP_ADDRESS_SPACE_TYPE;

typedef enum _RTLP_HP_LOCK_TYPE  // 3 elements, 0x4 bytes
{
    HeapLockPaged    = 0 /*0x0*/,
    HeapLockNonPaged = 1 /*0x1*/,
    HeapLockTypeMax  = 2 /*0x2*/
}RTLP_HP_LOCK_TYPE, *PRTLP_HP_LOCK_TYPE;

typedef enum _RTLP_HP_MEMORY_TYPE  // 5 elements, 0x4 bytes
{
    HeapMemoryPaged     = 0 /*0x0*/,
    HeapMemoryNonPaged  = 1 /*0x1*/,
    HeapMemoryLargePage = 2 /*0x2*/,
    HeapMemoryHugePage  = 3 /*0x3*/,
    HeapMemoryTypeMax   = 4 /*0x4*/
}RTLP_HP_MEMORY_TYPE, *PRTLP_HP_MEMORY_TYPE;

typedef enum _SE_WS_APPX_SIGNATURE_ORIGIN  // 5 elements, 0x4 bytes
{
    SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0 /*0x0*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN       = 1 /*0x1*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE      = 2 /*0x2*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS       = 3 /*0x3*/,
    SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE    = 4 /*0x4*/
}SE_WS_APPX_SIGNATURE_ORIGIN, *PSE_WS_APPX_SIGNATURE_ORIGIN;

typedef enum _SECURITY_IMPERSONATION_LEVEL  // 4 elements, 0x4 bytes
{
    SecurityAnonymous      = 0 /*0x0*/,
    SecurityIdentification = 1 /*0x1*/,
    SecurityImpersonation  = 2 /*0x2*/,
    SecurityDelegation     = 3 /*0x3*/
}SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_OPERATION_CODE  // 4 elements, 0x4 bytes
{
    SetSecurityDescriptor    = 0 /*0x0*/,
    QuerySecurityDescriptor  = 1 /*0x1*/,
    DeleteSecurityDescriptor = 2 /*0x2*/,
    AssignSecurityDescriptor = 3 /*0x3*/
}SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef enum _SEP_CACHED_HANDLES_ENTRY_TYPE  // 2 elements, 0x4 bytes
{
    SepCachedHandlesEntryLowbox       = 0 /*0x0*/,
    SepCachedHandlesEntryBnoIsolation = 1 /*0x1*/
}SEP_CACHED_HANDLES_ENTRY_TYPE, *PSEP_CACHED_HANDLES_ENTRY_TYPE;

typedef enum _SERVERSILO_STATE  // 5 elements, 0x4 bytes
{
    SERVERSILO_INITING       = 0 /*0x0*/,
    SERVERSILO_STARTED       = 1 /*0x1*/,
    SERVERSILO_SHUTTING_DOWN = 2 /*0x2*/,
    SERVERSILO_TERMINATING   = 3 /*0x3*/,
    SERVERSILO_TERMINATED    = 4 /*0x4*/
}SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef enum _SKSERVICE  // 116 elements, 0x4 bytes
{
    SECURESERVICE_NONE                                 = 0 /*0x0*/,
    SECURESERVICE_PHASE4_INIT                          = 1 /*0x1*/,
    SECURESERVICE_START_PROCESSOR                      = 2 /*0x2*/,
    SECURESERVICE_FINISH_START_PROCESSOR               = 3 /*0x3*/,
    SECURESERVICE_REGISTER_SYSTEM_DLLS                 = 4 /*0x4*/,
    SECURESERVICE_REGISTER_SYSTEM_PROCESS              = 5 /*0x5*/,
    SECURESERVICE_CREATE_PROCESS                       = 6 /*0x6*/,
    SECURESERVICE_INITIALIZE_PROCESS                   = 7 /*0x7*/,
    SECURESERVICE_CREATE_THREAD                        = 8 /*0x8*/,
    SECURESERVICE_REQUEST_THREAD_EXIT                  = 9 /*0x9*/,
    SECURESERVICE_TERMINATE_THREAD                     = 10 /*0xA*/,
    SECURESERVICE_RUNDOWN_PROCESS                      = 11 /*0xB*/,
    SECURESERVICE_DEBUG_PROCESS                        = 12 /*0xC*/,
    SECURESERVICE_GET_TEB_ADDRESS                      = 13 /*0xD*/,
    SECURESERVICE_GET_CONTEXT                          = 14 /*0xE*/,
    SECURESERVICE_SET_CONTEXT                          = 15 /*0xF*/,
    SECURESERVICE_SEND_ATTACH_NOTIFICATIONS            = 16 /*0x10*/,
    SECURESERVICE_GET_ETW_DEBUG_ID                     = 17 /*0x11*/,
    SECURESERVICE_GET_ON_DEMAND_DEBUG_CHALLENGE        = 18 /*0x12*/,
    SECURESERVICE_ENABLE_ON_DEMAND_DEBUG_WITH_RESPONSE = 19 /*0x13*/,
    SECURESERVICE_RETRIEVE_MAILBOX                     = 20 /*0x14*/,
    SECURESERVICE_IS_TRUSTLET_RUNNING                  = 21 /*0x15*/,
    SECURESERVICE_CREATE_SECURE_ALLOCATION             = 22 /*0x16*/,
    SECURESERVICE_FILL_SECURE_ALLOCATION               = 23 /*0x17*/,
    SECURESERVICE_MAKE_CODE_CATALOG                    = 24 /*0x18*/,
    SECURESERVICE_CREATE_SECURE_IMAGE                  = 25 /*0x19*/,
    SECURESERVICE_FINALIZE_SECURE_IMAGE_HASH           = 26 /*0x1A*/,
    SECURESERVICE_FINISH_SECURE_IMAGE_VALIDATION       = 27 /*0x1B*/,
    SECURESERVICE_PREPARE_IMAGE_RELOCATIONS            = 28 /*0x1C*/,
    SECURESERVICE_RELOCATE_IMAGE                       = 29 /*0x1D*/,
    SECURESERVICE_CLOSE_SECURE_HANDLE                  = 30 /*0x1E*/,
    SECURESERVICE_VALIDATE_DYNAMIC_CODE                = 31 /*0x1F*/,
    SECURESERVICE_TRANSFER_IMAGE_VERSION_RESOURCE      = 32 /*0x20*/,
    SECURESERVICE_SET_CODE_INTEGRITY_POLICY            = 33 /*0x21*/,
    SECURESERVICE_EXCHANGE_ENTROPY                     = 34 /*0x22*/,
    SECURESERVICE_ALLOCATE_HIBERNATE_RESOURCES         = 35 /*0x23*/,
    SECURESERVICE_FREE_HIBERNATE_RESOURCES             = 36 /*0x24*/,
    SECURESERVICE_CONFIGURE_DYNAMIC_MEMORY             = 37 /*0x25*/,
    SECURESERVICE_DEBUG_PROTECT_MEMORY                 = 38 /*0x26*/,
    SECURESERVICE_DEBUG_READ_WRITE_MEMORY              = 39 /*0x27*/,
    SECURESERVICE_QUERY_VIRTUAL_MEMORY                 = 40 /*0x28*/,
    SECURESERVICE_CREATE_ENCLAVE                       = 41 /*0x29*/,
    SECURESERVICE_LOAD_ENCLAVE_MODULE                  = 42 /*0x2A*/,
    SECURESERVICE_INITIALIZE_ENCLAVE                   = 43 /*0x2B*/,
    SECURESERVICE_TERMINATE_ENCLAVE                    = 44 /*0x2C*/,
    SECURESERVICE_DELETE_ENCLAVE                       = 45 /*0x2D*/,
    SECURESERVICE_CONNECT_SW_INTERRUPT                 = 46 /*0x2E*/,
    SECURESERVICE_RELAX_HYPERGUARD_QUOTA               = 47 /*0x2F*/,
    SECURESERVICE_LIVEDUMP_QUERY_SECONDARYDATA_SIZE    = 48 /*0x30*/,
    SECURESERVICE_LIVEDUMP_START                       = 49 /*0x31*/,
    SECURESERVICE_LIVEDUMP_ADD_BUFFER                  = 50 /*0x32*/,
    SECURESERVICE_LIVEDUMP_SETUP_BUFFER                = 51 /*0x33*/,
    SECURESERVICE_LIVEDUMP_FINALIZE                    = 52 /*0x34*/,
    SECURESERVICE_LIVEDUMP_ABORT                       = 53 /*0x35*/,
    SECURESERVICE_LIVEDUMP_CAPTURE_PROCESS             = 54 /*0x36*/,
    SECURESERVICE_NOTIFY_POWER_STATE                   = 55 /*0x37*/,
    SECURESERVICE_QUERY_PROFILE_INFORMATION            = 56 /*0x38*/,
    SECURESERVICE_UPDATE_FREEZE_BIAS                   = 57 /*0x39*/,
    SECURESERVICE_CREATE_SECURE_SECTION                = 58 /*0x3A*/,
    SECURESERVICE_DELETE_SECURE_SECTION                = 59 /*0x3B*/,
    SECURESERVICE_QUERY_SECURE_DEVICE                  = 60 /*0x3C*/,
    SECURESERVICE_UNPROTECT_SECURE_DEVICE              = 61 /*0x3D*/,
    SECURESERVICE_DETERMINE_HOT_PATCH_TYPE             = 62 /*0x3E*/,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE_SIZE         = 63 /*0x3F*/,
    SECURESERVICE_OBTAIN_PATCH_UNDO_TABLE              = 64 /*0x40*/,
    SECURESERVICE_APPLY_HOT_PATCH                      = 65 /*0x41*/,
    SECURESERVICE_REVERT_HOT_PATCH                     = 66 /*0x42*/,
    SECURESERVICE_PROVISION_DUMP_KEYS                  = 67 /*0x43*/,
    SECURESERVICE_NO_TRACING_FIRST                     = 191 /*0xBF*/,
    SECURESERVICE_GET_PEB_ADDRESS                      = 192 /*0xC0*/,
    SECURESERVICE_VALIDATE_SECURE_IMAGE_PAGES          = 193 /*0xC1*/,
    SECURESERVICE_PRE_INIT_FIRST                       = 207 /*0xCF*/,
    SECURESERVICE_PHASE3_INIT                          = 208 /*0xD0*/,
    SECURESERVICE_PERIODIC                             = 209 /*0xD1*/,
    SECURESERVICE_WORK_QUEUE                           = 210 /*0xD2*/,
    SECURESERVICE_RESERVE_PROTECTED_PAGES              = 211 /*0xD3*/,
    SECURESERVICE_APPLY_DYNAMIC_RELOCATIONS            = 212 /*0xD4*/,
    SECURESERVICE_ETW_ENABLE_CALLBACK                  = 213 /*0xD5*/,
    SECURESERVICE_INITIALIZE_KERNEL_CFG                = 214 /*0xD6*/,
    SECURESERVICE_LOAD_DRIVER                          = 215 /*0xD7*/,
    SECURESERVICE_UNLOAD_DRIVER                        = 216 /*0xD8*/,
    SECURESERVICE_RELOCATE_BOOT_DRIVER                 = 217 /*0xD9*/,
    SECURESERVICE_ENABLE_CFG_TARGET                    = 218 /*0xDA*/,
    SECURESERVICE_COMPLETE_SLAB_CONFIGURATION          = 219 /*0xDB*/,
    SECURESERVICE_INITIALIZE_RETPOLINE                 = 220 /*0xDC*/,
    SECURESERVICE_SET_RETPOLINE_PFN                    = 221 /*0xDD*/,
    SECURESERVICE_PERFORM_RETPOLINE_RELOCATIONS        = 222 /*0xDE*/,
    SECURESERVICE_UPDATE_IMPORT_RELOCATIONS            = 223 /*0xDF*/,
    SECURESERVICE_DISPATCH_LEVEL_FIRST                 = 223 /*0xDF*/,
    SECURESERVICE_FLUSH_ADDRESS_SPACE                  = 224 /*0xE0*/,
    SECURESERVICE_FAST_FLUSH_RANGE_LIST                = 225 /*0xE1*/,
    SECURESERVICE_SLOW_FLUSH_RANGE_LIST                = 226 /*0xE2*/,
    SECURESERVICE_REMOVE_PROTECTED_PAGE                = 227 /*0xE3*/,
    SECURESERVICE_COPY_PROTECTED_PAGE                  = 228 /*0xE4*/,
    SECURESERVICE_REGISTER_PROTECTED_PAGE              = 229 /*0xE5*/,
    SECURESERVICE_MAKE_PROTECTED_PAGE_WRITABLE         = 230 /*0xE6*/,
    SECURESERVICE_MAKE_PROTECTED_PAGE_EXECUTABLE       = 231 /*0xE7*/,
    SECURESERVICE_QUERY_STRONG_CODE_FEATURES           = 232 /*0xE8*/,
    SECURESERVICE_INVOKE_EFI_RUNTIME_SERVICE           = 233 /*0xE9*/,
    SECURESERVICE_LIVEDUMP_COLLECT_LIVE_DUMP           = 234 /*0xEA*/,
    SECURESERVICE_REGISTER_LOG_PAGES                   = 235 /*0xEB*/,
    SECURESERVICE_RECLAIM_PARTITION_PAGES              = 236 /*0xEC*/,
    SECURESERVICE_BIND_NT_KERNEL_IMPORTS               = 237 /*0xED*/,
    SECURESERVICE_SET_PLACEHOLDER_PAGES                = 238 /*0xEE*/,
    SECURESERVICE_VERIFY_PAGE                          = 239 /*0xEF*/,
    SECURESERVICE_PREPARE_FOR_HIBERNATION              = 240 /*0xF0*/,
    SECURESERVICE_PREPARE_FOR_CRASHDUMP                = 241 /*0xF1*/,
    SECURESERVICE_REPORT_BUGCHECK_PROGRESS             = 242 /*0xF2*/,
    SECURESERVICE_SHUTDOWN                             = 243 /*0xF3*/,
    SECURESERVICE_QUERY_SECURE_PCI_INFO                = 244 /*0xF4*/,
    SECURESERVICE_ACCESS_PCI_DEVICE                    = 245 /*0xF5*/,
    SECURESERVICE_REINITIALIZE_DEBUGGER_TRANSPORT      = 246 /*0xF6*/,
    SECURESERVICE_KSR_CALL                             = 247 /*0xF7*/,
    SECURESERVICE_SVC_CALL                             = 248 /*0xF8*/,
    SECURESERVICE_BUGCHECK                             = 1792 /*0x700*/,
    SECURESERVICE_LIMITED_MODE_SERVICE_START           = 2048 /*0x800*/
}SKSERVICE, *PSKSERVICE;

typedef enum _SLEEPSTUDY_SPM_SCENARIO_CS_EXIT  // 3 elements, 0x4 bytes
{
    SpmScenarioStopReasonUnspecified = 16 /*0x10*/,
    SpmScenarioStopReasonCsExit      = 17 /*0x11*/,
    SpmScenarioStopReasonMax         = 18 /*0x12*/
}SLEEPSTUDY_SPM_SCENARIO_CS_EXIT, *PSLEEPSTUDY_SPM_SCENARIO_CS_EXIT;

typedef enum _SYSTEM_DLL_TYPE  // 7 elements, 0x4 bytes
{
    PsNativeSystemDll      = 0 /*0x0*/,
    PsWowX86SystemDll      = 1 /*0x1*/,
    PsWowArm32SystemDll    = 2 /*0x2*/,
    PsWowAmd64SystemDll    = 3 /*0x3*/,
    PsWowChpeX86SystemDll  = 4 /*0x4*/,
    PsVsmEnclaveRuntimeDll = 5 /*0x5*/,
    PsSystemDllTotalTypes  = 6 /*0x6*/
}SYSTEM_DLL_TYPE, *PSYSTEM_DLL_TYPE;

typedef enum _SYSTEM_POWER_CONDITION  // 4 elements, 0x4 bytes
{
    PoAc               = 0 /*0x0*/,
    PoDc               = 1 /*0x1*/,
    PoHot              = 2 /*0x2*/,
    PoConditionMaximum = 3 /*0x3*/
}SYSTEM_POWER_CONDITION, *PSYSTEM_POWER_CONDITION;

typedef enum _SYSTEM_POWER_STATE  // 8 elements, 0x4 bytes
{
    PowerSystemUnspecified = 0 /*0x0*/,
    PowerSystemWorking     = 1 /*0x1*/,
    PowerSystemSleeping1   = 2 /*0x2*/,
    PowerSystemSleeping2   = 3 /*0x3*/,
    PowerSystemSleeping3   = 4 /*0x4*/,
    PowerSystemHibernate   = 5 /*0x5*/,
    PowerSystemShutdown    = 6 /*0x6*/,
    PowerSystemMaximum     = 7 /*0x7*/
}SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _SYSTEM_PROCESS_CLASSIFICATION  // 6 elements, 0x4 bytes
{
    SystemProcessClassificationNormal         = 0 /*0x0*/,
    SystemProcessClassificationSystem         = 1 /*0x1*/,
    SystemProcessClassificationSecureSystem   = 2 /*0x2*/,
    SystemProcessClassificationMemCompression = 3 /*0x3*/,
    SystemProcessClassificationRegistry       = 4 /*0x4*/,
    SystemProcessClassificationMaximum        = 5 /*0x5*/
}SYSTEM_PROCESS_CLASSIFICATION, *PSYSTEM_PROCESS_CLASSIFICATION;

typedef enum _THREAD_WORKLOAD_CLASS  // 3 elements, 0x4 bytes
{
    ThreadWorkloadClassDefault  = 0 /*0x0*/,
    ThreadWorkloadClassGraphics = 1 /*0x1*/,
    MaxThreadWorkloadClass      = 2 /*0x2*/
}THREAD_WORKLOAD_CLASS, *PTHREAD_WORKLOAD_CLASS;

typedef enum _TlgBlob_t  // 7 elements, 0x4 bytes
{
    _TlgBlobNone      = 0 /*0x0*/,
    _TlgBlobEnd       = 1 /*0x1*/,
    _TlgBlobProvider  = 2 /*0x2*/,
    _TlgBlobEvent3    = 3 /*0x3*/,
    _TlgBlobProvider3 = 4 /*0x4*/,
    _TlgBlobEvent2    = 5 /*0x5*/,
    _TlgBlobMax       = 6 /*0x6*/
}TlgBlob_t, *PTlgBlob_t;

typedef enum _TlgIn_t  // 37 elements, 0x4 bytes
{
    TlgInNULL                 = 0 /*0x0*/,
    TlgInUNICODESTRING        = 1 /*0x1*/,
    TlgInANSISTRING           = 2 /*0x2*/,
    TlgInINT8                 = 3 /*0x3*/,
    TlgInUINT8                = 4 /*0x4*/,
    TlgInINT16                = 5 /*0x5*/,
    TlgInUINT16               = 6 /*0x6*/,
    TlgInINT32                = 7 /*0x7*/,
    TlgInUINT32               = 8 /*0x8*/,
    TlgInINT64                = 9 /*0x9*/,
    TlgInUINT64               = 10 /*0xA*/,
    TlgInFLOAT                = 11 /*0xB*/,
    TlgInDOUBLE               = 12 /*0xC*/,
    TlgInBOOL32               = 13 /*0xD*/,
    TlgInBINARY               = 14 /*0xE*/,
    TlgInGUID                 = 15 /*0xF*/,
    _TlgInPOINTER_unsupported = 16 /*0x10*/,
    TlgInFILETIME             = 17 /*0x11*/,
    TlgInSYSTEMTIME           = 18 /*0x12*/,
    TlgInSID                  = 19 /*0x13*/,
    TlgInHEXINT32             = 20 /*0x14*/,
    TlgInHEXINT64             = 21 /*0x15*/,
    TlgInCOUNTEDSTRING        = 22 /*0x16*/,
    TlgInCOUNTEDANSISTRING    = 23 /*0x17*/,
    _TlgInSTRUCT              = 24 /*0x18*/,
    TlgInCOUNTEDBINARY        = 25 /*0x19*/,
    _TlgInMax                 = 26 /*0x1A*/,
    TlgInINTPTR               = 9 /*0x9*/,
    TlgInUINTPTR              = 10 /*0xA*/,
    TlgInPOINTER              = 21 /*0x15*/,
    _TlgInCcount              = 32 /*0x20*/,
    TlgInVcount               = 64 /*0x40*/,
    _TlgInChain               = 128 /*0x80*/,
    _TlgInCustom              = 96 /*0x60*/,
    _TlgInTypeMask            = 31 /*0x1F*/,
    _TlgInCountMask           = 96 /*0x60*/,
    _TlgInFlagMask            = 224 /*0xE0*/
}TlgIn_t, *PTlgIn_t;

typedef enum _TlgOut_t  // 25 elements, 0x4 bytes
{
    TlgOutNULL                 = 0 /*0x0*/,
    TlgOutNOPRINT              = 1 /*0x1*/,
    TlgOutSTRING               = 2 /*0x2*/,
    TlgOutBOOLEAN              = 3 /*0x3*/,
    TlgOutHEX                  = 4 /*0x4*/,
    TlgOutPID                  = 5 /*0x5*/,
    TlgOutTID                  = 6 /*0x6*/,
    TlgOutPORT                 = 7 /*0x7*/,
    TlgOutIPV4                 = 8 /*0x8*/,
    TlgOutIPV6                 = 9 /*0x9*/,
    TlgOutSOCKETADDRESS        = 10 /*0xA*/,
    TlgOutXML                  = 11 /*0xB*/,
    TlgOutJSON                 = 12 /*0xC*/,
    TlgOutWIN32ERROR           = 13 /*0xD*/,
    TlgOutNTSTATUS             = 14 /*0xE*/,
    TlgOutHRESULT              = 15 /*0xF*/,
    TlgOutFILETIME             = 16 /*0x10*/,
    TlgOutSIGNED               = 17 /*0x11*/,
    TlgOutUNSIGNED             = 18 /*0x12*/,
    TlgOutUTF8                 = 35 /*0x23*/,
    TlgOutPKCS7_WITH_TYPE_INFO = 36 /*0x24*/,
    TlgOutCODE_POINTER         = 37 /*0x25*/,
    _TlgOutMax                 = 38 /*0x26*/,
    _TlgOutChain               = 128 /*0x80*/,
    _TlgOutTypeMask            = 127 /*0x7F*/
}TlgOut_t, *PTlgOut_t;

typedef enum _TOKEN_TYPE  // 2 elements, 0x4 bytes
{
    TokenPrimary       = 1 /*0x1*/,
    TokenImpersonation = 2 /*0x2*/
}TOKEN_TYPE, *PTOKEN_TYPE;

typedef enum _TP_CALLBACK_PRIORITY  // 5 elements, 0x4 bytes
{
    TP_CALLBACK_PRIORITY_HIGH    = 0 /*0x0*/,
    TP_CALLBACK_PRIORITY_NORMAL  = 1 /*0x1*/,
    TP_CALLBACK_PRIORITY_LOW     = 2 /*0x2*/,
    TP_CALLBACK_PRIORITY_INVALID = 3 /*0x3*/,
    TP_CALLBACK_PRIORITY_COUNT   = 3 /*0x3*/
}TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _TRACE_INFORMATION_CLASS  // 18 elements, 0x4 bytes
{
    TraceIdClass                   = 0 /*0x0*/,
    TraceHandleClass               = 1 /*0x1*/,
    TraceEnableFlagsClass          = 2 /*0x2*/,
    TraceEnableLevelClass          = 3 /*0x3*/,
    GlobalLoggerHandleClass        = 4 /*0x4*/,
    EventLoggerHandleClass         = 5 /*0x5*/,
    AllLoggerHandlesClass          = 6 /*0x6*/,
    TraceHandleByNameClass         = 7 /*0x7*/,
    LoggerEventsLostClass          = 8 /*0x8*/,
    TraceSessionSettingsClass      = 9 /*0x9*/,
    LoggerEventsLoggedClass        = 10 /*0xA*/,
    DiskIoNotifyRoutinesClass      = 11 /*0xB*/,
    TraceInformationClassReserved1 = 12 /*0xC*/,
    AllPossibleNotifyRoutinesClass = 12 /*0xC*/,
    FltIoNotifyRoutinesClass       = 13 /*0xD*/,
    TraceInformationClassReserved2 = 14 /*0xE*/,
    WdfNotifyRoutinesClass         = 15 /*0xF*/,
    MaxTraceInformationClass       = 16 /*0x10*/
}TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef enum _TRANSFER_TYPE  // 3 elements, 0x4 bytes
{
    ReadTransfer  = 0 /*0x0*/,
    WriteTransfer = 1 /*0x1*/,
    OtherTransfer = 2 /*0x2*/
}TRANSFER_TYPE, *PTRANSFER_TYPE;

typedef enum _TYPE_OF_MEMORY  // 38 elements, 0x4 bytes
{
    LoaderExceptionBlock     = 0 /*0x0*/,
    LoaderSystemBlock        = 1 /*0x1*/,
    LoaderFree               = 2 /*0x2*/,
    LoaderBad                = 3 /*0x3*/,
    LoaderLoadedProgram      = 4 /*0x4*/,
    LoaderFirmwareTemporary  = 5 /*0x5*/,
    LoaderFirmwarePermanent  = 6 /*0x6*/,
    LoaderOsloaderHeap       = 7 /*0x7*/,
    LoaderOsloaderStack      = 8 /*0x8*/,
    LoaderSystemCode         = 9 /*0x9*/,
    LoaderHalCode            = 10 /*0xA*/,
    LoaderBootDriver         = 11 /*0xB*/,
    LoaderConsoleInDriver    = 12 /*0xC*/,
    LoaderConsoleOutDriver   = 13 /*0xD*/,
    LoaderStartupDpcStack    = 14 /*0xE*/,
    LoaderStartupKernelStack = 15 /*0xF*/,
    LoaderStartupPanicStack  = 16 /*0x10*/,
    LoaderStartupPcrPage     = 17 /*0x11*/,
    LoaderStartupPdrPage     = 18 /*0x12*/,
    LoaderRegistryData       = 19 /*0x13*/,
    LoaderMemoryData         = 20 /*0x14*/,
    LoaderNlsData            = 21 /*0x15*/,
    LoaderSpecialMemory      = 22 /*0x16*/,
    LoaderBBTMemory          = 23 /*0x17*/,
    LoaderZero               = 24 /*0x18*/,
    LoaderXIPRom             = 25 /*0x19*/,
    LoaderHALCachedMemory    = 26 /*0x1A*/,
    LoaderLargePageFiller    = 27 /*0x1B*/,
    LoaderErrorLogMemory     = 28 /*0x1C*/,
    LoaderVsmMemory          = 29 /*0x1D*/,
    LoaderFirmwareCode       = 30 /*0x1E*/,
    LoaderFirmwareData       = 31 /*0x1F*/,
    LoaderFirmwareReserved   = 32 /*0x20*/,
    LoaderEnclaveMemory      = 33 /*0x21*/,
    LoaderFirmwareKsr        = 34 /*0x22*/,
    LoaderEnclaveKsr         = 35 /*0x23*/,
    LoaderSkMemory           = 36 /*0x24*/,
    LoaderMaximum            = 37 /*0x25*/
}TYPE_OF_MEMORY, *PTYPE_OF_MEMORY;

typedef enum _UoWActionType  // 15 elements, 0x4 bytes
{
    UoWAddThisKey            = 0 /*0x0*/,
    UoWAddChildKey           = 1 /*0x1*/,
    UoWDeleteThisKey         = 2 /*0x2*/,
    UoWDeleteChildKey        = 3 /*0x3*/,
    UoWSetValueNew           = 4 /*0x4*/,
    UoWSetValueExisting      = 5 /*0x5*/,
    UoWDeleteValue           = 6 /*0x6*/,
    UoWSetKeyUserFlags       = 7 /*0x7*/,
    UoWSetLastWriteTime      = 8 /*0x8*/,
    UoWSetSecurityDescriptor = 9 /*0x9*/,
    UoWRenameSubKey          = 10 /*0xA*/,
    UoWRenameOldSubKey       = 11 /*0xB*/,
    UoWRenameNewSubKey       = 12 /*0xC*/,
    UoWIsolation             = 13 /*0xD*/,
    UoWInvalid               = 14 /*0xE*/
}UoWActionType, *PUoWActionType;

typedef enum _USER_ACTIVITY_PRESENCE  // 5 elements, 0x4 bytes
{
    PowerUserPresent    = 0 /*0x0*/,
    PowerUserNotPresent = 1 /*0x1*/,
    PowerUserInactive   = 2 /*0x2*/,
    PowerUserMaximum    = 3 /*0x3*/,
    PowerUserInvalid    = 3 /*0x3*/
}USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef enum _VERIFIER_RULE_CLASS_ID  // 65 elements, 0x4 bytes
{
    VrfSpecialPoolRuleClass             = 0 /*0x0*/,
    VrfForceIrqlRuleClass               = 1 /*0x1*/,
    VrfAllocationFailuresRuleClass      = 2 /*0x2*/,
    VrfTrackingPoolAllocationsRuleClass = 3 /*0x3*/,
    VrfIORuleClass                      = 4 /*0x4*/,
    VrfDeadlockPreventionRuleClass      = 5 /*0x5*/,
    VrfEnhancedIORuleClass              = 6 /*0x6*/,
    VrfDMARuleClass                     = 7 /*0x7*/,
    VrfSecurityRuleClass                = 8 /*0x8*/,
    VrfForcePendingIORequestRuleClass   = 9 /*0x9*/,
    VrfIRPTrackingRuleClass             = 10 /*0xA*/,
    VrfMiscellaneousRuleClass           = 11 /*0xB*/,
    VrfMoreDebuggingRuleClass           = 12 /*0xC*/,
    VrfMDLInvariantStackRuleClass       = 13 /*0xD*/,
    VrfMDLInvariantDriverRuleClass      = 14 /*0xE*/,
    VrfPowerDelayFuzzingRuleClass       = 15 /*0xF*/,
    VrfPortMiniportRuleClass            = 16 /*0x10*/,
    VrfStandardDDIRuleClass             = 17 /*0x11*/,
    VrfAutoFailRuleClass                = 18 /*0x12*/,
    VrfAdditionalDDIRuleClass           = 19 /*0x13*/,
    VrfRuleClassBase                    = 20 /*0x14*/,
    VrfNdisWifiRuleClass                = 21 /*0x15*/,
    VrfDriverLoggingRuleClass           = 22 /*0x16*/,
    VrfSyncDelayFuzzingRuleClass        = 23 /*0x17*/,
    VrfVMSwitchingRuleClass             = 24 /*0x18*/,
    VrfCodeIntegrityRuleClass           = 25 /*0x19*/,
    VrfBelow4GBAllocationRuleClass      = 26 /*0x1A*/,
    VrfProcessorBranchTraceRuleClass    = 27 /*0x1B*/,
    VrfAdvancedMMRuleClass              = 28 /*0x1C*/,
    VrfExtendingXDVTimeLimit            = 29 /*0x1D*/,
    VrfSystemBIOSRuleClass              = 30 /*0x1E*/,
    VrfHardwareRuleClass                = 31 /*0x1F*/,
    VrfStateSepRuleClass                = 32 /*0x20*/,
    VrfWDFRuleClass                     = 33 /*0x21*/,
    VrfMoreIrqlRuleClass                = 34 /*0x22*/,
    ReservedForDVRF35                   = 35 /*0x23*/,
    ReservedForDVRF36                   = 36 /*0x24*/,
    ReservedForDVRF37                   = 37 /*0x25*/,
    ReservedForDVRF38                   = 38 /*0x26*/,
    ReservedForDVRF39                   = 39 /*0x27*/,
    ReservedForDVRF40                   = 40 /*0x28*/,
    ReservedForDVRF41                   = 41 /*0x29*/,
    ReservedForDVRF42                   = 42 /*0x2A*/,
    ReservedForDVRF43                   = 43 /*0x2B*/,
    ReservedForDVRF44                   = 44 /*0x2C*/,
    ReservedForDVRF45                   = 45 /*0x2D*/,
    ReservedForDVRF46                   = 46 /*0x2E*/,
    ReservedForDVRF47                   = 47 /*0x2F*/,
    ReservedForDVRF48                   = 48 /*0x30*/,
    ReservedForDVRF49                   = 49 /*0x31*/,
    ReservedForDVRF50                   = 50 /*0x32*/,
    ReservedForDVRF51                   = 51 /*0x33*/,
    ReservedForDVRF52                   = 52 /*0x34*/,
    ReservedForDVRF53                   = 53 /*0x35*/,
    ReservedForDVRF54                   = 54 /*0x36*/,
    ReservedForDVRF55                   = 55 /*0x37*/,
    ReservedForDVRF56                   = 56 /*0x38*/,
    ReservedForDVRF57                   = 57 /*0x39*/,
    ReservedForDVRF58                   = 58 /*0x3A*/,
    ReservedForDVRF59                   = 59 /*0x3B*/,
    ReservedForDVRF60                   = 60 /*0x3C*/,
    ReservedForDVRF61                   = 61 /*0x3D*/,
    ReservedForDVRF62                   = 62 /*0x3E*/,
    ReservedForDVRF63                   = 63 /*0x3F*/,
    VrfRuleClassSizeMax                 = 64 /*0x40*/
}VERIFIER_RULE_CLASS_ID, *PVERIFIER_RULE_CLASS_ID;

typedef enum _VI_DEADLOCK_RESOURCE_TYPE  // 10 elements, 0x4 bytes
{
    VfDeadlockUnknown               = 0 /*0x0*/,
    VfDeadlockMutex                 = 1 /*0x1*/,
    VfDeadlockMutexAbandoned        = 2 /*0x2*/,
    VfDeadlockFastMutex             = 3 /*0x3*/,
    VfDeadlockFastMutexUnsafe       = 4 /*0x4*/,
    VfDeadlockSpinLock              = 5 /*0x5*/,
    VfDeadlockInStackQueuedSpinLock = 6 /*0x6*/,
    VfDeadlockUnusedSpinLock        = 7 /*0x7*/,
    VfDeadlockEresource             = 8 /*0x8*/,
    VfDeadlockTypeMaximum           = 9 /*0x9*/
}VI_DEADLOCK_RESOURCE_TYPE, *PVI_DEADLOCK_RESOURCE_TYPE;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT  // 9 elements, 0x4 bytes
{
    WheaDataFormatIPFSalRecord = 0 /*0x0*/,
    WheaDataFormatXPFMCA       = 1 /*0x1*/,
    WheaDataFormatMemory       = 2 /*0x2*/,
    WheaDataFormatPCIExpress   = 3 /*0x3*/,
    WheaDataFormatNMIPort      = 4 /*0x4*/,
    WheaDataFormatPCIXBus      = 5 /*0x5*/,
    WheaDataFormatPCIXDevice   = 6 /*0x6*/,
    WheaDataFormatGeneric      = 7 /*0x7*/,
    WheaDataFormatMax          = 8 /*0x8*/
}WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _WHEA_ERROR_SEVERITY  // 4 elements, 0x4 bytes
{
    WheaErrSevRecoverable   = 0 /*0x0*/,
    WheaErrSevFatal         = 1 /*0x1*/,
    WheaErrSevCorrected     = 2 /*0x2*/,
    WheaErrSevInformational = 3 /*0x3*/
}WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef enum _WHEA_ERROR_SOURCE_STATE  // 2 elements, 0x4 bytes
{
    WheaErrSrcStateStopped = 1 /*0x1*/,
    WheaErrSrcStateStarted = 2 /*0x2*/
}WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;

typedef enum _WHEA_ERROR_SOURCE_TYPE  // 15 elements, 0x4 bytes
{
    WheaErrSrcTypeMCE          = 0 /*0x0*/,
    WheaErrSrcTypeCMC          = 1 /*0x1*/,
    WheaErrSrcTypeCPE          = 2 /*0x2*/,
    WheaErrSrcTypeNMI          = 3 /*0x3*/,
    WheaErrSrcTypePCIe         = 4 /*0x4*/,
    WheaErrSrcTypeGeneric      = 5 /*0x5*/,
    WheaErrSrcTypeINIT         = 6 /*0x6*/,
    WheaErrSrcTypeBOOT         = 7 /*0x7*/,
    WheaErrSrcTypeSCIGeneric   = 8 /*0x8*/,
    WheaErrSrcTypeIPFMCA       = 9 /*0x9*/,
    WheaErrSrcTypeIPFCMC       = 10 /*0xA*/,
    WheaErrSrcTypeIPFCPE       = 11 /*0xB*/,
    WheaErrSrcTypeGenericV2    = 12 /*0xC*/,
    WheaErrSrcTypeSCIGenericV2 = 13 /*0xD*/,
    WheaErrSrcTypeMax          = 14 /*0xE*/
}WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_TYPE  // 7 elements, 0x4 bytes
{
    WheaErrTypeProcessor  = 0 /*0x0*/,
    WheaErrTypeMemory     = 1 /*0x1*/,
    WheaErrTypePCIExpress = 2 /*0x2*/,
    WheaErrTypeNMI        = 3 /*0x3*/,
    WheaErrTypePCIXBus    = 4 /*0x4*/,
    WheaErrTypePCIXDevice = 5 /*0x5*/,
    WheaErrTypeGeneric    = 6 /*0x6*/
}WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID  // 3 elements, 0x4 bytes
{
    WheaEventLogEntryIdCmcPollingTimeout = -2147483647 /*0x80000001*/,
    WheaEventLogEntryIdWheaInit          = -2147483646 /*0x80000002*/,
    WheaEventLogEntryIdMax               = -2147483645 /*0x80000003*/
}WHEA_EVENT_LOG_ENTRY_ID, *PWHEA_EVENT_LOG_ENTRY_ID;

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE  // 3 elements, 0x4 bytes
{
    WheaEventLogEntryTypeInformational = 0 /*0x0*/,
    WheaEventLogEntryTypeWarning       = 1 /*0x1*/,
    WheaEventLogEntryTypeError         = 2 /*0x2*/
}WHEA_EVENT_LOG_ENTRY_TYPE, *PWHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _wil_details_CachedFeatureEnabledState  // 4 elements, 0x4 bytes
{
    wil_details_CachedFeatureEnabledState_Unknown  = 0 /*0x0*/,
    wil_details_CachedFeatureEnabledState_Disabled = 1 /*0x1*/,
    wil_details_CachedFeatureEnabledState_Enabled  = 2 /*0x2*/,
    wil_details_CachedFeatureEnabledState_Desired  = 3 /*0x3*/
}wil_details_CachedFeatureEnabledState, *Pwil_details_CachedFeatureEnabledState;

typedef enum _wil_details_CachedHasNotificationState  // 3 elements, 0x4 bytes
{
    wil_details_CachedHasNotificationState_Unknown                  = 0 /*0x0*/,
    wil_details_CachedHasNotificationState_DoesNotHaveNotifications = 1 /*0x1*/,
    wil_details_CachedHasNotificationState_HasNotification          = 2 /*0x2*/
}wil_details_CachedHasNotificationState, *Pwil_details_CachedHasNotificationState;

typedef enum _wil_details_FeatureTestStateKind  // 2 elements, 0x4 bytes
{
    wil_details_FeatureTestStateKind_EnabledState = 0 /*0x0*/,
    wil_details_FeatureTestStateKind_Variant      = 1 /*0x1*/
}wil_details_FeatureTestStateKind, *Pwil_details_FeatureTestStateKind;

typedef enum _wil_details_ServiceReportingKind  // 20 elements, 0x4 bytes
{
    wil_details_ServiceReportingKind_UniqueUsage                = 0 /*0x0*/,
    wil_details_ServiceReportingKind_UniqueOpportunity          = 1 /*0x1*/,
    wil_details_ServiceReportingKind_DeviceUsage                = 2 /*0x2*/,
    wil_details_ServiceReportingKind_DeviceOpportunity          = 3 /*0x3*/,
    wil_details_ServiceReportingKind_PotentialUniqueUsage       = 4 /*0x4*/,
    wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5 /*0x5*/,
    wil_details_ServiceReportingKind_PotentialDeviceUsage       = 6 /*0x6*/,
    wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7 /*0x7*/,
    wil_details_ServiceReportingKind_EnabledTotalDuration       = 8 /*0x8*/,
    wil_details_ServiceReportingKind_EnabledPausedDuration      = 9 /*0x9*/,
    wil_details_ServiceReportingKind_DisabledTotalDuration      = 10 /*0xA*/,
    wil_details_ServiceReportingKind_DisabledPausedDuration     = 11 /*0xB*/,
    wil_details_ServiceReportingKind_CustomEnabledBase          = 100 /*0x64*/,
    wil_details_ServiceReportingKind_CustomDisabledBase         = 150 /*0x96*/,
    wil_details_ServiceReportingKind_Store                      = 254 /*0xFE*/,
    wil_details_ServiceReportingKind_None                       = 255 /*0xFF*/,
    wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256 /*0x100*/,
    wil_details_ServiceReportingKind_VariantDeviceUsageBase     = 320 /*0x140*/,
    wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384 /*0x180*/,
    wil_details_ServiceReportingKind_VariantUniqueUsageBase     = 448 /*0x1C0*/
}wil_details_ServiceReportingKind, *Pwil_details_ServiceReportingKind;

typedef enum _wil_details_ServiceReportingOptions  // 2 elements, 0x4 bytes
{
    wil_details_ServiceReportingOptions_None          = 0 /*0x0*/,
    wil_details_ServiceReportingOptions_VariantConfig = 1 /*0x1*/
}wil_details_ServiceReportingOptions, *Pwil_details_ServiceReportingOptions;

typedef enum _wil_details_StagingConfigFeatureFields  // 5 elements, 0x4 bytes
{
    wil_details_StagingConfigFeatureFields_None         = 0 /*0x0*/,
    wil_details_StagingConfigFeatureFields_ServiceState = 1 /*0x1*/,
    wil_details_StagingConfigFeatureFields_UserState    = 2 /*0x2*/,
    wil_details_StagingConfigFeatureFields_TestState    = 4 /*0x4*/,
    wil_details_StagingConfigFeatureFields_Variant      = 8 /*0x8*/
}wil_details_StagingConfigFeatureFields, *Pwil_details_StagingConfigFeatureFields;

typedef enum _wil_FeatureChangeTime  // 4 elements, 0x4 bytes
{
    wil_FeatureChangeTime_OnRead    = 0 /*0x0*/,
    wil_FeatureChangeTime_OnReload  = 1 /*0x1*/,
    wil_FeatureChangeTime_OnSession = 2 /*0x2*/,
    wil_FeatureChangeTime_OnReboot  = 3 /*0x3*/
}wil_FeatureChangeTime, *Pwil_FeatureChangeTime;

typedef enum _wil_FeatureEnabledState  // 3 elements, 0x4 bytes
{
    wil_FeatureEnabledState_Default  = 0 /*0x0*/,
    wil_FeatureEnabledState_Disabled = 1 /*0x1*/,
    wil_FeatureEnabledState_Enabled  = 2 /*0x2*/
}wil_FeatureEnabledState, *Pwil_FeatureEnabledState;

typedef enum _wil_FeatureEnabledStateKind  // 4 elements, 0x4 bytes
{
    wil_FeatureEnabledStateKind_All     = 0 /*0x0*/,
    wil_FeatureEnabledStateKind_Service = 1 /*0x1*/,
    wil_FeatureEnabledStateKind_User    = 2 /*0x2*/,
    wil_FeatureEnabledStateKind_Test    = 3 /*0x3*/
}wil_FeatureEnabledStateKind, *Pwil_FeatureEnabledStateKind;

typedef enum _wil_FeatureEnabledStateOptions  // 2 elements, 0x4 bytes
{
    wil_FeatureEnabledStateOptions_None          = 0 /*0x0*/,
    wil_FeatureEnabledStateOptions_VariantConfig = 1 /*0x1*/
}wil_FeatureEnabledStateOptions, *Pwil_FeatureEnabledStateOptions;

typedef enum _wil_FeatureStage  // 4 elements, 0x4 bytes
{
    wil_FeatureStage_AlwaysDisabled    = 0 /*0x0*/,
    wil_FeatureStage_DisabledByDefault = 1 /*0x1*/,
    wil_FeatureStage_EnabledByDefault  = 2 /*0x2*/,
    wil_FeatureStage_AlwaysEnabled     = 3 /*0x3*/
}wil_FeatureStage, *Pwil_FeatureStage;

typedef enum _wil_FeatureStore  // 3 elements, 0x4 bytes
{
    wil_FeatureStore_Machine = 0 /*0x0*/,
    wil_FeatureStore_User    = 1 /*0x1*/,
    wil_FeatureStore_All     = 2 /*0x2*/
}wil_FeatureStore, *Pwil_FeatureStore;

typedef enum _wil_FeatureVariantPayloadKind  // 3 elements, 0x4 bytes
{
    wil_FeatureVariantPayloadKind_None     = 0 /*0x0*/,
    wil_FeatureVariantPayloadKind_Resident = 1 /*0x1*/,
    wil_FeatureVariantPayloadKind_External = 2 /*0x2*/
}wil_FeatureVariantPayloadKind, *Pwil_FeatureVariantPayloadKind;

typedef enum _wil_ReportingKind  // 7 elements, 0x4 bytes
{
    wil_ReportingKind_None              = 0 /*0x0*/,
    wil_ReportingKind_UniqueUsage       = 1 /*0x1*/,
    wil_ReportingKind_UniqueOpportunity = 2 /*0x2*/,
    wil_ReportingKind_DeviceUsage       = 3 /*0x3*/,
    wil_ReportingKind_DeviceOpportunity = 4 /*0x4*/,
    wil_ReportingKind_TotalDuration     = 5 /*0x5*/,
    wil_ReportingKind_PausedDuration    = 6 /*0x6*/
}wil_ReportingKind, *Pwil_ReportingKind;

typedef enum _wil_UsageReportingMode  // 3 elements, 0x4 bytes
{
    wil_UsageReportingMode_Default           = 0 /*0x0*/,
    wil_UsageReportingMode_SuppressPotential = 1 /*0x1*/,
    wil_UsageReportingMode_SuppressImplicit  = 2 /*0x2*/
}wil_UsageReportingMode, *Pwil_UsageReportingMode;

typedef enum _wil_VariantReportingKind  // 3 elements, 0x4 bytes
{
    wil_VariantReportingKind_None        = 0 /*0x0*/,
    wil_VariantReportingKind_UniqueUsage = 1 /*0x1*/,
    wil_VariantReportingKind_DeviceUsage = 2 /*0x2*/
}wil_VariantReportingKind, *Pwil_VariantReportingKind;

typedef enum _WORKING_SET_TYPE  // 11 elements, 0x4 bytes
{
    WorkingSetTypeUser           = 0 /*0x0*/,
    WorkingSetTypeSession        = 1 /*0x1*/,
    WorkingSetTypeSystemTypes    = 2 /*0x2*/,
    WorkingSetTypeSystemCache    = 2 /*0x2*/,
    WorkingSetTypePagedPool      = 3 /*0x3*/,
    WorkingSetTypeSystemViews    = 4 /*0x4*/,
    WorkingSetTypePagableMaximum = 4 /*0x4*/,
    WorkingSetTypeSystemPtes     = 5 /*0x5*/,
    WorkingSetTypeKernelStacks   = 6 /*0x6*/,
    WorkingSetTypeNonPagedPool   = 7 /*0x7*/,
    WorkingSetTypeMaximum        = 8 /*0x8*/
}WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef enum _WOW64_SHARED_INFORMATION  // 10 elements, 0x4 bytes
{
    SharedNtdll32LdrInitializeThunk                  = 0 /*0x0*/,
    SharedNtdll32KiUserExceptionDispatcher           = 1 /*0x1*/,
    SharedNtdll32KiUserApcDispatcher                 = 2 /*0x2*/,
    SharedNtdll32KiUserCallbackDispatcher            = 3 /*0x3*/,
    SharedNtdll32RtlUserThreadStart                  = 4 /*0x4*/,
    SharedNtdll32pQueryProcessDebugInformationRemote = 5 /*0x5*/,
    SharedNtdll32BaseAddress                         = 6 /*0x6*/,
    SharedNtdll32LdrSystemDllInitBlock               = 7 /*0x7*/,
    SharedNtdll32RtlpFreezeTimeBias                  = 8 /*0x8*/,
    Wow64SharedPageEntriesCount                      = 9 /*0x9*/
}WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Information about structure types

typedef struct __WIL__WNF_STATE_NAME;
typedef struct __WIL__WNF_TYPE_ID;
typedef struct __WIL__WNF_USER_SUBSCRIPTION;
typedef struct _ACCESS_REASONS;
typedef struct _ACCESS_STATE;
typedef struct _ACL;
typedef struct _ACPI_METHOD_ARGUMENT_V1;
typedef struct _ACTIVATION_CONTEXT;
typedef struct _ACTIVATION_CONTEXT_DATA;
typedef struct _ACTIVATION_CONTEXT_STACK;
typedef struct _ACTIVATION_CONTEXT_STACK32;
typedef struct _ACTIVATION_CONTEXT_STACK64;
typedef struct _ADAPTER_OBJECT;
typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS;
typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
typedef struct _AGGREGATED_PAYLOAD_FILTER;
typedef struct _ALPC_COMMUNICATION_INFO;
typedef struct _ALPC_COMPLETION_LIST;
typedef struct _ALPC_COMPLETION_LIST_HEADER;
typedef struct _ALPC_COMPLETION_LIST_STATE;
typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
typedef struct _ALPC_DISPATCH_CONTEXT;
typedef struct _ALPC_HANDLE_ENTRY;
typedef struct _ALPC_HANDLE_TABLE;
typedef struct _ALPC_MESSAGE_ATTRIBUTES;
typedef struct _ALPC_PORT;
typedef struct _ALPC_PORT_ATTRIBUTES;
typedef struct _ALPC_PROCESS_CONTEXT;
typedef struct _ALPC_WORK_ON_BEHALF_TICKET;
typedef struct _AMD64_DBGKD_CONTROL_SET;
typedef struct _ARBITER_ADD_RESERVED_PARAMETERS;
typedef struct _ARBITER_ALLOCATION_STATE;
typedef struct _ARBITER_ALTERNATIVE;
typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
typedef struct _ARBITER_CONFLICT_INFO;
typedef struct _ARBITER_INSTANCE;
typedef struct _ARBITER_INTERFACE;
typedef struct _ARBITER_LIST_ENTRY;
typedef struct _ARBITER_ORDERING;
typedef struct _ARBITER_ORDERING_LIST;
typedef struct _ARBITER_PARAMETERS;
typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
typedef struct _ARC_DISK_INFORMATION;
typedef struct _ARM_DBGKD_CONTROL_SET;
typedef struct _ARM_LOADER_BLOCK;
typedef struct _ARM64_DBGKD_CONTROL_SET;
typedef struct _ARMCE_DBGKD_CONTROL_SET;
typedef struct _ASSEMBLY_STORAGE_MAP;
typedef struct _ASYNC_READ_THREAD_STATS;
typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
typedef struct _AUX_ACCESS_DATA;
typedef struct _BATTERY_REPORTING_SCALE;
typedef struct _BITMAP_RANGE;
typedef struct _BLOB;
typedef struct _BLOB_COUNTERS;
typedef struct _BLOB_TYPE;
typedef struct _BOOT_ENTROPY_LDR_RESULT;
typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT;
typedef struct _BUS_EXTENSION_LIST;
typedef struct _BUS_HANDLER;
typedef struct _CACHE_DESCRIPTOR;
typedef struct _CACHE_MANAGER_CALLBACKS;
typedef struct _CACHE_UNINITIALIZE_EVENT;
typedef struct _CACHED_CHILD_LIST;
typedef struct _CACHED_KSTACK_LIST;
typedef struct _CALL_HASH_ENTRY;
typedef struct _CALL_PERFORMANCE_DATA;
typedef struct _CALLBACK_OBJECT;
typedef struct _CC_ASYNC_READ_CONTEXT;
typedef struct _CC_EXTERNAL_CACHE_INFO;
typedef struct _CC_PARTITION;
typedef struct _CELL_DATA;
typedef struct _CHILD_LIST;
typedef struct _CI_NGEN_PATHS;
typedef struct _CLIENT_ID;
typedef struct _CLIENT_ID32;
typedef struct _CLIENT_ID64;
typedef union _CLS_LSN;
typedef struct _CM_BIG_DATA;
typedef struct _CM_CACHED_VALUE_INDEX;
typedef struct _CM_COMPONENT_HASH;
typedef struct _CM_DIRTY_VECTOR_LOG;
typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY;
typedef struct _CM_FAST_LEAF_HINT;
typedef struct _CM_FULL_RESOURCE_DESCRIPTOR;
typedef struct _CM_INDEX;
typedef struct _CM_INDEX_HINT_BLOCK;
typedef struct _CM_INTENT_LOCK;
typedef struct _CM_KCB_LAYER_INFO;
typedef struct _CM_KCB_UOW;
typedef struct _CM_KEY_BODY;
typedef struct _CM_KEY_CONTROL_BLOCK;
typedef struct _CM_KEY_HASH;
typedef struct _CM_KEY_HASH_TABLE_ENTRY;
typedef struct _CM_KEY_INDEX;
typedef struct _CM_KEY_NODE;
typedef struct _CM_KEY_REFERENCE;
typedef struct _CM_KEY_SECURITY;
typedef struct _CM_KEY_SECURITY_CACHE;
typedef struct _CM_KEY_SECURITY_CACHE_ENTRY;
typedef struct _CM_KEY_VALUE;
typedef struct _CM_NAME_CONTROL_BLOCK;
typedef struct _CM_NAME_HASH;
typedef struct _CM_NOTIFY_BLOCK;
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
typedef struct _CM_PARTIAL_RESOURCE_LIST;
typedef struct _CM_PATH_HASH;
typedef struct _CM_RESOURCE_LIST;
typedef struct _CM_RM;
typedef struct _CM_TRANS;
typedef union _CM_TRANS_PTR;
typedef struct _CM_UOW_KEY_STATE_MODIFICATION;
typedef struct _CM_UOW_SET_SD_DATA;
typedef struct _CM_UOW_SET_VALUE_KEY_DATA;
typedef struct _CM_UOW_SET_VALUE_LIST_DATA;
typedef struct _CM_WORKITEM;
typedef struct _CMHIVE;
typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
typedef struct _CMP_OFFSET_ARRAY;
typedef struct _CMP_VOLUME_CONTEXT;
typedef struct _CMP_VOLUME_MANAGER;
typedef struct _CMSI_PROCESS_TUPLE;
typedef struct _CMSI_RW_LOCK;
typedef struct _COMPRESSED_DATA_INFO;
typedef struct _CONFIGURATION_COMPONENT;
typedef struct _CONFIGURATION_COMPONENT_DATA;
typedef struct _CONTEXT;
typedef struct _CONTROL_AREA;
typedef struct _COUNTER_READING;
typedef union _CPU_INFO;
typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA;
typedef struct _CURDIR;
typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
typedef union _CVDD;
typedef struct _DBGK_SILOSTATE;
typedef struct _DBGKD_ANY_CONTROL_SET;
typedef struct _DBGKD_BREAKPOINTEX;
typedef struct _DBGKD_CONTEXT_EX;
typedef struct _DBGKD_CONTINUE;
typedef struct _DBGKD_CONTINUE2;
typedef struct _DBGKD_FILL_MEMORY;
typedef struct _DBGKD_GET_CONTEXT;
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
typedef struct _DBGKD_GET_SET_BUS_DATA;
typedef struct _DBGKD_GET_VERSION32;
typedef struct _DBGKD_GET_VERSION64;
typedef struct _DBGKD_LOAD_SYMBOLS32;
typedef struct _DBGKD_LOAD_SYMBOLS64;
typedef struct _DBGKD_MANIPULATE_STATE32;
typedef struct _DBGKD_MANIPULATE_STATE64;
typedef struct _DBGKD_QUERY_MEMORY;
typedef struct _DBGKD_QUERY_SPECIAL_CALLS;
typedef struct _DBGKD_READ_MEMORY32;
typedef struct _DBGKD_READ_MEMORY64;
typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32;
typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64;
typedef struct _DBGKD_READ_WRITE_IO32;
typedef struct _DBGKD_READ_WRITE_IO64;
typedef struct _DBGKD_READ_WRITE_MSR;
typedef struct _DBGKD_RESTORE_BREAKPOINT;
typedef struct _DBGKD_SEARCH_MEMORY;
typedef struct _DBGKD_SET_CONTEXT;
typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
typedef struct _DBGKD_SET_SPECIAL_CALL32;
typedef struct _DBGKD_SET_SPECIAL_CALL64;
typedef struct _DBGKD_SWITCH_PARTITION;
typedef struct _DBGKD_WRITE_BREAKPOINT32;
typedef struct _DBGKD_WRITE_BREAKPOINT64;
typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT;
typedef struct _DBGKD_WRITE_MEMORY32;
typedef struct _DBGKD_WRITE_MEMORY64;
typedef struct _DBGKM_EXCEPTION32;
typedef struct _DBGKM_EXCEPTION64;
typedef struct _DBGKP_ERROR_PORT;
typedef struct _DEBUG_DEVICE_ADDRESS;
typedef struct _DEBUG_DEVICE_DESCRIPTOR;
typedef struct _DEBUG_MEMORY_REQUIREMENTS;
typedef struct _DEBUG_TRANSPORT_DATA;
typedef struct _DEFERRED_WRITE;
typedef struct _DELAY_ACK_FO;
typedef struct _DEVICE_CAPABILITIES;
typedef struct _DEVICE_DATA_SET_RANGE;
typedef struct _DEVICE_DESCRIPTION;
typedef struct _DEVICE_DSM_DEFINITION;
typedef struct _DEVICE_FAULT_CONFIGURATION;
typedef struct _DEVICE_FLAGS;
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
typedef struct _DEVICE_MAP;
typedef struct _DEVICE_NODE;
typedef struct _DEVICE_NODE_IOMMU_EXTENSION;
typedef struct _DEVICE_OBJECT;
typedef struct _DEVICE_OBJECT_LIST;
typedef struct _DEVICE_OBJECT_LIST_ENTRY;
typedef struct _DEVICE_OBJECT_POWER_EXTENSION;
typedef struct _DEVICE_RELATIONS;
typedef struct _DEVOBJ_EXTENSION;
typedef struct _DIAGNOSTIC_BUFFER;
typedef struct _DIAGNOSTIC_CONTEXT;
typedef struct _DIRTY_PAGE_STATISTICS;
typedef struct _DIRTY_PAGE_THRESHOLDS;
typedef struct _DISALLOWED_GUIDS;
typedef struct _DISPATCHER_HEADER;
typedef struct _DMA_IOMMU_INTERFACE;
typedef struct _DOCK_INTERFACE;
typedef struct _DOMAIN_CONFIGURATION;
typedef struct _DOMAIN_CONFIGURATION_ARM64;
typedef struct _DRIVER_EXTENSION;
typedef struct _DRIVER_OBJECT;
typedef struct _DUAL;
typedef struct _DUMMY_FILE_OBJECT;
typedef struct _DUMP_INITIALIZATION_CONTEXT;
typedef struct _DUMP_STACK_CONTEXT;
typedef struct _DYNAMIC_FUNCTION_TABLE;
typedef struct _ECP_LIST;
typedef struct _EFI_FIRMWARE_INFORMATION;
typedef struct _EJOB;
typedef union _ENERGY_STATE_DURATION;
typedef struct _ENODE;
typedef struct _EPARTITION;
typedef struct _EPROCESS;
typedef struct _EPROCESS_QUOTA_BLOCK;
typedef struct _EPROCESS_VALUES;
typedef struct _ERESOURCE;
typedef struct _ESERVERSILO_GLOBALS;
typedef struct _ETHREAD;
typedef struct _ETIMER;
typedef struct _ETW_APC_ENTRY;
typedef struct _ETW_BUFFER_CONTEXT;
typedef struct _ETW_BUFFER_QUEUE;
typedef struct _ETW_COUNTERS;
typedef struct _ETW_DEBUGID_TRACKING_ENTRY;
typedef struct _ETW_DECODE_CONTROL_ENTRY;
typedef struct _ETW_EVENT_CALLBACK_CONTEXT;
typedef struct _ETW_FILTER_EVENT_NAME_DATA;
typedef struct _ETW_FILTER_HEADER;
typedef struct _ETW_FILTER_PID;
typedef struct _ETW_FILTER_STRING_TOKEN;
typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
typedef struct _ETW_GUID_ENTRY;
typedef struct _ETW_HASH_BUCKET;
typedef struct _ETW_HW_TRACE_EXT_INTERFACE;
typedef struct _ETW_IPT_SUPPORT;
typedef struct _ETW_LAST_ENABLE_INFO;
typedef struct _ETW_LBR_SUPPORT;
typedef struct _ETW_LOGGER_HANDLE;
typedef struct _ETW_PAYLOAD_FILTER;
typedef struct _ETW_PERF_COUNTERS;
typedef struct _ETW_PERFECT_HASH_FUNCTION;
typedef struct _ETW_PMC_SUPPORT;
typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE;
typedef struct _ETW_PROVIDER_TRAITS;
typedef struct _ETW_QUEUE_ENTRY;
typedef struct _ETW_REALTIME_CONSUMER;
typedef struct _ETW_REF_CLOCK;
typedef struct _ETW_REG_ENTRY;
typedef struct _ETW_REPLY_QUEUE;
typedef struct _ETW_SESSION_PERF_COUNTERS;
typedef struct _ETW_SILO_TRACING_BLOCK;
typedef struct _ETW_SILODRIVERSTATE;
typedef struct _ETW_SOFT_RESTART_CONTEXT;
typedef struct _ETW_STACK_CACHE;
typedef struct _ETW_STACK_TRACE_BLOCK;
typedef struct _ETW_SYSTEM_LOGGER;
typedef struct _ETW_SYSTEM_LOGGER_SETTINGS;
typedef struct _ETW_SYSTEMTIME;
typedef struct _ETW_WMITRACE_WORK;
typedef struct _ETWP_NOTIFICATION_HEADER;
typedef struct _EVENT_DATA_DESCRIPTOR;
typedef struct _EVENT_DESCRIPTOR;
typedef struct _EVENT_FILTER_DESCRIPTOR;
typedef struct _EVENT_FILTER_HEADER;
typedef struct _EVENT_FILTER_LEVEL_KW;
typedef struct _EVENT_HEADER;
typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
typedef struct _EVENT_PAYLOAD_PREDICATE;
typedef struct _EVENT_RECORD;
typedef struct _EWOW64PROCESS;
typedef struct _EX_FAST_REF;
typedef struct _EX_PARTITION;
typedef struct _EX_PUSH_LOCK;
typedef struct _EX_PUSH_LOCK_AUTO_EXPAND;
typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
typedef struct _EX_RUNDOWN_REF;
typedef struct _EX_RUNDOWN_REF_CACHE_AWARE;
typedef struct _EX_TIMER;
typedef struct _EX_WNF_SUBSCRIPTION;
typedef struct _EX_WORK_QUEUE;
typedef struct _EX_WORK_QUEUE_MANAGER;
typedef struct _EXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64;
typedef struct _EXCEPTION_REGISTRATION_RECORD;
typedef struct _EXHANDLE;
typedef struct _EXT_DELETE_PARAMETERS;
typedef struct _EXT_IOMMU_DEVICE_ID;
typedef struct _EXT_IOMMU_DEVICE_ID_ACPI;
typedef struct _EXT_IOMMU_DEVICE_ID_GIC;
typedef struct _EXT_IOMMU_DEVICE_ID_PCI;
typedef struct _EXT_IOMMU_DEVICE_ID_TEST;
typedef struct _EXT_SET_PARAMETERS_V0;
typedef struct _FAKE_HEAP_ENTRY;
typedef struct _FAST_ERESOURCE;
typedef struct _FAST_ERESOURCE_INTERNAL;
typedef struct _FAST_IO_DISPATCH;
typedef struct _FAST_MUTEX;
typedef struct _FAST_OWNER_ENTRY;
typedef struct _FAST_OWNER_ENTRY_INTERNAL;
typedef struct _FAULT_INFORMATION;
typedef struct _FAULT_INFORMATION_ARM64;
typedef struct _FAULT_INFORMATION_ARM64_FLAGS;
typedef struct _FEATURE_ERROR;
typedef struct _FEATURE_LOGGED_TRAITS;
typedef struct _FEATURE_STATE_CHANGE_SUBSCRIPTION__;
typedef struct _FILE_BASIC_INFORMATION;
typedef struct _FILE_GET_QUOTA_INFORMATION;
typedef struct _FILE_NETWORK_OPEN_INFORMATION;
typedef struct _FILE_OBJECT;
typedef union _FILE_SEGMENT_ELEMENT;
typedef struct _FILE_STANDARD_INFORMATION;
typedef struct _FILESYSTEM_DISK_COUNTERS;
typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK;
typedef struct _flags;
typedef struct _FLS_CALLBACK_INFO;
typedef struct _FREE_DISPLAY;
typedef struct _FS_FILTER_CALLBACK_DATA;
typedef struct _FS_FILTER_CALLBACKS;
typedef union _FS_FILTER_PARAMETERS;
typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT;
typedef struct _FSRTL_ADVANCED_FCB_HEADER;
typedef struct _GDI_TEB_BATCH;
typedef struct _GDI_TEB_BATCH32;
typedef struct _GDI_TEB_BATCH64;
typedef struct _GENERAL_LOOKASIDE;
typedef struct _GENERAL_LOOKASIDE_POOL;
typedef struct _GENERIC_MAPPING;
typedef struct _GROUP_AFFINITY;
typedef struct _GUID;
typedef struct _HAL_CHANNEL_MEMORY_RANGES;
typedef struct _HAL_CLOCK_TIMER_CONFIGURATION;
typedef struct _HAL_DP_REPLACE_PARAMETERS;
typedef struct _HAL_HV_DMA_DOMAIN_INFO;
typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES;
typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES;
typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION;
typedef struct _HAL_IOMMU_DISPATCH;
typedef struct _HAL_LBR_ENTRY;
typedef struct _HAL_LOG_REGISTER_CONTEXT;
typedef struct _HAL_NODE_RANGE;
typedef struct _HAL_PMC_COUNTERS;
typedef struct _HAL_PRIVATE_DISPATCH;
typedef union _HAL_UNMASKED_INTERRUPT_FLAGS;
typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION;
typedef struct _HANDLE_REVOCATION_INFO;
typedef struct _HANDLE_TABLE;
typedef union _HANDLE_TABLE_ENTRY;
typedef struct _HANDLE_TABLE_ENTRY_INFO;
typedef struct _HANDLE_TABLE_FREE_LIST;
typedef struct _HANDLE_TRACE_DB_ENTRY;
typedef struct _HANDLE_TRACE_DEBUG_INFO;
typedef struct _HARDWARE_PTE;
typedef struct _HBASE_BLOCK;
typedef struct _HBIN;
typedef struct _HCELL;
typedef struct _HEADLESS_LOADER_BLOCK;
typedef struct _HEAP;
typedef struct _HEAP_COUNTERS;
typedef struct _HEAP_ENTRY;
typedef struct _HEAP_ENTRY_EXTRA;
typedef struct _HEAP_EXTENDED_ENTRY;
typedef struct _HEAP_FAILURE_INFORMATION;
typedef struct _HEAP_FREE_ENTRY;
typedef struct _HEAP_FREE_ENTRY_EXTRA;
typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS;
typedef struct _HEAP_LIST_LOOKUP;
typedef struct _HEAP_LOCK;
typedef struct _HEAP_PSEUDO_TAG_ENTRY;
typedef struct _HEAP_SEGMENT;
typedef struct _HEAP_STOP_ON_TAG;
typedef struct _HEAP_STOP_ON_VALUES;
typedef struct _HEAP_SUBALLOCATOR_CALLBACKS;
typedef struct _HEAP_TAG_ENTRY;
typedef struct _HEAP_TUNING_PARAMETERS;
typedef struct _HEAP_UCR_DESCRIPTOR;
typedef struct _HEAP_UNPACKED_ENTRY;
typedef struct _HEAP_VAMGR_ALLOCATOR;
typedef struct _HEAP_VAMGR_CTX;
typedef struct _HEAP_VAMGR_RANGE;
typedef struct _HEAP_VAMGR_VASPACE;
typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY;
typedef struct _HHIVE;
typedef struct _HIVE_LIST_ENTRY;
typedef struct _HIVE_LOAD_FAILURE;
typedef struct _HIVE_WAIT_PACKET;
typedef struct _HIVE_WRITE_WAIT_QUEUE;
typedef struct _HMAP_DIRECTORY;
typedef struct _HMAP_ENTRY;
typedef struct _HMAP_TABLE;
typedef struct _HV_GET_BIN_CONTEXT;
typedef struct _HV_GET_CELL_CONTEXT;
typedef union _HV_PARTITION_PRIVILEGE_MASK;
typedef struct _HV_X64_HYPERVISOR_FEATURES;
typedef struct _HVP_VIEW_MAP;
typedef struct _I386_LOADER_BLOCK;
typedef struct _IA64_DBGKD_CONTROL_SET;
typedef struct _IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_DOS_HEADER;
typedef struct _IMAGE_FILE_HEADER;
typedef struct _IMAGE_NT_HEADERS64;
typedef struct _IMAGE_OPTIONAL_HEADER64;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_SECTION_HEADER;
typedef struct _IMAGE_SECURITY_CONTEXT;
typedef struct _INITIAL_PRIVILEGE_SET;
typedef struct _INPUT_MAPPING_ELEMENT;
typedef struct _INTERFACE;
typedef struct _INTERRUPT_CONNECTION_DATA;
typedef struct _INTERRUPT_HT_INTR_INFO;
typedef struct _INTERRUPT_REMAPPING_INFO;
typedef struct _INTERRUPT_VECTOR_DATA;
typedef struct _INVERTED_FUNCTION_TABLE;
typedef struct _INVERTED_FUNCTION_TABLE_ENTRY;
typedef union _INVPCID_DESCRIPTOR;
typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS;
typedef struct _IO_CLIENT_EXTENSION;
typedef struct _IO_COMPLETION_CONTEXT;
typedef struct _IO_DRIVER_CREATE_CONTEXT;
typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef struct _IO_MINI_COMPLETION_PACKET_USER;
typedef struct _IO_PRIORITY_INFO;
typedef struct _IO_REMOVE_LOCK;
typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK;
typedef struct _IO_RESOURCE_DESCRIPTOR;
typedef struct _IO_RESOURCE_LIST;
typedef struct _IO_RESOURCE_REQUIREMENTS_LIST;
typedef struct _IO_SECURITY_CONTEXT;
typedef struct _IO_STACK_LOCATION;
typedef struct _IO_STATUS_BLOCK;
typedef struct _IO_TIMER;
typedef struct _IO_WORKITEM;
typedef struct _iobuf;
typedef struct _IOMMU_DMA_DOMAIN;
typedef union _IOMMU_SVM_CAPABILITIES;
typedef struct _IOP_FILE_OBJECT_EXTENSION;
typedef struct _IOP_IRP_EXTENSION;
typedef struct _IOP_IRP_EXTENSION_STATUS;
typedef struct _IOP_IRP_STACK_PROFILER;
typedef struct _IOV_FORCED_PENDING_TRACE;
typedef struct _IOV_IRP_TRACE;
typedef struct _IRP;
typedef struct _ISR_THUNK;
typedef struct _ISRDPCSTATS;
typedef struct _JOB_ACCESS_STATE;
typedef struct _JOB_CPU_RATE_CONTROL;
typedef struct _JOB_NET_RATE_CONTROL;
typedef struct _JOB_NOTIFICATION_INFORMATION;
typedef struct _JOB_RATE_CONTROL_HEADER;
typedef union _JOBOBJECT_ENERGY_TRACKING_STATE;
typedef struct _JOBOBJECT_WAKE_FILTER;
typedef struct _KAFFINITY_EX;
typedef union _KALPC_DIRECT_EVENT;
typedef struct _KALPC_HANDLE_DATA;
typedef struct _KALPC_MESSAGE;
typedef struct _KALPC_MESSAGE_ATTRIBUTES;
typedef struct _KALPC_REGION;
typedef struct _KALPC_RESERVE;
typedef struct _KALPC_SECTION;
typedef struct _KALPC_SECURITY_DATA;
typedef struct _KALPC_VIEW;
typedef struct _KALPC_WORK_ON_BEHALF_DATA;
typedef struct _KAPC;
typedef struct _KAPC_STATE;
typedef struct _KDESCRIPTOR;
typedef struct _KDEVICE_QUEUE;
typedef struct _KDEVICE_QUEUE_ENTRY;
typedef struct _KDPC;
typedef struct _KDPC_DATA;
typedef struct _KDPC_LIST;
typedef struct _KENLISTMENT;
typedef struct _KENLISTMENT_HISTORY;
typedef struct _KENTROPY_TIMING_STATE;
typedef struct _KERNEL_STACK_SEGMENT;
typedef struct _KEVENT;
typedef struct _KEXCEPTION_FRAME;
typedef union _KEXECUTE_OPTIONS;
typedef struct _KFLOATING_SAVE;
typedef struct _KGATE;
typedef union _KGDTENTRY64;
typedef struct _KHETERO_PROCESSOR_SET;
typedef union _KIDTENTRY64;
typedef struct _KINTERRUPT;
typedef struct _KIST_BASE_FRAME;
typedef struct _KIST_LINK_FRAME;
typedef struct _KLDR_DATA_TABLE_ENTRY;
typedef struct _KLOCK_ENTRY;
typedef union _KLOCK_ENTRY_BOOST_BITMAP;
typedef struct _KLOCK_ENTRY_LOCK_STATE;
typedef struct _KLOCK_QUEUE_HANDLE;
typedef struct _KMUTANT;
typedef struct _KNODE;
typedef struct _KPCR;
typedef struct _KPRCB;
typedef union _KPRCBFLAG;
typedef struct _KPRIQUEUE;
typedef struct _KPROCESS;
typedef struct _KPROCESSOR_STATE;
typedef struct _KQUEUE;
typedef struct _KREQUEST_PACKET;
typedef struct _KRESOURCEMANAGER;
typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING;
typedef struct _KSCB;
typedef struct _KSCHEDULING_GROUP;
typedef struct _KSCHEDULING_GROUP_POLICY;
typedef struct _KSECONDARY_IDT_ENTRY;
typedef struct _KSECURE_FAULT_INFORMATION;
typedef struct _KSEMAPHORE;
typedef struct _KSHARED_READY_QUEUE;
typedef struct _KSPECIAL_REGISTERS;
typedef struct _KSPIN_LOCK_QUEUE;
typedef struct _KSTACK_CONTROL;
typedef union _KSTACK_COUNT;
typedef struct _KSYSTEM_TIME;
typedef struct _KTB_FLUSH_VA;
typedef struct _KTHREAD;
typedef struct _KTHREAD_COUNTERS;
typedef struct _KTIMER;
typedef struct _KTIMER_EXPIRATION_TRACE;
typedef struct _KTIMER_TABLE;
typedef struct _KTIMER_TABLE_ENTRY;
typedef struct _KTIMER2;
typedef struct _KTIMER2_COLLECTION;
typedef struct _KTM;
typedef struct _KTMNOTIFICATION_PACKET;
typedef struct _KTMOBJECT_NAMESPACE;
typedef struct _KTMOBJECT_NAMESPACE_LINK;
typedef struct _KTRANSACTION;
typedef struct _KTRANSACTION_HISTORY;
typedef struct _KTRAP_FRAME;
typedef struct _KTSS64;
typedef struct _KUMS_CONTEXT_HEADER;
typedef struct _KUSER_SHARED_DATA;
typedef struct _KWAIT_BLOCK;
typedef struct _KWAIT_CHAIN;
typedef struct _KWAIT_CHAIN_ENTRY;
typedef union _KWAIT_STATUS_REGISTER;
typedef union _LARGE_INTEGER;
typedef struct _LAZY_WRITER;
typedef struct _LDR_DATA_TABLE_ENTRY;
typedef struct _LDR_DDAG_NODE;
typedef struct _LDR_SERVICE_TAG_RECORD;
typedef struct _LDRP_CSLIST;
typedef struct _LDRP_LOAD_CONTEXT;
typedef struct _LEAP_SECOND_DATA;
typedef struct _LEARNING_MODE_DATA;
typedef struct _LIST_ENTRY;
typedef struct _LIST_ENTRY32;
typedef struct _LIST_ENTRY64;
typedef struct _LOADER_BUGCHECK_PARAMETERS;
typedef struct _LOADER_HIVE_RECOVERY_INFO;
typedef struct _LOADER_PARAMETER_BLOCK;
typedef struct _LOADER_PARAMETER_CI_EXTENSION;
typedef struct _LOADER_PARAMETER_EXTENSION;
typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION;
typedef struct _LOADER_PERFORMANCE_DATA;
typedef struct _LOADER_RESET_REASON;
typedef struct _LOCK_HEADER;
typedef struct _LOCK_TRACKER;
typedef struct _LOG_HANDLE_CONTEXT;
typedef struct _LOGGED_STREAM_CALLBACK_V1;
typedef struct _LOGGED_STREAM_CALLBACK_V2;
typedef struct _LOOKASIDE_LIST_EX;
typedef struct _LPCP_MESSAGE;
typedef struct _LPCP_NONPAGED_PORT_QUEUE;
typedef struct _LPCP_PORT_OBJECT;
typedef struct _LPCP_PORT_QUEUE;
typedef struct _LUID;
typedef struct _LUID_AND_ATTRIBUTES;
typedef struct _M128A;
typedef struct _MACHINE_CHECK_CONTEXT;
typedef struct _MACHINE_FRAME;
typedef struct _MAILSLOT_CREATE_PARAMETERS;
typedef struct _MAP_REGISTER_ENTRY;
typedef struct _MAPPED_FILE_SEGMENT;
typedef struct _MBCB;
typedef struct _MCGEN_TRACE_CONTEXT;
typedef struct _MCUPDATE_INFO;
typedef struct _MDL;
typedef struct _MEMORY_ALLOCATION_DESCRIPTOR;
typedef struct _MI_ACCESS_LOG_STATE;
typedef struct _MI_ACCESS_VIOLATION_RANGE;
typedef struct _MI_ACTIVE_PFN;
typedef struct _MI_ALIGNED_SLIST;
typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES;
typedef struct _MI_BAD_MEMORY_EVENT_ENTRY;
typedef struct _MI_CACHED_PTE;
typedef struct _MI_CACHED_PTES;
typedef struct _MI_CLONE_BLOCK_FLAGS;
typedef struct _MI_COMBINE_PAGE_LISTHEAD;
typedef struct _MI_COMBINE_STATE;
typedef struct _MI_COMBINE_WORKITEM;
typedef struct _MI_COMMON_PAGE_STATE;
typedef struct _MI_CONTROL_AREA_WAIT_BLOCK;
typedef struct _MI_CROSS_PARTITION_CHARGES;
typedef struct _MI_DEBUGGER_STATE;
typedef struct _MI_DECAY_TIMER_LINK;
typedef struct _MI_DECAY_TIMER_LINKAGE;
typedef struct _MI_DRIVER_VA;
typedef struct _MI_DYNAMIC_BITMAP;
typedef struct _MI_ERROR_STATE;
typedef struct _MI_EXTRA_IMAGE_INFORMATION;
typedef union _MI_FLAGS;
typedef struct _MI_FORCED_COMMITS;
typedef struct _MI_FREE_LARGE_PAGE_LIST;
typedef struct _MI_FREE_LARGE_PAGES;
typedef struct _MI_HARD_FAULT_STATE;
typedef struct _MI_HARDWARE_STATE;
typedef struct _MI_HUGE_SYSTEM_VIEW_HEAD;
typedef struct _MI_HYPER_SPACE;
typedef struct _MI_IMAGE_SECURITY_REFERENCE;
typedef struct _MI_IO_CACHE_STATS;
typedef struct _MI_IO_PAGE_STATE;
typedef struct _MI_LARGE_PAGE_CANDIDATES;
typedef struct _MI_LARGEPAGE_IMAGE_INFO;
typedef struct _MI_LDW_WORK_CONTEXT;
typedef struct _MI_MODWRITE_DATA;
typedef struct _MI_NODE_INFORMATION;
typedef struct _MI_PAGE_COLORS;
typedef struct _MI_PAGE_COMBINE_STATISTICS;
typedef struct _MI_PAGE_COMBINING_SUPPORT;
typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY;
typedef struct _MI_PAGEFILE_TRACES;
typedef struct _MI_PAGELIST_STATE;
typedef struct _MI_PAGING_FILE_SPACE_BITMAPS;
typedef struct _MI_PAGING_IO_STATE;
typedef struct _MI_PARTITION;
typedef struct _MI_PARTITION_COMMIT;
typedef struct _MI_PARTITION_CORE;
typedef struct _MI_PARTITION_FLAGS;
typedef struct _MI_PARTITION_MODWRITES;
typedef struct _MI_PARTITION_PAGE_LISTS;
typedef struct _MI_PARTITION_SEGMENTS;
typedef struct _MI_PARTITION_STATE;
typedef struct _MI_PARTITION_STORES;
typedef struct _MI_PARTITION_ZEROING;
typedef struct _MI_PER_SESSION_PROTOS;
typedef struct _MI_POOL_FAILURE_REASONS;
typedef struct _MI_POOL_STATE;
typedef struct _MI_PROBE_RAISE_TRACKER;
typedef struct _MI_PROCESS_STATE;
typedef struct _MI_PROTOTYPE_PTES_NODE;
typedef struct _MI_PTE_CHAIN_HEAD;
typedef struct _MI_REBUILD_LARGE_PAGE_TIMER;
typedef struct _MI_RESAVAIL_FAILURES;
typedef union _MI_RESERVATION_CLUSTER_INFO;
typedef struct _MI_RESTRICTED_MODWRITES;
typedef struct _MI_RESUME_WORKITEM;
typedef struct _MI_REVERSE_VIEW_MAP;
typedef struct _MI_SECTION_IMAGE_INFORMATION;
typedef struct _MI_SECTION_STATE;
typedef struct _MI_SESSION_DRIVER_UNLOAD;
typedef struct _MI_SESSION_STATE;
typedef struct _MI_SHUTDOWN_STATE;
typedef struct _MI_SLAB_ALLOCATOR_CONTEXT;
typedef struct _MI_SLAB_ALLOCATOR_ENTRY;
typedef struct _MI_SPECIAL_POOL;
typedef struct _MI_STANDBY_STATE;
typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS;
typedef struct _MI_SUB64K_FREE_RANGES;
typedef struct _MI_SUBSECTION_ENTRY1;
typedef struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES;
typedef struct _MI_SYSTEM_IMAGE_STATE;
typedef struct _MI_SYSTEM_INFORMATION;
typedef struct _MI_SYSTEM_NODE_INFORMATION;
typedef struct _MI_SYSTEM_PTE_STATE;
typedef struct _MI_SYSTEM_PTE_TYPE;
typedef struct _MI_SYSTEM_TRIM_STATE;
typedef struct _MI_SYSTEM_VA_ASSIGNMENT;
typedef struct _MI_SYSTEM_VA_STATE;
typedef struct _MI_TRIAGE_DUMP_DATA;
typedef struct _MI_ULTRA_MDL_NODE;
typedef struct _MI_ULTRA_VA_CONTEXT;
typedef struct _MI_VAD_EVENT_BLOCK;
typedef struct _MI_VAD_SEQUENTIAL_INFO;
typedef struct _MI_VERIFIER_POOL_HEADER;
typedef struct _MI_VISIBLE_PARTITION;
typedef struct _MI_VISIBLE_STATE;
typedef struct _MI_WSLE;
typedef struct _MI_ZERO_COST_COUNTS;
typedef struct _MI_ZERO_THREAD_CONTEXT;
typedef struct _MIPFNBLINK;
typedef struct _MM_DRIVER_VERIFIER_DATA;
typedef struct _MM_PAGE_ACCESS_INFO;
typedef union _MM_PAGE_ACCESS_INFO_FLAGS;
typedef struct _MM_PAGE_ACCESS_INFO_HEADER;
typedef struct _MM_PAGED_POOL_INFO;
typedef struct _MM_SESSION_SPACE;
typedef struct _MM_SESSION_SPACE_FLAGS;
typedef union _MM_STORE_KEY;
typedef struct _MM_SYSTEM_PAGE_COUNTS;
typedef struct _MMADDRESS_LIST;
typedef struct _MMCLONE_BLOCK;
typedef struct _MMCLONE_DESCRIPTOR;
typedef struct _MMCLONE_HEADER;
typedef struct _MMDEREFERENCE_SEGMENT_HEADER;
typedef struct _MMEXTEND_INFO;
typedef struct _MMINPAGE_FLAGS;
typedef struct _MMINPAGE_SUPPORT;
typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH;
typedef struct _MMMOD_WRITER_LISTHEAD;
typedef struct _MMMOD_WRITER_MDL_ENTRY;
typedef struct _MMPAGE_FILE_EXPANSION;
typedef struct _MMPAGE_FILE_EXPANSION_FLAGS;
typedef struct _MMPAGING_FILE;
typedef struct _MMPFN;
typedef struct _MMPFNENTRY1;
typedef struct _MMPFNENTRY3;
typedef struct _MMPFNLIST;
typedef struct _MMPFNLIST_SHORT;
typedef struct _MMPTE;
typedef struct _MMPTE_HARDWARE;
typedef struct _MMPTE_LIST;
typedef struct _MMPTE_PROTOTYPE;
typedef struct _MMPTE_SOFTWARE;
typedef struct _MMPTE_SUBSECTION;
typedef struct _MMPTE_TIMESTAMP;
typedef struct _MMPTE_TRANSITION;
typedef struct _MMSECTION_FLAGS;
typedef struct _MMSECTION_FLAGS2;
typedef struct _MMSECURE_FLAGS;
typedef struct _MMSESSION;
typedef struct _MMSUBSECTION_FLAGS;
typedef struct _MMSUPPORT_AGGREGATION;
typedef struct _MMSUPPORT_FLAGS;
typedef struct _MMSUPPORT_FULL;
typedef struct _MMSUPPORT_INSTANCE;
typedef struct _MMSUPPORT_SHARED;
typedef struct _MMVAD;
typedef struct _MMVAD_FLAGS;
typedef struct _MMVAD_FLAGS1;
typedef struct _MMVAD_FLAGS2;
typedef struct _MMVAD_SHORT;
typedef struct _MMWORKING_SET_EXPANSION_HEAD;
typedef struct _MMWSL_INSTANCE;
typedef struct _MODWRITER_FLAGS;
typedef struct _MSUBSECTION;
typedef struct _NAMED_PIPE_CREATE_PARAMETERS;
typedef struct _NB10;
typedef struct _NETWORK_LOADER_BLOCK;
typedef struct _NLS_DATA_BLOCK;
typedef struct _NON_PAGED_DEBUG_INFO;
typedef struct _NONOPAQUE_OPLOCK;
typedef struct _NPAGED_LOOKASIDE_LIST;
typedef struct _NT_TIB;
typedef struct _NT_TIB32;
typedef struct _NT_TIB64;
typedef struct _OB_DUPLICATE_OBJECT_STATE;
typedef struct _OB_EXTENDED_PARSE_PARAMETERS;
typedef struct _OB_EXTENDED_USER_INFO;
typedef struct _OB_HANDLE_REVOCATION_BLOCK;
typedef struct _OBJECT_ATTRIBUTES;
typedef struct _OBJECT_CREATE_INFORMATION;
typedef struct _OBJECT_DIRECTORY;
typedef struct _OBJECT_DIRECTORY_ENTRY;
typedef struct _OBJECT_DUMP_CONTROL;
typedef struct _OBJECT_FOOTER;
typedef struct _OBJECT_HANDLE_COUNT_DATABASE;
typedef struct _OBJECT_HANDLE_COUNT_ENTRY;
typedef struct _OBJECT_HANDLE_INFORMATION;
typedef struct _OBJECT_HEADER;
typedef struct _OBJECT_HEADER_AUDIT_INFO;
typedef struct _OBJECT_HEADER_CREATOR_INFO;
typedef struct _OBJECT_HEADER_EXTENDED_INFO;
typedef struct _OBJECT_HEADER_HANDLE_INFO;
typedef struct _OBJECT_HEADER_NAME_INFO;
typedef struct _OBJECT_HEADER_PADDING_INFO;
typedef struct _OBJECT_HEADER_PROCESS_INFO;
typedef struct _OBJECT_HEADER_QUOTA_INFO;
typedef struct _OBJECT_NAME_INFORMATION;
typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE;
typedef struct _OBJECT_REF_INFO;
typedef struct _OBJECT_REF_STACK_INFO;
typedef struct _OBJECT_REF_TRACE;
typedef struct _OBJECT_SYMBOLIC_LINK;
typedef struct _OBJECT_TYPE;
typedef struct _OBJECT_TYPE_INITIALIZER;
typedef struct _OBP_LOOKUP_CONTEXT;
typedef struct _OBP_SILODRIVERSTATE;
typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE;
typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
typedef struct _OPEN_PACKET;
typedef struct _OWNER_ENTRY;
typedef struct _PAGED_LOOKASIDE_LIST;
typedef struct _PAGEFAULT_HISTORY;
typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
typedef struct _PCAT_FIRMWARE_INFORMATION;
typedef struct _PCI_BUSMASTER_DESCRIPTOR;
typedef struct _PCW_BUFFER;
typedef union _PCW_CALLBACK_INFORMATION;
typedef struct _PCW_COUNTER_DESCRIPTOR;
typedef struct _PCW_COUNTER_INFORMATION;
typedef struct _PCW_DATA;
typedef struct _PCW_INSTANCE;
typedef struct _PCW_MASK_INFORMATION;
typedef struct _PCW_PROCESSOR_INFO;
typedef struct _PCW_REGISTRATION;
typedef struct _PCW_REGISTRATION_INFORMATION;
typedef struct _PEB;
typedef struct _PEB_LDR_DATA;
typedef struct _PEB32;
typedef struct _PEB64;
typedef struct _PEBS_DS_SAVE_AREA;
typedef struct _PENDING_RELATIONS_LIST_ENTRY;
typedef struct _PEP_ACPI_EXTENDED_ADDRESS;
typedef struct _PEP_ACPI_GPIO_RESOURCE;
typedef struct _PEP_ACPI_INTERRUPT_RESOURCE;
typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE;
typedef union _PEP_ACPI_RESOURCE;
typedef union _PEP_ACPI_RESOURCE_FLAGS;
typedef struct _PEP_ACPI_SPB_I2C_RESOURCE;
typedef struct _PEP_ACPI_SPB_RESOURCE;
typedef struct _PEP_ACPI_SPB_SPI_RESOURCE;
typedef struct _PEP_ACPI_SPB_UART_RESOURCE;
typedef struct _PEP_CRASHDUMP_INFORMATION;
typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
typedef struct _PEP_WORK_ACPI_NOTIFY;
typedef struct _PEP_WORK_ACTIVE_COMPLETE;
typedef struct _PEP_WORK_COMPLETE_IDLE_STATE;
typedef struct _PEP_WORK_COMPLETE_PERF_STATE;
typedef struct _PEP_WORK_DEVICE_IDLE;
typedef struct _PEP_WORK_DEVICE_POWER;
typedef struct _PEP_WORK_IDLE_STATE;
typedef struct _PEP_WORK_INFORMATION;
typedef struct _PEP_WORK_POWER_CONTROL;
typedef struct _PEPHANDLE__;
typedef struct _PERF_CONTROL_STATE_SELECTION;
typedef struct _PERFINFO_GROUPMASK;
typedef struct _PERFINFO_PPM_STATE_SELECTION;
typedef struct _PERIODIC_CAPTURE_STATE_GUIDS;
typedef struct _PF_KERNEL_GLOBALS;
typedef struct _PHYSICAL_MEMORY_DESCRIPTOR;
typedef struct _PHYSICAL_MEMORY_RUN;
typedef struct _PI_BUS_EXTENSION;
typedef struct _PI_RESOURCE_ARBITER_ENTRY;
typedef struct _PLATFORM_IDLE_ACCOUNTING;
typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING;
typedef struct _PLUGPLAY_EVENT_BLOCK;
typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT;
typedef struct _PNP_DEVICE_ACTION_ENTRY;
typedef struct _PNP_DEVICE_COMPLETION_QUEUE;
typedef struct _PNP_DEVICE_COMPLETION_REQUEST;
typedef struct _PNP_DEVICE_EVENT_ENTRY;
typedef struct _PNP_DEVICE_EVENT_LIST;
typedef struct _PNP_REBALANCE_TRACE_CONTEXT;
typedef struct _PNP_REPLACE_PROCESSOR_LIST;
typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
typedef struct _PNP_RESOURCE_REQUEST;
typedef struct _PNP_WATCHDOG;
typedef struct _PO_DEVICE_NOTIFY;
typedef struct _PO_DEVICE_NOTIFY_ORDER;
typedef struct _PO_DIAG_STACK_RECORD;
typedef struct _PO_DIRECTED_DRIPS_STATE;
typedef struct _PO_FX_COMPONENT_PERF_SET;
typedef struct _PO_FX_PERF_STATE;
typedef struct _PO_FX_PERF_STATE_CHANGE;
typedef struct _PO_HIBER_PERF;
typedef struct _PO_IRP_MANAGER;
typedef struct _PO_IRP_QUEUE;
typedef struct _PO_MEMORY_IMAGE;
typedef struct _PO_NOTIFY_ORDER_LEVEL;
typedef struct _PO_PROCESS_ENERGY_CONTEXT;
typedef struct _POHANDLE__;
typedef struct _POOL_DESCRIPTOR;
typedef struct _POOL_HEADER;
typedef struct _POOL_TRACKER_BIG_PAGES;
typedef struct _POOL_TRACKER_TABLE;
typedef struct _POP_ACTION_TRIGGER;
typedef struct _POP_COOLING_EXTENSION;
typedef struct _POP_CURRENT_BROADCAST;
typedef struct _POP_DEVICE_SYS_STATE;
typedef struct _POP_FX_ACCOUNTING;
typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING;
typedef struct _POP_FX_COMPONENT;
typedef union _POP_FX_COMPONENT_FLAGS;
typedef struct _POP_FX_DEPENDENT;
typedef struct _POP_FX_DEVICE;
typedef union _POP_FX_DEVICE_STATUS;
typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT;
typedef struct _POP_FX_DRIVER_CALLBACKS;
typedef struct _POP_FX_IDLE_STATE;
typedef struct _POP_FX_LOG_ENTRY;
typedef union _POP_FX_PERF_FLAGS;
typedef struct _POP_FX_PERF_INFO;
typedef struct _POP_FX_PERF_SET;
typedef struct _POP_FX_PLUGIN;
typedef struct _POP_FX_PROVIDER;
typedef struct _POP_FX_WORK_ORDER;
typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
typedef struct _POP_HIBER_CONTEXT;
typedef struct _POP_IO_INFO;
typedef struct _POP_IRP_DATA;
typedef struct _POP_IRP_WORKER_ENTRY;
typedef struct _POP_PER_PROCESSOR_CONTEXT;
typedef struct _POP_POLICY_DEVICE;
typedef struct _POP_POWER_ACTION;
typedef struct _POP_POWER_SETTING_VALUES;
typedef struct _POP_PPM_PROFILE;
typedef struct _POP_RW_LOCK;
typedef struct _POP_SHUTDOWN_BUG_CHECK;
typedef struct _POP_THERMAL_TELEMETRY_TRACKER;
typedef struct _POP_THERMAL_ZONE;
typedef struct _POP_TRIGGER_WAIT;
typedef struct _PORT_MESSAGE;
typedef struct _PORT_MESSAGE32;
typedef struct _POWER_ACTION_POLICY;
typedef struct _POWER_SEQUENCE;
typedef union _POWER_STATE;
typedef struct _PP_LOOKASIDE_LIST;
typedef struct _PPC_DBGKD_CONTROL_SET;
typedef struct _PPM_CONCURRENCY_ACCOUNTING;
typedef struct _PPM_COORDINATED_SELECTION;
typedef union _PPM_COORDINATED_SYNCHRONIZATION;
typedef struct _PPM_ENGINE_SETTINGS;
typedef struct _PPM_FFH_THROTTLE_STATE_INFO;
typedef struct _PPM_IDLE_STATE;
typedef struct _PPM_IDLE_STATES;
typedef union _PPM_IDLE_SYNCHRONIZATION_STATE;
typedef struct _PPM_PLATFORM_STATE;
typedef struct _PPM_PLATFORM_STATES;
typedef union _PPM_POLICY_SETTINGS_MASK;
typedef struct _PPM_SELECTION_DEPENDENCY;
typedef struct _PPM_SELECTION_MENU;
typedef struct _PPM_SELECTION_MENU_ENTRY;
typedef struct _PPM_SELECTION_STATISTICS;
typedef struct _PPM_VETO_ACCOUNTING;
typedef struct _PPM_VETO_ENTRY;
typedef struct _PRIVATE_CACHE_MAP;
typedef struct _PRIVATE_CACHE_MAP_FLAGS;
typedef struct _PRIVILEGE_SET;
typedef struct _PROC_FEEDBACK;
typedef struct _PROC_FEEDBACK_COUNTER;
typedef struct _PROC_IDLE_ACCOUNTING;
typedef struct _PROC_IDLE_POLICY;
typedef struct _PROC_IDLE_SNAP;
typedef struct _PROC_IDLE_STATE_ACCOUNTING;
typedef struct _PROC_IDLE_STATE_BUCKET;
typedef struct _PROC_PERF_CHECK;
typedef struct _PROC_PERF_CHECK_SNAP;
typedef struct _PROC_PERF_CONSTRAINT;
typedef struct _PROC_PERF_DOMAIN;
typedef struct _PROC_PERF_HISTORY;
typedef struct _PROC_PERF_HISTORY_ENTRY;
typedef struct _PROC_PERF_LOAD;
typedef struct _PROC_PERF_QOS_CLASS_POLICY;
typedef struct _PROCESS_DISK_COUNTERS;
typedef struct _PROCESS_ENERGY_VALUES;
typedef struct _PROCESS_ENERGY_VALUES_EXTENSION;
typedef struct _PROCESS_EXTENDED_ENERGY_VALUES;
typedef struct _PROCESSOR_IDLE_CONSTRAINTS;
typedef struct _PROCESSOR_IDLE_DEPENDENCY;
typedef struct _PROCESSOR_IDLE_PREPARE_INFO;
typedef struct _PROCESSOR_IDLESTATE_INFO;
typedef struct _PROCESSOR_IDLESTATE_POLICY;
typedef struct _PROCESSOR_NUMBER;
typedef struct _PROCESSOR_PERFSTATE_POLICY;
typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
typedef struct _PROCESSOR_POWER_STATE;
typedef struct _PROCESSOR_PROFILE_CONTROL_AREA;
typedef struct _PROFILE_PARAMETER_BLOCK;
typedef union _PS_CLIENT_SECURITY_CONTEXT;
typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES;
typedef struct _PS_IO_CONTROL_ENTRY;
typedef struct _PS_JOB_WAKE_INFORMATION;
typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef struct _PS_MITIGATION_OPTIONS_MAP;
typedef struct _PS_PROCESS_WAKE_INFORMATION;
typedef struct _PS_PROPERTY_SET;
typedef struct _PS_PROTECTION;
typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA;
typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
typedef struct _PS_TRUSTLET_TKSESSION_ID;
typedef struct _PSP_STORAGE;
typedef struct _PTE_TRACKER;
typedef struct _QUAD;
typedef struct _RELATION_LIST;
typedef struct _RELATIVE_SYMLINK_INFO;
typedef struct _REMOTE_PORT_VIEW;
typedef struct _REQUEST_MAILBOX;
typedef struct _RH_OP_CONTEXT;
typedef struct _RSDS;
typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef struct _RTL_ATOM_TABLE;
typedef struct _RTL_ATOM_TABLE_ENTRY;
typedef struct _RTL_ATOM_TABLE_REFERENCE;
typedef struct _RTL_AVL_TABLE;
typedef struct _RTL_AVL_TREE;
typedef struct _RTL_BALANCED_LINKS;
typedef struct _RTL_BALANCED_NODE;
typedef struct _RTL_BITMAP;
typedef struct _RTL_BITMAP_EX;
typedef struct _RTL_CHASH_ENTRY;
typedef struct _RTL_CHASH_TABLE;
typedef struct _RTL_CRITICAL_SECTION;
typedef struct _RTL_CRITICAL_SECTION_DEBUG;
typedef struct _RTL_CSPARSE_BITMAP;
typedef struct _RTL_DRIVE_LETTER_CURDIR;
typedef struct _RTL_DYNAMIC_HASH_TABLE;
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _RTL_HASH_ENTRY;
typedef struct _RTL_HASH_TABLE;
typedef struct _RTL_HASH_TABLE_ITERATOR;
typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA;
typedef struct _RTL_HP_LFH_CONFIG;
typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS;
typedef struct _RTL_HP_VS_CONFIG;
typedef struct _RTL_RANGE;
typedef struct _RTL_RANGE_LIST;
typedef struct _RTL_RB_TREE;
typedef struct _RTL_RETPOLINE_ROUTINES;
typedef union _RTL_RUN_ONCE;
typedef struct _RTL_SPARSE_ARRAY;
typedef struct _RTL_SPLAY_LINKS;
typedef struct _RTL_SRWLOCK;
typedef struct _RTL_TIME_ZONE_INFORMATION;
typedef struct _RTL_UMS_CONTEXT;
typedef struct _RTL_USER_PROCESS_PARAMETERS;
typedef struct _RTLP_HP_ALLOC_TRACKER;
typedef struct _RTLP_HP_HEAP_GLOBALS;
typedef struct _RTLP_HP_HEAP_MANAGER;
typedef struct _RTLP_HP_METADATA_HEAP_CTX;
typedef struct _RTLP_HP_PADDING_HEADER;
typedef struct _RTLP_RANGE_LIST_ENTRY;
typedef struct _SCSI_REQUEST_BLOCK;
typedef struct _SE_AUDIT_PROCESS_CREATION_INFO;
typedef struct _SECTION;
typedef struct _SECTION_IMAGE_INFORMATION;
typedef struct _SECTION_OBJECT_POINTERS;
typedef struct _SECURITY_CLIENT_CONTEXT;
typedef struct _SECURITY_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SECURITY_QUALITY_OF_SERVICE;
typedef struct _SECURITY_SUBJECT_CONTEXT;
typedef struct _SEGMENT;
typedef struct _SEGMENT_FLAGS;
typedef struct _SEGMENT_HEAP;
typedef struct _SEGMENT_HEAP_EXTRA;
typedef struct _SEP_AUDIT_POLICY;
typedef struct _SEP_CACHED_HANDLES_ENTRY;
typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
typedef struct _SEP_CACHED_HANDLES_TABLE;
typedef struct _SEP_LOGON_SESSION_REFERENCES;
typedef struct _SEP_LOWBOX_NUMBER_ENTRY;
typedef struct _SEP_LOWBOX_NUMBER_MAPPING;
typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY;
typedef struct _SEP_RM_LSA_CONNECTION_STATE;
typedef struct _SEP_SID_VALUES_BLOCK;
typedef struct _SEP_SILOSTATE;
typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY;
typedef struct _SEP_TOKEN_PRIVILEGES;
typedef struct _SESSION_LOWBOX_MAP;
typedef struct _SHARED_CACHE_MAP;
typedef struct _SHARED_CACHE_MAP_LIST_CURSOR;
typedef struct _SID;
typedef struct _SID_AND_ATTRIBUTES;
typedef struct _SID_AND_ATTRIBUTES_HASH;
typedef struct _SID_IDENTIFIER_AUTHORITY;
typedef struct _SILO_USER_SHARED_DATA;
typedef struct _SINGLE_LIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY32;
typedef struct _SK_CRASH_MINIDUMP;
typedef struct _SK_CRASH_MODULE;
typedef struct _SK_CRASH_STACK_FRAME;
typedef struct _SLIST_ENTRY;
typedef union _SLIST_HEADER;
typedef struct _SMBIOS3_TABLE_HEADER;
typedef struct _STACK_TABLE;
typedef struct _STRING;
typedef struct _STRING32;
typedef struct _STRING64;
typedef struct _SUBSECTION;
typedef struct _SUPPORTED_RANGE;
typedef struct _SUPPORTED_RANGES;
typedef struct _SYNCH_COUNTERS;
typedef struct _SYSPTES_HEADER;
typedef struct _SYSTEM_POWER_CAPABILITIES;
typedef struct _SYSTEM_POWER_LEVEL;
typedef struct _SYSTEM_POWER_POLICY;
typedef struct _SYSTEM_POWER_STATE_CONTEXT;
typedef struct _tagSWITCH_CONTEXT;
typedef struct _tagSWITCH_CONTEXT_ATTRIBUTE;
typedef struct _tagSWITCH_CONTEXT_DATA;
typedef struct _TEB;
typedef struct _TEB_ACTIVE_FRAME;
typedef struct _TEB_ACTIVE_FRAME_CONTEXT;
typedef struct _TEB32;
typedef struct _TEB64;
typedef struct _TERMINATION_PORT;
typedef struct _THERMAL_COOLING_INTERFACE;
typedef struct _THERMAL_INFORMATION;
typedef struct _THERMAL_INFORMATION_EX;
typedef struct _THERMAL_POLICY;
typedef struct _THERMAL_ZONE_COUNTERS;
typedef struct _THREAD_ENERGY_VALUES;
typedef struct _THREAD_PERFORMANCE_DATA;
typedef struct _TIME_FIELDS;
typedef union _TIMELINE_BITMAP;
typedef struct _TlgProvider_t;
typedef struct _TlgProviderMetadata_t;
typedef struct _TOKEN;
typedef struct _TOKEN_ACCESS_INFORMATION;
typedef struct _TOKEN_AUDIT_POLICY;
typedef struct _TOKEN_CONTROL;
typedef struct _TOKEN_MANDATORY_POLICY;
typedef struct _TOKEN_PRIVILEGES;
typedef struct _TOKEN_SOURCE;
typedef struct _TP_CALLBACK_ENVIRON_V3;
typedef struct _TP_CALLBACK_INSTANCE;
typedef struct _TP_CLEANUP_GROUP;
typedef struct _TP_POOL;
typedef struct _TRACE_ENABLE_INFO;
typedef struct _TRACE_LOGFILE_HEADER;
typedef struct _TraceLoggingMetadata_t;
typedef struct _TRIAGE_9F_PNP;
typedef struct _TRIAGE_9F_POWER;
typedef struct _TRIAGE_DEVICE_NODE;
typedef struct _TRIAGE_EX_WORK_QUEUE;
typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
typedef struct _TRIAGE_POP_FX_DEVICE;
typedef struct _TRIAGE_POP_IRP_DATA;
typedef struct _TRUSTLET_COLLABORATION_ID;
typedef struct _TRUSTLET_MAILBOX_KEY;
typedef struct _TXN_PARAMETER_BLOCK;
typedef union _ULARGE_INTEGER;
typedef struct _UMS_CONTROL_BLOCK;
typedef struct _UNEXPECTED_INTERRUPT;
typedef struct _UNICODE_STRING;
typedef struct _VACB;
typedef struct _VACB_ARRAY_HEADER;
typedef struct _VACB_LEVEL_ALLOCATION_LIST;
typedef struct _VACB_LEVEL_REFERENCE;
typedef struct _VERIFIER_SHARED_EXPORT_THUNK;
typedef struct _VF_ADDRESS_RANGE;
typedef struct _VF_AVL_TABLE;
typedef struct _VF_AVL_TREE;
typedef struct _VF_AVL_TREE_NODE;
typedef struct _VF_AVL_TREE_NODE_EX;
typedef struct _VF_DRIVER_IO_CALLBACKS;
typedef struct _VF_KE_CRITICAL_REGION_TRACE;
typedef struct _VF_POOL_TRACE;
typedef struct _VF_SUSPECT_DRIVER_ENTRY;
typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
typedef struct _VF_TARGET_DRIVER;
typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA;
typedef struct _VF_TRACKER;
typedef struct _VF_TRACKER_STAMP;
typedef struct _VF_WATCHDOG_IRP;
typedef struct _VI_DEADLOCK_GLOBALS;
typedef struct _VI_DEADLOCK_NODE;
typedef struct _VI_DEADLOCK_RESOURCE;
typedef struct _VI_DEADLOCK_THREAD;
typedef struct _VI_FAULT_TRACE;
typedef struct _VI_POOL_ENTRY;
typedef struct _VI_POOL_ENTRY_INUSE;
typedef struct _VI_POOL_PAGE_HEADER;
typedef struct _VI_TRACK_IRQL;
typedef struct _VI_VERIFIER_ISSUE;
typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES;
typedef struct _VOLUME_CACHE_MAP;
typedef struct _VPB;
typedef struct _WAIT_CONTEXT_BLOCK;
typedef struct _WAITING_IRP;
typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR;
typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
typedef union _WHEA_ERROR_PACKET_FLAGS;
typedef struct _WHEA_ERROR_PACKET_V2;
typedef struct _WHEA_ERROR_RECORD;
typedef struct _WHEA_ERROR_RECORD_HEADER;
typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS;
typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
typedef union _WHEA_ERROR_STATUS;
typedef struct _WHEA_EVENT_LOG_ENTRY;
typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS;
typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER;
typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
typedef struct _WHEA_IPF_CMC_DESCRIPTOR;
typedef struct _WHEA_IPF_CPE_DESCRIPTOR;
typedef struct _WHEA_IPF_MCA_DESCRIPTOR;
typedef struct _WHEA_MEMORY_ERROR_SECTION;
typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
typedef struct _WHEA_NOTIFICATION_DESCRIPTOR;
typedef union _WHEA_NOTIFICATION_FLAGS;
typedef struct _WHEA_PCI_SLOT_NUMBER;
typedef union _WHEA_PERSISTENCE_INFO;
typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
typedef struct _WHEA_RECOVERY_CONTEXT;
typedef union _WHEA_REVISION;
typedef union _WHEA_TIMESTAMP;
typedef struct _WHEA_XPF_CMC_DESCRIPTOR;
typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
typedef struct _WHEA_XPF_MCE_DESCRIPTOR;
typedef struct _WHEA_XPF_NMI_DESCRIPTOR;
typedef struct _WHEAP_ERROR_RECORD_WRAPPER;
typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
typedef struct _WHEAP_ERROR_SOURCE;
typedef struct _WHEAP_ERROR_SOURCE_TABLE;
typedef struct _WHEAP_INFO_BLOCK;
typedef struct _WHEAP_WORK_QUEUE;
typedef struct _wil_details_FeatureProperties;
typedef union _wil_details_FeaturePropertyCache;
typedef struct _wil_details_FeatureTestState;
typedef struct _wil_details_FeatureVariantPropertyCache;
typedef struct _wil_details_RecordUsageResult;
typedef struct _wil_details_SetPropertyCacheUsageContext;
typedef struct _wil_details_SetPropertyFlagContext;
typedef struct _wil_details_StagingConfig;
typedef struct _wil_details_StagingConfigFeature;
typedef struct _wil_details_StagingConfigHeader;
typedef struct _wil_details_StagingConfigHeaderProperties;
typedef struct _wil_details_StagingConfigUsageTrigger;
typedef struct _wil_details_StagingConfigWnfStateName;
typedef struct _wil_details_UsageSubscriptionData;
typedef struct _wil_details_VariantProperties;
typedef struct _wil_FeatureState;
typedef struct _wil_StagingConfig;
typedef struct _WMI_BUFFER_HEADER;
typedef struct _WMI_LOGGER_CONTEXT;
typedef struct _WNF_LOCK;
typedef struct _WNF_SCOPE_MAP;
typedef struct _WNF_SILODRIVERSTATE;
typedef struct _WNF_STATE_NAME;
typedef struct _WNF_TYPE_ID;
typedef struct _WORK_QUEUE_ENTRY;
typedef struct _WORK_QUEUE_ITEM;
typedef struct _WRITE_BEHIND_THROUGHPUT;
typedef struct _X86_DBGKD_CONTROL_SET;
typedef struct _X86_KTRAP_FRAME;
typedef struct _X86_KTRAP_FRAME_BLUE;
typedef union _XPF_MC_BANK_FLAGS;
typedef union _XPF_MCE_FLAGS;
typedef struct _XSAVE_AREA;
typedef struct _XSAVE_AREA_HEADER;
typedef struct _XSAVE_FORMAT;
typedef struct _XSTATE_CONFIGURATION;
typedef struct _XSTATE_CONTEXT;
typedef struct _XSTATE_FEATURE;
typedef struct _XSTATE_SAVE;

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Function types

typedef VOID (NEAR CDECL FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_PostRoutine) (VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_00F6_FinalizationCallback) (struct _TP_CALLBACK_INSTANCE*, VOID*);
typedef enum _EXCEPTION_DISPOSITION (NEAR CDECL FUNCT_0198_0197_Handler) (struct _EXCEPTION_RECORD*, VOID*, struct _CONTEXT*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine) ();
typedef VOID (NEAR CDECL FUNCT_00EF_0674_DeferredRoutine) (struct _KDPC*, VOID*, VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_0814_NormalRoutine) (VOID*, VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_080B_KernelRoutine) (struct _KAPC*, FUNCT_00EF_0814_NormalRoutine**, VOID**, VOID**, VOID**);
typedef VOID (NEAR CDECL FUNCT_00EF_0814_NormalRoutine) (VOID*, VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_0819_RundownRoutine) (struct _KAPC*);
typedef VOID* (NEAR CDECL FUNCT_00F2_08E5_AllocateEx) (enum _POOL_TYPE, UINT64, ULONG32, struct _LOOKASIDE_LIST_EX*);
typedef VOID* (NEAR CDECL FUNCT_00F2_08EF_Allocate) (enum _POOL_TYPE, UINT64, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_08F4_FreeEx) (VOID*, struct _LOOKASIDE_LIST_EX*);
typedef VOID (NEAR CDECL FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback) (VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_097C_IdlePrepare) (struct _PROCESSOR_IDLE_PREPARE_INFO*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_099D_IdlePreExecute) (VOID*, ULONG32, ULONG32, ULONG32, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_09A4_IdleExecute) (VOID*, UINT64, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32*);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09AD_IdlePreselect) (VOID*, struct _PROCESSOR_IDLE_CONSTRAINTS*);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09B2_IdleTest) (VOID*, ULONG32, ULONG32);
typedef ULONG32 (NEAR CDECL FUNCT_0009_09B7_IdleAvailabilityCheck) (VOID*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_09BB_IdleComplete) (VOID*, ULONG32, ULONG32, ULONG32, ULONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free) (VOID*, ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_09BF_IdleIsHalted_IdleInitiateWake_CompletionRoutine) (VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_0A58_InstantaneousRead) (UINT64, ULONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_0A5C_DifferentialRead) (UINT64, UINT8, UINT64*, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_0ADE_GetFFHThrottleState) (UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler) (UINT64, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_0AE5_ReinitializeHandler) (UINT64);
typedef ULONG32 (NEAR CDECL FUNCT_0009_0AE8_PerfSelectionHandler) (UINT64, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32*, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_0AF3_PerfControlHandler_DomainPerfControlHandler) (UINT64, struct _PERF_CONTROL_STATE_SELECTION*, UINT8, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0D24_AddDevice) (struct _DRIVER_OBJECT*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen) (struct _FS_FILTER_CALLBACK_DATA*, VOID**);
typedef VOID (NEAR CDECL FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen) (struct _FS_FILTER_CALLBACK_DATA*, LONG32, VOID*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E38_FastIoCheckIfPossible) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, UINT8, ULONG32, UINT8, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E47_FastIoRead_FastIoWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, UINT8, ULONG32, VOID*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E51_FastIoQueryBasicInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_BASIC_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E5F_FastIoQueryStandardInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_STANDARD_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E6D_FastIoLock) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, union _LARGE_INTEGER*, struct _EPROCESS*, ULONG32, UINT8, UINT8, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E78_FastIoUnlockSingle) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, union _LARGE_INTEGER*, struct _EPROCESS*, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E81_FastIoUnlockAll) (struct _FILE_OBJECT*, struct _EPROCESS*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E87_FastIoUnlockAllByKey) (struct _FILE_OBJECT*, VOID*, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0E8E_FastIoDeviceControl) (struct _FILE_OBJECT*, UINT8, VOID*, ULONG32, VOID*, ULONG32, ULONG32, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef VOID (NEAR CDECL FUNCT_00EF_0E99_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection) (struct _FILE_OBJECT*);
typedef VOID (NEAR CDECL FUNCT_00EF_0E9C_FastIoDetachDevice) (struct _DEVICE_OBJECT*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0EA0_FastIoQueryNetworkOpenInfo) (struct _FILE_OBJECT*, UINT8, struct _FILE_NETWORK_OPEN_INFORMATION*, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0EB0_AcquireForModWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, struct _ERESOURCE**, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0EB6_MdlRead_PrepareMdlWrite) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, ULONG32, struct _MDL**, struct _IO_STATUS_BLOCK*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0EC0_MdlReadComplete_MdlReadCompleteCompressed) (struct _FILE_OBJECT*, struct _MDL*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0EC5_MdlWriteComplete_MdlWriteCompleteCompressed) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, struct _MDL*, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0ECB_FastIoReadCompressed_FastIoWriteCompressed) (struct _FILE_OBJECT*, union _LARGE_INTEGER*, ULONG32, ULONG32, VOID*, struct _MDL**, struct _IO_STATUS_BLOCK*, struct _COMPRESSED_DATA_INFO*, ULONG32, struct _DEVICE_OBJECT*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_0EE0_FastIoQueryOpen) (struct _IRP*, struct _FILE_NETWORK_OPEN_INFORMATION*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0EE5_ReleaseForModWrite) (struct _FILE_OBJECT*, struct _ERESOURCE*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0EEA_AcquireForCcFlush_ReleaseForCcFlush) (struct _FILE_OBJECT*, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0EEE_DriverInit) (struct _DRIVER_OBJECT*, struct _UNICODE_STRING*);
typedef VOID (NEAR CDECL FUNCT_00EF_0EF2_CancelRoutine_DriverStartIo) (struct _DEVICE_OBJECT*, struct _IRP*);
typedef VOID (NEAR CDECL FUNCT_00EF_0EF6_DriverUnload_Function) (struct _DRIVER_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_0EFA_MajorFunction) (struct _DEVICE_OBJECT*, struct _IRP*);
typedef VOID (NEAR CDECL FUNCT_00EF_0F04_TimerRoutine) (struct _DEVICE_OBJECT*, VOID*);
typedef enum _IO_ALLOCATION_ACTION (NEAR CDECL FUNCT_0F1F_0F1E_DeviceRoutine) (struct _DEVICE_OBJECT*, struct _IRP*, VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_0F75_ActiveCooling) (VOID*, UINT8);
typedef VOID (NEAR CDECL FUNCT_00EF_1047_MiniPacketCallback) (struct _IO_MINI_COMPLETION_PACKET_USER*, VOID*);
typedef INT64 (NEAR CDECL FUNCT_00B9_1210_GetCpuClock) ();
typedef LONG32 (NEAR CDECL FUNCT_00A0_12ED_StartProcessorTraceOnEachCore) (UINT64, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset) (VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_12F3_LogProcessorTraceOnCurrentCore_HalIommuEnableDevicePasid_HalIommuDisableDevicePasid_HalIommuUnmapDevice) (VOID*, VOID*);
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY* (NEAR CDECL FUNCT_1562_1577_Callback) (UINT64, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_15D2_UserApcRoutine) (VOID*, struct _IO_STATUS_BLOCK*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_182F_CompletionRoutine) (struct _DEVICE_OBJECT*, struct _IRP*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_184D_NextIrpCallerCompletion_CallerCompletion) (struct _DEVICE_OBJECT*, UINT8, union _POWER_STATE, VOID*, struct _IO_STATUS_BLOCK*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_18C8_AcceptDeviceNotification_AcceptAcpiNotification) (ULONG32, VOID*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_18CC_AcceptProcessorNotification) (struct _PEPHANDLE__*, ULONG32, VOID*);
typedef ULONG32 (NEAR CDECL FUNCT_0009_1A03_ProfileDepartureSetMode) (VOID*, enum _PROFILE_DEPARTURE_STYLE);
typedef ULONG32 (NEAR CDECL FUNCT_0009_1A0C_ProfileDepartureUpdate) (VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_1A4B_ComponentIdleState) (VOID*, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1A4D_PowerControl) (VOID*, struct _GUID*, VOID*, UINT64, VOID*, UINT64, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_1A56_ComponentCriticalTransition_KdUnmapVirtualAddress) (VOID*, ULONG32, UINT8);
typedef VOID (NEAR CDECL FUNCT_00EF_1A5B_DripsWatchdogCallback) (VOID*, struct _DEVICE_OBJECT*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_1A60_DirectedPowerTransitionCallback) (VOID*, UINT8, ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1A6F_PowerOnDumpDeviceCallback) (struct _PEP_CRASHDUMP_INFORMATION*);
typedef VOID (NEAR CDECL FUNCT_00EF_1AC3_ComponentPerfState) (VOID*, ULONG32, UINT8, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_1B97_WorkerRoutine) (VOID*, VOID*, VOID*, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_1C99_DumpProcedure) (VOID*, struct _OBJECT_DUMP_CONTROL*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1CA1_OpenProcedure) (enum _OB_OPEN_REASON, CHAR, struct _EPROCESS*, VOID*, ULONG32*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_1CAF_CloseProcedure) (struct _EPROCESS*, VOID*, UINT64, UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1CB5_ParseProcedure) (VOID*, VOID*, struct _ACCESS_STATE*, CHAR, ULONG32, struct _UNICODE_STRING*, struct _UNICODE_STRING*, VOID*, struct _SECURITY_QUALITY_OF_SERVICE*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1CC1_ParseProcedureEx) (VOID*, VOID*, struct _ACCESS_STATE*, CHAR, ULONG32, struct _UNICODE_STRING*, struct _UNICODE_STRING*, VOID*, struct _SECURITY_QUALITY_OF_SERVICE*, struct _OB_EXTENDED_PARSE_PARAMETERS*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1CD3_SecurityProcedure) (VOID*, enum _SECURITY_OPERATION_CODE, ULONG32*, VOID*, ULONG32*, VOID**, enum _POOL_TYPE, struct _GENERIC_MAPPING*, CHAR);
typedef LONG32 (NEAR CDECL FUNCT_00A0_1CE4_QueryNameProcedure) (VOID*, UINT8, struct _OBJECT_NAME_INFORMATION*, ULONG32, ULONG32*, CHAR);
typedef UINT8 (NEAR CDECL FUNCT_00A9_1CEC_OkayToCloseProcedure) (struct _EPROCESS*, VOID*, VOID*, CHAR);
typedef VOID (NEAR CDECL FUNCT_00EF_1E8A_EnableCallback) (struct _GUID*, ULONG32, UINT8, UINT64, UINT64, struct _EVENT_FILTER_DESCRIPTOR*, VOID*);
typedef struct _CELL_DATA* (NEAR CDECL FUNCT_2445_2444_GetCellRoutine) (struct _HHIVE*, ULONG32, struct _HV_GET_CELL_CONTEXT*);
typedef VOID (NEAR CDECL FUNCT_00EF_249D_ReleaseCellRoutine) (struct _HHIVE*, struct _HV_GET_CELL_CONTEXT*);
typedef VOID* (NEAR CDECL FUNCT_00F2_24A1_Allocate) (ULONG32, UINT8, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_24A6_FileWrite) (struct _HHIVE*, ULONG32, struct _CMP_OFFSET_ARRAY*, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_24B2_FileRead) (struct _HHIVE*, ULONG32, ULONG32, VOID*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_267F_NotificationRoutine) (struct _KENLISTMENT*, VOID*, VOID*, ULONG32, union _LARGE_INTEGER*, ULONG32, VOID*);
typedef enum _RTL_GENERIC_COMPARE_RESULTS (NEAR CDECL FUNCT_26C5_26C4_CompareRoutine) (struct _RTL_AVL_TABLE*, VOID*, VOID*);
typedef VOID* (NEAR CDECL FUNCT_00F2_26CE_AllocateRoutine) (struct _RTL_AVL_TABLE*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_26D2_FreeRoutine) (struct _RTL_AVL_TABLE*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_2845_Callback) (enum _PCW_CALLBACK_TYPE, union _PCW_CALLBACK_INFORMATION*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_2CAD_QueryPlatformStateResidency) (VOID*, struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES*);
typedef VOID (NEAR CDECL FUNCT_00EF_2D94_FlushToLsnRoutine) (VOID*, union _LARGE_INTEGER);
typedef VOID (NEAR CDECL FUNCT_00EF_2D98_QueryLogHandleInfoRoutine) (VOID*, WCHAR*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_2E03_AcquireForLazyWrite_AcquireForReadAhead) (VOID*, UINT8);
typedef VOID (NEAR CDECL FUNCT_00EF_2ECD_Callback) (VOID*, UINT64, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_302E_CommitRoutine) (VOID*, VOID**, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_3270_TrackedOffsetCallback) (struct _IO_IRP_EXT_TRACK_OFFSET_HEADER*, struct _IO_IRP_EXT_TRACK_OFFSET_HEADER*, INT64);
typedef VOID (NEAR CDECL FUNCT_00EF_3414_WorkRoutine) (struct _WHEAP_WORK_QUEUE*, struct _LIST_ENTRY*);
typedef struct _BUS_HANDLER* (NEAR CDECL FUNCT_3A42_3A41_HalHandlerForBus) (enum _INTERFACE_TYPE, ULONG32);
typedef ULONG32 (NEAR CDECL FUNCT_0009_3A81_GetBusData_SetBusData) (struct _BUS_HANDLER*, struct _BUS_HANDLER*, ULONG32, VOID*, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3A89_AdjustResourceList) (struct _BUS_HANDLER*, struct _BUS_HANDLER*, struct _IO_RESOURCE_REQUIREMENTS_LIST**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3A8F_AssignSlotResources) (struct _BUS_HANDLER*, struct _BUS_HANDLER*, struct _UNICODE_STRING*, struct _UNICODE_STRING*, struct _DRIVER_OBJECT*, struct _DEVICE_OBJECT*, ULONG32, struct _CM_RESOURCE_LIST**);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3A9A_TranslateBusAddress) (struct _BUS_HANDLER*, struct _BUS_HANDLER*, union _LARGE_INTEGER, ULONG32*, union _LARGE_INTEGER*);
typedef struct _BUS_HANDLER* (NEAR CDECL FUNCT_3A42_3AA1_HalHandlerForConfigSpace) (enum _BUS_DATA_TYPE, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AAF) (struct _BUS_HANDLER*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AA5_HalRegisterBusHandler) (enum _INTERFACE_TYPE, enum _BUS_DATA_TYPE, ULONG32, enum _INTERFACE_TYPE, ULONG32, ULONG32, FUNCT_00A0_3AAF*, struct _BUS_HANDLER**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AAF) (struct _BUS_HANDLER*);
typedef VOID (NEAR CDECL FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers) (UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AB6_HalSetWakeAlarm) (UINT64, UINT64);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3ABA_HalPciTranslateBusAddress) (enum _INTERFACE_TYPE, ULONG32, union _LARGE_INTEGER, ULONG32*, union _LARGE_INTEGER*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AC1_HalPciAssignSlotResources) (struct _UNICODE_STRING*, struct _UNICODE_STRING*, struct _DRIVER_OBJECT*, struct _DEVICE_OBJECT*, enum _INTERFACE_TYPE, ULONG32, ULONG32, struct _CM_RESOURCE_LIST**);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3ACB_HalFindBusAddressTranslation) (union _LARGE_INTEGER, ULONG32*, union _LARGE_INTEGER*, UINT64*, UINT8);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled) ();
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AD4_HalAllocateMapRegisters) (struct _ADAPTER_OBJECT*, ULONG32, ULONG32, struct _MAP_REGISTER_ENTRY*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3AE0_KdSetupPciDeviceForDebugging_KdSetupIntegratedDeviceForDebugging) (VOID*, struct _DEBUG_DEVICE_DESCRIPTOR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3B1A_KdReleasePciDeviceForDebugging_KdReleaseIntegratedDeviceForDebugging) (struct _DEBUG_DEVICE_DESCRIPTOR*);
typedef VOID* (NEAR CDECL FUNCT_00F2_3B1D_KdGetAcpiTablePhase0) (struct _LOADER_PARAMETER_BLOCK*, ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3CCA_HalVectorToIDTEntry_HalIommuProcessPageRequestQueue) (ULONG32);
typedef VOID* (NEAR CDECL FUNCT_00F2_3CCD_KdMapPhysicalMemory64) (union _LARGE_INTEGER, ULONG32, UINT8);
typedef ULONG32 (NEAR CDECL FUNCT_0009_3CD2_KdGetPciDataByOffset_KdSetPciDataByOffset) (ULONG32, ULONG32, VOID*, ULONG32, ULONG32);
typedef ULONG32 (NEAR CDECL FUNCT_0009_3CD9_HalGetInterruptVectorOverride) (enum _INTERFACE_TYPE, ULONG32, ULONG32, ULONG32, UINT8*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3CE1_HalGetVectorInputOverride) (ULONG32, struct _GROUP_AFFINITY*, ULONG32*, enum _KINTERRUPT_POLARITY*, struct _INTERRUPT_REMAPPING_INFO*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled) ();
typedef LONG32 (NEAR CDECL FUNCT_00A0_3CF9_HalAllocateMessageTargetOverride) (struct _DEVICE_OBJECT*, struct _GROUP_AFFINITY*, ULONG32, enum _KINTERRUPT_MODE, UINT8, ULONG32*, UINT8*, ULONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D03_HalFreeMessageTargetOverride) (struct _DEVICE_OBJECT*, ULONG32, struct _GROUP_AFFINITY*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3D08_HalDpReplaceBegin) (struct _HAL_DP_REPLACE_PARAMETERS*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3D18_HalDpReplaceControl_StartVirtualProcessor) (ULONG32, VOID*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine) (ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3D1C_HalQueryWakeTime) (UINT64*, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D20_HalReportIdleStateUsage) (UINT8, struct _KAFFINITY_EX*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D25_HalTscSynchronization) (UINT8, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3D29_HalWheaInitProcessorGenericSection) (struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR*, struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D50_HalStopLegacyUsbInterrupts) (enum _SYSTEM_POWER_STATE);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3D53_HalReadWheaPhysicalMemory_HalWriteWheaPhysicalMemory) (union _LARGE_INTEGER, ULONG32, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3D58_HalDpGetInterruptReplayState) (VOID*, VOID**);
typedef VOID (NEAR CDECL FUNCT_00EF_3D5C_HalGetEnlightenmentInformation) (struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION*);
typedef VOID (NEAR CDECL FUNCT_00EF_3D9F_ApicWriteIcr) (ULONG32, ULONG32);
typedef UINT64 (NEAR CDECL FUNCT_0004_3DA3_HalTimerWatchdogQueryDueTime_GetReferenceTime_GetQpcBias) ();
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DA5_SetSystemSleepProperty) (UINT32, UINT8, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DAA_EnterSleepState) (UINT32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DAD_MapDeviceInterrupt) (UINT64, VOID*, struct _GROUP_AFFINITY*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DB3_UnmapDeviceInterrupt) (UINT64, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DB5_RetargetDeviceInterrupt) (UINT64, VOID*, VOID*, struct _GROUP_AFFINITY*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DBC_SetHpetConfig) (union _LARGE_INTEGER, ULONG32, UINT64, UINT8, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DC3_HalGetProcessorId_QueryAssociatedProcessors) (ULONG32, ULONG32*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DC8_ReadMultipleMsr_WriteMultipleMsr) (ULONG32, ULONG32, ULONG32*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DCE_ReadCpuid) (ULONG32, ULONG32, ULONG32*, ULONG32*, ULONG32*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled) (ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DD8_GetMachineCheckContext) (ULONG32, UINT32*, UINT64*, UINT32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain) (UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DE1_WheaErrorNotification) (struct _WHEA_RECOVERY_CONTEXT*, UINT8, UINT8);
typedef ULONG32 (NEAR CDECL FUNCT_0009_3DF1_HalVectorToIDTEntryEx_GetProcessorIndexFromVpIndex) (ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DF3_SyntheticClusterIpi) (struct _KAFFINITY_EX*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DF7_HalStartLastBranchRecord_GetVpIndexFromApicId) (ULONG32, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3DFB_IumAccessPciDevice) (UINT8, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, ULONG32, VOID*);
typedef UINT64 (NEAR CDECL FUNCT_0004_3E05_IumEfiRuntimeService) (ULONG32, VOID*, UINT64, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_3E0B_SvmGetSystemCapabilities) (struct _HAL_HV_SVM_SYSTEM_CAPABILITIES*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E17_SvmGetDeviceCapabilities) (ULONG32, struct _HAL_HV_SVM_DEVICE_CAPABILITIES*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid) (ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E26_SvmSetPasidAddressSpace) (ULONG32, ULONG32, UINT64);
typedef VOID (NEAR CDECL FUNCT_00EF_3E2B_SvmFlushPasid) (ULONG32, ULONG32, ULONG32, struct _KTB_FLUSH_VA*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E39_SvmAttachPasidSpace) (ULONG32, ULONG32, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E3F_SvmAcknowledgePageRequest) (ULONG32, VOID*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E44_SvmCreatePrQueue) (ULONG32, ULONG32, union _LARGE_INTEGER, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E4B_SvmSetDeviceEnabled) (ULONG32, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E4F_HalTimerWatchdogTriggerSystemReset_HvDebuggerPowerHandler) (UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E51_RegisterDeviceId) (struct _EXT_IOMMU_DEVICE_ID*, UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E78_AllocateDeviceDomain_DeleteDeviceDomain) (struct _HAL_HV_DMA_DOMAIN_INFO*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E7F_AttachDeviceDomain) (struct _EXT_IOMMU_DEVICE_ID*, struct _HAL_HV_DMA_DOMAIN_INFO*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E83_MapDeviceLogicalRange) (struct _HAL_HV_DMA_DOMAIN_INFO*, ULONG32, UINT64, UINT64*, UINT64*, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E8B_UnmapDeviceLogicalRange) (struct _HAL_HV_DMA_DOMAIN_INFO*, UINT64, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E90_MapDeviceSparsePages) (struct _HAL_HV_DMA_DOMAIN_INFO*, ULONG32, UINT64*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E96_UnmapDeviceSparsePages) (struct _HAL_HV_DMA_DOMAIN_INFO*, UINT64*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E9B_GetDmaGuardEnabled) (UINT8*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3E9E_UpdateMicrocode) (VOID*, UINT32);
typedef VOID* (NEAR CDECL FUNCT_00F2_3EA2_HalAllocateEarlyPages) (struct _LOADER_PARAMETER_BLOCK*, ULONG32, UINT64*, ULONG32);
typedef VOID* (NEAR CDECL FUNCT_00F2_3EA8_HalMapEarlyPages) (UINT64, ULONG32, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_3EAD_HalNotifyProcessorFreeze) (UINT8, UINT8);
typedef VOID (NEAR CDECL FUNCT_00EF_3EB1_HalRegisterLogRoutine) (struct _HAL_LOG_REGISTER_CONTEXT*);
typedef VOID (NEAR CDECL FUNCT_00EF_3EB8_LogRoutine) (ULONG32, VOID*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3EBD_HalSecondaryInterruptQueryPrimaryInformation_HalInterruptVectorDataToGsiv) (struct _INTERRUPT_VECTOR_DATA*, ULONG32*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3EFD_HalIsInterruptTypeSecondary) (ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3EFF_HalAllocateGsivForSecondaryInterrupt) (CHAR*, UINT16, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F04_HalAddInterruptRemapping) (ULONG32, ULONG32, struct _PCI_BUSMASTER_DESCRIPTOR*, UINT8, struct _INTERRUPT_VECTOR_DATA*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_3F1F_HalRemoveInterruptRemapping) (ULONG32, ULONG32, struct _PCI_BUSMASTER_DESCRIPTOR*, UINT8, struct _INTERRUPT_VECTOR_DATA*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_3F21_HalFlushIoBuffersExternalCache) (struct _MDL*, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F25_HalPciEarlyRestore) (enum _SYSTEM_POWER_STATE);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F27_HalAllocatePmcCounterSet) (ULONG32, enum _KPROFILE_SOURCE*, ULONG32, struct _HAL_PMC_COUNTERS**);
typedef VOID (NEAR CDECL FUNCT_00EF_3F2F_HalCollectPmcCounters) (struct _HAL_PMC_COUNTERS*, UINT64*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F33_HalFreePmcCounterSet) (struct _HAL_PMC_COUNTERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F36_HalProcessorHalt) (ULONG32, VOID*, FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset*);
typedef UINT64 (NEAR CDECL FUNCT_0004_3F3B_HalTimerQueryCycleCounter) (UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F3D_HalQueryProcessorRestartEntryPoint) (union _LARGE_INTEGER*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3F45) (VOID*, struct _HAL_UNMASKED_INTERRUPT_INFORMATION*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F40_HalEnumerateUnmaskedInterrupts) (FUNCT_00A9_3F45*, VOID*, struct _HAL_UNMASKED_INTERRUPT_INFORMATION*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_3F45) (VOID*, struct _HAL_UNMASKED_INTERRUPT_INFORMATION*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F57_HalFlushAndInvalidatePageExternalCache) (union _LARGE_INTEGER);
typedef enum _KD_CALLBACK_ACTION (NEAR CDECL FUNCT_3F60_3F5F) (struct _DEBUG_DEVICE_DESCRIPTOR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F5A_KdEnumerateDebuggingDevices) (VOID*, struct _DEBUG_DEVICE_DESCRIPTOR*, FUNCT_3F60_3F5F*);
typedef enum _KD_CALLBACK_ACTION (NEAR CDECL FUNCT_3F60_3F5F) (struct _DEBUG_DEVICE_DESCRIPTOR*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F66_HalFlushIoRectangleExternalCache) (struct _MDL*, ULONG32, ULONG32, ULONG32, ULONG32, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F6E_HalQueryCapsuleCapabilities) (VOID*, ULONG32, UINT64*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F74_HalUpdateCapsule) (VOID*, ULONG32, union _LARGE_INTEGER);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F79_HalInterruptSetDestination) (struct _INTERRUPT_VECTOR_DATA*, struct _GROUP_AFFINITY*, ULONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F7E_HalGetClockConfiguration) (struct _HAL_CLOCK_TIMER_CONFIGURATION*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3F8C_HalClockTimerArm) (enum _HAL_CLOCK_TIMER_MODE, UINT64, UINT64*);
typedef VOID* (NEAR CDECL FUNCT_00F2_3F95_HalAcpiGetMultiNode_HalTimerGetReferencePage) ();
typedef VOID (NEAR CDECL FUNCT_00EF_3F9A) (ULONG32, LONG32*);
typedef FUNCT_00EF_3F9A* (NEAR CDECL FUNCT_3F98_3F97_HalPowerSetRebootHandler) (FUNCT_00EF_3F9A*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F9A) (ULONG32, LONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_3F9E_HalIommuRegisterDispatchTable) (struct _HAL_IOMMU_DISPATCH*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FB6_HalIommuGetConfiguration) (ULONG32, ULONG32*, ULONG32*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FBC_HalIommuGetLibraryContext) (ULONG32, ULONG32, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FC1_HalIommuMapDevice) (VOID*, struct _EXT_IOMMU_DEVICE_ID*, union _IOMMU_SVM_CAPABILITIES*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FD6_HalIommuSetAddressSpace) (VOID*, UINT64);
typedef VOID (NEAR CDECL FUNCT_00EF_3FDA_HalIommuFlushTb_HalIommuFlushAllPasid) (VOID*, ULONG32, struct _KTB_FLUSH_VA*);
typedef VOID* (NEAR CDECL FUNCT_00F2_3FDF_HalIommuReferenceAsid) (ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FE1_HalIommuServicePageFault) (UINT64, VOID*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FE6_HalIommuDevicePowerChange) (VOID*, VOID*, UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FEB_HalRequestGenericErrorRecovery_HalIommuBeginDeviceReset) (VOID*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FEF_HalInterruptGetHighestPriorityInterrupt) (ULONG32*, UINT8*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FF3_HalDmaLinkDeviceObjectByToken) (UINT64, struct _DEVICE_OBJECT*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FF7_HalTimerConvertPerformanceCounterToAuxiliaryCounter_HalTimerConvertAuxiliaryCounterToPerformanceCounter) (UINT64, UINT64*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FFC_HalTimerQueryAuxiliaryCounterFrequency_KdWatchdogDelayExpiration_HalTimerQueryHostPerformanceCounter) (UINT64*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_4001_ServiceRoutine) (struct _KINTERRUPT*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_3FFE_HalConnectThermalInterrupt_HalConnectSyntheticInterrupt) (FUNCT_00A9_4001_ServiceRoutine*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_4001_ServiceRoutine) (struct _KINTERRUPT*, VOID*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_4029_MessageServiceRoutine) (struct _KINTERRUPT*, VOID*, ULONG32);
typedef UINT8 (NEAR CDECL FUNCT_00A9_403D_HalTimerQueryAndResetRtcErrors) (UINT8);
typedef LONG32 (NEAR CDECL FUNCT_00A0_403F_HalGetProcessorStats) (enum _HAL_PROCESSOR_STAT_TYPE, ULONG32, ULONG32, UINT64*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_404F) (struct _GUID*, WCHAR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4049_HalEnumerateEnvironmentVariablesWithFilter) (ULONG32, FUNCT_00A9_404F*, VOID*, ULONG32*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_404F) (struct _GUID*, WCHAR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4053_HalCaptureLastBranchRecordStack) (ULONG32, struct _HAL_LBR_ENTRY*, ULONG32*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_405D_HalGetLastBranchInformation) (ULONG32*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4061_HalIommuUnblockDevice) (struct _EXT_IOMMU_DEVICE_ID*, VOID**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4065_HalGetIommuInterface) (ULONG32, struct _DMA_IOMMU_INTERFACE*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4079_CreateDomain) (UINT8, struct _IOMMU_DMA_DOMAIN**);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4080_DeleteDomain_FlushDomain) (struct _IOMMU_DMA_DOMAIN*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4083_AttachDevice) (struct _IOMMU_DMA_DOMAIN*, struct _DEVICE_OBJECT*, ULONG32, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4089_DetachDevice) (struct _IOMMU_DMA_DOMAIN*, struct _DEVICE_OBJECT*, ULONG32);
typedef LONG32 (NEAR CDECL FUNCT_00A0_408E_FlushDomainByVaList) (struct _IOMMU_DMA_DOMAIN*, UINT8, ULONG32, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4094_QueryInputMappings) (struct _DEVICE_OBJECT*, struct _INPUT_MAPPING_ELEMENT*, ULONG32, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_409D_MapLogicalRange) (struct _IOMMU_DMA_DOMAIN*, ULONG32, struct _MDL*, UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40A3_UnmapLogicalRange) (struct _IOMMU_DMA_DOMAIN*, UINT64, UINT64);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40A8_MapIdentityRange) (struct _IOMMU_DMA_DOMAIN*, ULONG32, struct _MDL*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40AD_UnmapIdentityRange) (struct _IOMMU_DMA_DOMAIN*, struct _MDL*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40B1_SetDeviceFaultReporting) (struct _DEVICE_OBJECT*, ULONG32, UINT8, struct _DEVICE_FAULT_CONFIGURATION*);
typedef VOID (NEAR CDECL FUNCT_00EF_40BB_FaultHandler) (VOID*, struct _FAULT_INFORMATION*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40DC_ConfigureDomain) (struct _IOMMU_DMA_DOMAIN*, struct _DOMAIN_CONFIGURATION*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_40F0_HalTopologyQueryProcessorRelationships) (ULONG32, ULONG32, UINT8*, UINT8*, UINT8*, ULONG32*, ULONG32*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_43FE_ArbiterHandler) (VOID*, enum _ARBITER_ACTION, struct _ARBITER_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_445F_UnpackRequirement) (struct _IO_RESOURCE_DESCRIPTOR*, UINT64*, UINT64*, UINT64*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4466_PackResource) (struct _IO_RESOURCE_DESCRIPTOR*, UINT64, struct _CM_PARTIAL_RESOURCE_DESCRIPTOR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_446B_UnpackResource) (struct _CM_PARTIAL_RESOURCE_DESCRIPTOR*, UINT64*, UINT64*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4470_ScoreRequirement) (struct _IO_RESOURCE_DESCRIPTOR*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4473_TestAllocation) (struct _ARBITER_INSTANCE*, struct _ARBITER_TEST_ALLOCATION_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4479_RetestAllocation) (struct _ARBITER_INSTANCE*, struct _ARBITER_RETEST_ALLOCATION_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_447E_CommitAllocation_RollbackAllocation) (struct _ARBITER_INSTANCE*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4481_BootAllocation) (struct _ARBITER_INSTANCE*, struct _ARBITER_BOOT_ALLOCATION_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4486_QueryArbitrate) (struct _ARBITER_INSTANCE*, struct _ARBITER_QUERY_ARBITRATE_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_448B_QueryConflict) (struct _ARBITER_INSTANCE*, struct _ARBITER_QUERY_CONFLICT_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4490_AddReserved) (struct _ARBITER_INSTANCE*, struct _ARBITER_ADD_RESERVED_PARAMETERS*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4495_StartArbiter) (struct _ARBITER_INSTANCE*, struct _CM_RESOURCE_LIST*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4499_PreprocessEntry_AllocateEntry) (struct _ARBITER_INSTANCE*, struct _ARBITER_ALLOCATION_STATE*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_449D_GetNextAllocationRange_FindSuitableRange_OverrideConflict) (struct _ARBITER_INSTANCE*, struct _ARBITER_ALLOCATION_STATE*);
typedef VOID (NEAR CDECL FUNCT_00EF_449F_AddAllocation_BacktrackAllocation) (struct _ARBITER_INSTANCE*, struct _ARBITER_ALLOCATION_STATE*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_44A1_InitializeRangeList) (struct _ARBITER_INSTANCE*, ULONG32, struct _CM_PARTIAL_RESOURCE_DESCRIPTOR*, struct _RTL_RANGE_LIST*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_44A7_DeleteOwnerRanges) (struct _ARBITER_INSTANCE*, VOID*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_44AB_ConflictCallback) (VOID*, struct _RTL_RANGE*);
typedef VOID (NEAR CDECL FUNCT_00EF_459F_Callback) (struct _KTIMER2*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_46B2_Callback) (struct _OBJECT_SYMBOLIC_LINK*, VOID*, struct _UNICODE_STRING*, VOID**);
typedef VOID (NEAR CDECL FUNCT_00EF_47CE_Routine) (VOID*, VOID*, struct _IO_WORKITEM*);
typedef UINT8 (NEAR CDECL FUNCT_00A9_4AE6_OpenRoutine) (union _LARGE_INTEGER);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4AE8_WriteRoutine) (union _LARGE_INTEGER*, struct _MDL*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4AEC_WritePendingRoutine) (LONG32, union _LARGE_INTEGER*, struct _MDL*, VOID*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4AFA_ReadRoutine) (LONG32, union _LARGE_INTEGER*, struct _MDL*);
typedef LONG32 (NEAR CDECL FUNCT_00A0_4AFF_GetDriveTelemetryRoutine) (ULONG32, ULONG32, VOID*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_4B05_GetTransferSizesRoutine) (ULONG32*, ULONG32*);
typedef VOID (NEAR CDECL FUNCT_00EF_4B07_DumpNotifyRoutine) (enum _DUMP_EVENTS, VOID*, ULONG32);
typedef VOID (NEAR CDECL FUNCT_00EF_4C0B_CompletionRoutine) (VOID*, struct _IRP*);

//------------------------------------------------------------------------
//------------------------------------------------------------------------
// Declaration of Structure types

          typedef struct __WIL__WNF_STATE_NAME // 1 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Data[2];                                              
          }_WIL__WNF_STATE_NAME, *P_WIL__WNF_STATE_NAME;                                  
                                                                                 
          typedef struct _GUID       // 4 elements, 0x10 bytes (sizeof) 
          {                                                             
/*0x000*/     ULONG32      Data1;                                       
/*0x004*/     UINT16       Data2;                                       
/*0x006*/     UINT16       Data3;                                       
/*0x008*/     UINT8        Data4[8];                                    
          }GUID, *PGUID;                                                
                                                                        
          typedef struct __WIL__WNF_TYPE_ID // 1 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _GUID TypeId;          // 4 elements, 0x10 bytes (sizeof) 
          }_WIL__WNF_TYPE_ID, *P_WIL__WNF_TYPE_ID;                                   
                                                                               
typedef struct __WIL__WNF_USER_SUBSCRIPTION // 0 elements, 0x0 bytes (sizeof) 
{                                                                             
}_WIL__WNF_USER_SUBSCRIPTION, *P_WIL__WNF_USER_SUBSCRIPTION;                                  
                                                                              
          typedef struct _ACCESS_REASONS // 1 elements, 0x80 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      Data[32];                                        
          }ACCESS_REASONS, *PACCESS_REASONS;                                   
                                                                            
          typedef struct _LUID       // 2 elements, 0x8 bytes (sizeof) 
          {                                                            
/*0x000*/     ULONG32      LowPart;                                    
/*0x004*/     LONG32       HighPart;                                   
          }LUID, *PLUID;                                               
                                                                       
          typedef struct _SECURITY_SUBJECT_CONTEXT                   // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                             
/*0x000*/     VOID*        ClientToken;                                                                 
/*0x008*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                    
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                             
/*0x010*/     VOID*        PrimaryToken;                                                                
/*0x018*/     VOID*        ProcessAuditId;                                                              
          }SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;                                        
                                                                                                        
          typedef struct _LUID_AND_ATTRIBUTES // 2 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _LUID Luid;              // 2 elements, 0x8 bytes (sizeof) 
/*0x008*/     ULONG32      Attributes;                                          
          }LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;                                  
                                                                                
          typedef struct _INITIAL_PRIVILEGE_SET         // 3 elements, 0x2C bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[3];                                    
          }INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET;                                   
                                                                                           
          typedef struct _PRIVILEGE_SET                 // 3 elements, 0x14 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      PrivilegeCount;                                                 
/*0x004*/     ULONG32      Control;                                                        
/*0x008*/     struct _LUID_AND_ATTRIBUTES Privilege[1];                                    
          }PRIVILEGE_SET, *PPRIVILEGE_SET;                                                 
                                                                                           
          typedef struct _UNICODE_STRING    // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     WCHAR*       Buffer;                                             
          }UNICODE_STRING, *PUNICODE_STRING;                                   
                                                                               
          typedef struct _ACCESS_STATE                                 // 16 elements, 0xA0 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _LUID OperationID;                                // 2 elements, 0x8 bytes (sizeof)   
/*0x008*/     UINT8        SecurityEvaluated;                                                              
/*0x009*/     UINT8        GenerateAudit;                                                                  
/*0x00A*/     UINT8        GenerateOnClose;                                                                
/*0x00B*/     UINT8        PrivilegesAllocated;                                                            
/*0x00C*/     ULONG32      Flags;                                                                          
/*0x010*/     ULONG32      RemainingDesiredAccess;                                                         
/*0x014*/     ULONG32      PreviouslyGrantedAccess;                                                        
/*0x018*/     ULONG32      OriginalDesiredAccess;                                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x020*/     struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext; // 4 elements, 0x20 bytes (sizeof)  
/*0x040*/     VOID*        SecurityDescriptor;                                                             
/*0x048*/     VOID*        AuxData;                                                                        
              union                                                    // 2 elements, 0x2C bytes (sizeof)  
              {                                                                                            
/*0x050*/         struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;   // 3 elements, 0x2C bytes (sizeof)  
/*0x050*/         struct _PRIVILEGE_SET PrivilegeSet;                  // 3 elements, 0x14 bytes (sizeof)  
              }Privileges;                                                                                 
/*0x07C*/     UINT8        AuditPrivileges;                                                                
/*0x07D*/     UINT8        _PADDING1_[0x3];                                                                
/*0x080*/     struct _UNICODE_STRING ObjectName;                       // 3 elements, 0x10 bytes (sizeof)  
/*0x090*/     struct _UNICODE_STRING ObjectTypeName;                   // 3 elements, 0x10 bytes (sizeof)  
          }ACCESS_STATE, *PACCESS_STATE;                                                                   
                                                                                                           
          typedef struct _ACL           // 5 elements, 0x8 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT8        AclRevision;                                   
/*0x001*/     UINT8        Sbz1;                                          
/*0x002*/     UINT16       AclSize;                                       
/*0x004*/     UINT16       AceCount;                                      
/*0x006*/     UINT16       Sbz2;                                          
          }ACL, *PACL;                                                    
                                                                          
          typedef struct _ACPI_METHOD_ARGUMENT_V1 // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Type;                                                    
/*0x002*/     UINT16       DataLength;                                              
              union                               // 2 elements, 0x4 bytes (sizeof) 
              {                                                                     
/*0x004*/         ULONG32      Argument;                                            
/*0x004*/         UINT8        Data[1];                                             
              };                                                                    
          }ACPI_METHOD_ARGUMENT_V1, *PACPI_METHOD_ARGUMENT_V1;                                  
                                                                                    
typedef struct _ACTIVATION_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}ACTIVATION_CONTEXT, *PACTIVATION_CONTEXT;                                  
                                                                     
typedef struct _ACTIVATION_CONTEXT_DATA // 0 elements, 0x0 bytes (sizeof) 
{                                                                         
}ACTIVATION_CONTEXT_DATA, *PACTIVATION_CONTEXT_DATA;                                  
                                                                          
          typedef struct _LIST_ENTRY     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     struct _LIST_ENTRY* Flink;                                    
/*0x008*/     struct _LIST_ENTRY* Blink;                                    
          }LIST_ENTRY, *PLIST_ENTRY;                                        
                                                                            
          typedef struct _ACTIVATION_CONTEXT_STACK                     // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;                                    
/*0x008*/     struct _LIST_ENTRY FrameListCache;                       // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     ULONG32      Flags;                                                                         
/*0x01C*/     ULONG32      NextCookieSequenceNumber;                                                      
/*0x020*/     ULONG32      StackId;                                                                       
/*0x024*/     UINT8        _PADDING0_[0x4];                                                               
          }ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK;                                          
                                                                                                          
          typedef struct _LIST_ENTRY32 // 2 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Flink;                                        
/*0x004*/     ULONG32      Blink;                                        
          }LIST_ENTRY32, *PLIST_ENTRY32;                                  
                                                                         
          typedef struct _ACTIVATION_CONTEXT_STACK32 // 5 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      ActiveFrame;                                                 
/*0x004*/     struct _LIST_ENTRY32 FrameListCache;   // 2 elements, 0x8 bytes (sizeof)  
/*0x00C*/     ULONG32      Flags;                                                       
/*0x010*/     ULONG32      NextCookieSequenceNumber;                                    
/*0x014*/     ULONG32      StackId;                                                     
          }ACTIVATION_CONTEXT_STACK32, *PACTIVATION_CONTEXT_STACK32;                                   
                                                                                        
          typedef struct _LIST_ENTRY64 // 2 elements, 0x10 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT64       Flink;                                         
/*0x008*/     UINT64       Blink;                                         
          }LIST_ENTRY64, *PLIST_ENTRY64;                                   
                                                                          
          typedef struct _ACTIVATION_CONTEXT_STACK64 // 5 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       ActiveFrame;                                                 
/*0x008*/     struct _LIST_ENTRY64 FrameListCache;   // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     ULONG32      Flags;                                                       
/*0x01C*/     ULONG32      NextCookieSequenceNumber;                                    
/*0x020*/     ULONG32      StackId;                                                     
/*0x024*/     UINT8        _PADDING0_[0x4];                                             
          }ACTIVATION_CONTEXT_STACK64, *PACTIVATION_CONTEXT_STACK64;                                   
                                                                                        
typedef struct _ADAPTER_OBJECT // 0 elements, 0x0 bytes (sizeof) 
{                                                                
}ADAPTER_OBJECT, *PADAPTER_OBJECT;                                  
                                                                 
          typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS                  // 9 elements, 0x2 bytes (sizeof) 
          {                                                                                             
              struct                                                  // 8 elements, 0x2 bytes (sizeof) 
              {                                                                                         
/*0x000*/         UINT16       UncorrectableErrorMaskRW : 1;          // 0 BitPosition                  
/*0x000*/         UINT16       UncorrectableErrorSeverityRW : 1;      // 1 BitPosition                  
/*0x000*/         UINT16       CorrectableErrorMaskRW : 1;            // 2 BitPosition                  
/*0x000*/         UINT16       AdvancedCapsAndControlRW : 1;          // 3 BitPosition                  
/*0x000*/         UINT16       SecondaryUncorrectableErrorMaskRW : 1; // 4 BitPosition                  
/*0x000*/         UINT16       SecondaryUncorrectableErrorSevRW : 1;  // 5 BitPosition                  
/*0x000*/         UINT16       SecondaryCapsAndControlRW : 1;         // 6 BitPosition                  
/*0x000*/         UINT16       Reserved : 9;                          // 7 BitPosition                  
              };                                                                                        
/*0x000*/     UINT16       AsUSHORT;                                                                    
          }AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS;                                  
                                                                                                        
          typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS           // 6 elements, 0x2 bytes (sizeof) 
          {                                                                                        
              struct                                             // 5 elements, 0x2 bytes (sizeof) 
              {                                                                                    
/*0x000*/         UINT16       UncorrectableErrorMaskRW : 1;     // 0 BitPosition                  
/*0x000*/         UINT16       UncorrectableErrorSeverityRW : 1; // 1 BitPosition                  
/*0x000*/         UINT16       CorrectableErrorMaskRW : 1;       // 2 BitPosition                  
/*0x000*/         UINT16       AdvancedCapsAndControlRW : 1;     // 3 BitPosition                  
/*0x000*/         UINT16       Reserved : 12;                    // 4 BitPosition                  
              };                                                                                   
/*0x000*/     UINT16       AsUSHORT;                                                               
          }AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS;                                  
                                                                                                   
          typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS           // 7 elements, 0x2 bytes (sizeof) 
          {                                                                                        
              struct                                             // 6 elements, 0x2 bytes (sizeof) 
              {                                                                                    
/*0x000*/         UINT16       UncorrectableErrorMaskRW : 1;     // 0 BitPosition                  
/*0x000*/         UINT16       UncorrectableErrorSeverityRW : 1; // 1 BitPosition                  
/*0x000*/         UINT16       CorrectableErrorMaskRW : 1;       // 2 BitPosition                  
/*0x000*/         UINT16       AdvancedCapsAndControlRW : 1;     // 3 BitPosition                  
/*0x000*/         UINT16       RootErrorCommandRW : 1;           // 4 BitPosition                  
/*0x000*/         UINT16       Reserved : 11;                    // 5 BitPosition                  
              };                                                                                   
/*0x000*/     UINT16       AsUSHORT;                                                               
          }AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS;                                  
                                                                                                   
          typedef struct _EVENT_PAYLOAD_PREDICATE // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT16       FieldIndex;                                               
/*0x002*/     UINT16       CompareOp;                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                          
/*0x008*/     UINT64       Value[2];                                                 
          }EVENT_PAYLOAD_PREDICATE, *PEVENT_PAYLOAD_PREDICATE;                                   
                                                                                     
          typedef struct _AGGREGATED_PAYLOAD_FILTER              // 18 elements, 0x50 bytes (sizeof) 
          {                                                                                          
              struct                                             // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                      
/*0x000*/         UINT16       MagicValue : 12;                  // 0 BitPosition                    
/*0x000*/         UINT16       DescriptorVersion : 4;            // 12 BitPosition                   
              };                                                                                     
/*0x002*/     UINT16       Size;                                                                     
/*0x004*/     UINT16       PredicateCount;                                                           
/*0x006*/     UINT16       Reserved;                                                                 
/*0x008*/     UINT64       HashedEventIdBitmap;                                                      
/*0x010*/     struct _GUID ProviderGuid;                         // 4 elements, 0x10 bytes (sizeof)  
/*0x020*/     UINT16       EachEventTableOffset;                                                     
/*0x022*/     UINT16       EachEventTableLength;                                                     
/*0x024*/     UINT16       PayloadDecoderTableOffset;                                                
/*0x026*/     UINT16       PayloadDecoderTableLength;                                                
/*0x028*/     UINT16       EventFilterTableOffset;                                                   
/*0x02A*/     UINT16       EventFilterTableLength;                                                   
/*0x02C*/     UINT16       UNICODEStringTableOffset;                                                 
/*0x02E*/     UINT16       UNICODEStringTableLength;                                                 
/*0x030*/     UINT16       ANSIStringTableOffset;                                                    
/*0x032*/     UINT16       ANSIStringTableLength;                                                    
/*0x034*/     UINT8        _PADDING0_[0x4];                                                          
/*0x038*/     struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];                                     
          }AGGREGATED_PAYLOAD_FILTER, *PAGGREGATED_PAYLOAD_FILTER;                                    
                                                                                                     
          typedef struct _EX_PUSH_LOCK                 // 7 elements, 0x8 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x8 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x8 bytes (sizeof) 
                  {                                                                      
/*0x000*/             UINT64       Locked : 1;         // 0 BitPosition                  
/*0x000*/             UINT64       Waiting : 1;        // 1 BitPosition                  
/*0x000*/             UINT64       Waking : 1;         // 2 BitPosition                  
/*0x000*/             UINT64       MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             UINT64       Shared : 60;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         UINT64       Value;                                                    
/*0x000*/         VOID*        Ptr;                                                      
              };                                                                         
          }EX_PUSH_LOCK, *PEX_PUSH_LOCK;                                                 
                                                                                         
          typedef struct _ALPC_HANDLE_TABLE       // 4 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _ALPC_HANDLE_ENTRY* Handles;                                    
/*0x008*/     ULONG32      TotalHandles;                                             
/*0x00C*/     ULONG32      Flags;                                                    
/*0x010*/     struct _EX_PUSH_LOCK Lock;          // 7 elements, 0x8 bytes (sizeof)  
          }ALPC_HANDLE_TABLE, *PALPC_HANDLE_TABLE;                                   
                                                                                     
          typedef struct _ALPC_COMMUNICATION_INFO         // 6 elements, 0x48 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _ALPC_PORT* ConnectionPort;                                             
/*0x008*/     struct _ALPC_PORT* ServerCommunicationPort;                                    
/*0x010*/     struct _ALPC_PORT* ClientCommunicationPort;                                    
/*0x018*/     struct _LIST_ENTRY CommunicationList;       // 2 elements, 0x10 bytes (sizeof) 
/*0x028*/     struct _ALPC_HANDLE_TABLE HandleTable;      // 4 elements, 0x18 bytes (sizeof) 
/*0x040*/     struct _KALPC_MESSAGE* CloseMessage;                                           
          }ALPC_COMMUNICATION_INFO, *PALPC_COMMUNICATION_INFO;                                   
                                                                                             
          typedef struct _ALPC_COMPLETION_LIST             // 21 elements, 0xA0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY Entry;                    // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _EPROCESS* OwnerProcess;                                                  
/*0x018*/     struct _EX_PUSH_LOCK CompletionListLock;     // 7 elements, 0x8 bytes (sizeof)   
/*0x020*/     struct _MDL* Mdl;                                                                
/*0x028*/     VOID*        UserVa;                                                             
/*0x030*/     VOID*        UserLimit;                                                          
/*0x038*/     VOID*        DataUserVa;                                                         
/*0x040*/     VOID*        SystemVa;                                                           
/*0x048*/     UINT64       TotalSize;                                                          
/*0x050*/     struct _ALPC_COMPLETION_LIST_HEADER* Header;                                     
/*0x058*/     VOID*        List;                                                               
/*0x060*/     UINT64       ListSize;                                                           
/*0x068*/     VOID*        Bitmap;                                                             
/*0x070*/     UINT64       BitmapSize;                                                         
/*0x078*/     VOID*        Data;                                                               
/*0x080*/     UINT64       DataSize;                                                           
/*0x088*/     ULONG32      BitmapLimit;                                                        
/*0x08C*/     ULONG32      BitmapNextHint;                                                     
/*0x090*/     ULONG32      ConcurrencyCount;                                                   
/*0x094*/     ULONG32      AttributeFlags;                                                     
/*0x098*/     ULONG32      AttributeSize;                                                      
/*0x09C*/     UINT8        _PADDING0_[0x4];                                                    
          }ALPC_COMPLETION_LIST, *PALPC_COMPLETION_LIST;                                       
                                                                                               
          typedef struct _ALPC_COMPLETION_LIST_STATE       // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                  
              union                                        // 2 elements, 0x8 bytes (sizeof) 
              {                                                                              
                  struct                                   // 3 elements, 0x8 bytes (sizeof) 
                  {                                                                          
/*0x000*/             UINT64       Head : 24;              // 0 BitPosition                  
/*0x000*/             UINT64       Tail : 24;              // 24 BitPosition                 
/*0x000*/             UINT64       ActiveThreadCount : 16; // 48 BitPosition                 
                  }s1;                                                                       
/*0x000*/         INT64        Value;                                                        
              }u1;                                                                           
          }ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE;                                  
                                                                                             
          typedef struct _RTL_SRWLOCK                  // 7 elements, 0x8 bytes (sizeof) 
          {                                                                              
              union                                    // 3 elements, 0x8 bytes (sizeof) 
              {                                                                          
                  struct                               // 5 elements, 0x8 bytes (sizeof) 
                  {                                                                      
/*0x000*/             UINT64       Locked : 1;         // 0 BitPosition                  
/*0x000*/             UINT64       Waiting : 1;        // 1 BitPosition                  
/*0x000*/             UINT64       Waking : 1;         // 2 BitPosition                  
/*0x000*/             UINT64       MultipleShared : 1; // 3 BitPosition                  
/*0x000*/             UINT64       Shared : 60;        // 4 BitPosition                  
                  };                                                                     
/*0x000*/         UINT64       Value;                                                    
/*0x000*/         VOID*        Ptr;                                                      
              };                                                                         
          }RTL_SRWLOCK, *PRTL_SRWLOCK;                                                   
                                                                                         
          typedef struct _ALPC_COMPLETION_LIST_HEADER   // 18 elements, 0x180 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       StartMagic;                                                       
/*0x008*/     ULONG32      TotalSize;                                                        
/*0x00C*/     ULONG32      ListOffset;                                                       
/*0x010*/     ULONG32      ListSize;                                                         
/*0x014*/     ULONG32      BitmapOffset;                                                     
/*0x018*/     ULONG32      BitmapSize;                                                       
/*0x01C*/     ULONG32      DataOffset;                                                       
/*0x020*/     ULONG32      DataSize;                                                         
/*0x024*/     ULONG32      AttributeFlags;                                                   
/*0x028*/     ULONG32      AttributeSize;                                                    
/*0x02C*/     UINT8        _PADDING0_[0x14];                                                 
/*0x040*/     struct _ALPC_COMPLETION_LIST_STATE State; // 1 elements, 0x8 bytes (sizeof)    
/*0x048*/     ULONG32      LastMessageId;                                                    
/*0x04C*/     ULONG32      LastCallbackId;                                                   
/*0x050*/     UINT8        _PADDING1_[0x30];                                                 
/*0x080*/     ULONG32      PostCount;                                                        
/*0x084*/     UINT8        _PADDING2_[0x3C];                                                 
/*0x0C0*/     ULONG32      ReturnCount;                                                      
/*0x0C4*/     UINT8        _PADDING3_[0x3C];                                                 
/*0x100*/     ULONG32      LogSequenceNumber;                                                
/*0x104*/     UINT8        _PADDING4_[0x3C];                                                 
/*0x140*/     struct _RTL_SRWLOCK UserLock;             // 7 elements, 0x8 bytes (sizeof)    
/*0x148*/     UINT64       EndMagic;                                                         
/*0x150*/     UINT8        _PADDING5_[0x30];                                                 
          }ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER;                                     
                                                                                             
          typedef struct _SINGLE_LIST_ENTRY    // 1 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _SINGLE_LIST_ENTRY* Next;                                   
          }SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;                                  
                                                                                 
          typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY   // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _SINGLE_LIST_ENTRY ListEntry;                 // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _IO_MINI_COMPLETION_PACKET_USER* Packet;                                         
/*0x010*/     struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;                                    
          }ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, *PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;                                   
                                                                                                      
          typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE             // 10 elements, 0x50 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT64       Lock;                                                                           
/*0x008*/     ULONG32      Size;                                                                           
/*0x00C*/     ULONG32      ActiveCount;                                                                    
/*0x010*/     ULONG32      PendingNullCount;                                                               
/*0x014*/     ULONG32      PendingCheckCompletionListCount;                                                
/*0x018*/     ULONG32      PendingDelete;                                                                  
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x020*/     struct _SINGLE_LIST_ENTRY FreeListHead;                  // 1 elements, 0x8 bytes (sizeof)   
/*0x028*/     VOID*        CompletionPort;                                                                 
/*0x030*/     VOID*        CompletionKey;                                                                  
/*0x038*/     struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];                                     
          }ALPC_COMPLETION_PACKET_LOOKASIDE, *PALPC_COMPLETION_PACKET_LOOKASIDE;                                    
                                                                                                           
          typedef union _KALPC_DIRECT_EVENT    // 3 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT64       Event;                                                
              struct                           // 2 elements, 0x8 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT64       Referenced : 1; // 0 BitPosition                  
/*0x000*/         UINT64       Reserved : 63;  // 1 BitPosition                  
              };                                                                 
          }KALPC_DIRECT_EVENT, *PKALPC_DIRECT_EVENT;                                  
                                                                                 
          typedef struct _ALPC_DISPATCH_CONTEXT                   // 12 elements, 0x40 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _ALPC_PORT* PortObject;                                                          
/*0x008*/     struct _KALPC_MESSAGE* Message;                                                         
/*0x010*/     struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                                     
/*0x018*/     struct _ETHREAD* TargetThread;                                                          
/*0x020*/     struct _ALPC_PORT* TargetPort;                                                          
/*0x028*/     union _KALPC_DIRECT_EVENT DirectEvent;              // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/     ULONG32      Flags;                                                                     
/*0x034*/     UINT16       TotalLength;                                                               
/*0x036*/     UINT16       Type;                                                                      
/*0x038*/     UINT16       DataInfoOffset;                                                            
/*0x03A*/     UINT8        SignalCompletion;                                                          
/*0x03B*/     UINT8        PostedToCompletionList;                                                    
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                           
          }ALPC_DISPATCH_CONTEXT, *PALPC_DISPATCH_CONTEXT;                                            
                                                                                                      
          typedef struct _ALPC_HANDLE_ENTRY // 1 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     VOID*        Object;                                            
          }ALPC_HANDLE_ENTRY, *PALPC_HANDLE_ENTRY;                                  
                                                                              
          typedef struct _ALPC_MESSAGE_ATTRIBUTES // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      AllocatedAttributes;                                     
/*0x004*/     ULONG32      ValidAttributes;                                         
          }ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES;                                  
                                                                                    
          typedef struct _SECURITY_QUALITY_OF_SERVICE                // 4 elements, 0xC bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Length;                                                                     
/*0x004*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                   
/*0x008*/     UINT8        ContextTrackingMode;                                                        
/*0x009*/     UINT8        EffectiveOnly;                                                              
/*0x00A*/     UINT8        _PADDING0_[0x2];                                                            
          }SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;                                  
                                                                                                       
          typedef struct _TOKEN_SOURCE       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                     
/*0x000*/     CHAR         SourceName[8];                                       
/*0x008*/     struct _LUID SourceIdentifier; // 2 elements, 0x8 bytes (sizeof)  
          }TOKEN_SOURCE, *PTOKEN_SOURCE;                                        
                                                                                
          typedef struct _TOKEN_CONTROL         // 4 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _LUID TokenId;             // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LUID AuthenticationId;    // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/     struct _LUID ModifiedId;          // 2 elements, 0x8 bytes (sizeof)  
/*0x018*/     struct _TOKEN_SOURCE TokenSource; // 2 elements, 0x10 bytes (sizeof) 
          }TOKEN_CONTROL, *PTOKEN_CONTROL;                                         
                                                                                   
          typedef struct _SECURITY_CLIENT_CONTEXT              // 6 elements, 0x48 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // 4 elements, 0xC bytes (sizeof)  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                       
/*0x010*/     VOID*        ClientToken;                                                           
/*0x018*/     UINT8        DirectlyAccessClientToken;                                             
/*0x019*/     UINT8        DirectAccessEffectiveOnly;                                             
/*0x01A*/     UINT8        ServerIsRemote;                                                        
/*0x01B*/     UINT8        _PADDING1_[0x1];                                                       
/*0x01C*/     struct _TOKEN_CONTROL ClientTokenControl;        // 4 elements, 0x28 bytes (sizeof) 
/*0x044*/     UINT8        _PADDING2_[0x4];                                                       
          }SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT;                                    
                                                                                                  
          typedef struct _ALPC_PORT_ATTRIBUTES                 // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Flags;                                                                  
/*0x004*/     struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // 4 elements, 0xC bytes (sizeof)   
/*0x010*/     UINT64       MaxMessageLength;                                                       
/*0x018*/     UINT64       MemoryBandwidth;                                                        
/*0x020*/     UINT64       MaxPoolUsage;                                                           
/*0x028*/     UINT64       MaxSectionSize;                                                         
/*0x030*/     UINT64       MaxViewSize;                                                            
/*0x038*/     UINT64       MaxTotalSectionSize;                                                    
/*0x040*/     ULONG32      DupObjectTypes;                                                         
/*0x044*/     ULONG32      Reserved;                                                               
          }ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES;                                           
                                                                                                   
          typedef struct _ALPC_PORT                                                // 40 elements, 0x1D8 bytes (sizeof) 
          {                                                                                                             
/*0x000*/     struct _LIST_ENTRY PortListEntry;                                    // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                                                       
/*0x018*/     struct _EPROCESS* OwnerProcess;                                                                           
/*0x020*/     VOID*        CompletionPort;                                                                              
/*0x028*/     VOID*        CompletionKey;                                                                               
/*0x030*/     struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;                                      
/*0x038*/     VOID*        PortContext;                                                                                 
/*0x040*/     struct _SECURITY_CLIENT_CONTEXT StaticSecurity;                      // 6 elements, 0x48 bytes (sizeof)   
/*0x088*/     struct _EX_PUSH_LOCK IncomingQueueLock;                              // 7 elements, 0x8 bytes (sizeof)    
/*0x090*/     struct _LIST_ENTRY MainQueue;                                        // 2 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _LIST_ENTRY LargeMessageQueue;                                // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _EX_PUSH_LOCK PendingQueueLock;                               // 7 elements, 0x8 bytes (sizeof)    
/*0x0B8*/     struct _LIST_ENTRY PendingQueue;                                     // 2 elements, 0x10 bytes (sizeof)   
/*0x0C8*/     struct _EX_PUSH_LOCK DirectQueueLock;                                // 7 elements, 0x8 bytes (sizeof)    
/*0x0D0*/     struct _LIST_ENTRY DirectQueue;                                      // 2 elements, 0x10 bytes (sizeof)   
/*0x0E0*/     struct _EX_PUSH_LOCK WaitQueueLock;                                  // 7 elements, 0x8 bytes (sizeof)    
/*0x0E8*/     struct _LIST_ENTRY WaitQueue;                                        // 2 elements, 0x10 bytes (sizeof)   
              union                                                                // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                                         
/*0x0F8*/         struct _KSEMAPHORE* Semaphore;                                                                        
/*0x0F8*/         struct _KEVENT* DummyEvent;                                                                           
              };                                                                                                        
/*0x100*/     struct _ALPC_PORT_ATTRIBUTES PortAttributes;                         // 10 elements, 0x48 bytes (sizeof)  
/*0x148*/     struct _EX_PUSH_LOCK ResourceListLock;                               // 7 elements, 0x8 bytes (sizeof)    
/*0x150*/     struct _LIST_ENTRY ResourceListHead;                                 // 2 elements, 0x10 bytes (sizeof)   
/*0x160*/     struct _EX_PUSH_LOCK PortObjectLock;                                 // 7 elements, 0x8 bytes (sizeof)    
/*0x168*/     struct _ALPC_COMPLETION_LIST* CompletionList;                                                             
/*0x170*/     struct _CALLBACK_OBJECT* CallbackObject;                                                                  
/*0x178*/     VOID*        CallbackContext;                                                                             
/*0x180*/     struct _LIST_ENTRY CanceledQueue;                                    // 2 elements, 0x10 bytes (sizeof)   
/*0x190*/     LONG32       SequenceNo;                                                                                  
/*0x194*/     LONG32       ReferenceNo;                                                                                 
/*0x198*/     struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;                                                 
              union                                                                // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                         
                  struct                                                           // 16 elements, 0x4 bytes (sizeof)   
                  {                                                                                                     
/*0x1A0*/             ULONG32      Initialized : 1;                                // 0 BitPosition                     
/*0x1A0*/             ULONG32      Type : 2;                                       // 1 BitPosition                     
/*0x1A0*/             ULONG32      ConnectionPending : 1;                          // 3 BitPosition                     
/*0x1A0*/             ULONG32      ConnectionRefused : 1;                          // 4 BitPosition                     
/*0x1A0*/             ULONG32      Disconnected : 1;                               // 5 BitPosition                     
/*0x1A0*/             ULONG32      Closed : 1;                                     // 6 BitPosition                     
/*0x1A0*/             ULONG32      NoFlushOnClose : 1;                             // 7 BitPosition                     
/*0x1A0*/             ULONG32      ReturnExtendedInfo : 1;                         // 8 BitPosition                     
/*0x1A0*/             ULONG32      Waitable : 1;                                   // 9 BitPosition                     
/*0x1A0*/             ULONG32      DynamicSecurity : 1;                            // 10 BitPosition                    
/*0x1A0*/             ULONG32      Wow64CompletionList : 1;                        // 11 BitPosition                    
/*0x1A0*/             ULONG32      Lpc : 1;                                        // 12 BitPosition                    
/*0x1A0*/             ULONG32      LpcToLpc : 1;                                   // 13 BitPosition                    
/*0x1A0*/             ULONG32      HasCompletionList : 1;                          // 14 BitPosition                    
/*0x1A0*/             ULONG32      HadCompletionList : 1;                          // 15 BitPosition                    
/*0x1A0*/             ULONG32      EnableCompletionList : 1;                       // 16 BitPosition                    
                  }s1;                                                                                                  
/*0x1A0*/         ULONG32      State;                                                                                   
              }u1;                                                                                                      
/*0x1A8*/     struct _ALPC_PORT* TargetQueuePort;                                                                       
/*0x1B0*/     struct _ALPC_PORT* TargetSequencePort;                                                                    
/*0x1B8*/     struct _KALPC_MESSAGE* CachedMessage;                                                                     
/*0x1C0*/     ULONG32      MainQueueLength;                                                                             
/*0x1C4*/     ULONG32      LargeMessageQueueLength;                                                                     
/*0x1C8*/     ULONG32      PendingQueueLength;                                                                          
/*0x1CC*/     ULONG32      DirectQueueLength;                                                                           
/*0x1D0*/     ULONG32      CanceledQueueLength;                                                                         
/*0x1D4*/     ULONG32      WaitQueueLength;                                                                             
          }ALPC_PORT, *PALPC_PORT;                                                                                      
                                                                                                                        
          typedef struct _ALPC_PROCESS_CONTEXT  // 3 elements, 0x20 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _EX_PUSH_LOCK Lock;        // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LIST_ENTRY ViewListHead;  // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       PagedPoolQuotaCache;                                    
          }ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT;                                   
                                                                                   
          typedef struct _ALPC_WORK_ON_BEHALF_TICKET // 2 elements, 0x8 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      ThreadId;                                                   
/*0x004*/     ULONG32      ThreadCreationTimeLow;                                      
          }ALPC_WORK_ON_BEHALF_TICKET, *PALPC_WORK_ON_BEHALF_TICKET;                                  
                                                                                       
          typedef struct _AMD64_DBGKD_CONTROL_SET // 4 elements, 0x1C bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      TraceFlag;                                                
/*0x004*/     UINT64       Dr7;                                                      
/*0x00C*/     UINT64       CurrentSymbolStart;                                       
/*0x014*/     UINT64       CurrentSymbolEnd;                                         
          }AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET;                                   
                                                                                     
          typedef struct _ARBITER_ADD_RESERVED_PARAMETERS // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _DEVICE_OBJECT* ReserveDevice;                                         
          }ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS;                                  
                                                                                            
          typedef struct _ARBITER_ALLOCATION_STATE             // 12 elements, 0x50 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       Start;                                                                  
/*0x008*/     UINT64       End;                                                                    
/*0x010*/     UINT64       CurrentMinimum;                                                         
/*0x018*/     UINT64       CurrentMaximum;                                                         
/*0x020*/     struct _ARBITER_LIST_ENTRY* Entry;                                                   
/*0x028*/     struct _ARBITER_ALTERNATIVE* CurrentAlternative;                                     
/*0x030*/     ULONG32      AlternativeCount;                                                       
/*0x034*/     UINT8        _PADDING0_[0x4];                                                        
/*0x038*/     struct _ARBITER_ALTERNATIVE* Alternatives;                                           
/*0x040*/     UINT16       Flags;                                                                  
/*0x042*/     UINT8        RangeAttributes;                                                        
/*0x043*/     UINT8        RangeAvailableAttributes;                                               
/*0x044*/     UINT8        _PADDING1_[0x4];                                                        
/*0x048*/     UINT64       WorkSpace;                                                              
          }ARBITER_ALLOCATION_STATE, *PARBITER_ALLOCATION_STATE;                                    
                                                                                                   
          typedef struct _ARBITER_ALTERNATIVE             // 8 elements, 0x40 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       Minimum;                                                          
/*0x008*/     UINT64       Maximum;                                                          
/*0x010*/     UINT64       Length;                                                           
/*0x018*/     UINT64       Alignment;                                                        
/*0x020*/     LONG32       Priority;                                                         
/*0x024*/     ULONG32      Flags;                                                            
/*0x028*/     struct _IO_RESOURCE_DESCRIPTOR* Descriptor;                                    
/*0x030*/     ULONG32      Reserved[3];                                                      
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                  
          }ARBITER_ALTERNATIVE, *PARBITER_ALTERNATIVE;                                       
                                                                                             
          typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY* ArbitrationList;                                             
          }ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS;                                  
                                                                                               
          typedef struct _ARBITER_CONFLICT_INFO    // 3 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _DEVICE_OBJECT* OwningObject;                                    
/*0x008*/     UINT64       Start;                                                     
/*0x010*/     UINT64       End;                                                       
          }ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO;                                   
                                                                                      
          typedef struct _ARBITER_ORDERING_LIST    // 3 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT16       Count;                                                     
/*0x002*/     UINT16       Maximum;                                                   
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     struct _ARBITER_ORDERING* Orderings;                                    
          }ARBITER_ORDERING_LIST, *PARBITER_ORDERING_LIST;                                   
                                                                                      
          typedef struct _ARBITER_INSTANCE                                                                       // 41 elements, 0x158 bytes (sizeof) 
          {                                                                                                                                           
/*0x000*/     ULONG32      Signature;                                                                                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                           
/*0x008*/     struct _KEVENT* MutexEvent;                                                                                                             
/*0x010*/     WCHAR*       Name;                                                                                                                      
/*0x018*/     WCHAR*       OrderingName;                                                                                                              
/*0x020*/     INT32        ResourceType;                                                                                                              
/*0x024*/     UINT8        _PADDING1_[0x4];                                                                                                           
/*0x028*/     struct _RTL_RANGE_LIST* Allocation;                                                                                                     
/*0x030*/     struct _RTL_RANGE_LIST* PossibleAllocation;                                                                                             
/*0x038*/     struct _ARBITER_ORDERING_LIST OrderingList;                                                        // 3 elements, 0x10 bytes (sizeof)   
/*0x048*/     struct _ARBITER_ORDERING_LIST ReservedList;                                                        // 3 elements, 0x10 bytes (sizeof)   
/*0x058*/     LONG32       ReferenceCount;                                                                                                            
/*0x05C*/     UINT8        _PADDING2_[0x4];                                                                                                           
/*0x060*/     struct _ARBITER_INTERFACE* Interface;                                                                                                   
/*0x068*/     ULONG32      AllocationStackMaxSize;                                                                                                    
/*0x06C*/     UINT8        _PADDING3_[0x4];                                                                                                           
/*0x070*/     struct _ARBITER_ALLOCATION_STATE* AllocationStack;                                                                                      
/*0x078*/     FUNCT_00A0_445F_UnpackRequirement* UnpackRequirement;                                                                                   
/*0x080*/     FUNCT_00A0_4466_PackResource* PackResource;                                                                                             
/*0x088*/     FUNCT_00A0_446B_UnpackResource* UnpackResource;                                                                                         
/*0x090*/     FUNCT_00A0_4470_ScoreRequirement* ScoreRequirement;                                                                                     
/*0x098*/     FUNCT_00A0_4473_TestAllocation* TestAllocation;                                                                                         
/*0x0A0*/     FUNCT_00A0_4479_RetestAllocation* RetestAllocation;                                                                                     
/*0x0A8*/     FUNCT_00A0_447E_CommitAllocation_RollbackAllocation* CommitAllocation;                                                                  
/*0x0B0*/     FUNCT_00A0_447E_CommitAllocation_RollbackAllocation* RollbackAllocation;                                                                
/*0x0B8*/     FUNCT_00A0_4481_BootAllocation* BootAllocation;                                                                                         
/*0x0C0*/     FUNCT_00A0_4486_QueryArbitrate* QueryArbitrate;                                                                                         
/*0x0C8*/     FUNCT_00A0_448B_QueryConflict* QueryConflict;                                                                                           
/*0x0D0*/     FUNCT_00A0_4490_AddReserved* AddReserved;                                                                                               
/*0x0D8*/     FUNCT_00A0_4495_StartArbiter* StartArbiter;                                                                                             
/*0x0E0*/     FUNCT_00A0_4499_PreprocessEntry_AllocateEntry* PreprocessEntry;                                                                         
/*0x0E8*/     FUNCT_00A0_4499_PreprocessEntry_AllocateEntry* AllocateEntry;                                                                           
/*0x0F0*/     FUNCT_00A9_449D_GetNextAllocationRange_FindSuitableRange_OverrideConflict* GetNextAllocationRange;                                      
/*0x0F8*/     FUNCT_00A9_449D_GetNextAllocationRange_FindSuitableRange_OverrideConflict* FindSuitableRange;                                           
/*0x100*/     FUNCT_00EF_449F_AddAllocation_BacktrackAllocation* AddAllocation;                                                                       
/*0x108*/     FUNCT_00EF_449F_AddAllocation_BacktrackAllocation* BacktrackAllocation;                                                                 
/*0x110*/     FUNCT_00A9_449D_GetNextAllocationRange_FindSuitableRange_OverrideConflict* OverrideConflict;                                            
/*0x118*/     FUNCT_00A0_44A1_InitializeRangeList* InitializeRangeList;                                                                               
/*0x120*/     FUNCT_00A0_44A7_DeleteOwnerRanges* DeleteOwnerRanges;                                                                                   
/*0x128*/     UINT8        TransactionInProgress;                                                                                                     
/*0x129*/     UINT8        _PADDING4_[0x7];                                                                                                           
/*0x130*/     struct _KEVENT* TransactionEvent;                                                                                                       
/*0x138*/     VOID*        Extension;                                                                                                                 
/*0x140*/     struct _DEVICE_OBJECT* BusDeviceObject;                                                                                                 
/*0x148*/     VOID*        ConflictCallbackContext;                                                                                                   
/*0x150*/     FUNCT_00A9_44AB_ConflictCallback* ConflictCallback;                                                                                     
          }ARBITER_INSTANCE, *PARBITER_INSTANCE;                                                                                                      
                                                                                                                                                      
          typedef struct _ARBITER_INTERFACE                                                                                                                                                                                                                                                                                           // 7 elements, 0x30 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     UINT16       Size;                                                                                                                                                                                                                                                                                                                                         
/*0x002*/     UINT16       Version;                                                                                                                                                                                                                                                                                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                              
/*0x008*/     VOID*        Context;                                                                                                                                                                                                                                                                                                                                      
/*0x010*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceReference;                                      
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceDereference;                                    
/*0x020*/     FUNCT_00A0_43FE_ArbiterHandler* ArbiterHandler;                                                                                                                                                                                                                                                                                                            
/*0x028*/     ULONG32      Flags;                                                                                                                                                                                                                                                                                                                                        
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                                                                                                                                                                                                                                                                                              
          }ARBITER_INTERFACE, *PARBITER_INTERFACE;                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _ARBITER_LIST_ENTRY                       // 13 elements, 0x60 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY ListEntry;                        // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     ULONG32      AlternativeCount;                                                           
/*0x014*/     UINT8        _PADDING0_[0x4];                                                            
/*0x018*/     struct _IO_RESOURCE_DESCRIPTOR* Alternatives;                                            
/*0x020*/     struct _DEVICE_OBJECT* PhysicalDeviceObject;                                             
/*0x028*/     enum _ARBITER_REQUEST_SOURCE RequestSource;                                              
/*0x02C*/     ULONG32      Flags;                                                                      
/*0x030*/     INT64        WorkSpace;                                                                  
/*0x038*/     enum _INTERFACE_TYPE InterfaceType;                                                      
/*0x03C*/     ULONG32      SlotNumber;                                                                 
/*0x040*/     ULONG32      BusNumber;                                                                  
/*0x044*/     UINT8        _PADDING1_[0x4];                                                            
/*0x048*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;                                      
/*0x050*/     struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;                                     
/*0x058*/     enum _ARBITER_RESULT Result;                                                             
/*0x05C*/     UINT8        _PADDING2_[0x4];                                                            
          }ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY;                                                   
                                                                                                       
          typedef struct _ARBITER_ORDERING // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Start;                                             
/*0x008*/     UINT64       End;                                               
          }ARBITER_ORDERING, *PARBITER_ORDERING;                                   
                                                                              
          typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS        // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY* ArbitrationList;                                                     
/*0x008*/     ULONG32      AllocateFromCount;                                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                            
/*0x010*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;                                    
          }ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS;                                   
                                                                                                       
          typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS      // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY* ArbitrationList;                                                     
/*0x008*/     ULONG32      AllocateFromCount;                                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                            
/*0x010*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;                                    
          }ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS;                                   
                                                                                                       
          typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;                                     
          }ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;                                  
                                                                                                         
          typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS        // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _DEVICE_OBJECT* PhysicalDeviceObject;                                            
/*0x008*/     struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;                                    
/*0x010*/     ULONG32*     ConflictCount;                                                             
/*0x018*/     struct _ARBITER_CONFLICT_INFO** Conflicts;                                              
          }ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS;                                   
                                                                                                      
          typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY* ArbitrationList;                                             
          }ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS;                                  
                                                                                               
          typedef struct _ARBITER_PARAMETERS                                                    // 1 elements, 0x20 bytes (sizeof) 
          {                                                                                                                        
              union                                                                             // 7 elements, 0x20 bytes (sizeof) 
              {                                                                                                                    
/*0x000*/         struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;                    // 3 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;                // 3 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;                    // 1 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources; // 1 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;                      // 4 elements, 0x20 bytes (sizeof) 
/*0x000*/         struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;                    // 1 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;                          // 1 elements, 0x8 bytes (sizeof)  
              }Parameters;                                                                                                         
          }ARBITER_PARAMETERS, *PARBITER_PARAMETERS;                                                                               
                                                                                                                                   
          typedef struct _ARC_DISK_INFORMATION   // 1 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _LIST_ENTRY DiskSignatures; // 2 elements, 0x10 bytes (sizeof) 
          }ARC_DISK_INFORMATION, *PARC_DISK_INFORMATION;                                   
                                                                                    
          typedef struct _ARM_DBGKD_CONTROL_SET // 3 elements, 0xC bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      Continue;                                              
/*0x004*/     ULONG32      CurrentSymbolStart;                                    
/*0x008*/     ULONG32      CurrentSymbolEnd;                                      
          }ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET;                                  
                                                                                  
          typedef struct _ARM_LOADER_BLOCK // 1 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      PlaceHolder;                                      
          }ARM_LOADER_BLOCK, *PARM_LOADER_BLOCK;                                  
                                                                             
          typedef struct _ARM64_DBGKD_CONTROL_SET // 4 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Continue;                                                 
/*0x004*/     ULONG32      TraceFlag;                                                
/*0x008*/     UINT64       CurrentSymbolStart;                                       
/*0x010*/     UINT64       CurrentSymbolEnd;                                         
          }ARM64_DBGKD_CONTROL_SET, *PARM64_DBGKD_CONTROL_SET;                                   
                                                                                     
          typedef struct _ARMCE_DBGKD_CONTROL_SET // 3 elements, 0xC bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Continue;                                                
/*0x004*/     ULONG32      CurrentSymbolStart;                                      
/*0x008*/     ULONG32      CurrentSymbolEnd;                                        
          }ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET;                                  
                                                                                    
typedef struct _ASSEMBLY_STORAGE_MAP // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}ASSEMBLY_STORAGE_MAP, *PASSEMBLY_STORAGE_MAP;                                  
                                                                       
          typedef struct _ASYNC_READ_THREAD_STATS // 1 elements, 0x194 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      CurrentLoad[101];                                          
          }ASYNC_READ_THREAD_STATS, *PASYNC_READ_THREAD_STATS;                                    
                                                                                      
          typedef struct _SID_AND_ATTRIBUTES_HASH  // 3 elements, 0x110 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      SidCount;                                                   
/*0x004*/     UINT8        _PADDING0_[0x4];                                            
/*0x008*/     struct _SID_AND_ATTRIBUTES* SidAttr;                                     
/*0x010*/     UINT64       Hash[32];                                                   
          }SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;                                    
                                                                                       
          typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION                                       // 10 elements, 0x260 bytes (sizeof) 
          {                                                                                                                                 
/*0x000*/     ULONG32      DeviceGroupsCount;                                                                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                 
/*0x008*/     struct _SID_AND_ATTRIBUTES* pDeviceGroups;                                                                                    
/*0x010*/     ULONG32      RestrictedDeviceGroupsCount;                                                                                     
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                                                 
/*0x018*/     struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;                                                                          
/*0x020*/     struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;                                        // 3 elements, 0x110 bytes (sizeof)  
/*0x130*/     struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;                              // 3 elements, 0x110 bytes (sizeof)  
/*0x240*/     struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes;                                                  
/*0x248*/     struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes;                                                
/*0x250*/     struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes;                                        
/*0x258*/     struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes;                                      
          }AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, *PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;                                                
                                                                                                                                            
          typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION // 4 elements, 0x30 bytes (sizeof) 
          {                                                                                             
/*0x000*/     ULONG32      SecurityAttributeCount;                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                             
/*0x008*/     struct _LIST_ENTRY SecurityAttributesList;             // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     ULONG32      WorkingSecurityAttributeCount;                                               
/*0x01C*/     UINT8        _PADDING1_[0x4];                                                             
/*0x020*/     struct _LIST_ENTRY WorkingSecurityAttributesList;      // 2 elements, 0x10 bytes (sizeof) 
          }AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, *PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;                                   
                                                                                                        
          typedef struct _GENERIC_MAPPING  // 4 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      GenericRead;                                       
/*0x004*/     ULONG32      GenericWrite;                                      
/*0x008*/     ULONG32      GenericExecute;                                    
/*0x00C*/     ULONG32      GenericAll;                                        
          }GENERIC_MAPPING, *PGENERIC_MAPPING;                                   
                                                                              
          typedef struct _AUX_ACCESS_DATA                                                                              // 12 elements, 0xE0 bytes (sizeof) 
          {                                                                                                                                                
/*0x000*/     struct _PRIVILEGE_SET* PrivilegesUsed;                                                                                                       
/*0x008*/     struct _GENERIC_MAPPING GenericMapping;                                                                  // 4 elements, 0x10 bytes (sizeof)  
/*0x018*/     ULONG32      AccessesToAudit;                                                                                                                
/*0x01C*/     ULONG32      MaximumAuditMask;                                                                                                               
/*0x020*/     struct _GUID TransactionId;                                                                              // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     VOID*        NewSecurityDescriptor;                                                                                                          
/*0x038*/     VOID*        ExistingSecurityDescriptor;                                                                                                     
/*0x040*/     VOID*        ParentSecurityDescriptor;                                                                                                       
/*0x048*/     FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_PostRoutine* DeRefSecurityDescriptor;                                     
/*0x050*/     VOID*        SDLock;                                                                                                                         
/*0x058*/     struct _ACCESS_REASONS AccessReasons;                                                                    // 1 elements, 0x80 bytes (sizeof)  
/*0x0D8*/     UINT8        GenerateStagingEvents;                                                                                                          
/*0x0D9*/     UINT8        _PADDING0_[0x7];                                                                                                                
          }AUX_ACCESS_DATA, *PAUX_ACCESS_DATA;                                                                                                             
                                                                                                                                                           
          typedef struct _BATTERY_REPORTING_SCALE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Granularity;                                             
/*0x004*/     ULONG32      Capacity;                                                
          }BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;                                  
                                                                                    
          typedef struct _BITMAP_RANGE      // 6 elements, 0x30 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _LIST_ENTRY Links;     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     INT64        BasePage;                                           
/*0x018*/     ULONG32      FirstDirtyPage;                                     
/*0x01C*/     ULONG32      LastDirtyPage;                                      
/*0x020*/     ULONG32      DirtyPages;                                         
/*0x024*/     UINT8        _PADDING0_[0x4];                                    
/*0x028*/     ULONG32*     Bitmap;                                             
          }BITMAP_RANGE, *PBITMAP_RANGE;                                       
                                                                               
          typedef struct _SLIST_ENTRY       // 1 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _SLIST_ENTRY* Next;                                       
/*0x008*/     UINT8        _PADDING0_[0x8];                                    
          }SLIST_ENTRY, *PSLIST_ENTRY;                                         
                                                                               
          typedef struct _BLOB                         // 7 elements, 0x30 bytes (sizeof) 
          {                                                                               
              union                                    // 2 elements, 0x10 bytes (sizeof) 
              {                                                                           
/*0x000*/         struct _LIST_ENTRY ResourceList;     // 2 elements, 0x10 bytes (sizeof) 
/*0x000*/         struct _SLIST_ENTRY FreeListEntry;   // 1 elements, 0x10 bytes (sizeof) 
              };                                                                          
              union                                    // 2 elements, 0x1 bytes (sizeof)  
              {                                                                           
                  struct                               // 4 elements, 0x1 bytes (sizeof)  
                  {                                                                       
/*0x010*/             UINT8        ReferenceCache : 1; // 0 BitPosition                   
/*0x010*/             UINT8        Lookaside : 1;      // 1 BitPosition                   
/*0x010*/             UINT8        Initializing : 1;   // 2 BitPosition                   
/*0x010*/             UINT8        Deleted : 1;        // 3 BitPosition                   
                  }s1;                                                                    
/*0x010*/         UINT8        Flags;                                                     
              }u1;                                                                        
/*0x011*/     UINT8        ResourceId;                                                    
/*0x012*/     INT16        CachedReferences;                                              
/*0x014*/     UINT8        _PADDING0_[0x4];                                               
/*0x018*/     INT64        ReferenceCount;                                                
/*0x020*/     struct _EX_PUSH_LOCK Lock;               // 7 elements, 0x8 bytes (sizeof)  
/*0x028*/     UINT8        _PADDING1_[0x8];                                               
          }BLOB, *PBLOB;                                                                  
                                                                                          
          typedef struct _BLOB_COUNTERS    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      CreatedObjects;                                   
/*0x004*/     ULONG32      DeletedObjects;                                   
          }BLOB_COUNTERS, *PBLOB_COUNTERS;                                   
                                                                             
          typedef struct _BLOB_TYPE                                                                                                                                                                                                                                                                                               // 9 elements, 0x38 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                          
/*0x000*/     enum _BLOB_ID ResourceId;                                                                                                                                                                                                                                                                                                                              
/*0x004*/     ULONG32      PoolTag;                                                                                                                                                                                                                                                                                                                                  
/*0x008*/     ULONG32      LookasideIndex;                                                                                                                                                                                                                                                                                                                           
/*0x00C*/     ULONG32      Flags;                                                                                                                                                                                                                                                                                                                                    
/*0x010*/     struct _BLOB_COUNTERS* Counters;                                                                                                                                                                                                                                                                                                                       
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* CleanupProcedure;                                    
/*0x020*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DeleteProcedure;                                     
/*0x028*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* DestroyProcedure;                                                                                                                       
/*0x030*/     UINT64       UsualSize;                                                                                                                                                                                                                                                                                                                                
          }BLOB_TYPE, *PBLOB_TYPE;                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                     
          typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT        // 7 elements, 0x68 bytes (sizeof) 
          {                                                                                        
/*0x000*/     enum _BOOT_ENTROPY_SOURCE_ID SourceId;                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                        
/*0x008*/     UINT64       Policy;                                                                 
/*0x010*/     enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;                                    
/*0x014*/     LONG32       ResultStatus;                                                           
/*0x018*/     UINT64       Time;                                                                   
/*0x020*/     ULONG32      EntropyLength;                                                          
/*0x024*/     UINT8        EntropyData[64];                                                        
/*0x064*/     UINT8        _PADDING1_[0x4];                                                        
          }BOOT_ENTROPY_SOURCE_LDR_RESULT, *PBOOT_ENTROPY_SOURCE_LDR_RESULT;                                   
                                                                                                   
          typedef struct _BOOT_ENTROPY_LDR_RESULT                             // 5 elements, 0x868 bytes (sizeof) 
          {                                                                                                       
/*0x000*/     ULONG32      maxEntropySources;                                                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                       
/*0x008*/     struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];                                     
/*0x418*/     UINT8        SeedBytesForCng[48];                                                                   
/*0x448*/     UINT8        RngBytesForNtoskrnl[1024];                                                             
/*0x848*/     UINT8        KdEntropy[32];                                                                         
          }BOOT_ENTROPY_LDR_RESULT, *PBOOT_ENTROPY_LDR_RESULT;                                                    
                                                                                                                  
          typedef struct _BUS_EXTENSION_LIST          // 2 elements, 0x10 bytes (sizeof) 
          {                                                                              
/*0x000*/     VOID*        Next;                                                         
/*0x008*/     struct _PI_BUS_EXTENSION* BusExtension;                                    
          }BUS_EXTENSION_LIST, *PBUS_EXTENSION_LIST;                                     
                                                                                         
          typedef struct _BUS_HANDLER                                   // 23 elements, 0xB0 bytes (sizeof) 
          {                                                                                                 
/*0x000*/     ULONG32      Version;                                                                         
/*0x004*/     enum _INTERFACE_TYPE InterfaceType;                                                           
/*0x008*/     enum _BUS_DATA_TYPE ConfigurationType;                                                        
/*0x00C*/     ULONG32      BusNumber;                                                                       
/*0x010*/     struct _DEVICE_OBJECT* DeviceObject;                                                          
/*0x018*/     struct _BUS_HANDLER* ParentHandler;                                                           
/*0x020*/     VOID*        BusData;                                                                         
/*0x028*/     ULONG32      DeviceControlExtensionSize;                                                      
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                                 
/*0x030*/     struct _SUPPORTED_RANGES* BusAddresses;                                                       
/*0x038*/     ULONG32      Reserved[4];                                                                     
/*0x048*/     FUNCT_0009_3A81_GetBusData_SetBusData* GetBusData;                                            
/*0x050*/     FUNCT_0009_3A81_GetBusData_SetBusData* SetBusData;                                            
/*0x058*/     FUNCT_00A0_3A89_AdjustResourceList* AdjustResourceList;                                       
/*0x060*/     FUNCT_00A0_3A8F_AssignSlotResources* AssignSlotResources;                                     
/*0x068*/     FUNCT_00A9_3A9A_TranslateBusAddress* TranslateBusAddress;                                     
/*0x070*/     VOID*        Spare1;                                                                          
/*0x078*/     VOID*        Spare2;                                                                          
/*0x080*/     VOID*        Spare3;                                                                          
/*0x088*/     VOID*        Spare4;                                                                          
/*0x090*/     VOID*        Spare5;                                                                          
/*0x098*/     VOID*        Spare6;                                                                          
/*0x0A0*/     VOID*        Spare7;                                                                          
/*0x0A8*/     VOID*        Spare8;                                                                          
          }BUS_HANDLER, *PBUS_HANDLER;                                                                      
                                                                                                            
          typedef struct _CACHE_DESCRIPTOR     // 5 elements, 0xC bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Level;                                                
/*0x001*/     UINT8        Associativity;                                        
/*0x002*/     UINT16       LineSize;                                             
/*0x004*/     ULONG32      Size;                                                 
/*0x008*/     enum _PROCESSOR_CACHE_TYPE Type;                                   
          }CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;                                  
                                                                                 
          typedef struct _CACHE_MANAGER_CALLBACKS                                                                                                                                                                                                                                                                                     // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     FUNCT_00A9_2E03_AcquireForLazyWrite_AcquireForReadAhead* AcquireForLazyWrite;                                                                                                                                                                                                                                                                              
/*0x008*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* ReleaseFromLazyWrite;                                    
/*0x010*/     FUNCT_00A9_2E03_AcquireForLazyWrite_AcquireForReadAhead* AcquireForReadAhead;                                                                                                                                                                                                                                                                              
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* ReleaseFromReadAhead;                                    
          }CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS;                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _DISPATCHER_HEADER                                // 58 elements, 0x18 bytes (sizeof) 
          {                                                                                                    
              union                                                        // 8 elements, 0x4 bytes (sizeof)   
              {                                                                                                
/*0x000*/         LONG32       Lock;                                                                           
/*0x000*/         LONG32       LockNV;                                                                         
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Type;                                                                       
/*0x001*/             UINT8        Signalling;                                                                 
/*0x002*/             UINT8        Size;                                                                       
/*0x003*/             UINT8        Reserved1;                                                                  
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        TimerType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        TimerControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Absolute : 1;                   // 0 BitPosition                    
/*0x001*/                     UINT8        Wake : 1;                       // 1 BitPosition                    
/*0x001*/                     UINT8        EncodedTolerableDelay : 6;      // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Hand;                                                                       
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x003*/                 UINT8        TimerMiscFlags;                                                         
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x003*/                     UINT8        Index : 6;                      // 0 BitPosition                    
/*0x003*/                     UINT8        Inserted : 1;                   // 6 BitPosition                    
/*0x003*/                     UINT8        Expired : 1;                    // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        Timer2Type;                                                                 
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        Timer2Flags;                                                            
                          struct                                           // 7 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Timer2Inserted : 1;             // 0 BitPosition                    
/*0x001*/                     UINT8        Timer2Expiring : 1;             // 1 BitPosition                    
/*0x001*/                     UINT8        Timer2CancelPending : 1;        // 2 BitPosition                    
/*0x001*/                     UINT8        Timer2SetPending : 1;           // 3 BitPosition                    
/*0x001*/                     UINT8        Timer2Running : 1;              // 4 BitPosition                    
/*0x001*/                     UINT8        Timer2Disabled : 1;             // 5 BitPosition                    
/*0x001*/                     UINT8        Timer2ReservedFlags : 2;        // 6 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        Timer2ComponentId;                                                          
/*0x003*/             UINT8        Timer2RelativeId;                                                           
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        QueueType;                                                                  
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x001*/                 UINT8        QueueControlFlags;                                                      
                          struct                                           // 3 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x001*/                     UINT8        Abandoned : 1;                  // 0 BitPosition                    
/*0x001*/                     UINT8        DisableIncrement : 1;           // 1 BitPosition                    
/*0x001*/                     UINT8        QueueReservedControlFlags : 6;  // 2 BitPosition                    
                          };                                                                                   
                      };                                                                                       
/*0x002*/             UINT8        QueueSize;                                                                  
/*0x003*/             UINT8        QueueReserved;                                                              
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        ThreadType;                                                                 
/*0x001*/             UINT8        ThreadReserved;                                                             
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x002*/                 UINT8        ThreadControlFlags;                                                     
                          struct                                           // 8 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x002*/                     UINT8        CycleProfiling : 1;             // 0 BitPosition                    
/*0x002*/                     UINT8        CounterProfiling : 1;           // 1 BitPosition                    
/*0x002*/                     UINT8        GroupScheduling : 1;            // 2 BitPosition                    
/*0x002*/                     UINT8        AffinitySet : 1;                // 3 BitPosition                    
/*0x002*/                     UINT8        Tagged : 1;                     // 4 BitPosition                    
/*0x002*/                     UINT8        EnergyProfiling : 1;            // 5 BitPosition                    
/*0x002*/                     UINT8        SchedulerAssist : 1;            // 6 BitPosition                    
/*0x002*/                     UINT8        ThreadReservedControlFlags : 1; // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                      union                                                // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                        
/*0x003*/                 UINT8        DebugActive;                                                            
                          struct                                           // 6 elements, 0x1 bytes (sizeof)   
                          {                                                                                    
/*0x003*/                     UINT8        ActiveDR7 : 1;                  // 0 BitPosition                    
/*0x003*/                     UINT8        Instrumented : 1;               // 1 BitPosition                    
/*0x003*/                     UINT8        Minimal : 1;                    // 2 BitPosition                    
/*0x003*/                     UINT8        Reserved4 : 3;                  // 3 BitPosition                    
/*0x003*/                     UINT8        UmsScheduled : 1;               // 6 BitPosition                    
/*0x003*/                     UINT8        UmsPrimary : 1;                 // 7 BitPosition                    
                          };                                                                                   
                      };                                                                                       
                  };                                                                                           
                  struct                                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                            
/*0x000*/             UINT8        MutantType;                                                                 
/*0x001*/             UINT8        MutantSize;                                                                 
/*0x002*/             UINT8        DpcActive;                                                                  
/*0x003*/             UINT8        MutantReserved;                                                             
                  };                                                                                           
              };                                                                                               
/*0x004*/     LONG32       SignalState;                                                                        
/*0x008*/     struct _LIST_ENTRY WaitListHead;                             // 2 elements, 0x10 bytes (sizeof)  
          }DISPATCHER_HEADER, *PDISPATCHER_HEADER;                                                             
                                                                                                               
          typedef struct _KEVENT                // 1 elements, 0x18 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
          }KEVENT, *PKEVENT;                                                        
                                                                                    
          typedef struct _CACHE_UNINITIALIZE_EVENT    // 2 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _CACHE_UNINITIALIZE_EVENT* Next;                                    
/*0x008*/     struct _KEVENT Event;                   // 1 elements, 0x18 bytes (sizeof) 
          }CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT;                                   
                                                                                         
          typedef struct _CACHED_CHILD_LIST              // 3 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      Count;                                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                                 
              union                                      // 2 elements, 0x8 bytes (sizeof)  
              {                                                                             
/*0x008*/         UINT64       ValueList;                                                   
/*0x008*/         struct _CM_KEY_CONTROL_BLOCK* RealKcb;                                    
              };                                                                            
          }CACHED_CHILD_LIST, *PCACHED_CHILD_LIST;                                          
                                                                                            
          typedef union _SLIST_HEADER              // 3 elements, 0x10 bytes (sizeof) 
          {                                                                           
              struct                               // 2 elements, 0x10 bytes (sizeof) 
              {                                                                       
/*0x000*/         UINT64       Alignment;                                             
/*0x008*/         UINT64       Region;                                                
              };                                                                      
              struct                               // 4 elements, 0x10 bytes (sizeof) 
              {                                                                       
                  struct                           // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                   
/*0x000*/             UINT64       Depth : 16;     // 0 BitPosition                   
/*0x000*/             UINT64       Sequence : 48;  // 16 BitPosition                  
                  };                                                                  
                  struct                           // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                   
/*0x008*/             UINT64       Reserved : 4;   // 0 BitPosition                   
/*0x008*/             UINT64       NextEntry : 60; // 4 BitPosition                   
                  };                                                                  
              }HeaderX64;                                                             
          }SLIST_HEADER, *PSLIST_HEADER;                                              
                                                                                      
          typedef struct _CACHED_KSTACK_LIST // 5 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     union _SLIST_HEADER SListHead; // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     LONG32       MinimumFree;                                         
/*0x014*/     ULONG32      Misses;                                              
/*0x018*/     ULONG32      MissesLast;                                          
/*0x01C*/     ULONG32      AllStacksInUse;                                      
          }CACHED_KSTACK_LIST, *PCACHED_KSTACK_LIST;                                   
                                                                                
          typedef struct _CALL_HASH_ENTRY   // 4 elements, 0x28 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _LIST_ENTRY ListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        CallersAddress;                                     
/*0x018*/     VOID*        CallersCaller;                                      
/*0x020*/     ULONG32      CallCount;                                          
/*0x024*/     UINT8        _PADDING0_[0x4];                                    
          }CALL_HASH_ENTRY, *PCALL_HASH_ENTRY;                                   
                                                                               
          typedef struct _CALL_PERFORMANCE_DATA // 2 elements, 0x408 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       SpinLock;                                                
/*0x008*/     struct _LIST_ENTRY HashTable[64];                                     
          }CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA;                                    
                                                                                    
typedef struct _CALLBACK_OBJECT // 0 elements, 0x0 bytes (sizeof) 
{                                                                 
}CALLBACK_OBJECT, *PCALLBACK_OBJECT;                                  
                                                                  
          typedef struct _CC_ASYNC_READ_CONTEXT                                                   // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                                                          
/*0x000*/     FUNCT_00A9_09BF_IdleIsHalted_IdleInitiateWake_CompletionRoutine* CompletionRoutine;                                    
/*0x008*/     VOID*        Context;                                                                                                  
/*0x010*/     struct _MDL* Mdl;                                                                                                      
/*0x018*/     CHAR         RequestorMode;                                                                                            
/*0x019*/     UINT8        _PADDING0_[0x3];                                                                                          
/*0x01C*/     ULONG32      NestingLevel;                                                                                             
          }CC_ASYNC_READ_CONTEXT, *PCC_ASYNC_READ_CONTEXT;                                                                           
                                                                                                                                     
          typedef struct _DIRTY_PAGE_STATISTICS         // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       DirtyPages;                                                     
/*0x008*/     UINT64       DirtyPagesLastScan;                                             
/*0x010*/     ULONG32      DirtyPagesScheduledLastScan;                                    
/*0x014*/     UINT8        _PADDING0_[0x4];                                                
          }DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS;                                   
                                                                                           
          typedef struct _CC_EXTERNAL_CACHE_INFO                 // 3 elements, 0x30 bytes (sizeof) 
          {                                                                                         
/*0x000*/     FUNCT_00EF_2ECD_Callback* Callback;                                                   
/*0x008*/     struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics; // 3 elements, 0x18 bytes (sizeof) 
/*0x020*/     struct _LIST_ENTRY Links;                          // 2 elements, 0x10 bytes (sizeof) 
          }CC_EXTERNAL_CACHE_INFO, *PCC_EXTERNAL_CACHE_INFO;                                        
                                                                                                    
          typedef struct _SHARED_CACHE_MAP_LIST_CURSOR // 2 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY SharedCacheMapLinks;  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Flags;                                                         
/*0x014*/     UINT8        _PADDING0_[0x4];                                               
          }SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR;                                   
                                                                                          
          typedef struct _KDPC                                  // 11 elements, 0x40 bytes (sizeof) 
          {                                                                                         
              union                                             // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                     
/*0x000*/         ULONG32      TargetInfoAsUlong;                                                   
                  struct                                        // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                                 
/*0x000*/             UINT8        Type;                                                            
/*0x001*/             UINT8        Importance;                                                      
/*0x002*/             UINT16       Number;                                                          
/*0x004*/             UINT8        _PADDING0_[0x4];                                                 
                  };                                                                                
              };                                                                                    
/*0x008*/     struct _SINGLE_LIST_ENTRY DpcListEntry;           // 1 elements, 0x8 bytes (sizeof)   
/*0x010*/     UINT64       ProcessorHistory;                                                        
/*0x018*/     FUNCT_00EF_0674_DeferredRoutine* DeferredRoutine;                                     
/*0x020*/     VOID*        DeferredContext;                                                         
/*0x028*/     VOID*        SystemArgument1;                                                         
/*0x030*/     VOID*        SystemArgument2;                                                         
/*0x038*/     VOID*        DpcData;                                                                 
          }KDPC, *PKDPC;                                                                            
                                                                                                    
          typedef union _ULARGE_INTEGER  // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         ULONG32      HighPart;                                   
              }u;                                                          
/*0x000*/     UINT64       QuadPart;                                       
          }ULARGE_INTEGER, *PULARGE_INTEGER;                                  
                                                                           
          typedef struct _KTIMER                 // 6 elements, 0x40 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     union _ULARGE_INTEGER DueTime;     // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY TimerListEntry; // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _KDPC* Dpc;                                                     
/*0x038*/     ULONG32      Processor;                                                
/*0x03C*/     ULONG32      Period;                                                   
          }KTIMER, *PKTIMER;                                                         
                                                                                     
          typedef struct _LAZY_WRITER                  // 9 elements, 0x88 bytes (sizeof)  
          {                                                                                
/*0x000*/     struct _KDPC ScanDpc;                    // 11 elements, 0x40 bytes (sizeof) 
/*0x040*/     struct _KTIMER ScanTimer;                // 6 elements, 0x40 bytes (sizeof)  
/*0x080*/     UINT8        ScanActive;                                                     
/*0x081*/     UINT8        OtherWork;                                                      
/*0x082*/     UINT8        PendingTeardownScan;                                            
/*0x083*/     UINT8        PendingPeriodicScan;                                            
/*0x084*/     UINT8        PendingLowMemoryScan;                                           
/*0x085*/     UINT8        PendingPowerScan;                                               
/*0x086*/     UINT8        PendingCoalescingFlushScan;                                     
/*0x087*/     UINT8        _PADDING0_[0x1];                                                
          }LAZY_WRITER, *PLAZY_WRITER;                                                     
                                                                                           
          typedef struct _DIRTY_PAGE_THRESHOLDS      // 7 elements, 0x38 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       DirtyPageThreshold;                                          
/*0x008*/     UINT64       DirtyPageThresholdTop;                                       
/*0x010*/     UINT64       DirtyPageThresholdBottom;                                    
/*0x018*/     ULONG32      DirtyPageTarget;                                             
/*0x01C*/     UINT8        _PADDING0_[0x4];                                             
/*0x020*/     UINT64       AggregateAvailablePages;                                     
/*0x028*/     UINT64       AggregateDirtyPages;                                         
/*0x030*/     ULONG32      AvailableHistory;                                            
/*0x034*/     UINT8        _PADDING1_[0x4];                                             
          }DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS;                                   
                                                                                        
          typedef union _LARGE_INTEGER   // 4 elements, 0x8 bytes (sizeof) 
          {                                                                
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              };                                                           
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      LowPart;                                    
/*0x004*/         LONG32       HighPart;                                   
              }u;                                                          
/*0x000*/     INT64        QuadPart;                                       
          }LARGE_INTEGER, *PLARGE_INTEGER;                                  
                                                                           
          typedef struct _CC_PARTITION                                      // 71 elements, 0x400 bytes (sizeof) 
          {                                                                                                      
/*0x000*/     INT16        NodeTypeCode;                                                                         
/*0x002*/     INT16        NodeByteSize;                                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                      
/*0x008*/     struct _EPARTITION* PartitionObject;                                                               
/*0x010*/     struct _LIST_ENTRY CleanSharedCacheMapList;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;      // 2 elements, 0x10 bytes (sizeof)   
/*0x030*/     struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList; // 2 elements, 0x18 bytes (sizeof)   
/*0x048*/     struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;         // 2 elements, 0x18 bytes (sizeof)   
/*0x060*/     struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;      // 2 elements, 0x10 bytes (sizeof)   
/*0x070*/     UINT8        _PADDING1_[0x10];                                                                     
/*0x080*/     UINT64       PrivateLock;                                                                          
/*0x088*/     ULONG32      ConsecutiveWorklessLazyScanCount;                                                     
/*0x08C*/     UINT8        ForcedDisableLazywriteScan;                                                           
/*0x08D*/     UINT8        _PADDING2_[0x33];                                                                     
/*0x0C0*/     UINT64       WorkQueueLock;                                                                        
/*0x0C8*/     ULONG32      NumberWorkerThreads;                                                                  
/*0x0CC*/     ULONG32      NumberActiveWorkerThreads;                                                            
/*0x0D0*/     struct _LIST_ENTRY IdleWorkerThreadList;                      // 2 elements, 0x10 bytes (sizeof)   
/*0x0E0*/     struct _LIST_ENTRY FastTeardownWorkQueue;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x0F0*/     struct _LIST_ENTRY ExpressWorkQueue;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x100*/     struct _LIST_ENTRY RegularWorkQueue;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x110*/     struct _LIST_ENTRY PostTickWorkQueue;                         // 2 elements, 0x10 bytes (sizeof)   
/*0x120*/     struct _LIST_ENTRY IdleExtraWriteBehindThreadList;            // 2 elements, 0x10 bytes (sizeof)   
/*0x130*/     ULONG32      ActiveExtraWriteBehindThreads;                                                        
/*0x134*/     ULONG32      MaxExtraWriteBehindThreads;                                                           
/*0x138*/     UINT8        QueueThrottle;                                                                        
/*0x139*/     UINT8        _PADDING3_[0x3];                                                                      
/*0x13C*/     ULONG32      PostTickWorkItemCount;                                                                
/*0x140*/     ULONG32      ThreadsActiveBeforeThrottle;                                                          
/*0x144*/     ULONG32      ExtraWBThreadsActiveBeforeThrottle;                                                   
/*0x148*/     ULONG32      ExecutingWriteBehindWorkItems;                                                        
/*0x14C*/     ULONG32      ExecutingHighPriorityWorkItem;                                                        
/*0x150*/     struct _KEVENT LowMemoryEvent;                                // 1 elements, 0x18 bytes (sizeof)   
/*0x168*/     struct _KEVENT PowerEvent;                                    // 1 elements, 0x18 bytes (sizeof)   
/*0x180*/     struct _KEVENT PeriodicEvent;                                 // 1 elements, 0x18 bytes (sizeof)   
/*0x198*/     struct _KEVENT WaitingForTeardownEvent;                       // 1 elements, 0x18 bytes (sizeof)   
/*0x1B0*/     struct _KEVENT CoalescingFlushEvent;                          // 1 elements, 0x18 bytes (sizeof)   
/*0x1C8*/     ULONG32      PagesYetToWrite;                                                                      
/*0x1CC*/     UINT8        _PADDING4_[0x4];                                                                      
/*0x1D0*/     struct _LAZY_WRITER LazyWriter;                               // 9 elements, 0x88 bytes (sizeof)   
/*0x258*/     struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;            // 3 elements, 0x18 bytes (sizeof)   
/*0x270*/     struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;            // 7 elements, 0x38 bytes (sizeof)   
/*0x2A8*/     struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;                                                  
/*0x2B0*/     LONG32       ThroughputTrend;                                                                      
/*0x2B4*/     UINT8        _PADDING5_[0x4];                                                                      
/*0x2B8*/     UINT64       AverageAvailablePages;                                                                
/*0x2C0*/     UINT64       AverageDirtyPages;                                                                    
/*0x2C8*/     UINT64       PagesSkippedDueToHotSpot;                                                             
/*0x2D0*/     union _LARGE_INTEGER PrevRegularQueueItemRunTime;             // 4 elements, 0x8 bytes (sizeof)    
/*0x2D8*/     union _LARGE_INTEGER PrevExtraWBThreadCheckTime;              // 4 elements, 0x8 bytes (sizeof)    
/*0x2E0*/     UINT8        AddExtraWriteBehindThreads;                                                           
/*0x2E1*/     UINT8        RemoveExtraThreadPending;                                                             
/*0x2E2*/     UINT8        _PADDING6_[0x6];                                                                      
/*0x2E8*/     struct _LIST_ENTRY DeferredWrites;                            // 2 elements, 0x10 bytes (sizeof)   
/*0x2F8*/     UINT8        _PADDING7_[0x8];                                                                      
/*0x300*/     UINT64       DeferredWriteSpinLock;                                                                
/*0x308*/     struct _LIST_ENTRY* IdleAsyncReadWorkerThreadList;                                                 
/*0x310*/     ULONG32*     NumberActiveAsyncReadWorkerThreads;                                                   
/*0x318*/     ULONG32*     NumberActiveCompleteAsyncReadWorkItems;                                               
/*0x320*/     struct _LIST_ENTRY* AsyncReadWorkQueue;                                                            
/*0x328*/     struct _LIST_ENTRY* AsyncReadCompletionWorkQueue;                                                  
/*0x330*/     struct _KEVENT* NewAsyncReadRequestEvent;                                                          
/*0x338*/     struct _ASYNC_READ_THREAD_STATS* ReaderThreadsStats;                                               
/*0x340*/     struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;                  // 7 elements, 0x8 bytes (sizeof)    
/*0x348*/     struct _LIST_ENTRY VacbFreeHighPriorityList;                  // 2 elements, 0x10 bytes (sizeof)   
/*0x358*/     ULONG32      NumberOfFreeHighPriorityVacbs;                                                        
/*0x35C*/     UINT8        _PADDING8_[0x4];                                                                      
/*0x360*/     struct _ETHREAD* LowPriWorkerThread;                                                               
/*0x368*/     struct _SHARED_CACHE_MAP* LowPriSharedCacheMap;                                                    
/*0x370*/     LONG32       LowPriOldCpuPriority;                                                                 
/*0x374*/     enum _IO_PRIORITY_HINT LowPriOldIoPriority;                                                        
/*0x378*/     struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;             // 7 elements, 0x8 bytes (sizeof)    
/*0x380*/     ULONG32      MaxNumberOfWriteBehindThreads;                                                        
/*0x384*/     UINT8        CoalescingState;                                                                      
/*0x385*/     UINT8        ActivePartition;                                                                      
/*0x386*/     UINT8        RundownPhase;                                                                         
/*0x387*/     UINT8        _PADDING9_[0x1];                                                                      
/*0x388*/     INT64        RefCount;                                                                             
/*0x390*/     struct _KEVENT ExitEvent;                                     // 1 elements, 0x18 bytes (sizeof)   
/*0x3A8*/     struct _KEVENT FinalDereferenceEvent;                         // 1 elements, 0x18 bytes (sizeof)   
/*0x3C0*/     VOID*        LazyWriteScanThreadHandle;                                                            
/*0x3C8*/     UINT8        _PADDING10_[0x38];                                                                    
          }CC_PARTITION, *PCC_PARTITION;                                                                         
                                                                                                                 
          typedef struct _CHILD_LIST // 2 elements, 0x8 bytes (sizeof) 
          {                                                            
/*0x000*/     ULONG32      Count;                                      
/*0x004*/     ULONG32      List;                                       
          }CHILD_LIST, *PCHILD_LIST;                                   
                                                                       
          typedef struct _CM_KEY_REFERENCE  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      KeyCell;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     struct _HHIVE* KeyHive;                                          
          }CM_KEY_REFERENCE, *PCM_KEY_REFERENCE;                                   
                                                                               
          typedef struct _CM_KEY_NODE                          // 26 elements, 0x50 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT16       Signature;                                                              
/*0x002*/     UINT16       Flags;                                                                  
/*0x004*/     union _LARGE_INTEGER LastWriteTime;              // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/     UINT8        AccessBits;                                                             
              struct                                           // 3 elements, 0x1 bytes (sizeof)   
              {                                                                                    
/*0x00D*/         UINT8        LayerSemantics : 2;             // 0 BitPosition                    
/*0x00D*/         UINT8        Spare1 : 5;                     // 2 BitPosition                    
/*0x00D*/         UINT8        InheritClass : 1;               // 7 BitPosition                    
              };                                                                                   
/*0x00E*/     UINT16       Spare2;                                                                 
/*0x010*/     ULONG32      Parent;                                                                 
/*0x014*/     ULONG32      SubKeyCounts[2];                                                        
              union                                            // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                    
                  struct                                       // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                
/*0x01C*/             ULONG32      SubKeyLists[2];                                                 
/*0x024*/             struct _CHILD_LIST ValueList;            // 2 elements, 0x8 bytes (sizeof)   
                  };                                                                               
/*0x01C*/         struct _CM_KEY_REFERENCE ChildHiveReference; // 2 elements, 0x10 bytes (sizeof)  
              };                                                                                   
/*0x02C*/     ULONG32      Security;                                                               
/*0x030*/     ULONG32      Class;                                                                  
              struct                                           // 4 elements, 0x4 bytes (sizeof)   
              {                                                                                    
/*0x034*/         ULONG32      MaxNameLen : 16;                // 0 BitPosition                    
/*0x034*/         ULONG32      UserFlags : 4;                  // 16 BitPosition                   
/*0x034*/         ULONG32      VirtControlFlags : 4;           // 20 BitPosition                   
/*0x034*/         ULONG32      Debug : 8;                      // 24 BitPosition                   
              };                                                                                   
/*0x038*/     ULONG32      MaxClassLen;                                                            
/*0x03C*/     ULONG32      MaxValueNameLen;                                                        
/*0x040*/     ULONG32      MaxValueDataLen;                                                        
/*0x044*/     ULONG32      WorkVar;                                                                
/*0x048*/     UINT16       NameLength;                                                             
/*0x04A*/     UINT16       ClassLength;                                                            
/*0x04C*/     WCHAR        Name[1];                                                                
/*0x04E*/     UINT8        _PADDING0_[0x2];                                                        
          }CM_KEY_NODE, *PCM_KEY_NODE;                                                             
                                                                                                   
          typedef struct _CM_KEY_VALUE      // 8 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Signature;                                          
/*0x002*/     UINT16       NameLength;                                         
/*0x004*/     ULONG32      DataLength;                                         
/*0x008*/     ULONG32      Data;                                               
/*0x00C*/     ULONG32      Type;                                               
/*0x010*/     UINT16       Flags;                                              
/*0x012*/     UINT16       Spare;                                              
/*0x014*/     WCHAR        Name[1];                                            
/*0x016*/     UINT8        _PADDING0_[0x2];                                    
          }CM_KEY_VALUE, *PCM_KEY_VALUE;                                       
                                                                               
          typedef struct _SECURITY_DESCRIPTOR_RELATIVE // 7 elements, 0x14 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        Revision;                                                      
/*0x001*/     UINT8        Sbz1;                                                          
/*0x002*/     UINT16       Control;                                                       
/*0x004*/     ULONG32      Owner;                                                         
/*0x008*/     ULONG32      Group;                                                         
/*0x00C*/     ULONG32      Sacl;                                                          
/*0x010*/     ULONG32      Dacl;                                                          
          }SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE;                                   
                                                                                          
          typedef struct _CM_KEY_SECURITY                      // 7 elements, 0x28 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT16       Signature;                                                             
/*0x002*/     UINT16       Reserved;                                                              
/*0x004*/     ULONG32      Flink;                                                                 
/*0x008*/     ULONG32      Blink;                                                                 
/*0x00C*/     ULONG32      ReferenceCount;                                                        
/*0x010*/     ULONG32      DescriptorLength;                                                      
/*0x014*/     struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor; // 7 elements, 0x14 bytes (sizeof) 
          }CM_KEY_SECURITY, *PCM_KEY_SECURITY;                                                    
                                                                                                  
          typedef struct _CM_KEY_INDEX // 3 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     UINT16       Signature;                                    
/*0x002*/     UINT16       Count;                                        
/*0x004*/     ULONG32      List[1];                                      
          }CM_KEY_INDEX, *PCM_KEY_INDEX;                                  
                                                                         
          typedef struct _CM_BIG_DATA // 3 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     UINT16       Signature;                                   
/*0x002*/     UINT16       Count;                                       
/*0x004*/     ULONG32      List;                                        
          }CM_BIG_DATA, *PCM_BIG_DATA;                                  
                                                                        
          typedef struct _CELL_DATA                    // 1 elements, 0x50 bytes (sizeof)  
          {                                                                                
              union                                    // 7 elements, 0x50 bytes (sizeof)  
              {                                                                            
/*0x000*/         struct _CM_KEY_NODE KeyNode;         // 26 elements, 0x50 bytes (sizeof) 
/*0x000*/         struct _CM_KEY_VALUE KeyValue;       // 8 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _CM_KEY_SECURITY KeySecurity; // 7 elements, 0x28 bytes (sizeof)  
/*0x000*/         struct _CM_KEY_INDEX KeyIndex;       // 3 elements, 0x8 bytes (sizeof)   
/*0x000*/         struct _CM_BIG_DATA ValueData;       // 3 elements, 0x8 bytes (sizeof)   
/*0x000*/         ULONG32      KeyList[1];                                                 
/*0x000*/         WCHAR        KeyString[1];                                               
              }u;                                                                          
          }CELL_DATA, *PCELL_DATA;                                                         
                                                                                           
typedef struct _CI_NGEN_PATHS // 0 elements, 0x0 bytes (sizeof) 
{                                                               
}CI_NGEN_PATHS, *PCI_NGEN_PATHS;                                  
                                                                
          typedef struct _CLIENT_ID       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     VOID*        UniqueProcess;                                    
/*0x008*/     VOID*        UniqueThread;                                     
          }CLIENT_ID, *PCLIENT_ID;                                           
                                                                             
          typedef struct _CLIENT_ID32     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      UniqueProcess;                                   
/*0x004*/     ULONG32      UniqueThread;                                    
          }CLIENT_ID32, *PCLIENT_ID32;                                      
                                                                            
          typedef struct _CLIENT_ID64     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       UniqueProcess;                                    
/*0x008*/     UINT64       UniqueThread;                                     
          }CLIENT_ID64, *PCLIENT_ID64;                                       
                                                                             
          typedef union _CLS_LSN             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                    
              struct                         // 2 elements, 0x8 bytes (sizeof) 
              {                                                                
/*0x000*/         UINT32       idxRecord;                                      
/*0x004*/         ULONG32      cidContainer;                                   
              }offset;                                                         
/*0x000*/     UINT64       ullOffset;                                          
          }CLS_LSN, *PCLS_LSN;                                                 
                                                                               
          typedef struct _CM_CACHED_VALUE_INDEX // 2 elements, 0x58 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      CellIndex;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                        
              union                             // 2 elements, 0x50 bytes (sizeof) 
              {                                                                    
/*0x008*/         struct _CELL_DATA CellData;   // 1 elements, 0x50 bytes (sizeof) 
/*0x008*/         UINT64       List[1];                                            
              }Data;                                                               
          }CM_CACHED_VALUE_INDEX, *PCM_CACHED_VALUE_INDEX;                                   
                                                                                   
          typedef struct _CM_COMPONENT_HASH // 1 elements, 0x4 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      Hash;                                              
          }CM_COMPONENT_HASH, *PCM_COMPONENT_HASH;                                  
                                                                              
          typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY      // 4 elements, 0x48 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _ETHREAD* Thread;                                                      
/*0x008*/     enum _CM_DIRTY_VECTOR_OPERATION Operation;                                    
              union                                      // 3 elements, 0x8 bytes (sizeof)  
              {                                                                             
                  struct                                 // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                         
/*0x00C*/             ULONG32      Start;                                                   
/*0x010*/             ULONG32      Length;                                                  
                  }DirtyVectorModifiedContext;                                              
                  struct                                 // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                         
/*0x00C*/             ULONG32      RangeCount;                                              
/*0x010*/             ULONG32      SetBitCount;                                             
                  }DirtyDataCaptureContext;                                                 
                  struct                                 // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                         
/*0x00C*/             ULONG32      Context1;                                                
/*0x010*/             ULONG32      Context2;                                                
                  }Raw;                                                                     
              }Data;                                                                        
/*0x018*/     VOID*        Stack[6];                                                        
          }CM_DIRTY_VECTOR_LOG_ENTRY, *PCM_DIRTY_VECTOR_LOG_ENTRY;                                   
                                                                                            
          typedef struct _CM_DIRTY_VECTOR_LOG            // 3 elements, 0x488 bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      Next;                                                             
/*0x004*/     ULONG32      Size;                                                             
/*0x008*/     struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];                                     
          }CM_DIRTY_VECTOR_LOG, *PCM_DIRTY_VECTOR_LOG;                                       
                                                                                             
          typedef struct _CM_FAST_LEAF_HINT   // 2 elements, 0x4 bytes (sizeof) 
          {                                                                     
              union                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                 
/*0x000*/         UINT8        Characters[4];                                   
/*0x000*/         ULONG32      FullHint;                                        
              };                                                                
          }CM_FAST_LEAF_HINT, *PCM_FAST_LEAF_HINT;                                  
                                                                                
          typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR // 4 elements, 0x14 bytes (sizeof)  
          {                                                                                  
/*0x000*/     UINT8        Type;                                                             
/*0x001*/     UINT8        ShareDisposition;                                                 
/*0x002*/     UINT16       Flags;                                                            
              union                                      // 14 elements, 0x10 bytes (sizeof) 
              {                                                                              
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Generic;                                                                  
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Port;                                                                     
                  struct                                 // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                          
/*0x004*/             UINT16       Level;                                                    
/*0x006*/             UINT16       Group;                                                    
/*0x008*/             ULONG32      Vector;                                                   
/*0x00C*/             UINT64       Affinity;                                                 
                  }Interrupt;                                                                
                  struct                                 // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                          
                      union                              // 2 elements, 0x10 bytes (sizeof)  
                      {                                                                      
                          struct                         // 4 elements, 0x10 bytes (sizeof)  
                          {                                                                  
/*0x004*/                     UINT16       Group;                                            
/*0x006*/                     UINT16       MessageCount;                                     
/*0x008*/                     ULONG32      Vector;                                           
/*0x00C*/                     UINT64       Affinity;                                         
                          }Raw;                                                              
                          struct                         // 4 elements, 0x10 bytes (sizeof)  
                          {                                                                  
/*0x004*/                     UINT16       Level;                                            
/*0x006*/                     UINT16       Group;                                            
/*0x008*/                     ULONG32      Vector;                                           
/*0x00C*/                     UINT64       Affinity;                                         
                          }Translated;                                                       
                      };                                                                     
                  }MessageInterrupt;                                                         
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length;                                                   
                  }Memory;                                                                   
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Channel;                                                  
/*0x008*/             ULONG32      Port;                                                     
/*0x00C*/             ULONG32      Reserved1;                                                
                  }Dma;                                                                      
                  struct                                 // 6 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Channel;                                                  
/*0x008*/             ULONG32      RequestLine;                                              
/*0x00C*/             UINT8        TransferWidth;                                            
/*0x00D*/             UINT8        Reserved1;                                                
/*0x00E*/             UINT8        Reserved2;                                                
/*0x00F*/             UINT8        Reserved3;                                                
                  }DmaV3;                                                                    
                  struct                                 // 1 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Data[3];                                                  
                  }DevicePrivate;                                                            
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      Start;                                                    
/*0x008*/             ULONG32      Length;                                                   
/*0x00C*/             ULONG32      Reserved;                                                 
                  }BusNumber;                                                                
                  struct                                 // 3 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             ULONG32      DataSize;                                                 
/*0x008*/             ULONG32      Reserved1;                                                
/*0x00C*/             ULONG32      Reserved2;                                                
                  }DeviceSpecificData;                                                       
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length40;                                                 
                  }Memory40;                                                                 
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length48;                                                 
                  }Memory48;                                                                 
                  struct                                 // 2 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             union _LARGE_INTEGER Start;        // 4 elements, 0x8 bytes (sizeof)   
/*0x00C*/             ULONG32      Length64;                                                 
                  }Memory64;                                                                 
                  struct                                 // 6 elements, 0xC bytes (sizeof)   
                  {                                                                          
/*0x004*/             UINT8        Class;                                                    
/*0x005*/             UINT8        Type;                                                     
/*0x006*/             UINT8        Reserved1;                                                
/*0x007*/             UINT8        Reserved2;                                                
/*0x008*/             ULONG32      IdLowPart;                                                
/*0x00C*/             ULONG32      IdHighPart;                                               
                  }Connection;                                                               
              }u;                                                                            
          }CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;                                    
                                                                                             
          typedef struct _CM_PARTIAL_RESOURCE_LIST                          // 4 elements, 0x1C bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT16       Version;                                                                            
/*0x002*/     UINT16       Revision;                                                                           
/*0x004*/     ULONG32      Count;                                                                              
/*0x008*/     struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];                                    
          }CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;                                               
                                                                                                               
          typedef struct _CM_FULL_RESOURCE_DESCRIPTOR               // 3 elements, 0x24 bytes (sizeof) 
          {                                                                                            
/*0x000*/     enum _INTERFACE_TYPE InterfaceType;                                                      
/*0x004*/     ULONG32      BusNumber;                                                                  
/*0x008*/     struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList; // 4 elements, 0x1C bytes (sizeof) 
          }CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;                                   
                                                                                                       
          typedef struct _CM_INDEX                    // 3 elements, 0x8 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      Cell;                                                        
              union                                   // 2 elements, 0x4 bytes (sizeof) 
              {                                                                         
/*0x004*/         struct _CM_FAST_LEAF_HINT NameHint; // 2 elements, 0x4 bytes (sizeof) 
/*0x004*/         struct _CM_COMPONENT_HASH HashKey;  // 1 elements, 0x4 bytes (sizeof) 
              };                                                                        
          }CM_INDEX, *PCM_INDEX;                                                        
                                                                                        
          typedef struct _CM_INDEX_HINT_BLOCK // 2 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Count;                                               
/*0x004*/     ULONG32      HashKey[1];                                          
          }CM_INDEX_HINT_BLOCK, *PCM_INDEX_HINT_BLOCK;                                  
                                                                                
          typedef struct _CM_INTENT_LOCK       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      OwnerCount;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     struct _CM_KCB_UOW** OwnerTable;                                    
          }CM_INTENT_LOCK, *PCM_INTENT_LOCK;                                      
                                                                                  
          typedef struct _CM_KCB_LAYER_INFO          // 4 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY LayerListEntry;     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _CM_KEY_CONTROL_BLOCK* Kcb;                                        
/*0x018*/     struct _CM_KCB_LAYER_INFO* LowerLayer;                                    
/*0x020*/     struct _LIST_ENTRY UpperLayerListHead; // 2 elements, 0x10 bytes (sizeof) 
          }CM_KCB_LAYER_INFO, *PCM_KCB_LAYER_INFO;                                      
                                                                                        
          typedef struct _CM_KCB_UOW                                                  // 28 elements, 0x78 bytes (sizeof) 
          {                                                                                                               
/*0x000*/     struct _LIST_ENTRY TransactionListEntry;                                // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _CM_INTENT_LOCK* KCBLock;                                                                            
/*0x018*/     struct _CM_INTENT_LOCK* KeyLock;                                                                            
/*0x020*/     struct _LIST_ENTRY KCBListEntry;                                        // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                                                              
/*0x038*/     struct _CM_TRANS* Transaction;                                                                              
/*0x040*/     ULONG32      UoWState;                                                                                      
/*0x044*/     enum _UoWActionType ActionType;                                                                             
/*0x048*/     enum _HSTORAGE_TYPE StorageType;                                                                            
/*0x04C*/     UINT8        _PADDING0_[0x4];                                                                               
/*0x050*/     struct _CM_KCB_UOW* ParentUoW;                                                                              
              union                                                                   // 8 elements, 0x10 bytes (sizeof)  
              {                                                                                                           
/*0x058*/         struct _CM_KEY_CONTROL_BLOCK* ChildKCB;                                                                 
/*0x058*/         ULONG32      VolatileKeyCell;                                                                           
                  struct                                                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                       
/*0x058*/             ULONG32      OldValueCell;                                                                          
/*0x05C*/             ULONG32      NewValueCell;                                                                          
/*0x060*/             UINT8        _PADDING1_[0x8];                                                                       
                  };                                                                                                      
/*0x058*/         ULONG32      UserFlags;                                                                                 
/*0x058*/         union _LARGE_INTEGER LastWriteTime;                                 // 4 elements, 0x8 bytes (sizeof)   
                  struct                                                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                       
/*0x058*/             struct _CM_KEY_SECURITY_CACHE* TxCachedSecurity;                                                    
/*0x060*/             ULONG32      TxSecurityCell;                                                                        
/*0x064*/             UINT8        _PADDING2_[0x4];                                                                       
                  };                                                                                                      
                  struct                                                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                       
/*0x058*/             struct _CM_KEY_CONTROL_BLOCK* OldChildKCB;                                                          
/*0x060*/             struct _CM_KEY_CONTROL_BLOCK* NewChildKCB;                                                          
                  };                                                                                                      
                  struct                                                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                       
/*0x058*/             struct _CM_KEY_CONTROL_BLOCK* OtherChildKCB;                                                        
/*0x060*/             ULONG32      ThisVolatileKeyCell;                                                                   
/*0x064*/             UINT8        _PADDING3_[0x4];                                                                       
                  };                                                                                                      
              };                                                                                                          
              union                                                                   // 4 elements, 0x8 bytes (sizeof)   
              {                                                                                                           
/*0x068*/         VOID*        PrepareDataPointer;                                                                        
/*0x068*/         struct _CM_UOW_SET_SD_DATA* SecurityData;                                                               
/*0x068*/         struct _CM_UOW_KEY_STATE_MODIFICATION* ModifyKeysData;                                                  
/*0x068*/         struct _CM_UOW_SET_VALUE_LIST_DATA* SetValueData;                                                       
              };                                                                                                          
              union                                                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                           
/*0x070*/         struct _CM_UOW_SET_VALUE_KEY_DATA* ValueData;                                                           
/*0x070*/         struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT* DiscardReplaceContext;                                     
              };                                                                                                          
          }CM_KCB_UOW, *PCM_KCB_UOW;                                                                                      
                                                                                                                          
          typedef union _CM_TRANS_PTR       // 2 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       LightWeight : 1; // 0 BitPosition                  
/*0x000*/     VOID*        TransPtr;                                          
          }CM_TRANS_PTR, *PCM_TRANS_PTR;                                      
                                                                              
          typedef struct _CM_KEY_BODY                        // 11 elements, 0x60 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Type;                                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                                      
/*0x008*/     struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                                     
/*0x010*/     struct _CM_NOTIFY_BLOCK* NotifyBlock;                                              
/*0x018*/     VOID*        ProcessID;                                                            
/*0x020*/     struct _LIST_ENTRY KeyBodyList;                // 2 elements, 0x10 bytes (sizeof)  
              struct                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                  
/*0x030*/         ULONG32      Flags : 16;                   // 0 BitPosition                    
/*0x030*/         ULONG32      HandleTags : 16;              // 16 BitPosition                   
              };                                                                                 
/*0x038*/     union _CM_TRANS_PTR Trans;                     // 2 elements, 0x8 bytes (sizeof)   
/*0x040*/     struct _GUID* KtmUow;                                                              
/*0x048*/     struct _LIST_ENTRY ContextListHead;            // 2 elements, 0x10 bytes (sizeof)  
/*0x058*/     VOID*        EnumerationResumeContext;                                             
          }CM_KEY_BODY, *PCM_KEY_BODY;                                                           
                                                                                                 
          typedef struct _CM_PATH_HASH // 1 elements, 0x4 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Hash;                                         
          }CM_PATH_HASH, *PCM_PATH_HASH;                                  
                                                                         
          typedef struct _CM_KEY_HASH        // 4 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _CM_PATH_HASH ConvKey;  // 1 elements, 0x4 bytes (sizeof)  
/*0x004*/     UINT8        _PADDING0_[0x4];                                     
/*0x008*/     struct _CM_KEY_HASH* NextHash;                                    
/*0x010*/     struct _HHIVE* KeyHive;                                           
/*0x018*/     ULONG32      KeyCell;                                             
/*0x01C*/     UINT8        _PADDING1_[0x4];                                     
          }CM_KEY_HASH, *PCM_KEY_HASH;                                          
                                                                                
          typedef struct _CM_KEY_CONTROL_BLOCK               // 55 elements, 0x130 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      RefCount;                                                              
              struct                                         // 7 elements, 0x4 bytes (sizeof)    
              {                                                                                   
/*0x004*/         ULONG32      ExtFlags : 16;                // 0 BitPosition                     
/*0x004*/         ULONG32      PrivateAlloc : 1;             // 16 BitPosition                    
/*0x004*/         ULONG32      Discarded : 1;                // 17 BitPosition                    
/*0x004*/         ULONG32      HiveUnloaded : 1;             // 18 BitPosition                    
/*0x004*/         ULONG32      Decommissioned : 1;           // 19 BitPosition                    
/*0x004*/         ULONG32      SpareExtFlag : 1;             // 20 BitPosition                    
/*0x004*/         ULONG32      TotalLevels : 10;             // 21 BitPosition                    
              };                                                                                  
              union                                          // 2 elements, 0x20 bytes (sizeof)   
              {                                                                                   
/*0x008*/         struct _CM_KEY_HASH KeyHash;               // 4 elements, 0x20 bytes (sizeof)   
                  struct                                     // 4 elements, 0x20 bytes (sizeof)   
                  {                                                                               
/*0x008*/             struct _CM_PATH_HASH ConvKey;          // 1 elements, 0x4 bytes (sizeof)    
/*0x00C*/             UINT8        _PADDING0_[0x4];                                               
/*0x010*/             struct _CM_KEY_HASH* NextHash;                                              
/*0x018*/             struct _HHIVE* KeyHive;                                                     
/*0x020*/             ULONG32      KeyCell;                                                       
/*0x024*/             UINT8        _PADDING1_[0x4];                                               
                  };                                                                              
              };                                                                                  
/*0x028*/     struct _EX_PUSH_LOCK KcbPushlock;              // 7 elements, 0x8 bytes (sizeof)    
              union                                          // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                   
/*0x030*/         struct _KTHREAD* Owner;                                                         
/*0x030*/         LONG32       SharedCount;                                                       
              };                                                                                  
              struct                                         // 3 elements, 0x1 bytes (sizeof)    
              {                                                                                   
/*0x038*/         UINT8        DelayedDeref : 1;             // 0 BitPosition                     
/*0x038*/         UINT8        DelayedClose : 1;             // 1 BitPosition                     
/*0x038*/         UINT8        Parking : 1;                  // 2 BitPosition                     
              };                                                                                  
/*0x039*/     UINT8        LayerSemantics;                                                        
/*0x03A*/     INT16        LayerHeight;                                                           
/*0x03C*/     ULONG32      Spare1;                                                                
/*0x040*/     struct _CM_KEY_CONTROL_BLOCK* ParentKcb;                                            
/*0x048*/     struct _CM_NAME_CONTROL_BLOCK* NameBlock;                                           
/*0x050*/     struct _CM_KEY_SECURITY_CACHE* CachedSecurity;                                      
/*0x058*/     struct _CACHED_CHILD_LIST ValueCache;          // 3 elements, 0x10 bytes (sizeof)   
              union                                          // 3 elements, 0x8 bytes (sizeof)    
              {                                                                                   
/*0x068*/         struct _CM_INDEX_HINT_BLOCK* IndexHint;                                         
/*0x068*/         ULONG32      HashKey;                                                           
/*0x068*/         ULONG32      SubKeyCount;                                                       
              };                                                                                  
              union                                          // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                   
/*0x070*/         struct _LIST_ENTRY KeyBodyListHead;        // 2 elements, 0x10 bytes (sizeof)   
/*0x070*/         struct _LIST_ENTRY FreeListEntry;          // 2 elements, 0x10 bytes (sizeof)   
              };                                                                                  
/*0x080*/     struct _CM_KEY_BODY* KeyBodyArray[4];                                               
/*0x0A0*/     union _LARGE_INTEGER KcbLastWriteTime;         // 4 elements, 0x8 bytes (sizeof)    
/*0x0A8*/     UINT16       KcbMaxNameLen;                                                         
/*0x0AA*/     UINT16       KcbMaxValueNameLen;                                                    
/*0x0AC*/     ULONG32      KcbMaxValueDataLen;                                                    
              struct                                         // 4 elements, 0x4 bytes (sizeof)    
              {                                                                                   
/*0x0B0*/         ULONG32      KcbUserFlags : 4;             // 0 BitPosition                     
/*0x0B0*/         ULONG32      KcbVirtControlFlags : 4;      // 4 BitPosition                     
/*0x0B0*/         ULONG32      KcbDebug : 8;                 // 8 BitPosition                     
/*0x0B0*/         ULONG32      Flags : 16;                   // 16 BitPosition                    
              };                                                                                  
/*0x0B4*/     ULONG32      Spare3;                                                                
/*0x0B8*/     struct _CM_KCB_LAYER_INFO* LayerInfo;                                               
/*0x0C0*/     CHAR*        RealKeyName;                                                           
/*0x0C8*/     struct _LIST_ENTRY KCBUoWListHead;             // 2 elements, 0x10 bytes (sizeof)   
              union                                          // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                   
/*0x0D8*/         struct _LIST_ENTRY DelayQueueEntry;        // 2 elements, 0x10 bytes (sizeof)   
/*0x0D8*/         UINT8*       Stolen;                                                            
              };                                                                                  
/*0x0E8*/     struct _CM_TRANS* TransKCBOwner;                                                    
/*0x0F0*/     struct _CM_INTENT_LOCK KCBLock;                // 2 elements, 0x10 bytes (sizeof)   
/*0x100*/     struct _CM_INTENT_LOCK KeyLock;                // 2 elements, 0x10 bytes (sizeof)   
/*0x110*/     struct _CHILD_LIST TransValueCache;            // 2 elements, 0x8 bytes (sizeof)    
/*0x118*/     struct _CM_TRANS* TransValueListOwner;                                              
              union                                          // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                   
/*0x120*/         struct _UNICODE_STRING* FullKCBName;                                            
                  struct                                     // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                               
/*0x120*/             UINT64       FullKCBNameStale : 1;     // 0 BitPosition                     
/*0x120*/             UINT64       Reserved : 63;            // 1 BitPosition                     
                  };                                                                              
              };                                                                                  
/*0x128*/     UINT64       SequenceNumber;                                                        
          }CM_KEY_CONTROL_BLOCK, *PCM_KEY_CONTROL_BLOCK;                                          
                                                                                                  
          typedef struct _CM_KEY_HASH_TABLE_ENTRY // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _EX_PUSH_LOCK Lock;          // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _KTHREAD* Owner;                                                
/*0x010*/     struct _CM_KEY_HASH* Entry;                                            
          }CM_KEY_HASH_TABLE_ENTRY, *PCM_KEY_HASH_TABLE_ENTRY;                                   
                                                                                     
          typedef struct _CM_KEY_SECURITY_CACHE                // 6 elements, 0x38 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Cell;                                                                  
/*0x004*/     ULONG32      ConvKey;                                                               
/*0x008*/     struct _LIST_ENTRY List;                         // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     ULONG32      DescriptorLength;                                                      
/*0x01C*/     ULONG32      RealRefCount;                                                          
/*0x020*/     struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor; // 7 elements, 0x14 bytes (sizeof) 
/*0x034*/     UINT8        _PADDING0_[0x4];                                                       
          }CM_KEY_SECURITY_CACHE, *PCM_KEY_SECURITY_CACHE;                                        
                                                                                                  
          typedef struct _CM_KEY_SECURITY_CACHE_ENTRY        // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     ULONG32      Cell;                                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                                     
/*0x008*/     struct _CM_KEY_SECURITY_CACHE* CachedSecurity;                                    
          }CM_KEY_SECURITY_CACHE_ENTRY, *PCM_KEY_SECURITY_CACHE_ENTRY;                                   
                                                                                                
          typedef struct _CM_NAME_HASH           // 4 elements, 0x18 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _CM_COMPONENT_HASH ConvKey; // 1 elements, 0x4 bytes (sizeof)  
/*0x004*/     UINT8        _PADDING0_[0x4];                                         
/*0x008*/     struct _CM_NAME_HASH* NextHash;                                       
/*0x010*/     UINT16       NameLength;                                              
/*0x012*/     WCHAR        Name[1];                                                 
/*0x014*/     UINT8        _PADDING1_[0x4];                                         
          }CM_NAME_HASH, *PCM_NAME_HASH;                                            
                                                                                    
          typedef struct _CM_NAME_CONTROL_BLOCK          // 7 elements, 0x20 bytes (sizeof) 
          {                                                                                 
              struct                                     // 2 elements, 0x4 bytes (sizeof)  
              {                                                                             
/*0x000*/         ULONG32      Compressed : 1;           // 0 BitPosition                   
/*0x000*/         ULONG32      RefCount : 31;            // 1 BitPosition                   
              };                                                                            
              union                                      // 2 elements, 0x18 bytes (sizeof) 
              {                                                                             
/*0x008*/         struct _CM_NAME_HASH NameHash;         // 4 elements, 0x18 bytes (sizeof) 
                  struct                                 // 4 elements, 0x18 bytes (sizeof) 
                  {                                                                         
/*0x008*/             struct _CM_COMPONENT_HASH ConvKey; // 1 elements, 0x4 bytes (sizeof)  
/*0x00C*/             UINT8        _PADDING0_[0x4];                                         
/*0x010*/             struct _CM_KEY_HASH* NextHash;                                        
/*0x018*/             UINT16       NameLength;                                              
/*0x01A*/             WCHAR        Name[1];                                                 
/*0x01C*/             UINT8        _PADDING1_[0x4];                                         
                  };                                                                        
              };                                                                            
          }CM_NAME_CONTROL_BLOCK, *PCM_NAME_CONTROL_BLOCK;                                   
                                                                                            
          typedef struct _CM_NOTIFY_BLOCK                      // 8 elements, 0x58 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _LIST_ENTRY HiveList;                     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY PostList;                     // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;                                      
/*0x028*/     struct _CM_KEY_BODY* KeyBody;                                                       
              struct                                           // 3 elements, 0x4 bytes (sizeof)  
              {                                                                                   
/*0x030*/         ULONG32      Filter : 30;                    // 0 BitPosition                   
/*0x030*/         ULONG32      WatchTree : 1;                  // 30 BitPosition                  
/*0x030*/         ULONG32      NotifyPending : 1;              // 31 BitPosition                  
              };                                                                                  
/*0x038*/     struct _SECURITY_SUBJECT_CONTEXT SubjectContext; // 4 elements, 0x20 bytes (sizeof) 
          }CM_NOTIFY_BLOCK, *PCM_NOTIFY_BLOCK;                                                    
                                                                                                  
          typedef struct _CM_RESOURCE_LIST                 // 2 elements, 0x28 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Count;                                                             
/*0x004*/     struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];                                    
          }CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;                                              
                                                                                              
          typedef struct _CM_RM                       // 17 elements, 0x88 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY RmListEntry;         // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY TransactionListHead; // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     VOID*        TmHandle;                                                      
/*0x028*/     VOID*        Tm;                                                            
/*0x030*/     VOID*        RmHandle;                                                      
/*0x038*/     VOID*        KtmRm;                                                         
/*0x040*/     ULONG32      RefCount;                                                      
/*0x044*/     ULONG32      ContainerNum;                                                  
/*0x048*/     UINT64       ContainerSize;                                                 
/*0x050*/     struct _CMHIVE* CmHive;                                                     
/*0x058*/     VOID*        LogFileObject;                                                 
/*0x060*/     VOID*        MarshallingContext;                                            
/*0x068*/     ULONG32      RmFlags;                                                       
/*0x06C*/     LONG32       LogStartStatus1;                                               
/*0x070*/     LONG32       LogStartStatus2;                                               
/*0x074*/     UINT8        _PADDING0_[0x4];                                               
/*0x078*/     UINT64       BaseLsn;                                                       
/*0x080*/     struct _ERESOURCE* RmLock;                                                  
          }CM_RM, *PCM_RM;                                                                
                                                                                          
          typedef struct _CM_TRANS                        // 25 elements, 0xB8 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _LIST_ENTRY TransactionListEntry;    // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY KCBUoWListHead;          // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _LIST_ENTRY LazyCommitListEntry;     // 2 elements, 0x10 bytes (sizeof)  
              union                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                               
                  struct                                  // 13 elements, 0x4 bytes (sizeof)  
                  {                                                                           
/*0x030*/             ULONG32      Prepared : 1;          // 0 BitPosition                    
/*0x030*/             ULONG32      Aborted : 1;           // 1 BitPosition                    
/*0x030*/             ULONG32      Committed : 1;         // 2 BitPosition                    
/*0x030*/             ULONG32      Initializing : 1;      // 3 BitPosition                    
/*0x030*/             ULONG32      Invalid : 1;           // 4 BitPosition                    
/*0x030*/             ULONG32      UseReservation : 1;    // 5 BitPosition                    
/*0x030*/             ULONG32      TmCallbacksActive : 1; // 6 BitPosition                    
/*0x030*/             ULONG32      LightWeight : 1;       // 7 BitPosition                    
/*0x030*/             ULONG32      Freed1 : 1;            // 8 BitPosition                    
/*0x030*/             ULONG32      Freed2 : 1;            // 9 BitPosition                    
/*0x030*/             ULONG32      Spare1 : 2;            // 10 BitPosition                   
/*0x030*/             ULONG32      Freed : 1;             // 12 BitPosition                   
/*0x030*/             ULONG32      Spare : 19;            // 13 BitPosition                   
                  };                                                                          
/*0x030*/         ULONG32      TransState;                                                    
              };                                                                              
/*0x038*/     union _CM_TRANS_PTR Trans;                  // 2 elements, 0x8 bytes (sizeof)   
/*0x040*/     struct _CM_RM* CmRm;                                                            
/*0x048*/     struct _KENLISTMENT* KtmEnlistmentObject;                                       
/*0x050*/     VOID*        KtmEnlistmentHandle;                                               
/*0x058*/     struct _GUID KtmUow;                        // 4 elements, 0x10 bytes (sizeof)  
/*0x068*/     UINT64       StartLsn;                                                          
/*0x070*/     ULONG32      HiveCount;                                                         
/*0x074*/     UINT8        _PADDING0_[0x4];                                                   
/*0x078*/     struct _CMHIVE* HiveArray[8];                                                   
          }CM_TRANS, *PCM_TRANS;                                                              
                                                                                              
          typedef struct _CM_UOW_KEY_STATE_MODIFICATION // 3 elements, 0x14 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      RefCount;                                                       
/*0x004*/     ULONG32      SubKeyListCount[2];                                             
/*0x00C*/     ULONG32      NewSubKeyList[2];                                               
          }CM_UOW_KEY_STATE_MODIFICATION, *PCM_UOW_KEY_STATE_MODIFICATION;                                   
                                                                                           
          typedef struct _CM_UOW_SET_SD_DATA // 1 elements, 0x4 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      SecurityCell;                                       
          }CM_UOW_SET_SD_DATA, *PCM_UOW_SET_SD_DATA;                                  
                                                                               
          typedef struct _CM_UOW_SET_VALUE_KEY_DATA // 4 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      PreparedCell;                                               
/*0x004*/     ULONG32      OldValueCell;                                               
/*0x008*/     UINT16       NameLength;                                                 
/*0x00A*/     UINT8        _PADDING0_[0x2];                                            
/*0x00C*/     ULONG32      DataSize;                                                   
          }CM_UOW_SET_VALUE_KEY_DATA, *PCM_UOW_SET_VALUE_KEY_DATA;                                   
                                                                                       
          typedef struct _CM_UOW_SET_VALUE_LIST_DATA // 2 elements, 0xC bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      RefCount;                                                   
/*0x004*/     struct _CHILD_LIST ValueList;          // 2 elements, 0x8 bytes (sizeof) 
          }CM_UOW_SET_VALUE_LIST_DATA, *PCM_UOW_SET_VALUE_LIST_DATA;                                  
                                                                                       
          typedef struct _CM_WORKITEM                                                                                                                                                                                                                                                                                          // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;                                                                                                                                                                                                                                                                                    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Private;                                                                                                                                                                                                                                                                                                                               
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                       
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* WorkerRoutine;                                    
/*0x020*/     VOID*        Parameter;                                                                                                                                                                                                                                                                                                                             
          }CM_WORKITEM, *PCM_WORKITEM;                                                                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                  
          typedef struct _CMSI_RW_LOCK // 1 elements, 0x8 bytes (sizeof) 
          {                                                              
/*0x000*/     VOID*        Reserved;                                     
          }CMSI_RW_LOCK, *PCMSI_RW_LOCK;                                  
                                                                         
          typedef struct _RTL_BITMAP        // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      SizeOfBitMap;                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     ULONG32*     Buffer;                                             
          }RTL_BITMAP, *PRTL_BITMAP;                                           
                                                                               
          typedef struct _RTL_RB_TREE             // 3 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _RTL_BALANCED_NODE* Root;                                       
              union                               // 2 elements, 0x8 bytes (sizeof)  
              {                                                                      
/*0x008*/         UINT8        Encoded : 1;       // 0 BitPosition                   
/*0x008*/         struct _RTL_BALANCED_NODE* Min;                                    
              };                                                                     
          }RTL_RB_TREE, *PRTL_RB_TREE;                                               
                                                                                     
          typedef struct _HVP_VIEW_MAP                  // 6 elements, 0x38 bytes (sizeof) 
          {                                                                                
/*0x000*/     VOID*        SectionReference;                                               
/*0x008*/     INT64        StorageEndFileOffset;                                           
/*0x010*/     INT64        SectionEndFileOffset;                                           
/*0x018*/     struct _CMSI_PROCESS_TUPLE* ProcessTuple;                                    
/*0x020*/     ULONG32      Flags;                                                          
/*0x024*/     UINT8        _PADDING0_[0x4];                                                
/*0x028*/     struct _RTL_RB_TREE ViewTree;             // 3 elements, 0x10 bytes (sizeof) 
          }HVP_VIEW_MAP, *PHVP_VIEW_MAP;                                                   
                                                                                           
          typedef struct _FREE_DISPLAY     // 3 elements, 0x18 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      RealVectorSize;                                    
/*0x004*/     ULONG32      Hint;                                              
/*0x008*/     struct _RTL_BITMAP Display;  // 2 elements, 0x10 bytes (sizeof) 
          }FREE_DISPLAY, *PFREE_DISPLAY;                                      
                                                                              
          typedef struct _DUAL                      // 7 elements, 0x278 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      Length;                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     struct _HMAP_DIRECTORY* Map;                                              
/*0x010*/     struct _HMAP_TABLE* SmallDir;                                             
/*0x018*/     ULONG32      Guard;                                                       
/*0x01C*/     UINT8        _PADDING1_[0x4];                                             
/*0x020*/     struct _FREE_DISPLAY FreeDisplay[24];                                     
/*0x260*/     struct _LIST_ENTRY FreeBins;          // 2 elements, 0x10 bytes (sizeof)  
/*0x270*/     ULONG32      FreeSummary;                                                 
/*0x274*/     UINT8        _PADDING2_[0x4];                                             
          }DUAL, *PDUAL;                                                                
                                                                                        
          typedef struct _HHIVE                                                                   // 49 elements, 0x600 bytes (sizeof) 
          {                                                                                                                            
/*0x000*/     ULONG32      Signature;                                                                                                  
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                            
/*0x008*/     FUNCT_2445_2444_GetCellRoutine* GetCellRoutine;                                                                          
/*0x010*/     FUNCT_00EF_249D_ReleaseCellRoutine* ReleaseCellRoutine;                                                                  
/*0x018*/     FUNCT_00F2_24A1_Allocate* Allocate;                                                                                      
/*0x020*/     FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free* Free;                                      
/*0x028*/     FUNCT_00A0_24A6_FileWrite* FileWrite;                                                                                    
/*0x030*/     FUNCT_00A0_24B2_FileRead* FileRead;                                                                                      
/*0x038*/     VOID*        HiveLoadFailure;                                                                                            
/*0x040*/     struct _HBASE_BLOCK* BaseBlock;                                                                                          
/*0x048*/     struct _CMSI_RW_LOCK FlusherLock;                                                   // 1 elements, 0x8 bytes (sizeof)    
/*0x050*/     struct _CMSI_RW_LOCK WriterLock;                                                    // 1 elements, 0x8 bytes (sizeof)    
/*0x058*/     struct _RTL_BITMAP DirtyVector;                                                     // 2 elements, 0x10 bytes (sizeof)   
/*0x068*/     ULONG32      DirtyCount;                                                                                                 
/*0x06C*/     ULONG32      DirtyAlloc;                                                                                                 
/*0x070*/     struct _RTL_BITMAP UnreconciledVector;                                              // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     ULONG32      UnreconciledCount;                                                                                          
/*0x084*/     ULONG32      BaseBlockAlloc;                                                                                             
/*0x088*/     ULONG32      Cluster;                                                                                                    
              struct                                                                              // 3 elements, 0x1 bytes (sizeof)    
              {                                                                                                                        
/*0x08C*/         UINT8        Flat : 1;                                                          // 0 BitPosition                     
/*0x08C*/         UINT8        ReadOnly : 1;                                                      // 1 BitPosition                     
/*0x08C*/         UINT8        Reserved : 6;                                                      // 2 BitPosition                     
              };                                                                                                                       
/*0x08D*/     UINT8        DirtyFlag;                                                                                                  
/*0x08E*/     UINT8        _PADDING1_[0x2];                                                                                            
/*0x090*/     ULONG32      HvBinHeadersUse;                                                                                            
/*0x094*/     ULONG32      HvFreeCellsUse;                                                                                             
/*0x098*/     ULONG32      HvUsedCellsUse;                                                                                             
/*0x09C*/     ULONG32      CmUsedCellsUse;                                                                                             
/*0x0A0*/     ULONG32      HiveFlags;                                                                                                  
/*0x0A4*/     ULONG32      CurrentLog;                                                                                                 
/*0x0A8*/     ULONG32      CurrentLogSequence;                                                                                         
/*0x0AC*/     ULONG32      CurrentLogMinimumSequence;                                                                                  
/*0x0B0*/     ULONG32      CurrentLogOffset;                                                                                           
/*0x0B4*/     ULONG32      MinimumLogSequence;                                                                                         
/*0x0B8*/     ULONG32      LogFileSizeCap;                                                                                             
/*0x0BC*/     UINT8        LogDataPresent[2];                                                                                          
/*0x0BE*/     UINT8        PrimaryFileValid;                                                                                           
/*0x0BF*/     UINT8        BaseBlockDirty;                                                                                             
/*0x0C0*/     union _LARGE_INTEGER LastLogSwapTime;                                               // 4 elements, 0x8 bytes (sizeof)    
              union                                                                               // 2 elements, 0x2 bytes (sizeof)    
              {                                                                                                                        
                  struct                                                                          // 5 elements, 0x2 bytes (sizeof)    
                  {                                                                                                                    
/*0x0C8*/             UINT16       FirstLogFile : 3;                                              // 0 BitPosition                     
/*0x0C8*/             UINT16       SecondLogFile : 3;                                             // 3 BitPosition                     
/*0x0C8*/             UINT16       HeaderRecovered : 1;                                           // 6 BitPosition                     
/*0x0C8*/             UINT16       LegacyRecoveryIndicated : 1;                                   // 7 BitPosition                     
/*0x0C8*/             UINT16       RecoveryInformationReserved : 8;                               // 8 BitPosition                     
                  };                                                                                                                   
/*0x0C8*/         UINT16       RecoveryInformation;                                                                                    
              };                                                                                                                       
/*0x0CA*/     UINT8        LogEntriesRecovered[2];                                                                                     
/*0x0CC*/     ULONG32      RefreshCount;                                                                                               
/*0x0D0*/     ULONG32      StorageTypeCount;                                                                                           
/*0x0D4*/     ULONG32      Version;                                                                                                    
/*0x0D8*/     struct _HVP_VIEW_MAP ViewMap;                                                       // 6 elements, 0x38 bytes (sizeof)   
/*0x110*/     struct _DUAL Storage[2];                                                                                                 
          }HHIVE, *PHHIVE;                                                                                                             
                                                                                                                                       
          typedef struct _EX_RUNDOWN_REF // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
              union                      // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         UINT64       Count;                                      
/*0x000*/         VOID*        Ptr;                                        
              };                                                           
          }EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;                                  
                                                                           
          typedef struct _HIVE_WRITE_WAIT_QUEUE   // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _ETHREAD* ActiveThread;                                         
/*0x008*/     struct _HIVE_WAIT_PACKET* WaitList;                                    
/*0x010*/     ULONG32      OwnerBoosted;                                             
/*0x014*/     UINT8        _PADDING0_[0x4];                                          
          }HIVE_WRITE_WAIT_QUEUE, *PHIVE_WRITE_WAIT_QUEUE;                                   
                                                                                     
           typedef struct _CMHIVE                                  // 71 elements, 0x12F8 bytes (sizeof) 
           {                                                                                             
/*0x000*/      struct _HHIVE Hive;                                 // 49 elements, 0x600 bytes (sizeof)  
/*0x600*/      VOID*        FileHandles[6];                                                              
/*0x630*/      struct _LIST_ENTRY NotifyList;                      // 2 elements, 0x10 bytes (sizeof)    
/*0x640*/      struct _LIST_ENTRY HiveList;                        // 2 elements, 0x10 bytes (sizeof)    
/*0x650*/      struct _LIST_ENTRY PreloadedHiveList;               // 2 elements, 0x10 bytes (sizeof)    
/*0x660*/      struct _EX_RUNDOWN_REF HiveRundown;                 // 2 elements, 0x8 bytes (sizeof)     
/*0x668*/      struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;                                           
/*0x670*/      ULONG32      KcbCacheTableSize;                                                           
/*0x674*/      UINT8        _PADDING0_[0x4];                                                             
/*0x678*/      struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;                                         
/*0x680*/      ULONG32      DeletedKcbTableSize;                                                         
/*0x684*/      ULONG32      Identity;                                                                    
/*0x688*/      struct _CMSI_RW_LOCK HiveLock;                      // 1 elements, 0x8 bytes (sizeof)     
/*0x690*/      struct _RTL_BITMAP FlushDirtyVector;                // 2 elements, 0x10 bytes (sizeof)    
/*0x6A0*/      ULONG32      FlushDirtyVectorSize;                                                        
/*0x6A4*/      UINT8        _PADDING1_[0x4];                                                             
/*0x6A8*/      UINT8*       FlushLogEntry;                                                               
/*0x6B0*/      ULONG32      FlushLogEntrySize;                                                           
/*0x6B4*/      ULONG32      FlushHiveTruncated;                                                          
/*0x6B8*/      UINT8        FlushBaseBlockDirty;                                                         
/*0x6B9*/      UINT8        _PADDING2_[0x7];                                                             
/*0x6C0*/      struct _RTL_BITMAP CapturedUnreconciledVector;      // 2 elements, 0x10 bytes (sizeof)    
/*0x6D0*/      ULONG32      CapturedUnreconciledVectorSize;                                              
/*0x6D4*/      UINT8        _PADDING3_[0x4];                                                             
/*0x6D8*/      struct _CMP_OFFSET_ARRAY* UnreconciledOffsetArray;                                        
/*0x6E0*/      ULONG32      UnreconciledOffsetArrayCount;                                                
/*0x6E4*/      UINT8        _PADDING4_[0x4];                                                             
/*0x6E8*/      struct _HBASE_BLOCK* UnreconciledBaseBlock;                                               
/*0x6F0*/      struct _EX_PUSH_LOCK SecurityLock;                  // 7 elements, 0x8 bytes (sizeof)     
/*0x6F8*/      ULONG32      LastShrinkHiveSize;                                                          
/*0x6FC*/      UINT8        _PADDING5_[0x4];                                                             
/*0x700*/      union _LARGE_INTEGER ActualFileSize;                // 4 elements, 0x8 bytes (sizeof)     
/*0x708*/      union _LARGE_INTEGER LogFileSizes[2];                                                     
/*0x718*/      struct _UNICODE_STRING FileFullPath;                // 3 elements, 0x10 bytes (sizeof)    
/*0x728*/      struct _UNICODE_STRING FileUserName;                // 3 elements, 0x10 bytes (sizeof)    
/*0x738*/      struct _UNICODE_STRING HiveRootPath;                // 3 elements, 0x10 bytes (sizeof)    
/*0x748*/      ULONG32      SecurityCount;                                                               
/*0x74C*/      ULONG32      SecurityCacheSize;                                                           
/*0x750*/      LONG32       SecurityHitHint;                                                             
/*0x754*/      UINT8        _PADDING6_[0x4];                                                             
/*0x758*/      struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;                                       
/*0x760*/      struct _LIST_ENTRY SecurityHash[64];                                                      
/*0xB60*/      ULONG32      UnloadEventCount;                                                            
/*0xB64*/      UINT8        _PADDING7_[0x4];                                                             
/*0xB68*/      struct _KEVENT** UnloadEventArray;                                                        
/*0xB70*/      struct _CM_KEY_CONTROL_BLOCK* RootKcb;                                                    
/*0xB78*/      UINT8        Frozen;                                                                      
/*0xB79*/      UINT8        _PADDING8_[0x7];                                                             
/*0xB80*/      struct _CM_WORKITEM* UnloadWorkItem;                                                      
/*0xB88*/      struct _CM_WORKITEM UnloadWorkItemHolder;           // 4 elements, 0x28 bytes (sizeof)    
/*0xBB0*/      struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;         // 3 elements, 0x488 bytes (sizeof)   
/*0x1038*/     ULONG32      Flags;                                                                       
/*0x103C*/     UINT8        _PADDING9_[0x4];                                                             
/*0x1040*/     struct _LIST_ENTRY TrustClassEntry;                 // 2 elements, 0x10 bytes (sizeof)    
/*0x1050*/     UINT64       DirtyTime;                                                                   
/*0x1058*/     UINT64       UnreconciledTime;                                                            
/*0x1060*/     struct _CM_RM* CmRm;                                                                      
/*0x1068*/     ULONG32      CmRmInitFailPoint;                                                           
/*0x106C*/     LONG32       CmRmInitFailStatus;                                                          
/*0x1070*/     struct _KTHREAD* CreatorOwner;                                                            
/*0x1078*/     struct _KTHREAD* RundownThread;                                                           
/*0x1080*/     union _LARGE_INTEGER LastWriteTime;                 // 4 elements, 0x8 bytes (sizeof)     
/*0x1088*/     struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;           // 3 elements, 0x18 bytes (sizeof)    
/*0x10A0*/     struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;       // 3 elements, 0x18 bytes (sizeof)    
               union                                               // 2 elements, 0x4 bytes (sizeof)     
               {                                                                                         
/*0x10B8*/         ULONG32      FlushFlags;                                                              
                   struct                                          // 4 elements, 0x4 bytes (sizeof)     
                   {                                                                                     
/*0x10B8*/             ULONG32      FlushActive : 1;               // 0 BitPosition                      
/*0x10B8*/             ULONG32      ReconcileActive : 1;           // 1 BitPosition                      
/*0x10B8*/             ULONG32      PrimaryFilePurged : 1;         // 2 BitPosition                      
/*0x10B8*/             ULONG32      DiskFileBad : 1;               // 3 BitPosition                      
                   };                                                                                    
               };                                                                                        
/*0x10BC*/     ULONG32      PrimaryFileSizeBeforeLastFlush;                                              
/*0x10C0*/     LONG32       ReferenceCount;                                                              
/*0x10C4*/     LONG32       UnloadHistoryIndex;                                                          
/*0x10C8*/     ULONG32      UnloadHistory[128];                                                          
/*0x12C8*/     ULONG32      BootStart;                                                                   
/*0x12CC*/     ULONG32      UnaccessedStart;                                                             
/*0x12D0*/     ULONG32      UnaccessedEnd;                                                               
/*0x12D4*/     ULONG32      LoadedKeyCount;                                                              
/*0x12D8*/     ULONG32      HandleClosePending;                                                          
/*0x12DC*/     UINT8        _PADDING10_[0x4];                                                            
/*0x12E0*/     struct _EX_PUSH_LOCK HandleClosePendingEvent;       // 7 elements, 0x8 bytes (sizeof)     
/*0x12E8*/     UINT8        FinalFlushSucceeded;                                                         
/*0x12E9*/     UINT8        _PADDING11_[0x7];                                                            
/*0x12F0*/     struct _CMP_VOLUME_CONTEXT* VolumeContext;                                                
           }CMHIVE, *PCMHIVE;                                                                            
                                                                                                         
          typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _CM_KEY_CONTROL_BLOCK* BaseKcb;                                             
/*0x008*/     LONG32       PrepareStatus;                                                        
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x010*/     struct _LIST_ENTRY ClonedKcbListHead;           // 2 elements, 0x10 bytes (sizeof) 
          }CMP_DISCARD_AND_REPLACE_KCB_CONTEXT, *PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT;                                   
                                                                                                 
          typedef struct _CMP_OFFSET_ARRAY  // 3 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      FileOffset;                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     VOID*        DataBuffer;                                         
/*0x010*/     ULONG32      DataLength;                                         
/*0x014*/     UINT8        _PADDING1_[0x4];                                    
          }CMP_OFFSET_ARRAY, *PCMP_OFFSET_ARRAY;                                   
                                                                               
          typedef struct _CMP_VOLUME_CONTEXT             // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY VolumeContextListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _CMP_VOLUME_MANAGER* VolumeManager;                                    
/*0x018*/     INT64        RefCount;                                                        
/*0x020*/     struct _GUID VolumeGuid;                   // 4 elements, 0x10 bytes (sizeof) 
/*0x030*/     VOID*        VolumeFileObject;                                                
/*0x038*/     struct _CMSI_RW_LOCK VolumeContextLock;    // 1 elements, 0x8 bytes (sizeof)  
/*0x040*/     UINT8        DeviceUsageNotificationSent;                                     
/*0x041*/     UINT8        _PADDING0_[0x7];                                                 
          }CMP_VOLUME_CONTEXT, *PCMP_VOLUME_CONTEXT;                                        
                                                                                            
          typedef struct _CMP_VOLUME_MANAGER              // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _CMSI_RW_LOCK VolumeContextListLock; // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _LIST_ENTRY VolumeContextListHead;   // 2 elements, 0x10 bytes (sizeof) 
          }CMP_VOLUME_MANAGER, *PCMP_VOLUME_MANAGER;                                         
                                                                                             
          typedef struct _CMSI_PROCESS_TUPLE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                     
/*0x000*/     VOID*        ProcessHandle;                                       
/*0x008*/     VOID*        ProcessReference;                                    
          }CMSI_PROCESS_TUPLE, *PCMSI_PROCESS_TUPLE;                                   
                                                                                
          typedef struct _COMPRESSED_DATA_INFO         // 7 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT16       CompressionFormatAndEngine;                                   
/*0x002*/     UINT8        CompressionUnitShift;                                         
/*0x003*/     UINT8        ChunkShift;                                                   
/*0x004*/     UINT8        ClusterShift;                                                 
/*0x005*/     UINT8        Reserved;                                                     
/*0x006*/     UINT16       NumberOfChunks;                                               
/*0x008*/     ULONG32      CompressedChunkSizes[1];                                      
          }COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO;                                  
                                                                                         
          typedef struct _DEVICE_FLAGS     // 7 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      Failed : 1;     // 0 BitPosition                  
/*0x000*/     ULONG32      ReadOnly : 1;   // 1 BitPosition                  
/*0x000*/     ULONG32      Removable : 1;  // 2 BitPosition                  
/*0x000*/     ULONG32      ConsoleIn : 1;  // 3 BitPosition                  
/*0x000*/     ULONG32      ConsoleOut : 1; // 4 BitPosition                  
/*0x000*/     ULONG32      Input : 1;      // 5 BitPosition                  
/*0x000*/     ULONG32      Output : 1;     // 6 BitPosition                  
          }DEVICE_FLAGS, *PDEVICE_FLAGS;                                     
                                                                             
          typedef struct _CONFIGURATION_COMPONENT   // 12 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     enum _CONFIGURATION_CLASS Class;                                          
/*0x004*/     enum _CONFIGURATION_TYPE Type;                                            
/*0x008*/     struct _DEVICE_FLAGS Flags;           // 7 elements, 0x4 bytes (sizeof)   
/*0x00C*/     UINT16       Version;                                                     
/*0x00E*/     UINT16       Revision;                                                    
/*0x010*/     ULONG32      Key;                                                         
              union                                 // 2 elements, 0x4 bytes (sizeof)   
              {                                                                         
/*0x014*/         ULONG32      AffinityMask;                                            
                  struct                            // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                     
/*0x014*/             UINT16       Group;                                               
/*0x016*/             UINT16       GroupIndex;                                          
                  };                                                                    
              };                                                                        
/*0x018*/     ULONG32      ConfigurationDataLength;                                     
/*0x01C*/     ULONG32      IdentifierLength;                                            
/*0x020*/     CHAR*        Identifier;                                                  
          }CONFIGURATION_COMPONENT, *PCONFIGURATION_COMPONENT;                                    
                                                                                        
          typedef struct _CONFIGURATION_COMPONENT_DATA        // 5 elements, 0x48 bytes (sizeof)  
          {                                                                                       
/*0x000*/     struct _CONFIGURATION_COMPONENT_DATA* Parent;                                       
/*0x008*/     struct _CONFIGURATION_COMPONENT_DATA* Child;                                        
/*0x010*/     struct _CONFIGURATION_COMPONENT_DATA* Sibling;                                      
/*0x018*/     struct _CONFIGURATION_COMPONENT ComponentEntry; // 12 elements, 0x28 bytes (sizeof) 
/*0x040*/     VOID*        ConfigurationData;                                                     
          }CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA;                                    
                                                                                                  
          typedef struct _M128A  // 2 elements, 0x10 bytes (sizeof) 
          {                                                         
/*0x000*/     UINT64       Low;                                     
/*0x008*/     INT64        High;                                    
          }M128A, *PM128A;                                          
                                                                    
          typedef struct _XSAVE_FORMAT         // 16 elements, 0x200 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       ControlWord;                                             
/*0x002*/     UINT16       StatusWord;                                              
/*0x004*/     UINT8        TagWord;                                                 
/*0x005*/     UINT8        Reserved1;                                               
/*0x006*/     UINT16       ErrorOpcode;                                             
/*0x008*/     ULONG32      ErrorOffset;                                             
/*0x00C*/     UINT16       ErrorSelector;                                           
/*0x00E*/     UINT16       Reserved2;                                               
/*0x010*/     ULONG32      DataOffset;                                              
/*0x014*/     UINT16       DataSelector;                                            
/*0x016*/     UINT16       Reserved3;                                               
/*0x018*/     ULONG32      MxCsr;                                                   
/*0x01C*/     ULONG32      MxCsr_Mask;                                              
/*0x020*/     struct _M128A FloatRegisters[8];                                      
/*0x0A0*/     struct _M128A XmmRegisters[16];                                       
/*0x1A0*/     UINT8        Reserved4[96];                                           
          }XSAVE_FORMAT, *PXSAVE_FORMAT;                                            
                                                                                    
          typedef struct _CONTEXT                    // 64 elements, 0x4D0 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       P1Home;                                                        
/*0x008*/     UINT64       P2Home;                                                        
/*0x010*/     UINT64       P3Home;                                                        
/*0x018*/     UINT64       P4Home;                                                        
/*0x020*/     UINT64       P5Home;                                                        
/*0x028*/     UINT64       P6Home;                                                        
/*0x030*/     ULONG32      ContextFlags;                                                  
/*0x034*/     ULONG32      MxCsr;                                                         
/*0x038*/     UINT16       SegCs;                                                         
/*0x03A*/     UINT16       SegDs;                                                         
/*0x03C*/     UINT16       SegEs;                                                         
/*0x03E*/     UINT16       SegFs;                                                         
/*0x040*/     UINT16       SegGs;                                                         
/*0x042*/     UINT16       SegSs;                                                         
/*0x044*/     ULONG32      EFlags;                                                        
/*0x048*/     UINT64       Dr0;                                                           
/*0x050*/     UINT64       Dr1;                                                           
/*0x058*/     UINT64       Dr2;                                                           
/*0x060*/     UINT64       Dr3;                                                           
/*0x068*/     UINT64       Dr6;                                                           
/*0x070*/     UINT64       Dr7;                                                           
/*0x078*/     UINT64       Rax;                                                           
/*0x080*/     UINT64       Rcx;                                                           
/*0x088*/     UINT64       Rdx;                                                           
/*0x090*/     UINT64       Rbx;                                                           
/*0x098*/     UINT64       Rsp;                                                           
/*0x0A0*/     UINT64       Rbp;                                                           
/*0x0A8*/     UINT64       Rsi;                                                           
/*0x0B0*/     UINT64       Rdi;                                                           
/*0x0B8*/     UINT64       R8;                                                            
/*0x0C0*/     UINT64       R9;                                                            
/*0x0C8*/     UINT64       R10;                                                           
/*0x0D0*/     UINT64       R11;                                                           
/*0x0D8*/     UINT64       R12;                                                           
/*0x0E0*/     UINT64       R13;                                                           
/*0x0E8*/     UINT64       R14;                                                           
/*0x0F0*/     UINT64       R15;                                                           
/*0x0F8*/     UINT64       Rip;                                                           
              union                                  // 2 elements, 0x200 bytes (sizeof)  
              {                                                                           
/*0x100*/         struct _XSAVE_FORMAT FltSave;      // 16 elements, 0x200 bytes (sizeof) 
                  struct                             // 18 elements, 0x200 bytes (sizeof) 
                  {                                                                       
/*0x100*/             struct _M128A Header[2];                                            
/*0x120*/             struct _M128A Legacy[8];                                            
/*0x1A0*/             struct _M128A Xmm0;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1B0*/             struct _M128A Xmm1;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1C0*/             struct _M128A Xmm2;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1D0*/             struct _M128A Xmm3;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1E0*/             struct _M128A Xmm4;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1F0*/             struct _M128A Xmm5;            // 2 elements, 0x10 bytes (sizeof)   
/*0x200*/             struct _M128A Xmm6;            // 2 elements, 0x10 bytes (sizeof)   
/*0x210*/             struct _M128A Xmm7;            // 2 elements, 0x10 bytes (sizeof)   
/*0x220*/             struct _M128A Xmm8;            // 2 elements, 0x10 bytes (sizeof)   
/*0x230*/             struct _M128A Xmm9;            // 2 elements, 0x10 bytes (sizeof)   
/*0x240*/             struct _M128A Xmm10;           // 2 elements, 0x10 bytes (sizeof)   
/*0x250*/             struct _M128A Xmm11;           // 2 elements, 0x10 bytes (sizeof)   
/*0x260*/             struct _M128A Xmm12;           // 2 elements, 0x10 bytes (sizeof)   
/*0x270*/             struct _M128A Xmm13;           // 2 elements, 0x10 bytes (sizeof)   
/*0x280*/             struct _M128A Xmm14;           // 2 elements, 0x10 bytes (sizeof)   
/*0x290*/             struct _M128A Xmm15;           // 2 elements, 0x10 bytes (sizeof)   
/*0x2A0*/             UINT8        _PADDING0_[0x60];                                      
                  };                                                                      
              };                                                                          
/*0x300*/     struct _M128A VectorRegister[26];                                           
/*0x4A0*/     UINT64       VectorControl;                                                 
/*0x4A8*/     UINT64       DebugControl;                                                  
/*0x4B0*/     UINT64       LastBranchToRip;                                               
/*0x4B8*/     UINT64       LastBranchFromRip;                                             
/*0x4C0*/     UINT64       LastExceptionToRip;                                            
/*0x4C8*/     UINT64       LastExceptionFromRip;                                          
          }CONTEXT, *PCONTEXT;                                                            
                                                                                          
          typedef struct _MMSECTION_FLAGS                        // 27 elements, 0x4 bytes (sizeof) 
          {                                                                                         
/*0x000*/     UINT32       BeingDeleted : 1;                     // 0 BitPosition                   
/*0x000*/     UINT32       BeingCreated : 1;                     // 1 BitPosition                   
/*0x000*/     UINT32       BeingPurged : 1;                      // 2 BitPosition                   
/*0x000*/     UINT32       NoModifiedWriting : 1;                // 3 BitPosition                   
/*0x000*/     UINT32       FailAllIo : 1;                        // 4 BitPosition                   
/*0x000*/     UINT32       Image : 1;                            // 5 BitPosition                   
/*0x000*/     UINT32       Based : 1;                            // 6 BitPosition                   
/*0x000*/     UINT32       File : 1;                             // 7 BitPosition                   
/*0x000*/     UINT32       AttemptingDelete : 1;                 // 8 BitPosition                   
/*0x000*/     UINT32       PrefetchCreated : 1;                  // 9 BitPosition                   
/*0x000*/     UINT32       PhysicalMemory : 1;                   // 10 BitPosition                  
/*0x000*/     UINT32       ImageControlAreaOnRemovableMedia : 1; // 11 BitPosition                  
/*0x000*/     UINT32       Reserve : 1;                          // 12 BitPosition                  
/*0x000*/     UINT32       Commit : 1;                           // 13 BitPosition                  
/*0x000*/     UINT32       NoChange : 1;                         // 14 BitPosition                  
/*0x000*/     UINT32       WasPurged : 1;                        // 15 BitPosition                  
/*0x000*/     UINT32       UserReference : 1;                    // 16 BitPosition                  
/*0x000*/     UINT32       GlobalMemory : 1;                     // 17 BitPosition                  
/*0x000*/     UINT32       DeleteOnClose : 1;                    // 18 BitPosition                  
/*0x000*/     UINT32       FilePointerNull : 1;                  // 19 BitPosition                  
/*0x000*/     UINT32       PreferredNode : 6;                    // 20 BitPosition                  
/*0x000*/     UINT32       GlobalOnlyPerSession : 1;             // 26 BitPosition                  
/*0x000*/     UINT32       UserWritable : 1;                     // 27 BitPosition                  
/*0x000*/     UINT32       SystemVaAllocated : 1;                // 28 BitPosition                  
/*0x000*/     UINT32       PreferredFsCompressionBoundary : 1;   // 29 BitPosition                  
/*0x000*/     UINT32       UsingFileExtents : 1;                 // 30 BitPosition                  
/*0x000*/     UINT32       PageSize64K : 1;                      // 31 BitPosition                  
          }MMSECTION_FLAGS, *PMMSECTION_FLAGS;                                                      
                                                                                                    
          typedef struct _MMSECTION_FLAGS2                                    // 3 elements, 0x4 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     UINT16       PartitionId : 10;                                  // 0 BitPosition                  
              struct                                                          // 2 elements, 0x1 bytes (sizeof) 
              {                                                                                                 
/*0x002*/         UINT8        NoCrossPartitionAccess : 1;                    // 0 BitPosition                  
/*0x002*/         UINT8        SubsectionCrossPartitionReferenceOverflow : 1; // 1 BitPosition                  
              };                                                                                                
          }MMSECTION_FLAGS2, *PMMSECTION_FLAGS2;                                                                
                                                                                                                
          typedef struct _EX_FAST_REF      // 3 elements, 0x8 bytes (sizeof) 
          {                                                                  
              union                        // 3 elements, 0x8 bytes (sizeof) 
              {                                                              
/*0x000*/         VOID*        Object;                                       
/*0x000*/         UINT64       RefCnt : 4; // 0 BitPosition                  
/*0x000*/         UINT64       Value;                                        
              };                                                             
          }EX_FAST_REF, *PEX_FAST_REF;                                       
                                                                             
          typedef struct _CONTROL_AREA                                      // 17 elements, 0x80 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     struct _SEGMENT* Segment;                                                                         
              union                                                         // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                                 
/*0x008*/         struct _LIST_ENTRY ListHead;                              // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         VOID*        AweContext;                                                                      
              };                                                                                                
/*0x018*/     UINT64       NumberOfSectionReferences;                                                           
/*0x020*/     UINT64       NumberOfPfnReferences;                                                               
/*0x028*/     UINT64       NumberOfMappedViews;                                                                 
/*0x030*/     UINT64       NumberOfUserReferences;                                                              
              union                                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                 
/*0x038*/         ULONG32      LongFlags;                                                                       
/*0x038*/         struct _MMSECTION_FLAGS Flags;                            // 27 elements, 0x4 bytes (sizeof)  
              }u;                                                                                               
              union                                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                 
/*0x03C*/         ULONG32      LongFlags;                                                                       
/*0x03C*/         struct _MMSECTION_FLAGS2 Flags;                           // 3 elements, 0x4 bytes (sizeof)   
              }u1;                                                                                              
/*0x040*/     struct _EX_FAST_REF FilePointer;                              // 3 elements, 0x8 bytes (sizeof)   
/*0x048*/     LONG32       ControlAreaLock;                                                                     
/*0x04C*/     ULONG32      ModifiedWriteCount;                                                                  
/*0x050*/     struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;                                                     
              union                                                         // 1 elements, 0x10 bytes (sizeof)  
              {                                                                                                 
                  struct                                                    // 15 elements, 0x10 bytes (sizeof) 
                  {                                                                                             
                      union                                                 // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                         
/*0x058*/                 ULONG32      NumberOfSystemCacheViews;                                                
/*0x058*/                 ULONG32      ImageRelocationStartBit;                                                 
                      };                                                                                        
                      union                                                 // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                                         
/*0x05C*/                 LONG32       WritableUserReferences;                                                  
                          struct                                            // 9 elements, 0x4 bytes (sizeof)   
                          {                                                                                     
/*0x05C*/                     ULONG32      ImageRelocationSizeIn64k : 16;   // 0 BitPosition                    
/*0x05C*/                     ULONG32      LargePage : 1;                   // 16 BitPosition                   
/*0x05C*/                     ULONG32      AweSection : 1;                  // 17 BitPosition                   
/*0x05C*/                     ULONG32      SystemImage : 1;                 // 18 BitPosition                   
/*0x05C*/                     ULONG32      StrongCode : 2;                  // 19 BitPosition                   
/*0x05C*/                     ULONG32      CantMove : 1;                    // 21 BitPosition                   
/*0x05C*/                     ULONG32      BitMap : 2;                      // 22 BitPosition                   
/*0x05C*/                     ULONG32      ImageActive : 1;                 // 24 BitPosition                   
/*0x05C*/                     ULONG32      ImageBaseOkToReuse : 1;          // 25 BitPosition                   
                          };                                                                                    
                      };                                                                                        
                      union                                                 // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                                         
/*0x060*/                 ULONG32      FlushInProgressCount;                                                    
/*0x060*/                 ULONG32      NumberOfSubsections;                                                     
/*0x060*/                 struct _MI_IMAGE_SECURITY_REFERENCE* SeImageStub;                                     
                      };                                                                                        
                  }e2;                                                                                          
              }u2;                                                                                              
/*0x068*/     struct _EX_PUSH_LOCK FileObjectLock;                          // 7 elements, 0x8 bytes (sizeof)   
/*0x070*/     UINT64       LockedPages;                                                                         
              union                                                         // 4 elements, 0x8 bytes (sizeof)   
              {                                                                                                 
                  struct                                                    // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                             
/*0x078*/             UINT64       IoAttributionContext : 61;               // 0 BitPosition                    
/*0x078*/             UINT64       Spare : 3;                               // 61 BitPosition                   
                  };                                                                                            
/*0x078*/         UINT64       ImageCrossPartitionCharge;                                                       
/*0x078*/         UINT64       CommittedPageCount : 36;                     // 0 BitPosition                    
              }u3;                                                                                              
          }CONTROL_AREA, *PCONTROL_AREA;                                                                        
                                                                                                                
          typedef struct _COUNTER_READING       // 4 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     enum _HARDWARE_COUNTER_TYPE Type;                                    
/*0x004*/     ULONG32      Index;                                                  
/*0x008*/     UINT64       Start;                                                  
/*0x010*/     UINT64       Total;                                                  
          }COUNTER_READING, *PCOUNTER_READING;                                     
                                                                                   
          typedef union _CPU_INFO       // 5 elements, 0x10 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT32       AsUINT32[4];                                    
              struct                    // 4 elements, 0x10 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      Eax;                                        
/*0x004*/         ULONG32      Ebx;                                        
/*0x008*/         ULONG32      Ecx;                                        
/*0x00C*/         ULONG32      Edx;                                        
              };                                                           
          }CPU_INFO, *PCPU_INFO;                                           
                                                                           
          typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA // 5 elements, 0x30 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _GUID ReportId;                      // 4 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _UNICODE_STRING ModuleName;          // 3 elements, 0x10 bytes (sizeof) 
/*0x020*/     ULONG32      ModuleTimestamp;                                                  
/*0x024*/     ULONG32      ModuleSize;                                                       
/*0x028*/     UINT64       Offset;                                                           
          }CRITICAL_PROCESS_EXCEPTION_DATA, *PCRITICAL_PROCESS_EXCEPTION_DATA;                                   
                                                                                             
          typedef struct _CURDIR              // 2 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _UNICODE_STRING DosPath; // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        Handle;                                               
          }CURDIR, *PCURDIR;                                                     
                                                                                 
          typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     ULONG32      Size;                                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                                     
/*0x008*/     WCHAR*       TriggerId;                                                           
          }CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;                                   
                                                                                                
          typedef struct _NB10              // 5 elements, 0x14 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      Signature;                                          
/*0x004*/     ULONG32      Offset;                                             
/*0x008*/     ULONG32      TimeStamp;                                          
/*0x00C*/     ULONG32      Age;                                                
/*0x010*/     CHAR         PdbName[1];                                         
/*0x011*/     UINT8        _PADDING0_[0x3];                                    
          }NB10, *PNB10;                                                       
                                                                               
          typedef struct _RSDS              // 4 elements, 0x1C bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      Signature;                                          
/*0x004*/     struct _GUID Guid;            // 4 elements, 0x10 bytes (sizeof) 
/*0x014*/     ULONG32      Age;                                                
/*0x018*/     CHAR         PdbName[1];                                         
/*0x019*/     UINT8        _PADDING0_[0x3];                                    
          }RSDS, *PRSDS;                                                       
                                                                               
          typedef union _CVDD         // 3 elements, 0x1C bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Signature;                                    
/*0x000*/     struct _NB10 NB10;      // 5 elements, 0x14 bytes (sizeof) 
/*0x000*/     struct _RSDS RsDs;      // 4 elements, 0x1C bytes (sizeof) 
          }CVDD, *PCVDD;                                                 
                                                                         
          typedef struct _DBGK_SILOSTATE                // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _EX_PUSH_LOCK ErrorPortLock;       // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _DBGKP_ERROR_PORT* ErrorPort;                                         
/*0x010*/     struct _EPROCESS* ErrorProcess;                                              
/*0x018*/     struct _KEVENT* ErrorPortRegisteredEvent;                                    
          }DBGK_SILOSTATE, *PDBGK_SILOSTATE;                                               
                                                                                           
          typedef struct _X86_DBGKD_CONTROL_SET // 4 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      TraceFlag;                                              
/*0x004*/     ULONG32      Dr7;                                                    
/*0x008*/     ULONG32      CurrentSymbolStart;                                     
/*0x00C*/     ULONG32      CurrentSymbolEnd;                                       
          }X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET;                                   
                                                                                   
          typedef struct _IA64_DBGKD_CONTROL_SET // 3 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Continue;                                                
/*0x004*/     UINT64       CurrentSymbolStart;                                      
/*0x00C*/     UINT64       CurrentSymbolEnd;                                        
          }IA64_DBGKD_CONTROL_SET, *PIA64_DBGKD_CONTROL_SET;                                   
                                                                                    
          typedef struct _PPC_DBGKD_CONTROL_SET // 3 elements, 0xC bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      Continue;                                              
/*0x004*/     ULONG32      CurrentSymbolStart;                                    
/*0x008*/     ULONG32      CurrentSymbolEnd;                                      
          }PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET;                                  
                                                                                  
          typedef struct _DBGKD_ANY_CONTROL_SET                    // 8 elements, 0x1C bytes (sizeof) 
          {                                                                                           
              union                                                // 8 elements, 0x1C bytes (sizeof) 
              {                                                                                       
/*0x000*/         struct _X86_DBGKD_CONTROL_SET X86ControlSet;     // 4 elements, 0x10 bytes (sizeof) 
/*0x000*/         ULONG32      AlphaControlSet;                                                       
/*0x000*/         struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;   // 3 elements, 0x14 bytes (sizeof) 
/*0x000*/         struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet; // 4 elements, 0x1C bytes (sizeof) 
/*0x000*/         struct _ARM_DBGKD_CONTROL_SET ArmControlSet;     // 3 elements, 0xC bytes (sizeof)  
/*0x000*/         struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet; // 4 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet; // 3 elements, 0xC bytes (sizeof)  
/*0x000*/         struct _PPC_DBGKD_CONTROL_SET PpcControlSet;     // 3 elements, 0xC bytes (sizeof)  
              };                                                                                      
          }DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET;                                            
                                                                                                      
          typedef struct _DBGKD_BREAKPOINTEX // 2 elements, 0x8 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      BreakPointCount;                                    
/*0x004*/     LONG32       ContinueStatus;                                     
          }DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX;                                  
                                                                               
          typedef struct _DBGKD_CONTEXT_EX // 3 elements, 0xC bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      Offset;                                           
/*0x004*/     ULONG32      ByteCount;                                        
/*0x008*/     ULONG32      BytesCopied;                                      
          }DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX;                                  
                                                                             
          typedef struct _DBGKD_CONTINUE   // 1 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     LONG32       ContinueStatus;                                   
          }DBGKD_CONTINUE, *PDBGKD_CONTINUE;                                  
                                                                             
          typedef struct _DBGKD_CONTINUE2                      // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                       
/*0x000*/     LONG32       ContinueStatus;                                                        
              union                                            // 2 elements, 0x1C bytes (sizeof) 
              {                                                                                   
/*0x004*/         struct _AMD64_DBGKD_CONTROL_SET ControlSet;  // 4 elements, 0x1C bytes (sizeof) 
/*0x004*/         struct _DBGKD_ANY_CONTROL_SET AnyControlSet; // 8 elements, 0x1C bytes (sizeof) 
              };                                                                                  
          }DBGKD_CONTINUE2, *PDBGKD_CONTINUE2;                                                    
                                                                                                  
          typedef struct _DBGKD_FILL_MEMORY // 4 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Address;                                            
/*0x008*/     ULONG32      Length;                                             
/*0x00C*/     UINT16       Flags;                                              
/*0x00E*/     UINT16       PatternLength;                                      
          }DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY;                                   
                                                                               
          typedef struct _DBGKD_GET_CONTEXT // 1 elements, 0x4 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      Unused;                                            
          }DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT;                                  
                                                                              
          typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32 // 7 elements, 0x1C bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      BreakpointAddress;                                                
/*0x004*/     ULONG32      Flags;                                                            
/*0x008*/     ULONG32      Calls;                                                            
/*0x00C*/     ULONG32      MaxCallsPerPeriod;                                                
/*0x010*/     ULONG32      MinInstructions;                                                  
/*0x014*/     ULONG32      MaxInstructions;                                                  
/*0x018*/     ULONG32      TotalInstructions;                                                
          }DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32;                                   
                                                                                             
          typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64 // 7 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       BreakpointAddress;                                                
/*0x008*/     ULONG32      Flags;                                                            
/*0x00C*/     ULONG32      Calls;                                                            
/*0x010*/     ULONG32      MaxCallsPerPeriod;                                                
/*0x014*/     ULONG32      MinInstructions;                                                  
/*0x018*/     ULONG32      MaxInstructions;                                                  
/*0x01C*/     ULONG32      TotalInstructions;                                                
          }DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64;                                   
                                                                                             
          typedef struct _DBGKD_GET_SET_BUS_DATA // 5 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      BusDataType;                                             
/*0x004*/     ULONG32      BusNumber;                                               
/*0x008*/     ULONG32      SlotNumber;                                              
/*0x00C*/     ULONG32      Offset;                                                  
/*0x010*/     ULONG32      Length;                                                  
          }DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA;                                   
                                                                                    
          typedef struct _DBGKD_GET_VERSION32        // 14 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT16       MajorVersion;                                                 
/*0x002*/     UINT16       MinorVersion;                                                 
/*0x004*/     UINT16       ProtocolVersion;                                              
/*0x006*/     UINT16       Flags;                                                        
/*0x008*/     ULONG32      KernBase;                                                     
/*0x00C*/     ULONG32      PsLoadedModuleList;                                           
/*0x010*/     UINT16       MachineType;                                                  
/*0x012*/     UINT16       ThCallbackStack;                                              
/*0x014*/     UINT16       NextCallback;                                                 
/*0x016*/     UINT16       FramePointer;                                                 
/*0x018*/     ULONG32      KiCallUserMode;                                               
/*0x01C*/     ULONG32      KeUserCallbackDispatcher;                                     
/*0x020*/     ULONG32      BreakpointWithStatus;                                         
/*0x024*/     ULONG32      DebuggerDataList;                                             
          }DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32;                                    
                                                                                         
          typedef struct _DBGKD_GET_VERSION64  // 14 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT16       MajorVersion;                                           
/*0x002*/     UINT16       MinorVersion;                                           
/*0x004*/     UINT8        ProtocolVersion;                                        
/*0x005*/     UINT8        KdSecondaryVersion;                                     
/*0x006*/     UINT16       Flags;                                                  
/*0x008*/     UINT16       MachineType;                                            
/*0x00A*/     UINT8        MaxPacketType;                                          
/*0x00B*/     UINT8        MaxStateChange;                                         
/*0x00C*/     UINT8        MaxManipulate;                                          
/*0x00D*/     UINT8        Simulation;                                             
/*0x00E*/     UINT16       Unused[1];                                              
/*0x010*/     UINT64       KernBase;                                               
/*0x018*/     UINT64       PsLoadedModuleList;                                     
/*0x020*/     UINT64       DebuggerDataList;                                       
          }DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64;                                    
                                                                                   
          typedef struct _DBGKD_LOAD_SYMBOLS32 // 6 elements, 0x18 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      PathNameLength;                                        
/*0x004*/     ULONG32      BaseOfDll;                                             
/*0x008*/     ULONG32      ProcessId;                                             
/*0x00C*/     ULONG32      CheckSum;                                              
/*0x010*/     ULONG32      SizeOfImage;                                           
/*0x014*/     UINT8        UnloadSymbols;                                         
/*0x015*/     UINT8        _PADDING0_[0x3];                                       
          }DBGKD_LOAD_SYMBOLS32, *PDBGKD_LOAD_SYMBOLS32;                                   
                                                                                  
          typedef struct _DBGKD_LOAD_SYMBOLS64 // 6 elements, 0x28 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      PathNameLength;                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     UINT64       BaseOfDll;                                             
/*0x010*/     UINT64       ProcessId;                                             
/*0x018*/     ULONG32      CheckSum;                                              
/*0x01C*/     ULONG32      SizeOfImage;                                           
/*0x020*/     UINT8        UnloadSymbols;                                         
/*0x021*/     UINT8        _PADDING1_[0x7];                                       
          }DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64;                                   
                                                                                  
          typedef struct _DBGKD_READ_MEMORY32 // 3 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      TargetBaseAddress;                                   
/*0x004*/     ULONG32      TransferCount;                                       
/*0x008*/     ULONG32      ActualBytesRead;                                     
          }DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32;                                  
                                                                                
          typedef struct _DBGKD_WRITE_MEMORY32 // 3 elements, 0xC bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      TargetBaseAddress;                                    
/*0x004*/     ULONG32      TransferCount;                                        
/*0x008*/     ULONG32      ActualBytesWritten;                                   
          }DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32;                                  
                                                                                 
          typedef struct _DBGKD_READ_MEMORY64 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT64       TargetBaseAddress;                                    
/*0x008*/     ULONG32      TransferCount;                                        
/*0x00C*/     ULONG32      ActualBytesRead;                                      
          }DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64;                                   
                                                                                 
          typedef struct _DBGKD_WRITE_MEMORY64 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       TargetBaseAddress;                                     
/*0x008*/     ULONG32      TransferCount;                                         
/*0x00C*/     ULONG32      ActualBytesWritten;                                    
          }DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64;                                   
                                                                                  
          typedef struct _DBGKD_SET_CONTEXT // 1 elements, 0x4 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      ContextFlags;                                      
          }DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT;                                  
                                                                              
          typedef struct _DBGKD_WRITE_BREAKPOINT32 // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      BreakPointAddress;                                        
/*0x004*/     ULONG32      BreakPointHandle;                                         
          }DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32;                                  
                                                                                     
          typedef struct _DBGKD_RESTORE_BREAKPOINT // 1 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      BreakPointHandle;                                         
          }DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT;                                  
                                                                                     
          typedef struct _DBGKD_READ_WRITE_IO32 // 3 elements, 0xC bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      DataSize;                                              
/*0x004*/     ULONG32      IoAddress;                                             
/*0x008*/     ULONG32      DataValue;                                             
          }DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32;                                  
                                                                                  
          typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32 // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      DataSize;                                                        
/*0x004*/     ULONG32      InterfaceType;                                                   
/*0x008*/     ULONG32      BusNumber;                                                       
/*0x00C*/     ULONG32      AddressSpace;                                                    
/*0x010*/     ULONG32      IoAddress;                                                       
/*0x014*/     ULONG32      DataValue;                                                       
          }DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32;                                   
                                                                                            
          typedef struct _DBGKD_QUERY_SPECIAL_CALLS // 1 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      NumberOfSpecialCalls;                                      
          }DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS;                                  
                                                                                      
          typedef struct _DBGKD_SET_SPECIAL_CALL32 // 1 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      SpecialCall;                                              
          }DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32;                                  
                                                                                     
          typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32 // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      BreakpointAddress;                                               
/*0x004*/     ULONG32      Flags;                                                           
          }DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32;                                  
                                                                                            
          typedef struct _DBGKD_READ_WRITE_MSR // 3 elements, 0xC bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Msr;                                                  
/*0x004*/     ULONG32      DataValueLow;                                         
/*0x008*/     ULONG32      DataValueHigh;                                        
          }DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR;                                  
                                                                                 
          typedef struct _DBGKD_SEARCH_MEMORY // 4 elements, 0x18 bytes (sizeof) 
          {                                                                      
              union                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                  
/*0x000*/         UINT64       SearchAddress;                                    
/*0x000*/         UINT64       FoundAddress;                                     
              };                                                                 
/*0x008*/     UINT64       SearchLength;                                         
/*0x010*/     ULONG32      PatternLength;                                        
/*0x014*/     UINT8        _PADDING0_[0x4];                                      
          }DBGKD_SEARCH_MEMORY, *PDBGKD_SEARCH_MEMORY;                                   
                                                                                 
          typedef struct _DBGKD_MANIPULATE_STATE32                               // 5 elements, 0x34 bytes (sizeof)  
          {                                                                                                          
/*0x000*/     ULONG32      ApiNumber;                                                                                
/*0x004*/     UINT16       ProcessorLevel;                                                                           
/*0x006*/     UINT16       Processor;                                                                                
/*0x008*/     LONG32       ReturnStatus;                                                                             
              union                                                              // 22 elements, 0x28 bytes (sizeof) 
              {                                                                                                      
/*0x00C*/         struct _DBGKD_READ_MEMORY32 ReadMemory;                        // 3 elements, 0xC bytes (sizeof)   
/*0x00C*/         struct _DBGKD_WRITE_MEMORY32 WriteMemory;                      // 3 elements, 0xC bytes (sizeof)   
/*0x00C*/         struct _DBGKD_READ_MEMORY64 ReadMemory64;                      // 3 elements, 0x10 bytes (sizeof)  
/*0x00C*/         struct _DBGKD_WRITE_MEMORY64 WriteMemory64;                    // 3 elements, 0x10 bytes (sizeof)  
/*0x00C*/         struct _DBGKD_GET_CONTEXT GetContext;                          // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_SET_CONTEXT SetContext;                          // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;              // 2 elements, 0x8 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;            // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_CONTINUE Continue;                               // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_CONTINUE2 Continue2;                             // 3 elements, 0x20 bytes (sizeof)  
/*0x00C*/         struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;                     // 3 elements, 0xC bytes (sizeof)   
/*0x00C*/         struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;    // 6 elements, 0x18 bytes (sizeof)  
/*0x00C*/         struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;           // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;               // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint; // 2 elements, 0x8 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint; // 7 elements, 0x1C bytes (sizeof)  
/*0x00C*/         struct _DBGKD_GET_VERSION32 GetVersion32;                      // 14 elements, 0x28 bytes (sizeof) 
/*0x00C*/         struct _DBGKD_BREAKPOINTEX BreakPointEx;                       // 2 elements, 0x8 bytes (sizeof)   
/*0x00C*/         struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;                     // 3 elements, 0xC bytes (sizeof)   
/*0x00C*/         struct _DBGKD_SEARCH_MEMORY SearchMemory;                      // 4 elements, 0x18 bytes (sizeof)  
/*0x00C*/         struct _DBGKD_CONTEXT_EX GetContextEx;                         // 3 elements, 0xC bytes (sizeof)   
/*0x00C*/         struct _DBGKD_CONTEXT_EX SetContextEx;                         // 3 elements, 0xC bytes (sizeof)   
              }u;                                                                                                    
          }DBGKD_MANIPULATE_STATE32, *PDBGKD_MANIPULATE_STATE32;                                                     
                                                                                                                     
          typedef struct _DBGKD_WRITE_BREAKPOINT64 // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       BreakPointAddress;                                         
/*0x008*/     ULONG32      BreakPointHandle;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                           
          }DBGKD_WRITE_BREAKPOINT64, *PDBGKD_WRITE_BREAKPOINT64;                                   
                                                                                      
          typedef struct _DBGKD_READ_WRITE_IO64 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       IoAddress;                                              
/*0x008*/     ULONG32      DataSize;                                               
/*0x00C*/     ULONG32      DataValue;                                              
          }DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64;                                   
                                                                                   
          typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64 // 6 elements, 0x20 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      DataSize;                                                        
/*0x004*/     ULONG32      InterfaceType;                                                   
/*0x008*/     ULONG32      BusNumber;                                                       
/*0x00C*/     ULONG32      AddressSpace;                                                    
/*0x010*/     UINT64       IoAddress;                                                       
/*0x018*/     ULONG32      DataValue;                                                       
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                 
          }DBGKD_READ_WRITE_IO_EXTENDED64, *PDBGKD_READ_WRITE_IO_EXTENDED64;                                   
                                                                                            
          typedef struct _DBGKD_SET_SPECIAL_CALL64 // 1 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       SpecialCall;                                              
          }DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64;                                  
                                                                                     
          typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64 // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       BreakpointAddress;                                                
/*0x008*/     ULONG32      Flags;                                                            
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                  
          }DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64;                                   
                                                                                             
          typedef struct _DBGKD_QUERY_MEMORY // 4 elements, 0x18 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       Address;                                             
/*0x008*/     UINT64       Reserved;                                            
/*0x010*/     ULONG32      AddressSpace;                                        
/*0x014*/     ULONG32      Flags;                                               
          }DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY;                                   
                                                                                
          typedef struct _DBGKD_SWITCH_PARTITION // 1 elements, 0x4 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Partition;                                              
          }DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION;                                  
                                                                                   
          typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT    // 5 elements, 0x18 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT64       BreakPointAddress;                                                 
/*0x008*/     UINT64       BreakPointInstruction;                                             
/*0x010*/     ULONG32      BreakPointHandle;                                                  
/*0x014*/     UINT8        BreakPointInstructionSize;                                         
/*0x015*/     UINT8        BreakPointInstructionAlignment;                                    
/*0x016*/     UINT8        _PADDING0_[0x2];                                                   
          }DBGKD_WRITE_CUSTOM_BREAKPOINT, *PDBGKD_WRITE_CUSTOM_BREAKPOINT;                                   
                                                                                              
          typedef struct _DBGKD_MANIPULATE_STATE64                               // 5 elements, 0x38 bytes (sizeof)  
          {                                                                                                          
/*0x000*/     ULONG32      ApiNumber;                                                                                
/*0x004*/     UINT16       ProcessorLevel;                                                                           
/*0x006*/     UINT16       Processor;                                                                                
/*0x008*/     LONG32       ReturnStatus;                                                                             
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                                          
              union                                                              // 25 elements, 0x28 bytes (sizeof) 
              {                                                                                                      
/*0x010*/         struct _DBGKD_READ_MEMORY64 ReadMemory;                        // 3 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_WRITE_MEMORY64 WriteMemory;                      // 3 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_GET_CONTEXT GetContext;                          // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_SET_CONTEXT SetContext;                          // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;              // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;            // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_CONTINUE Continue;                               // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_CONTINUE2 Continue2;                             // 3 elements, 0x20 bytes (sizeof)  
/*0x010*/         struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;                     // 3 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;    // 6 elements, 0x20 bytes (sizeof)  
/*0x010*/         struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;           // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;               // 1 elements, 0x8 bytes (sizeof)   
/*0x010*/         struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint; // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint; // 7 elements, 0x20 bytes (sizeof)  
/*0x010*/         struct _DBGKD_GET_VERSION64 GetVersion64;                      // 14 elements, 0x28 bytes (sizeof) 
/*0x010*/         struct _DBGKD_BREAKPOINTEX BreakPointEx;                       // 2 elements, 0x8 bytes (sizeof)   
/*0x010*/         struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;                     // 3 elements, 0xC bytes (sizeof)   
/*0x010*/         struct _DBGKD_SEARCH_MEMORY SearchMemory;                      // 4 elements, 0x18 bytes (sizeof)  
/*0x010*/         struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;                  // 5 elements, 0x14 bytes (sizeof)  
/*0x010*/         struct _DBGKD_FILL_MEMORY FillMemory;                          // 4 elements, 0x10 bytes (sizeof)  
/*0x010*/         struct _DBGKD_QUERY_MEMORY QueryMemory;                        // 4 elements, 0x18 bytes (sizeof)  
/*0x010*/         struct _DBGKD_SWITCH_PARTITION SwitchPartition;                // 1 elements, 0x4 bytes (sizeof)   
/*0x010*/         struct _DBGKD_CONTEXT_EX GetContextEx;                         // 3 elements, 0xC bytes (sizeof)   
/*0x010*/         struct _DBGKD_CONTEXT_EX SetContextEx;                         // 3 elements, 0xC bytes (sizeof)   
/*0x010*/         struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;   // 5 elements, 0x18 bytes (sizeof)  
              }u;                                                                                                    
          }DBGKD_MANIPULATE_STATE64, *PDBGKD_MANIPULATE_STATE64;                                                     
                                                                                                                     
          typedef struct _EXCEPTION_RECORD32         // 6 elements, 0x50 bytes (sizeof) 
          {                                                                             
/*0x000*/     LONG32       ExceptionCode;                                               
/*0x004*/     ULONG32      ExceptionFlags;                                              
/*0x008*/     ULONG32      ExceptionRecord;                                             
/*0x00C*/     ULONG32      ExceptionAddress;                                            
/*0x010*/     ULONG32      NumberParameters;                                            
/*0x014*/     ULONG32      ExceptionInformation[15];                                    
          }EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;                                    
                                                                                        
          typedef struct _DBGKM_EXCEPTION32               // 2 elements, 0x54 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _EXCEPTION_RECORD32 ExceptionRecord; // 6 elements, 0x50 bytes (sizeof) 
/*0x050*/     ULONG32      FirstChance;                                                      
          }DBGKM_EXCEPTION32, *PDBGKM_EXCEPTION32;                                           
                                                                                             
          typedef struct _EXCEPTION_RECORD64         // 7 elements, 0x98 bytes (sizeof) 
          {                                                                             
/*0x000*/     LONG32       ExceptionCode;                                               
/*0x004*/     ULONG32      ExceptionFlags;                                              
/*0x008*/     UINT64       ExceptionRecord;                                             
/*0x010*/     UINT64       ExceptionAddress;                                            
/*0x018*/     ULONG32      NumberParameters;                                            
/*0x01C*/     ULONG32      __unusedAlignment;                                           
/*0x020*/     UINT64       ExceptionInformation[15];                                    
          }EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;                                    
                                                                                        
          typedef struct _DBGKM_EXCEPTION64               // 2 elements, 0xA0 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _EXCEPTION_RECORD64 ExceptionRecord; // 7 elements, 0x98 bytes (sizeof) 
/*0x098*/     ULONG32      FirstChance;                                                      
/*0x09C*/     UINT8        _PADDING0_[0x4];                                                  
          }DBGKM_EXCEPTION64, *PDBGKM_EXCEPTION64;                                           
                                                                                             
typedef struct _DBGKP_ERROR_PORT // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}DBGKP_ERROR_PORT, *PDBGKP_ERROR_PORT;                                  
                                                                   
          typedef struct _DEBUG_DEVICE_ADDRESS      // 7 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT8        Type;                                                       
/*0x001*/     UINT8        Valid;                                                      
              union                                 // 2 elements, 0x6 bytes (sizeof)  
              {                                                                        
/*0x002*/         UINT8        Reserved[2];                                            
                  struct                            // 2 elements, 0x6 bytes (sizeof)  
                  {                                                                    
/*0x002*/             UINT8        BitWidth;                                           
/*0x003*/             UINT8        AccessSize;                                         
/*0x004*/             UINT8        _PADDING0_[0x4];                                    
                  };                                                                   
              };                                                                       
/*0x008*/     UINT8*       TranslatedAddress;                                          
/*0x010*/     ULONG32      Length;                                                     
/*0x014*/     UINT8        _PADDING1_[0x4];                                            
          }DEBUG_DEVICE_ADDRESS, *PDEBUG_DEVICE_ADDRESS;                                   
                                                                                       
          typedef struct _DEBUG_MEMORY_REQUIREMENTS // 6 elements, 0x20 bytes (sizeof) 
          {                                                                            
/*0x000*/     union _LARGE_INTEGER Start;           // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER MaxEnd;          // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     VOID*        VirtualAddress;                                             
/*0x018*/     ULONG32      Length;                                                     
/*0x01C*/     UINT8        Cached;                                                     
/*0x01D*/     UINT8        Aligned;                                                    
/*0x01E*/     UINT8        _PADDING0_[0x2];                                            
          }DEBUG_MEMORY_REQUIREMENTS, *PDEBUG_MEMORY_REQUIREMENTS;                                   
                                                                                       
          typedef struct _DEBUG_TRANSPORT_DATA // 4 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      HwContextSize;                                        
/*0x004*/     UINT8        UseSerialFraming;                                     
/*0x005*/     UINT8        ValidUSBCoreId;                                       
/*0x006*/     UINT8        USBCoreId;                                            
/*0x007*/     UINT8        _PADDING0_[0x1];                                      
          }DEBUG_TRANSPORT_DATA, *PDEBUG_TRANSPORT_DATA;                                  
                                                                                 
          typedef struct _DEBUG_DEVICE_DESCRIPTOR              // 25 elements, 0xF8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Bus;                                                                    
/*0x004*/     ULONG32      Slot;                                                                   
/*0x008*/     UINT16       Segment;                                                                
/*0x00A*/     UINT16       VendorID;                                                               
/*0x00C*/     UINT16       DeviceID;                                                               
/*0x00E*/     UINT8        BaseClass;                                                              
/*0x00F*/     UINT8        SubClass;                                                               
/*0x010*/     UINT8        ProgIf;                                                                 
              union                                            // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                    
/*0x011*/         UINT8        Flags;                                                              
                  struct                                       // 3 elements, 0x1 bytes (sizeof)   
                  {                                                                                
/*0x011*/             UINT8        DbgHalScratchAllocated : 1; // 0 BitPosition                    
/*0x011*/             UINT8        DbgBarsMapped : 1;          // 1 BitPosition                    
/*0x011*/             UINT8        DbgScratchAllocated : 1;    // 2 BitPosition                    
                  };                                                                               
              };                                                                                   
/*0x012*/     UINT8        Initialized;                                                            
/*0x013*/     UINT8        Configured;                                                             
/*0x014*/     UINT8        _PADDING0_[0x4];                                                        
/*0x018*/     struct _DEBUG_DEVICE_ADDRESS BaseAddress[6];                                         
/*0x0A8*/     struct _DEBUG_MEMORY_REQUIREMENTS Memory;        // 6 elements, 0x20 bytes (sizeof)  
/*0x0C8*/     UINT16       PortType;                                                               
/*0x0CA*/     UINT16       PortSubtype;                                                            
/*0x0CC*/     UINT8        _PADDING1_[0x4];                                                        
/*0x0D0*/     VOID*        OemData;                                                                
/*0x0D8*/     ULONG32      OemDataLength;                                                          
/*0x0DC*/     enum _KD_NAMESPACE_ENUM NameSpace;                                                   
/*0x0E0*/     WCHAR*       NameSpacePath;                                                          
/*0x0E8*/     ULONG32      NameSpacePathLength;                                                    
/*0x0EC*/     ULONG32      TransportType;                                                          
/*0x0F0*/     struct _DEBUG_TRANSPORT_DATA TransportData;      // 4 elements, 0x8 bytes (sizeof)   
          }DEBUG_DEVICE_DESCRIPTOR, *PDEBUG_DEVICE_DESCRIPTOR;                                     
                                                                                                   
          typedef struct _DEFERRED_WRITE                                                                   // 10 elements, 0x50 bytes (sizeof) 
          {                                                                                                                                    
/*0x000*/     INT16        NodeTypeCode;                                                                                                       
/*0x002*/     INT16        NodeByteSize;                                                                                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                    
/*0x008*/     struct _FILE_OBJECT* FileObject;                                                                                                 
/*0x010*/     ULONG32      BytesToWrite;                                                                                                       
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                                                    
/*0x018*/     struct _LIST_ENTRY DeferredWriteLinks;                                                       // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _KEVENT* Event;                                                                                                           
/*0x030*/     FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_PostRoutine* PostRoutine;                                     
/*0x038*/     VOID*        Context1;                                                                                                           
/*0x040*/     VOID*        Context2;                                                                                                           
/*0x048*/     struct _CC_PARTITION* Partition;                                                                                                 
          }DEFERRED_WRITE, *PDEFERRED_WRITE;                                                                                                   
                                                                                                                                               
          typedef struct _DELAY_ACK_FO                 // 2 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY Links;                // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _FILE_OBJECT* OriginalFileObject;                                    
          }DELAY_ACK_FO, *PDELAY_ACK_FO;                                                  
                                                                                          
          typedef struct _DEVICE_CAPABILITIES               // 34 elements, 0x40 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Size;                                                                
/*0x002*/     UINT16       Version;                                                             
              struct                                        // 24 elements, 0x4 bytes (sizeof)  
              {                                                                                 
/*0x004*/         ULONG32      DeviceD1 : 1;                // 0 BitPosition                    
/*0x004*/         ULONG32      DeviceD2 : 1;                // 1 BitPosition                    
/*0x004*/         ULONG32      LockSupported : 1;           // 2 BitPosition                    
/*0x004*/         ULONG32      EjectSupported : 1;          // 3 BitPosition                    
/*0x004*/         ULONG32      Removable : 1;               // 4 BitPosition                    
/*0x004*/         ULONG32      DockDevice : 1;              // 5 BitPosition                    
/*0x004*/         ULONG32      UniqueID : 1;                // 6 BitPosition                    
/*0x004*/         ULONG32      SilentInstall : 1;           // 7 BitPosition                    
/*0x004*/         ULONG32      RawDeviceOK : 1;             // 8 BitPosition                    
/*0x004*/         ULONG32      SurpriseRemovalOK : 1;       // 9 BitPosition                    
/*0x004*/         ULONG32      WakeFromD0 : 1;              // 10 BitPosition                   
/*0x004*/         ULONG32      WakeFromD1 : 1;              // 11 BitPosition                   
/*0x004*/         ULONG32      WakeFromD2 : 1;              // 12 BitPosition                   
/*0x004*/         ULONG32      WakeFromD3 : 1;              // 13 BitPosition                   
/*0x004*/         ULONG32      HardwareDisabled : 1;        // 14 BitPosition                   
/*0x004*/         ULONG32      NonDynamic : 1;              // 15 BitPosition                   
/*0x004*/         ULONG32      WarmEjectSupported : 1;      // 16 BitPosition                   
/*0x004*/         ULONG32      NoDisplayInUI : 1;           // 17 BitPosition                   
/*0x004*/         ULONG32      Reserved1 : 1;               // 18 BitPosition                   
/*0x004*/         ULONG32      WakeFromInterrupt : 1;       // 19 BitPosition                   
/*0x004*/         ULONG32      SecureDevice : 1;            // 20 BitPosition                   
/*0x004*/         ULONG32      ChildOfVgaEnabledBridge : 1; // 21 BitPosition                   
/*0x004*/         ULONG32      DecodeIoOnBoot : 1;          // 22 BitPosition                   
/*0x004*/         ULONG32      Reserved : 9;                // 23 BitPosition                   
              };                                                                                
/*0x008*/     ULONG32      Address;                                                             
/*0x00C*/     ULONG32      UINumber;                                                            
/*0x010*/     enum _DEVICE_POWER_STATE DeviceState[7];                                          
/*0x02C*/     enum _SYSTEM_POWER_STATE SystemWake;                                              
/*0x030*/     enum _DEVICE_POWER_STATE DeviceWake;                                              
/*0x034*/     ULONG32      D1Latency;                                                           
/*0x038*/     ULONG32      D2Latency;                                                           
/*0x03C*/     ULONG32      D3Latency;                                                           
          }DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES;                                          
                                                                                                
          typedef struct _DEVICE_DATA_SET_RANGE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     INT64        StartingOffset;                                         
/*0x008*/     UINT64       LengthInBytes;                                          
          }DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE;                                   
                                                                                   
          typedef struct _DEVICE_DESCRIPTION      // 20 elements, 0x40 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Version;                                                   
/*0x004*/     UINT8        Master;                                                    
/*0x005*/     UINT8        ScatterGather;                                             
/*0x006*/     UINT8        DemandMode;                                                
/*0x007*/     UINT8        AutoInitialize;                                            
/*0x008*/     UINT8        Dma32BitAddresses;                                         
/*0x009*/     UINT8        IgnoreCount;                                               
/*0x00A*/     UINT8        Reserved1;                                                 
/*0x00B*/     UINT8        Dma64BitAddresses;                                         
/*0x00C*/     ULONG32      BusNumber;                                                 
/*0x010*/     ULONG32      DmaChannel;                                                
/*0x014*/     enum _INTERFACE_TYPE InterfaceType;                                     
/*0x018*/     enum _DMA_WIDTH DmaWidth;                                               
/*0x01C*/     enum _DMA_SPEED DmaSpeed;                                               
/*0x020*/     ULONG32      MaximumLength;                                             
/*0x024*/     ULONG32      DmaPort;                                                   
/*0x028*/     ULONG32      DmaAddressWidth;                                           
/*0x02C*/     ULONG32      DmaControllerInstance;                                     
/*0x030*/     ULONG32      DmaRequestLine;                                            
/*0x034*/     UINT8        _PADDING0_[0x4];                                           
/*0x038*/     union _LARGE_INTEGER DeviceAddress; // 4 elements, 0x8 bytes (sizeof)   
          }DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION;                                    
                                                                                      
          typedef struct _DEVICE_DSM_DEFINITION     // 7 elements, 0x1C bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      Action;                                                     
/*0x004*/     UINT8        SingleRange;                                                
/*0x005*/     UINT8        _PADDING0_[0x3];                                            
/*0x008*/     ULONG32      ParameterBlockAlignment;                                    
/*0x00C*/     ULONG32      ParameterBlockLength;                                       
/*0x010*/     UINT8        HasOutput;                                                  
/*0x011*/     UINT8        _PADDING1_[0x3];                                            
/*0x014*/     ULONG32      OutputBlockAlignment;                                       
/*0x018*/     ULONG32      OutputBlockLength;                                          
          }DEVICE_DSM_DEFINITION, *PDEVICE_DSM_DEFINITION;                                   
                                                                                       
          typedef struct _DEVICE_FAULT_CONFIGURATION      // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     FUNCT_00EF_40BB_FaultHandler* FaultHandler;                                    
/*0x008*/     VOID*        FaultContext;                                                     
          }DEVICE_FAULT_CONFIGURATION, *PDEVICE_FAULT_CONFIGURATION;                                   
                                                                                             
          typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES // 7 elements, 0x1C bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      Size;                                                               
/*0x004*/     ULONG32      Action;                                                             
/*0x008*/     ULONG32      Flags;                                                              
/*0x00C*/     ULONG32      ParameterBlockOffset;                                               
/*0x010*/     ULONG32      ParameterBlockLength;                                               
/*0x014*/     ULONG32      DataSetRangesOffset;                                                
/*0x018*/     ULONG32      DataSetRangesLength;                                                
          }DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;                                   
                                                                                               
          typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT // 9 elements, 0x24 bytes (sizeof) 
          {                                                                                           
/*0x000*/     ULONG32      Size;                                                                      
/*0x004*/     ULONG32      Action;                                                                    
/*0x008*/     ULONG32      Flags;                                                                     
/*0x00C*/     ULONG32      OperationStatus;                                                           
/*0x010*/     ULONG32      ExtendedError;                                                             
/*0x014*/     ULONG32      TargetDetailedError;                                                       
/*0x018*/     ULONG32      ReservedStatus;                                                            
/*0x01C*/     ULONG32      OutputBlockOffset;                                                         
/*0x020*/     ULONG32      OutputBlockLength;                                                         
          }DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;                                   
                                                                                                      
          typedef struct _DEVICE_MAP                               // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _OBJECT_DIRECTORY* DosDevicesDirectory;                                          
/*0x008*/     struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;                                    
/*0x010*/     VOID*        DosDevicesDirectoryHandle;                                                 
/*0x018*/     LONG32       ReferenceCount;                                                            
/*0x01C*/     ULONG32      DriveMap;                                                                  
/*0x020*/     UINT8        DriveType[32];                                                             
/*0x040*/     struct _EJOB* ServerSilo;                                                               
          }DEVICE_MAP, *PDEVICE_MAP;                                                                  
                                                                                                      
          typedef union _POWER_STATE                // 2 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     enum _SYSTEM_POWER_STATE SystemState;                                   
/*0x000*/     enum _DEVICE_POWER_STATE DeviceState;                                   
          }POWER_STATE, *PPOWER_STATE;                                                
                                                                                      
          typedef struct _PO_DEVICE_NOTIFY         // 12 elements, 0x68 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _LIST_ENTRY Link;             // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY PowerChildren;    // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _LIST_ENTRY PowerParents;     // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _DEVICE_OBJECT* TargetDevice;                                     
/*0x038*/     UINT8        OrderLevel;                                                 
/*0x039*/     UINT8        _PADDING0_[0x7];                                            
/*0x040*/     struct _DEVICE_OBJECT* DeviceObject;                                     
/*0x048*/     WCHAR*       DeviceName;                                                 
/*0x050*/     WCHAR*       DriverName;                                                 
/*0x058*/     ULONG32      ChildCount;                                                 
/*0x05C*/     ULONG32      ActiveChild;                                                
/*0x060*/     ULONG32      ParentCount;                                                
/*0x064*/     ULONG32      ActiveParent;                                               
          }PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY;                                       
                                                                                       
          typedef struct _PO_IRP_QUEUE     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _IRP* CurrentIrp;                                        
/*0x008*/     struct _IRP* PendingIrpList;                                    
          }PO_IRP_QUEUE, *PPO_IRP_QUEUE;                                      
                                                                              
          typedef struct _PO_IRP_MANAGER           // 2 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _PO_IRP_QUEUE DeviceIrpQueue; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _PO_IRP_QUEUE SystemIrpQueue; // 2 elements, 0x10 bytes (sizeof) 
          }PO_IRP_MANAGER, *PPO_IRP_MANAGER;                                          
                                                                                      
          typedef struct _PO_DIRECTED_DRIPS_STATE  // 6 elements, 0x38 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _LIST_ENTRY QueueLink;        // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY VisitedQueueLink; // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     ULONG32      Flags;                                                     
/*0x024*/     ULONG32      CachedFlags;                                               
/*0x028*/     ULONG32      DeviceUsageCount;                                          
/*0x02C*/     UINT8        _PADDING0_[0x4];                                           
/*0x030*/     VOID*        Diagnostic;                                                
          }PO_DIRECTED_DRIPS_STATE, *PPO_DIRECTED_DRIPS_STATE;                                   
                                                                                      
          typedef struct _DEVICE_NODE                                      // 69 elements, 0x310 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     struct _DEVICE_NODE* Sibling;                                                                     
/*0x008*/     struct _DEVICE_NODE* Child;                                                                       
/*0x010*/     struct _DEVICE_NODE* Parent;                                                                      
/*0x018*/     struct _DEVICE_NODE* LastChild;                                                                   
/*0x020*/     struct _DEVICE_OBJECT* PhysicalDeviceObject;                                                      
/*0x028*/     struct _UNICODE_STRING InstancePath;                         // 3 elements, 0x10 bytes (sizeof)   
/*0x038*/     struct _UNICODE_STRING ServiceName;                          // 3 elements, 0x10 bytes (sizeof)   
/*0x048*/     struct _IRP* PendingIrp;                                                                          
/*0x050*/     struct _POP_FX_DEVICE* FxDevice;                                                                  
/*0x058*/     LONG32       FxDeviceLock;                                                                        
/*0x05C*/     UINT8        _PADDING0_[0x4];                                                                     
/*0x060*/     struct _KEVENT FxRemoveEvent;                                // 1 elements, 0x18 bytes (sizeof)   
/*0x078*/     LONG32       FxActivationCount;                                                                   
/*0x07C*/     LONG32       FxSleepCount;                                                                        
/*0x080*/     struct _POP_FX_PLUGIN* Plugin;                                                                    
/*0x088*/     ULONG32      Level;                                                                               
/*0x08C*/     union _POWER_STATE CurrentPowerState;                        // 2 elements, 0x4 bytes (sizeof)    
/*0x090*/     struct _PO_DEVICE_NOTIFY Notify;                             // 12 elements, 0x68 bytes (sizeof)  
/*0x0F8*/     struct _PO_IRP_MANAGER PoIrpManager;                         // 2 elements, 0x20 bytes (sizeof)   
/*0x118*/     struct _UNICODE_STRING UniqueId;                             // 3 elements, 0x10 bytes (sizeof)   
/*0x128*/     ULONG32      PowerFlags;                                                                          
/*0x12C*/     enum _PNP_DEVNODE_STATE State;                                                                    
/*0x130*/     enum _PNP_DEVNODE_STATE PreviousState;                                                            
/*0x134*/     enum _PNP_DEVNODE_STATE StateHistory[20];                                                         
/*0x184*/     ULONG32      StateHistoryEntry;                                                                   
/*0x188*/     LONG32       CompletionStatus;                                                                    
/*0x18C*/     ULONG32      Flags;                                                                               
/*0x190*/     ULONG32      UserFlags;                                                                           
/*0x194*/     ULONG32      Problem;                                                                             
/*0x198*/     LONG32       ProblemStatus;                                                                       
/*0x19C*/     UINT8        _PADDING1_[0x4];                                                                     
/*0x1A0*/     struct _CM_RESOURCE_LIST* ResourceList;                                                           
/*0x1A8*/     struct _CM_RESOURCE_LIST* ResourceListTranslated;                                                 
/*0x1B0*/     struct _DEVICE_OBJECT* DuplicatePDO;                                                              
/*0x1B8*/     struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;                                      
/*0x1C0*/     enum _INTERFACE_TYPE InterfaceType;                                                               
/*0x1C4*/     ULONG32      BusNumber;                                                                           
/*0x1C8*/     enum _INTERFACE_TYPE ChildInterfaceType;                                                          
/*0x1CC*/     ULONG32      ChildBusNumber;                                                                      
/*0x1D0*/     UINT16       ChildBusTypeIndex;                                                                   
/*0x1D2*/     UINT8        RemovalPolicy;                                                                       
/*0x1D3*/     UINT8        HardwareRemovalPolicy;                                                               
/*0x1D4*/     UINT8        _PADDING2_[0x4];                                                                     
/*0x1D8*/     struct _LIST_ENTRY TargetDeviceNotify;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x1E8*/     struct _LIST_ENTRY DeviceArbiterList;                        // 2 elements, 0x10 bytes (sizeof)   
/*0x1F8*/     struct _LIST_ENTRY DeviceTranslatorList;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x208*/     UINT16       NoTranslatorMask;                                                                    
/*0x20A*/     UINT16       QueryTranslatorMask;                                                                 
/*0x20C*/     UINT16       NoArbiterMask;                                                                       
/*0x20E*/     UINT16       QueryArbiterMask;                                                                    
              union                                                        // 3 elements, 0x8 bytes (sizeof)    
              {                                                                                                 
/*0x210*/         struct _DEVICE_NODE* LegacyDeviceNode;                                                        
/*0x210*/         struct _DEVICE_RELATIONS* PendingDeviceRelations;                                             
/*0x210*/         VOID*        Information;                                                                     
              }OverUsed1;                                                                                       
              union                                                        // 1 elements, 0x8 bytes (sizeof)    
              {                                                                                                 
/*0x218*/         struct _DEVICE_NODE* NextResourceDeviceNode;                                                  
              }OverUsed2;                                                                                       
/*0x220*/     struct _CM_RESOURCE_LIST* BootResources;                                                          
/*0x228*/     struct _CM_RESOURCE_LIST* BootResourcesTranslated;                                                
/*0x230*/     ULONG32      CapabilityFlags;                                                                     
/*0x234*/     UINT8        _PADDING3_[0x4];                                                                     
              struct                                                       // 3 elements, 0x20 bytes (sizeof)   
              {                                                                                                 
/*0x238*/         enum _PROFILE_STATUS DockStatus;                                                              
/*0x23C*/         UINT8        _PADDING4_[0x4];                                                                 
/*0x240*/         struct _LIST_ENTRY ListEntry;                            // 2 elements, 0x10 bytes (sizeof)   
/*0x250*/         WCHAR*       SerialNumber;                                                                    
              }DockInfo;                                                                                        
/*0x258*/     ULONG32      DisableableDepends;                                                                  
/*0x25C*/     UINT8        _PADDING4_[0x4];                                                                     
/*0x260*/     struct _LIST_ENTRY PendedSetInterfaceState;                  // 2 elements, 0x10 bytes (sizeof)   
/*0x270*/     struct _LIST_ENTRY LegacyBusListEntry;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x280*/     ULONG32      DriverUnloadRetryCount;                                                              
/*0x284*/     UINT8        _PADDING5_[0x4];                                                                     
/*0x288*/     struct _DEVICE_NODE* PreviousParent;                                                              
/*0x290*/     LONG32       DeletedChildren;                                                                     
/*0x294*/     ULONG32      NumaNodeIndex;                                                                       
/*0x298*/     struct _GUID ContainerID;                                    // 4 elements, 0x10 bytes (sizeof)   
/*0x2A8*/     UINT8        OverrideFlags;                                                                       
/*0x2A9*/     UINT8        _PADDING6_[0x3];                                                                     
/*0x2AC*/     ULONG32      DeviceIdsHash;                                                                       
/*0x2B0*/     UINT8        RequiresUnloadedDriver;                                                              
/*0x2B1*/     UINT8        _PADDING7_[0x7];                                                                     
/*0x2B8*/     struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;                                      
/*0x2C0*/     ULONG32      StateFlags;                                                                          
/*0x2C4*/     UINT8        _PADDING8_[0x4];                                                                     
/*0x2C8*/     struct _PNP_REBALANCE_TRACE_CONTEXT* RebalanceContext;                                            
/*0x2D0*/     struct _DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;                                              
/*0x2D8*/     struct _PO_DIRECTED_DRIPS_STATE DirectedDripsState;          // 6 elements, 0x38 bytes (sizeof)   
          }DEVICE_NODE, *PDEVICE_NODE;                                                                          
                                                                                                                
typedef struct _DEVICE_NODE_IOMMU_EXTENSION // 0 elements, 0x0 bytes (sizeof) 
{                                                                             
}DEVICE_NODE_IOMMU_EXTENSION, *PDEVICE_NODE_IOMMU_EXTENSION;                                  
                                                                              
          typedef struct _KDEVICE_QUEUE_ENTRY     // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY DeviceListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SortKey;                                                  
/*0x014*/     UINT8        Inserted;                                                 
/*0x015*/     UINT8        _PADDING0_[0x3];                                          
          }KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY;                                   
                                                                                     
          typedef struct _WAIT_CONTEXT_BLOCK                    // 14 elements, 0x48 bytes (sizeof) 
          {                                                                                         
              union                                             // 2 elements, 0x18 bytes (sizeof)  
              {                                                                                     
/*0x000*/         struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;   // 3 elements, 0x18 bytes (sizeof)  
                  struct                                        // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                 
/*0x000*/             struct _LIST_ENTRY DmaWaitEntry;          // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/             ULONG32      NumberOfChannels;                                                
                      struct                                    // 5 elements, 0x4 bytes (sizeof)   
                      {                                                                             
/*0x014*/                 ULONG32      SyncCallback : 1;        // 0 BitPosition                    
/*0x014*/                 ULONG32      DmaContext : 1;          // 1 BitPosition                    
/*0x014*/                 ULONG32      ZeroMapRegisters : 1;    // 2 BitPosition                    
/*0x014*/                 ULONG32      Reserved : 9;            // 3 BitPosition                    
/*0x014*/                 ULONG32      NumberOfRemapPages : 20; // 12 BitPosition                   
                      };                                                                            
                  };                                                                                
              };                                                                                    
/*0x018*/     FUNCT_0F1F_0F1E_DeviceRoutine* DeviceRoutine;                                         
/*0x020*/     VOID*        DeviceContext;                                                           
/*0x028*/     ULONG32      NumberOfMapRegisters;                                                    
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                         
/*0x030*/     VOID*        DeviceObject;                                                            
/*0x038*/     VOID*        CurrentIrp;                                                              
/*0x040*/     struct _KDPC* BufferChainingDpc;                                                      
          }WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;                                                
                                                                                                    
          typedef struct _KDEVICE_QUEUE          // 7 elements, 0x28 bytes (sizeof) 
          {                                                                         
/*0x000*/     INT16        Type;                                                    
/*0x002*/     INT16        Size;                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                         
/*0x008*/     struct _LIST_ENTRY DeviceListHead; // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT64       Lock;                                                    
              union                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                     
/*0x020*/         UINT8        Busy;                                                
                  struct                         // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                 
/*0x020*/             INT64        Reserved : 8; // 0 BitPosition                   
/*0x020*/             INT64        Hint : 56;    // 8 BitPosition                   
                  };                                                                
              };                                                                    
          }KDEVICE_QUEUE, *PKDEVICE_QUEUE;                                          
                                                                                    
          typedef struct _DEVICE_OBJECT                        // 25 elements, 0x150 bytes (sizeof) 
          {                                                                                         
/*0x000*/     INT16        Type;                                                                    
/*0x002*/     UINT16       Size;                                                                    
/*0x004*/     LONG32       ReferenceCount;                                                          
/*0x008*/     struct _DRIVER_OBJECT* DriverObject;                                                  
/*0x010*/     struct _DEVICE_OBJECT* NextDevice;                                                    
/*0x018*/     struct _DEVICE_OBJECT* AttachedDevice;                                                
/*0x020*/     struct _IRP* CurrentIrp;                                                              
/*0x028*/     struct _IO_TIMER* Timer;                                                              
/*0x030*/     ULONG32      Flags;                                                                   
/*0x034*/     ULONG32      Characteristics;                                                         
/*0x038*/     struct _VPB* Vpb;                                                                     
/*0x040*/     VOID*        DeviceExtension;                                                         
/*0x048*/     ULONG32      DeviceType;                                                              
/*0x04C*/     CHAR         StackSize;                                                               
/*0x04D*/     UINT8        _PADDING0_[0x3];                                                         
              union                                            // 2 elements, 0x48 bytes (sizeof)   
              {                                                                                     
/*0x050*/         struct _LIST_ENTRY ListEntry;                // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/         struct _WAIT_CONTEXT_BLOCK Wcb;              // 14 elements, 0x48 bytes (sizeof)  
              }Queue;                                                                               
/*0x098*/     ULONG32      AlignmentRequirement;                                                    
/*0x09C*/     UINT8        _PADDING1_[0x4];                                                         
/*0x0A0*/     struct _KDEVICE_QUEUE DeviceQueue;               // 7 elements, 0x28 bytes (sizeof)   
/*0x0C8*/     struct _KDPC Dpc;                                // 11 elements, 0x40 bytes (sizeof)  
/*0x108*/     ULONG32      ActiveThreadCount;                                                       
/*0x10C*/     UINT8        _PADDING2_[0x4];                                                         
/*0x110*/     VOID*        SecurityDescriptor;                                                      
/*0x118*/     struct _KEVENT DeviceLock;                       // 1 elements, 0x18 bytes (sizeof)   
/*0x130*/     UINT16       SectorSize;                                                              
/*0x132*/     UINT16       Spare1;                                                                  
/*0x134*/     UINT8        _PADDING3_[0x4];                                                         
/*0x138*/     struct _DEVOBJ_EXTENSION* DeviceObjectExtension;                                      
/*0x140*/     VOID*        Reserved;                                                                
/*0x148*/     UINT8        _PADDING4_[0x8];                                                         
          }DEVICE_OBJECT, *PDEVICE_OBJECT;                                                          
                                                                                                    
          typedef struct _DEVICE_OBJECT_LIST_ENTRY       // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _DEVICE_OBJECT* DeviceObject;                                          
/*0x008*/     enum _DEVICE_RELATION_LEVEL RelationLevel;                                    
/*0x00C*/     ULONG32      Ordinal;                                                         
/*0x010*/     ULONG32      Flags;                                                           
/*0x014*/     UINT8        _PADDING0_[0x4];                                                 
          }DEVICE_OBJECT_LIST_ENTRY, *PDEVICE_OBJECT_LIST_ENTRY;                                   
                                                                                            
          typedef struct _DEVICE_OBJECT_LIST               // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Count;                                                             
/*0x004*/     ULONG32      MaxCount;                                                          
/*0x008*/     ULONG32      TagCount;                                                          
/*0x00C*/     enum _PNP_DEVICE_DELETE_TYPE OperationCode;                                     
/*0x010*/     struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];                                    
          }DEVICE_OBJECT_LIST, *PDEVICE_OBJECT_LIST;                                          
                                                                                              
          typedef struct _DEVICE_OBJECT_POWER_EXTENSION        // 14 elements, 0x60 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      IdleCount;                                                              
/*0x004*/     ULONG32      BusyCount;                                                              
/*0x008*/     ULONG32      BusyReference;                                                          
/*0x00C*/     ULONG32      TotalBusyCount;                                                         
/*0x010*/     ULONG32      ConservationIdleTime;                                                   
/*0x014*/     ULONG32      PerformanceIdleTime;                                                    
/*0x018*/     struct _DEVICE_OBJECT* DeviceObject;                                                 
/*0x020*/     struct _LIST_ENTRY IdleList;                     // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     enum _POP_DEVICE_IDLE_TYPE IdleType;                                                 
/*0x034*/     enum _DEVICE_POWER_STATE IdleState;                                                  
/*0x038*/     enum _DEVICE_POWER_STATE CurrentState;                                               
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                        
/*0x040*/     struct _POP_COOLING_EXTENSION* CoolingExtension;                                     
/*0x048*/     struct _LIST_ENTRY Volume;                       // 2 elements, 0x10 bytes (sizeof)  
              union                                            // 1 elements, 0x8 bytes (sizeof)   
              {                                                                                    
                  struct                                       // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                                
/*0x058*/             ULONG32      IdleTime;                                                       
/*0x05C*/             ULONG32      NonIdleTime;                                                    
                  }Disk;                                                                           
              }Specific;                                                                           
          }DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION;                                    
                                                                                                   
          typedef struct _DEVICE_RELATIONS       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Count;                                                   
/*0x004*/     UINT8        _PADDING0_[0x4];                                         
/*0x008*/     struct _DEVICE_OBJECT* Objects[1];                                    
          }DEVICE_RELATIONS, *PDEVICE_RELATIONS;                                    
                                                                                    
          typedef struct _DEVOBJ_EXTENSION                 // 15 elements, 0x68 bytes (sizeof) 
          {                                                                                    
/*0x000*/     INT16        Type;                                                               
/*0x002*/     UINT16       Size;                                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                    
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x010*/     ULONG32      PowerFlags;                                                         
/*0x014*/     UINT8        _PADDING1_[0x4];                                                    
/*0x018*/     struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;                                     
/*0x020*/     ULONG32      ExtensionFlags;                                                     
/*0x024*/     UINT8        _PADDING2_[0x4];                                                    
/*0x028*/     VOID*        DeviceNode;                                                         
/*0x030*/     struct _DEVICE_OBJECT* AttachedTo;                                               
/*0x038*/     LONG32       StartIoCount;                                                       
/*0x03C*/     LONG32       StartIoKey;                                                         
/*0x040*/     ULONG32      StartIoFlags;                                                       
/*0x044*/     UINT8        _PADDING3_[0x4];                                                    
/*0x048*/     struct _VPB* Vpb;                                                                
/*0x050*/     VOID*        DependencyNode;                                                     
/*0x058*/     VOID*        InterruptContext;                                                   
/*0x060*/     VOID*        VerifierContext;                                                    
          }DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;                                               
                                                                                               
          typedef struct _DIAGNOSTIC_BUFFER                 // 8 elements, 0x28 bytes (sizeof) 
          {                                                                                    
/*0x000*/     UINT64       Size;                                                               
/*0x008*/     enum _REQUESTER_TYPE CallerType;                                                 
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                    
              union                                         // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                
                  struct                                    // 3 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x010*/             UINT64       ProcessImageNameOffset;                                     
/*0x018*/             ULONG32      ProcessId;                                                  
/*0x01C*/             ULONG32      ServiceTag;                                                 
                  };                                                                           
                  struct                                    // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x010*/             UINT64       DeviceDescriptionOffset;                                    
/*0x018*/             UINT64       DevicePathOffset;                                           
                  };                                                                           
              };                                                                               
/*0x020*/     UINT64       ReasonOffset;                                                       
          }DIAGNOSTIC_BUFFER, *PDIAGNOSTIC_BUFFER;                                             
                                                                                               
          typedef struct _DIAGNOSTIC_CONTEXT           // 5 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     enum _REQUESTER_TYPE CallerType;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                               
              union                                    // 2 elements, 0x10 bytes (sizeof) 
              {                                                                           
                  struct                               // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                       
/*0x008*/             struct _EPROCESS* Process;                                          
/*0x010*/             ULONG32      ServiceTag;                                            
/*0x014*/             UINT8        _PADDING1_[0x4];                                       
                  };                                                                      
/*0x008*/         struct _DEVICE_OBJECT* DeviceObject;                                    
              };                                                                          
/*0x018*/     UINT64       ReasonSize;                                                    
          }DIAGNOSTIC_CONTEXT, *PDIAGNOSTIC_CONTEXT;                                      
                                                                                          
          typedef struct _DISALLOWED_GUIDS  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Count;                                              
/*0x002*/     UINT8        _PADDING0_[0x6];                                    
/*0x008*/     struct _GUID* Guids;                                             
          }DISALLOWED_GUIDS, *PDISALLOWED_GUIDS;                                   
                                                                               
          typedef struct _DMA_IOMMU_INTERFACE                                   // 14 elements, 0x70 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     ULONG32      Version;                                                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                         
/*0x008*/     FUNCT_00A0_4079_CreateDomain* CreateDomain;                                                           
/*0x010*/     FUNCT_00A0_4080_DeleteDomain_FlushDomain* DeleteDomain;                                               
/*0x018*/     FUNCT_00A0_4083_AttachDevice* AttachDevice;                                                           
/*0x020*/     FUNCT_00A0_4089_DetachDevice* DetachDevice;                                                           
/*0x028*/     FUNCT_00A0_4080_DeleteDomain_FlushDomain* FlushDomain;                                                
/*0x030*/     FUNCT_00A0_408E_FlushDomainByVaList* FlushDomainByVaList;                                             
/*0x038*/     FUNCT_00A0_4094_QueryInputMappings* QueryInputMappings;                                               
/*0x040*/     FUNCT_00A0_409D_MapLogicalRange* MapLogicalRange;                                                     
/*0x048*/     FUNCT_00A0_40A3_UnmapLogicalRange* UnmapLogicalRange;                                                 
/*0x050*/     FUNCT_00A0_40A8_MapIdentityRange* MapIdentityRange;                                                   
/*0x058*/     FUNCT_00A0_40AD_UnmapIdentityRange* UnmapIdentityRange;                                               
/*0x060*/     FUNCT_00A0_40B1_SetDeviceFaultReporting* SetDeviceFaultReporting;                                     
/*0x068*/     FUNCT_00A0_40DC_ConfigureDomain* ConfigureDomain;                                                     
          }DMA_IOMMU_INTERFACE, *PDMA_IOMMU_INTERFACE;                                                              
                                                                                                                    
          typedef struct _DOCK_INTERFACE                                                                                                                                                                                                                                                                                              // 7 elements, 0x30 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     UINT16       Size;                                                                                                                                                                                                                                                                                                                                         
/*0x002*/     UINT16       Version;                                                                                                                                                                                                                                                                                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                              
/*0x008*/     VOID*        Context;                                                                                                                                                                                                                                                                                                                                      
/*0x010*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceReference;                                      
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceDereference;                                    
/*0x020*/     FUNCT_0009_1A03_ProfileDepartureSetMode* ProfileDepartureSetMode;                                                                                                                                                                                                                                                                                          
/*0x028*/     FUNCT_0009_1A0C_ProfileDepartureUpdate* ProfileDepartureUpdate;                                                                                                                                                                                                                                                                                            
          }DOCK_INTERFACE, *PDOCK_INTERFACE;                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _DOMAIN_CONFIGURATION_ARM64 // 8 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     union _LARGE_INTEGER Ttbr0;            // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER Ttbr1;            // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      Mair0;                                                       
/*0x014*/     ULONG32      Mair1;                                                       
/*0x018*/     UINT8        InputSize0;                                                  
/*0x019*/     UINT8        InputSize1;                                                  
/*0x01A*/     UINT8        CoherentTableWalks;                                          
/*0x01B*/     UINT8        TranslationEnabled;                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                             
          }DOMAIN_CONFIGURATION_ARM64, *PDOMAIN_CONFIGURATION_ARM64;                                   
                                                                                        
          typedef struct _DOMAIN_CONFIGURATION          // 2 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     enum _DOMAIN_CONFIGURATION_ARCH Type;                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                
/*0x008*/     struct _DOMAIN_CONFIGURATION_ARM64 Arm64; // 8 elements, 0x20 bytes (sizeof) 
          }DOMAIN_CONFIGURATION, *PDOMAIN_CONFIGURATION;                                   
                                                                                           
          typedef struct _DRIVER_EXTENSION                        // 9 elements, 0x50 bytes (sizeof) 
          {                                                                                          
/*0x000*/     struct _DRIVER_OBJECT* DriverObject;                                                   
/*0x008*/     FUNCT_00A0_0D24_AddDevice* AddDevice;                                                  
/*0x010*/     ULONG32      Count;                                                                    
/*0x014*/     UINT8        _PADDING0_[0x4];                                                          
/*0x018*/     struct _UNICODE_STRING ServiceKeyName;              // 3 elements, 0x10 bytes (sizeof) 
/*0x028*/     struct _IO_CLIENT_EXTENSION* ClientDriverExtension;                                    
/*0x030*/     struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;                                        
/*0x038*/     VOID*        KseCallbacks;                                                             
/*0x040*/     VOID*        DvCallbacks;                                                              
/*0x048*/     VOID*        VerifierContext;                                                          
          }DRIVER_EXTENSION, *PDRIVER_EXTENSION;                                                     
                                                                                                     
          typedef struct _DRIVER_OBJECT                                   // 15 elements, 0x150 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     INT16        Type;                                                                               
/*0x002*/     INT16        Size;                                                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                    
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                                             
/*0x010*/     ULONG32      Flags;                                                                              
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                    
/*0x018*/     VOID*        DriverStart;                                                                        
/*0x020*/     ULONG32      DriverSize;                                                                         
/*0x024*/     UINT8        _PADDING2_[0x4];                                                                    
/*0x028*/     VOID*        DriverSection;                                                                      
/*0x030*/     struct _DRIVER_EXTENSION* DriverExtension;                                                       
/*0x038*/     struct _UNICODE_STRING DriverName;                          // 3 elements, 0x10 bytes (sizeof)   
/*0x048*/     struct _UNICODE_STRING* HardwareDatabase;                                                        
/*0x050*/     struct _FAST_IO_DISPATCH* FastIoDispatch;                                                        
/*0x058*/     FUNCT_00A0_0EEE_DriverInit* DriverInit;                                                          
/*0x060*/     FUNCT_00EF_0EF2_CancelRoutine_DriverStartIo* DriverStartIo;                                      
/*0x068*/     FUNCT_00EF_0EF6_DriverUnload_Function* DriverUnload;                                             
/*0x070*/     FUNCT_00A0_0EFA_MajorFunction* MajorFunction[28];                                                
          }DRIVER_OBJECT, *PDRIVER_OBJECT;                                                                     
                                                                                                               
          typedef struct _QUAD                     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 2 elements, 0x8 bytes (sizeof) 
              {                                                                      
/*0x000*/         INT64        UseThisFieldToCopy;                                   
/*0x000*/         FLOAT64      DoNotUseThisField;                                    
              };                                                                     
          }QUAD, *PQUAD;                                                             
                                                                                     
          typedef struct _OBJECT_HEADER                                // 23 elements, 0x38 bytes (sizeof) 
          {                                                                                                
/*0x000*/     INT64        PointerCount;                                                                   
              union                                                    // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                            
/*0x008*/         INT64        HandleCount;                                                                
/*0x008*/         VOID*        NextToFree;                                                                 
              };                                                                                           
/*0x010*/     struct _EX_PUSH_LOCK Lock;                               // 7 elements, 0x8 bytes (sizeof)   
/*0x018*/     UINT8        TypeIndex;                                                                      
              union                                                    // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                            
/*0x019*/         UINT8        TraceFlags;                                                                 
                  struct                                               // 2 elements, 0x1 bytes (sizeof)   
                  {                                                                                        
/*0x019*/             UINT8        DbgRefTrace : 1;                    // 0 BitPosition                    
/*0x019*/             UINT8        DbgTracePermanent : 1;              // 1 BitPosition                    
                  };                                                                                       
              };                                                                                           
/*0x01A*/     UINT8        InfoMask;                                                                       
              union                                                    // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                            
/*0x01B*/         UINT8        Flags;                                                                      
                  struct                                               // 8 elements, 0x1 bytes (sizeof)   
                  {                                                                                        
/*0x01B*/             UINT8        NewObject : 1;                      // 0 BitPosition                    
/*0x01B*/             UINT8        KernelObject : 1;                   // 1 BitPosition                    
/*0x01B*/             UINT8        KernelOnlyAccess : 1;               // 2 BitPosition                    
/*0x01B*/             UINT8        ExclusiveObject : 1;                // 3 BitPosition                    
/*0x01B*/             UINT8        PermanentObject : 1;                // 4 BitPosition                    
/*0x01B*/             UINT8        DefaultSecurityQuota : 1;           // 5 BitPosition                    
/*0x01B*/             UINT8        SingleHandleEntry : 1;              // 6 BitPosition                    
/*0x01B*/             UINT8        DeletedInline : 1;                  // 7 BitPosition                    
                  };                                                                                       
              };                                                                                           
/*0x01C*/     ULONG32      Reserved;                                                                       
              union                                                    // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                            
/*0x020*/         struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;                                     
/*0x020*/         VOID*        QuotaBlockCharged;                                                          
              };                                                                                           
/*0x028*/     VOID*        SecurityDescriptor;                                                             
/*0x030*/     struct _QUAD Body;                                       // 2 elements, 0x8 bytes (sizeof)   
          }OBJECT_HEADER, *POBJECT_HEADER;                                                                 
                                                                                                           
          typedef struct _DUMMY_FILE_OBJECT       // 2 elements, 0x110 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _OBJECT_HEADER ObjectHeader; // 23 elements, 0x38 bytes (sizeof) 
/*0x038*/     CHAR         FileObjectBody[216];                                       
          }DUMMY_FILE_OBJECT, *PDUMMY_FILE_OBJECT;                                    
                                                                                      
          typedef struct _DUMP_INITIALIZATION_CONTEXT                                                                                                                                                                                                                                                                                                                                                                             // 28 elements, 0x108 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x000*/     ULONG32      Length;                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x004*/     ULONG32      Reserved;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x008*/     VOID*        MemoryBlock;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x010*/     VOID*        CommonBuffer[2];                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x020*/     union _LARGE_INTEGER PhysicalAddress[2];                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x030*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* StallRoutine;                                                                                                                                                                                                                                                           
/*0x038*/     FUNCT_00A9_4AE6_OpenRoutine* OpenRoutine;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x040*/     FUNCT_00A0_4AE8_WriteRoutine* WriteRoutine;                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x048*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* FinishRoutine;                                      
/*0x050*/     struct _ADAPTER_OBJECT* AdapterObject;                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x058*/     VOID*        MappedRegisterBase;                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x060*/     VOID*        PortConfiguration;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x068*/     UINT8        CrashDump;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x069*/     UINT8        MarkMemoryOnly;                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x06A*/     UINT8        HiberResume;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x06B*/     UINT8        Reserved1;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x06C*/     ULONG32      MaximumTransferSize;                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x070*/     ULONG32      CommonBufferSize;                                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x074*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x078*/     VOID*        TargetAddress;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x080*/     FUNCT_00A0_4AEC_WritePendingRoutine* WritePendingRoutine;                                                                                                                                                                                                                                                                                                                                                                                                
/*0x088*/     ULONG32      PartitionStyle;                                                                                                                                                                                                                                                                                                                                                                                                                             
              union                                                                                                                                                                                                                                                                                                                                                                                                               // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                  struct                                                                                                                                                                                                                                                                                                                                                                                                          // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x08C*/             ULONG32      Signature;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x090*/             ULONG32      CheckSum;                                                                                                                                                                                                                                                                                                                                                                                                                           
                  }Mbr;                                                                                                                                                                                                                                                                                                                                                                                                                                                
                  struct                                                                                                                                                                                                                                                                                                                                                                                                          // 1 elements, 0x10 bytes (sizeof)   
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x08C*/             struct _GUID DiskId;                                                                                                                                                                                                                                                                                                                                                                                        // 4 elements, 0x10 bytes (sizeof)   
                  }Gpt;                                                                                                                                                                                                                                                                                                                                                                                                                                                
              }DiskInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x0A0*/     FUNCT_00A0_4AFA_ReadRoutine* ReadRoutine;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x0A8*/     FUNCT_00A0_4AFF_GetDriveTelemetryRoutine* GetDriveTelemetryRoutine;                                                                                                                                                                                                                                                                                                                                                                                      
/*0x0B0*/     ULONG32      LogSectionTruncateSize;                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x0B4*/     ULONG32      Parameters[16];                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x0F4*/     UINT8        _PADDING1_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x0F8*/     FUNCT_00EF_4B05_GetTransferSizesRoutine* GetTransferSizesRoutine;                                                                                                                                                                                                                                                                                                                                                                                        
/*0x100*/     FUNCT_00EF_4B07_DumpNotifyRoutine* DumpNotifyRoutine;                                                                                                                                                                                                                                                                                                                                                                                                    
          }DUMP_INITIALIZATION_CONTEXT, *PDUMP_INITIALIZATION_CONTEXT;                                                                                                                                                                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
          typedef struct _STRING            // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     CHAR*        Buffer;                                             
          }STRING, *PSTRING;                                                   
                                                                               
          typedef struct _DUMP_STACK_CONTEXT                  // 13 elements, 0x178 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _DUMP_INITIALIZATION_CONTEXT Init;       // 28 elements, 0x108 bytes (sizeof) 
/*0x108*/     union _LARGE_INTEGER PartitionOffset;           // 4 elements, 0x8 bytes (sizeof)    
              union                                           // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                    
/*0x110*/         VOID*        DumpPointers;                                                       
/*0x110*/         VOID*        StorageInfo;                                                        
              };                                                                                   
/*0x118*/     UINT8        UseStorageInfo;                                                         
/*0x119*/     UINT8        _PADDING0_[0x3];                                                        
/*0x11C*/     ULONG32      PointersLength;                                                         
/*0x120*/     WCHAR*       ModulePrefix;                                                           
/*0x128*/     struct _LIST_ENTRY DriverList;                  // 2 elements, 0x10 bytes (sizeof)   
/*0x138*/     struct _STRING InitMsg;                         // 3 elements, 0x10 bytes (sizeof)   
/*0x148*/     struct _STRING ProgMsg;                         // 3 elements, 0x10 bytes (sizeof)   
/*0x158*/     struct _STRING DoneMsg;                         // 3 elements, 0x10 bytes (sizeof)   
/*0x168*/     VOID*        FileObject;                                                             
/*0x170*/     enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;                                      
/*0x174*/     UINT8        _PADDING1_[0x4];                                                        
          }DUMP_STACK_CONTEXT, *PDUMP_STACK_CONTEXT;                                               
                                                                                                   
          typedef struct _RTL_BALANCED_NODE               // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                  
              union                                       // 2 elements, 0x10 bytes (sizeof) 
              {                                                                              
/*0x000*/         struct _RTL_BALANCED_NODE* Children[2];                                    
                  struct                                  // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                          
/*0x000*/             struct _RTL_BALANCED_NODE* Left;                                       
/*0x008*/             struct _RTL_BALANCED_NODE* Right;                                      
                  };                                                                         
              };                                                                             
              union                                       // 2 elements, 0x8 bytes (sizeof)  
              {                                                                              
                  struct                                  // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                          
/*0x010*/             UINT8        Red : 1;               // 0 BitPosition                   
/*0x010*/             UINT8        Balance : 2;           // 0 BitPosition                   
                  };                                                                         
/*0x010*/         UINT64       ParentValue;                                                  
              };                                                                             
          }RTL_BALANCED_NODE, *PRTL_BALANCED_NODE;                                           
                                                                                             
          typedef struct _DYNAMIC_FUNCTION_TABLE                   // 12 elements, 0x70 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY ListEntry;                        // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;                                     
/*0x018*/     union _LARGE_INTEGER TimeStamp;                      // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/     UINT64       MinimumAddress;                                                             
/*0x028*/     UINT64       MaximumAddress;                                                             
/*0x030*/     UINT64       BaseAddress;                                                                
/*0x038*/     FUNCT_1562_1577_Callback* Callback;                                                      
/*0x040*/     VOID*        Context;                                                                    
/*0x048*/     WCHAR*       OutOfProcessCallbackDll;                                                    
/*0x050*/     enum _FUNCTION_TABLE_TYPE Type;                                                          
/*0x054*/     ULONG32      EntryCount;                                                                 
/*0x058*/     struct _RTL_BALANCED_NODE TreeNode;                  // 6 elements, 0x18 bytes (sizeof)  
          }DYNAMIC_FUNCTION_TABLE, *PDYNAMIC_FUNCTION_TABLE;                                           
                                                                                                       
          typedef struct _ECP_LIST        // 3 elements, 0x18 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      Signature;                                        
/*0x004*/     ULONG32      Flags;                                            
/*0x008*/     struct _LIST_ENTRY EcpList; // 2 elements, 0x10 bytes (sizeof) 
          }ECP_LIST, *PECP_LIST;                                             
                                                                             
          typedef struct _EFI_FIRMWARE_INFORMATION                             // 8 elements, 0x38 bytes (sizeof) 
          {                                                                                                       
/*0x000*/     ULONG32      FirmwareVersion;                                                                       
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                       
/*0x008*/     struct _VIRTUAL_EFI_RUNTIME_SERVICES* VirtualEfiRuntimeServices;                                    
/*0x010*/     LONG32       SetVirtualAddressMapStatus;                                                            
/*0x014*/     ULONG32      MissedMappingsCount;                                                                   
/*0x018*/     struct _LIST_ENTRY FirmwareResourceList;                         // 2 elements, 0x10 bytes (sizeof) 
/*0x028*/     VOID*        EfiMemoryMap;                                                                          
/*0x030*/     ULONG32      EfiMemoryMapSize;                                                                      
/*0x034*/     ULONG32      EfiMemoryMapDescriptorSize;                                                            
          }EFI_FIRMWARE_INFORMATION, *PEFI_FIRMWARE_INFORMATION;                                                  
                                                                                                                  
          typedef struct _OWNER_ENTRY                        // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT64       OwnerThread;                                                         
              union                                          // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                 
                  struct                                     // 4 elements, 0x4 bytes (sizeof)  
                  {                                                                             
/*0x008*/             ULONG32      IoPriorityBoosted : 1;    // 0 BitPosition                   
/*0x008*/             ULONG32      OwnerReferenced : 1;      // 1 BitPosition                   
/*0x008*/             ULONG32      IoQoSPriorityBoosted : 1; // 2 BitPosition                   
/*0x008*/             ULONG32      OwnerCount : 29;          // 3 BitPosition                   
                  };                                                                            
/*0x008*/         ULONG32      TableSize;                                                       
              };                                                                                
          }OWNER_ENTRY, *POWNER_ENTRY;                                                          
                                                                                                
          typedef struct _ERESOURCE                   // 17 elements, 0x68 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY SystemResourcesList; // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _OWNER_ENTRY* OwnerTable;                                            
/*0x018*/     INT16        ActiveCount;                                                   
              union                                   // 2 elements, 0x6 bytes (sizeof)   
              {                                                                           
/*0x01A*/         UINT16       Flag;                                                      
                  struct                              // 2 elements, 0x6 bytes (sizeof)   
                  {                                                                       
/*0x01A*/             UINT8        ReservedLowFlags;                                      
/*0x01B*/             UINT8        WaiterPriority;                                        
/*0x01C*/             UINT8        _PADDING0_[0x4];                                       
                  };                                                                      
              };                                                                          
/*0x020*/     VOID*        SharedWaiters;                                                 
/*0x028*/     VOID*        ExclusiveWaiters;                                              
/*0x030*/     struct _OWNER_ENTRY OwnerEntry;         // 6 elements, 0x10 bytes (sizeof)  
/*0x040*/     ULONG32      ActiveEntries;                                                 
/*0x044*/     ULONG32      ContentionCount;                                               
/*0x048*/     ULONG32      NumberOfSharedWaiters;                                         
/*0x04C*/     ULONG32      NumberOfExclusiveWaiters;                                      
/*0x050*/     VOID*        Reserved2;                                                     
              union                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                           
/*0x058*/         VOID*        Address;                                                   
/*0x058*/         UINT64       CreatorBackTraceIndex;                                     
              };                                                                          
/*0x060*/     UINT64       SpinLock;                                                      
          }ERESOURCE, *PERESOURCE;                                                        
                                                                                          
          typedef struct _KAFFINITY_EX // 4 elements, 0xA8 bytes (sizeof) 
          {                                                               
/*0x000*/     UINT16       Count;                                         
/*0x002*/     UINT16       Size;                                          
/*0x004*/     ULONG32      Reserved;                                      
/*0x008*/     UINT64       Bitmap[20];                                    
          }KAFFINITY_EX, *PKAFFINITY_EX;                                   
                                                                          
          typedef struct _PROCESS_DISK_COUNTERS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       BytesRead;                                              
/*0x008*/     UINT64       BytesWritten;                                           
/*0x010*/     UINT64       ReadOperationCount;                                     
/*0x018*/     UINT64       WriteOperationCount;                                    
/*0x020*/     UINT64       FlushOperationCount;                                    
          }PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS;                                   
                                                                                   
          typedef struct _WNF_STATE_NAME // 1 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Data[2];                                        
          }WNF_STATE_NAME, *PWNF_STATE_NAME;                                  
                                                                           
          typedef struct _PS_JOB_WAKE_INFORMATION // 3 elements, 0x48 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       NotificationChannel;                                      
/*0x008*/     UINT64       WakeCounters[7];                                          
/*0x040*/     UINT64       NoWakeCounter;                                            
          }PS_JOB_WAKE_INFORMATION, *PPS_JOB_WAKE_INFORMATION;                                   
                                                                                     
          typedef struct _JOBOBJECT_WAKE_FILTER // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      HighEdgeFilter;                                        
/*0x004*/     ULONG32      LowEdgeFilter;                                         
          }JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER;                                  
                                                                                  
          typedef struct _EPROCESS_VALUES       // 11 elements, 0x58 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       KernelTime;                                              
/*0x008*/     UINT64       UserTime;                                                
/*0x010*/     UINT64       ReadyTime;                                               
/*0x018*/     UINT64       CycleTime;                                               
/*0x020*/     UINT64       ContextSwitches;                                         
/*0x028*/     INT64        ReadOperationCount;                                      
/*0x030*/     INT64        WriteOperationCount;                                     
/*0x038*/     INT64        OtherOperationCount;                                     
/*0x040*/     INT64        ReadTransferCount;                                       
/*0x048*/     INT64        WriteTransferCount;                                      
/*0x050*/     INT64        OtherTransferCount;                                      
          }EPROCESS_VALUES, *PEPROCESS_VALUES;                                      
                                                                                    
          typedef struct _PS_PROPERTY_SET  // 2 elements, 0x18 bytes (sizeof) 
          {                                                                   
/*0x000*/     struct _LIST_ENTRY ListHead; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Lock;                                              
          }PS_PROPERTY_SET, *PPS_PROPERTY_SET;                                   
                                                                              
          typedef struct _JOB_RATE_CONTROL_HEADER     // 4 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     VOID*        RateControlQuotaReference;                                    
/*0x008*/     struct _RTL_BITMAP OverQuotaHistory;    // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT8*       BitMapBuffer;                                                 
/*0x020*/     UINT64       BitMapBufferSize;                                             
          }JOB_RATE_CONTROL_HEADER, *PJOB_RATE_CONTROL_HEADER;                                   
                                                                                         
          typedef struct _PS_IO_CONTROL_ENTRY               // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x18 bytes (sizeof) 
              {                                                                                
/*0x000*/         struct _RTL_BALANCED_NODE VolumeTreeNode; // 6 elements, 0x18 bytes (sizeof) 
                  struct                                    // 2 elements, 0x18 bytes (sizeof) 
                  {                                                                            
/*0x000*/             struct _LIST_ENTRY FreeListEntry;     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/             UINT64       ReservedForParentValue;                                     
                  };                                                                           
              };                                                                               
/*0x018*/     UINT64       VolumeKey;                                                          
/*0x020*/     struct _EX_RUNDOWN_REF Rundown;               // 2 elements, 0x8 bytes (sizeof)  
/*0x028*/     VOID*        IoControl;                                                          
/*0x030*/     VOID*        VolumeIoAttribution;                                                
          }PS_IO_CONTROL_ENTRY, *PPS_IO_CONTROL_ENTRY;                                         
                                                                                               
          typedef struct _WORK_QUEUE_ITEM                                                                                                                                                                                                                                                                                      // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                       
/*0x000*/     struct _LIST_ENTRY List;                                                                                                                                                                                                                                                                                         // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* WorkerRoutine;                                    
/*0x018*/     VOID*        Parameter;                                                                                                                                                                                                                                                                                                                             
          }WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                                  
          typedef union _JOBOBJECT_ENERGY_TRACKING_STATE // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       Value;                                                          
              struct                                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      UpdateMask;                                                 
/*0x004*/         ULONG32      DesiredState;                                               
              };                                                                           
          }JOBOBJECT_ENERGY_TRACKING_STATE, *PJOBOBJECT_ENERGY_TRACKING_STATE;                                  
                                                                                           
          typedef struct _EJOB                                                  // 153 elements, 0x620 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     struct _KEVENT Event;                                             // 1 elements, 0x18 bytes (sizeof)    
/*0x018*/     struct _LIST_ENTRY JobLinks;                                      // 2 elements, 0x10 bytes (sizeof)    
/*0x028*/     struct _LIST_ENTRY ProcessListHead;                               // 2 elements, 0x10 bytes (sizeof)    
/*0x038*/     struct _ERESOURCE JobLock;                                        // 17 elements, 0x68 bytes (sizeof)   
/*0x0A0*/     union _LARGE_INTEGER TotalUserTime;                               // 4 elements, 0x8 bytes (sizeof)     
/*0x0A8*/     union _LARGE_INTEGER TotalKernelTime;                             // 4 elements, 0x8 bytes (sizeof)     
/*0x0B0*/     union _LARGE_INTEGER TotalCycleTime;                              // 4 elements, 0x8 bytes (sizeof)     
/*0x0B8*/     union _LARGE_INTEGER ThisPeriodTotalUserTime;                     // 4 elements, 0x8 bytes (sizeof)     
/*0x0C0*/     union _LARGE_INTEGER ThisPeriodTotalKernelTime;                   // 4 elements, 0x8 bytes (sizeof)     
/*0x0C8*/     UINT64       TotalContextSwitches;                                                                      
/*0x0D0*/     ULONG32      TotalPageFaultCount;                                                                       
/*0x0D4*/     ULONG32      TotalProcesses;                                                                            
/*0x0D8*/     ULONG32      ActiveProcesses;                                                                           
/*0x0DC*/     ULONG32      TotalTerminatedProcesses;                                                                  
/*0x0E0*/     union _LARGE_INTEGER PerProcessUserTimeLimit;                     // 4 elements, 0x8 bytes (sizeof)     
/*0x0E8*/     union _LARGE_INTEGER PerJobUserTimeLimit;                         // 4 elements, 0x8 bytes (sizeof)     
/*0x0F0*/     UINT64       MinimumWorkingSetSize;                                                                     
/*0x0F8*/     UINT64       MaximumWorkingSetSize;                                                                     
/*0x100*/     ULONG32      LimitFlags;                                                                                
/*0x104*/     ULONG32      ActiveProcessLimit;                                                                        
/*0x108*/     struct _KAFFINITY_EX Affinity;                                    // 4 elements, 0xA8 bytes (sizeof)    
/*0x1B0*/     struct _JOB_ACCESS_STATE* AccessState;                                                                  
/*0x1B8*/     VOID*        AccessStateQuotaReference;                                                                 
/*0x1C0*/     ULONG32      UIRestrictionsClass;                                                                       
/*0x1C4*/     ULONG32      EndOfJobTimeAction;                                                                        
/*0x1C8*/     VOID*        CompletionPort;                                                                            
/*0x1D0*/     VOID*        CompletionKey;                                                                             
/*0x1D8*/     UINT64       CompletionCount;                                                                           
/*0x1E0*/     ULONG32      SessionId;                                                                                 
/*0x1E4*/     ULONG32      SchedulingClass;                                                                           
/*0x1E8*/     UINT64       ReadOperationCount;                                                                        
/*0x1F0*/     UINT64       WriteOperationCount;                                                                       
/*0x1F8*/     UINT64       OtherOperationCount;                                                                       
/*0x200*/     UINT64       ReadTransferCount;                                                                         
/*0x208*/     UINT64       WriteTransferCount;                                                                        
/*0x210*/     UINT64       OtherTransferCount;                                                                        
/*0x218*/     struct _PROCESS_DISK_COUNTERS DiskIoInfo;                         // 5 elements, 0x28 bytes (sizeof)    
/*0x240*/     UINT64       ProcessMemoryLimit;                                                                        
/*0x248*/     UINT64       JobMemoryLimit;                                                                            
/*0x250*/     UINT64       JobTotalMemoryLimit;                                                                       
/*0x258*/     UINT64       PeakProcessMemoryUsed;                                                                     
/*0x260*/     UINT64       PeakJobMemoryUsed;                                                                         
/*0x268*/     struct _KAFFINITY_EX EffectiveAffinity;                           // 4 elements, 0xA8 bytes (sizeof)    
/*0x310*/     union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;            // 4 elements, 0x8 bytes (sizeof)     
/*0x318*/     UINT64       EffectiveMinimumWorkingSetSize;                                                            
/*0x320*/     UINT64       EffectiveMaximumWorkingSetSize;                                                            
/*0x328*/     UINT64       EffectiveProcessMemoryLimit;                                                               
/*0x330*/     struct _EJOB* EffectiveProcessMemoryLimitJob;                                                           
/*0x338*/     struct _EJOB* EffectivePerProcessUserTimeLimitJob;                                                      
/*0x340*/     struct _EJOB* EffectiveNetIoRateLimitJob;                                                               
/*0x348*/     struct _EJOB* EffectiveHeapAttributionJob;                                                              
/*0x350*/     ULONG32      EffectiveLimitFlags;                                                                       
/*0x354*/     ULONG32      EffectiveSchedulingClass;                                                                  
/*0x358*/     ULONG32      EffectiveFreezeCount;                                                                      
/*0x35C*/     ULONG32      EffectiveBackgroundCount;                                                                  
/*0x360*/     ULONG32      EffectiveSwapCount;                                                                        
/*0x364*/     ULONG32      EffectiveNotificationLimitCount;                                                           
/*0x368*/     UINT8        EffectivePriorityClass;                                                                    
/*0x369*/     UINT8        PriorityClass;                                                                             
/*0x36A*/     UINT8        NestingDepth;                                                                              
/*0x36B*/     UINT8        Reserved1[1];                                                                              
/*0x36C*/     ULONG32      CompletionFilter;                                                                          
              union                                                             // 2 elements, 0x48 bytes (sizeof)    
              {                                                                                                       
/*0x370*/         struct _WNF_STATE_NAME WakeChannel;                           // 1 elements, 0x8 bytes (sizeof)     
/*0x370*/         struct _PS_JOB_WAKE_INFORMATION WakeInfo;                     // 3 elements, 0x48 bytes (sizeof)    
              };                                                                                                      
/*0x3B8*/     struct _JOBOBJECT_WAKE_FILTER WakeFilter;                         // 2 elements, 0x8 bytes (sizeof)     
/*0x3C0*/     ULONG32      LowEdgeLatchFilter;                                                                        
/*0x3C4*/     UINT8        _PADDING0_[0x4];                                                                           
/*0x3C8*/     struct _EJOB* NotificationLink;                                                                         
/*0x3D0*/     UINT64       CurrentJobMemoryUsed;                                                                      
/*0x3D8*/     struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;                                                 
/*0x3E0*/     VOID*        NotificationInfoQuotaReference;                                                            
/*0x3E8*/     struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;                                             
/*0x3F0*/     struct _JOB_CPU_RATE_CONTROL* CpuRateControl;                                                           
/*0x3F8*/     VOID*        EffectiveSchedulingGroup;                                                                  
/*0x400*/     UINT64       ReadyTime;                                                                                 
/*0x408*/     struct _EX_PUSH_LOCK MemoryLimitsLock;                            // 7 elements, 0x8 bytes (sizeof)     
/*0x410*/     struct _LIST_ENTRY SiblingJobLinks;                               // 2 elements, 0x10 bytes (sizeof)    
/*0x420*/     struct _LIST_ENTRY ChildJobListHead;                              // 2 elements, 0x10 bytes (sizeof)    
/*0x430*/     struct _EJOB* ParentJob;                                                                                
/*0x438*/     struct _EJOB* RootJob;                                                                                  
/*0x440*/     struct _LIST_ENTRY IteratorListHead;                              // 2 elements, 0x10 bytes (sizeof)    
/*0x450*/     UINT64       AncestorCount;                                                                             
              union                                                             // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                       
/*0x458*/         struct _EJOB** Ancestors;                                                                           
/*0x458*/         VOID*        SessionObject;                                                                         
              };                                                                                                      
/*0x460*/     struct _EPROCESS_VALUES Accounting;                               // 11 elements, 0x58 bytes (sizeof)   
/*0x4B8*/     ULONG32      ShadowActiveProcessCount;                                                                  
/*0x4BC*/     ULONG32      ActiveAuxiliaryProcessCount;                                                               
/*0x4C0*/     ULONG32      SequenceNumber;                                                                            
/*0x4C4*/     ULONG32      JobId;                                                                                     
/*0x4C8*/     struct _GUID ContainerId;                                         // 4 elements, 0x10 bytes (sizeof)    
/*0x4D8*/     struct _GUID ContainerTelemetryId;                                // 4 elements, 0x10 bytes (sizeof)    
/*0x4E8*/     struct _ESERVERSILO_GLOBALS* ServerSiloGlobals;                                                         
/*0x4F0*/     struct _PS_PROPERTY_SET PropertySet;                              // 2 elements, 0x18 bytes (sizeof)    
/*0x508*/     struct _PSP_STORAGE* Storage;                                                                           
/*0x510*/     struct _JOB_NET_RATE_CONTROL* NetRateControl;                                                           
              union                                                             // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                       
/*0x518*/         ULONG32      JobFlags;                                                                              
                  struct                                                        // 32 elements, 0x4 bytes (sizeof)    
                  {                                                                                                   
/*0x518*/             ULONG32      CloseDone : 1;                               // 0 BitPosition                      
/*0x518*/             ULONG32      MultiGroup : 1;                              // 1 BitPosition                      
/*0x518*/             ULONG32      OutstandingNotification : 1;                 // 2 BitPosition                      
/*0x518*/             ULONG32      NotificationInProgress : 1;                  // 3 BitPosition                      
/*0x518*/             ULONG32      UILimits : 1;                                // 4 BitPosition                      
/*0x518*/             ULONG32      CpuRateControlActive : 1;                    // 5 BitPosition                      
/*0x518*/             ULONG32      OwnCpuRateControl : 1;                       // 6 BitPosition                      
/*0x518*/             ULONG32      Terminating : 1;                             // 7 BitPosition                      
/*0x518*/             ULONG32      WorkingSetLock : 1;                          // 8 BitPosition                      
/*0x518*/             ULONG32      JobFrozen : 1;                               // 9 BitPosition                      
/*0x518*/             ULONG32      Background : 1;                              // 10 BitPosition                     
/*0x518*/             ULONG32      WakeNotificationAllocated : 1;               // 11 BitPosition                     
/*0x518*/             ULONG32      WakeNotificationEnabled : 1;                 // 12 BitPosition                     
/*0x518*/             ULONG32      WakeNotificationPending : 1;                 // 13 BitPosition                     
/*0x518*/             ULONG32      LimitNotificationRequired : 1;               // 14 BitPosition                     
/*0x518*/             ULONG32      ZeroCountNotificationRequired : 1;           // 15 BitPosition                     
/*0x518*/             ULONG32      CycleTimeNotificationRequired : 1;           // 16 BitPosition                     
/*0x518*/             ULONG32      CycleTimeNotificationPending : 1;            // 17 BitPosition                     
/*0x518*/             ULONG32      TimersVirtualized : 1;                       // 18 BitPosition                     
/*0x518*/             ULONG32      JobSwapped : 1;                              // 19 BitPosition                     
/*0x518*/             ULONG32      ViolationDetected : 1;                       // 20 BitPosition                     
/*0x518*/             ULONG32      EmptyJobNotified : 1;                        // 21 BitPosition                     
/*0x518*/             ULONG32      NoSystemCharge : 1;                          // 22 BitPosition                     
/*0x518*/             ULONG32      DropNoWakeCharges : 1;                       // 23 BitPosition                     
/*0x518*/             ULONG32      NoWakeChargePolicyDecided : 1;               // 24 BitPosition                     
/*0x518*/             ULONG32      NetRateControlActive : 1;                    // 25 BitPosition                     
/*0x518*/             ULONG32      OwnNetRateControl : 1;                       // 26 BitPosition                     
/*0x518*/             ULONG32      IoRateControlActive : 1;                     // 27 BitPosition                     
/*0x518*/             ULONG32      OwnIoRateControl : 1;                        // 28 BitPosition                     
/*0x518*/             ULONG32      DisallowNewProcesses : 1;                    // 29 BitPosition                     
/*0x518*/             ULONG32      Silo : 1;                                    // 30 BitPosition                     
/*0x518*/             ULONG32      ContainerTelemetryIdSet : 1;                 // 31 BitPosition                     
                  };                                                                                                  
              };                                                                                                      
              union                                                             // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                       
/*0x51C*/         ULONG32      JobFlags2;                                                                             
                  struct                                                        // 3 elements, 0x4 bytes (sizeof)     
                  {                                                                                                   
/*0x51C*/             ULONG32      ParentLocked : 1;                            // 0 BitPosition                      
/*0x51C*/             ULONG32      EnableUsermodeSiloThreadImpersonation : 1;   // 1 BitPosition                      
/*0x51C*/             ULONG32      DisallowUsermodeSiloThreadImpersonation : 1; // 2 BitPosition                      
                  };                                                                                                  
              };                                                                                                      
/*0x520*/     struct _PROCESS_EXTENDED_ENERGY_VALUES* EnergyValues;                                                   
/*0x528*/     UINT64       SharedCommitCharge;                                                                        
/*0x530*/     ULONG32      DiskIoAttributionUserRefCount;                                                             
/*0x534*/     ULONG32      DiskIoAttributionRefCount;                                                                 
              union                                                             // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                       
/*0x538*/         VOID*        DiskIoAttributionContext;                                                              
/*0x538*/         struct _EJOB* DiskIoAttributionOwnerJob;                                                            
              };                                                                                                      
/*0x540*/     struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;              // 4 elements, 0x28 bytes (sizeof)    
/*0x568*/     struct _PS_IO_CONTROL_ENTRY GlobalIoControl;                      // 7 elements, 0x38 bytes (sizeof)    
/*0x5A0*/     LONG32       IoControlStateLock;                                                                        
/*0x5A4*/     UINT8        _PADDING1_[0x4];                                                                           
/*0x5A8*/     struct _RTL_RB_TREE VolumeIoControlTree;                          // 3 elements, 0x10 bytes (sizeof)    
/*0x5B8*/     UINT64       IoRateOverQuotaHistory;                                                                    
/*0x5C0*/     ULONG32      IoRateCurrentGeneration;                                                                   
/*0x5C4*/     ULONG32      IoRateLastQueryGeneration;                                                                 
/*0x5C8*/     ULONG32      IoRateGenerationLength;                                                                    
/*0x5CC*/     ULONG32      IoRateOverQuotaNotifySequenceId;                                                           
/*0x5D0*/     UINT64       LastThrottledIoTime;                                                                       
/*0x5D8*/     struct _EX_PUSH_LOCK IoControlLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x5E0*/     UINT64       SiloHardReferenceCount;                                                                    
/*0x5E8*/     struct _WORK_QUEUE_ITEM RundownWorkItem;                          // 3 elements, 0x20 bytes (sizeof)    
/*0x608*/     VOID*        PartitionObject;                                                                           
/*0x610*/     struct _EJOB* PartitionOwnerJob;                                                                        
/*0x618*/     union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;       // 3 elements, 0x8 bytes (sizeof)     
          }EJOB, *PEJOB;                                                                                              
                                                                                                                      
          typedef union _ENERGY_STATE_DURATION    // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Value;                                                   
              struct                              // 1 elements, 0x8 bytes (sizeof) 
              {                                                                     
/*0x000*/         ULONG32      LastChangeTime;                                      
                  struct                          // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                 
/*0x004*/             ULONG32      Duration : 31; // 0 BitPosition                  
/*0x004*/             ULONG32      IsInState : 1; // 31 BitPosition                 
                  };                                                                
              };                                                                    
          }ENERGY_STATE_DURATION, *PENERGY_STATE_DURATION;                                  
                                                                                    
          typedef struct _GROUP_AFFINITY // 3 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Mask;                                            
/*0x008*/     UINT16       Group;                                           
/*0x00A*/     UINT16       Reserved[3];                                     
          }GROUP_AFFINITY, *PGROUP_AFFINITY;                                   
                                                                            
          typedef struct _flags                      // 5 elements, 0x1 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT8        Removable : 1;            // 0 BitPosition                  
/*0x000*/     UINT8        GroupAssigned : 1;        // 1 BitPosition                  
/*0x000*/     UINT8        GroupCommitted : 1;       // 2 BitPosition                  
/*0x000*/     UINT8        GroupAssignmentFixed : 1; // 3 BitPosition                  
/*0x000*/     UINT8        Fill : 4;                 // 4 BitPosition                  
          }flags, *Pflags;                                                             
                                                                                       
          typedef struct _KHETERO_PROCESSOR_SET // 3 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       IdealMask;                                              
/*0x008*/     UINT64       PreferredMask;                                          
/*0x010*/     UINT64       AvailableMask;                                          
          }KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET;                                   
                                                                                   
          typedef struct _KNODE                            // 25 elements, 0x180 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT64       IdleNonParkedCpuSet;                                                 
/*0x008*/     UINT64       IdleSmtSet;                                                          
/*0x010*/     UINT64       IdleCpuSet;                                                          
/*0x018*/     UINT8        _PADDING0_[0x28];                                                    
/*0x040*/     UINT64       DeepIdleSet;                                                         
/*0x048*/     UINT64       IdleConstrainedSet;                                                  
/*0x050*/     UINT64       NonParkedSet;                                                        
/*0x058*/     UINT64       NonIsrTargetedSet;                                                   
/*0x060*/     LONG32       ParkLock;                                                            
/*0x064*/     ULONG32      Seed;                                                                
/*0x068*/     UINT8        _PADDING1_[0x18];                                                    
/*0x080*/     ULONG32      SiblingMask;                                                         
/*0x084*/     UINT8        _PADDING2_[0x4];                                                     
              union                                        // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                 
/*0x088*/         struct _GROUP_AFFINITY Affinity;         // 3 elements, 0x10 bytes (sizeof)   
                  struct                                   // 5 elements, 0x10 bytes (sizeof)   
                  {                                                                             
/*0x088*/             UINT8        AffinityFill[10];                                            
/*0x092*/             UINT16       NodeNumber;                                                  
/*0x094*/             UINT16       PrimaryNodeNumber;                                           
/*0x096*/             UINT8        Stride;                                                      
/*0x097*/             UINT8        Spare0;                                                      
                  };                                                                            
              };                                                                                
/*0x098*/     UINT64       SharedReadyQueueLeaders;                                             
/*0x0A0*/     ULONG32      ProximityId;                                                         
/*0x0A4*/     ULONG32      Lowest;                                                              
/*0x0A8*/     ULONG32      Highest;                                                             
/*0x0AC*/     UINT8        MaximumProcessors;                                                   
/*0x0AD*/     struct _flags Flags;                         // 5 elements, 0x1 bytes (sizeof)    
/*0x0AE*/     UINT8        Spare10;                                                             
/*0x0AF*/     UINT8        _PADDING3_[0x1];                                                     
/*0x0B0*/     struct _KHETERO_PROCESSOR_SET HeteroSets[5];                                      
/*0x128*/     UINT64       PpmConfiguredQosSets[4];                                             
/*0x148*/     UINT8        _PADDING4_[0x38];                                                    
          }KNODE, *PKNODE;                                                                      
                                                                                                
          typedef struct _ENODE                                // 2 elements, 0x1C0 bytes (sizeof)  
          {                                                                                         
/*0x000*/     struct _KNODE Ncb;                               // 25 elements, 0x180 bytes (sizeof) 
/*0x180*/     struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem; // 3 elements, 0x20 bytes (sizeof)   
/*0x1A0*/     UINT8        _PADDING0_[0x20];                                                        
          }ENODE, *PENODE;                                                                          
                                                                                                    
          typedef struct _EPARTITION                    // 13 elements, 0x80 bytes (sizeof) 
          {                                                                                 
/*0x000*/     VOID*        MmPartition;                                                     
/*0x008*/     VOID*        CcPartition;                                                     
/*0x010*/     VOID*        ExPartition;                                                     
/*0x018*/     INT64        HardReferenceCount;                                              
/*0x020*/     INT64        OpenHandleCount;                                                 
/*0x028*/     struct _LIST_ENTRY ActivePartitionLinks;  // 2 elements, 0x10 bytes (sizeof)  
/*0x038*/     struct _EPARTITION* ParentPartition;                                          
/*0x040*/     struct _WORK_QUEUE_ITEM TeardownWorkItem; // 3 elements, 0x20 bytes (sizeof)  
/*0x060*/     struct _EX_PUSH_LOCK TeardownLock;        // 7 elements, 0x8 bytes (sizeof)   
/*0x068*/     struct _EPROCESS* SystemProcess;                                              
/*0x070*/     VOID*        SystemProcessHandle;                                             
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
/*0x078*/         ULONG32      PartitionFlags;                                              
/*0x078*/         ULONG32      PairedWithJob : 1;       // 0 BitPosition                    
              };                                                                            
          }EPARTITION, *PEPARTITION;                                                        
                                                                                            
          typedef union _KEXECUTE_OPTIONS                           // 10 elements, 0x1 bytes (sizeof) 
          {                                                                                            
              struct                                                // 8 elements, 0x1 bytes (sizeof)  
              {                                                                                        
/*0x000*/         UINT8        ExecuteDisable : 1;                  // 0 BitPosition                   
/*0x000*/         UINT8        ExecuteEnable : 1;                   // 1 BitPosition                   
/*0x000*/         UINT8        DisableThunkEmulation : 1;           // 2 BitPosition                   
/*0x000*/         UINT8        Permanent : 1;                       // 3 BitPosition                   
/*0x000*/         UINT8        ExecuteDispatchEnable : 1;           // 4 BitPosition                   
/*0x000*/         UINT8        ImageDispatchEnable : 1;             // 5 BitPosition                   
/*0x000*/         UINT8        DisableExceptionChainValidation : 1; // 6 BitPosition                   
/*0x000*/         UINT8        Spare : 1;                           // 7 BitPosition                   
              };                                                                                       
/*0x000*/     UINT8        ExecuteOptions;                                                             
/*0x000*/     UINT8        ExecuteOptionsNV;                                                           
          }KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS;                                                       
                                                                                                       
          typedef union _KSTACK_COUNT           // 3 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     LONG32       Value;                                                 
              struct                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                   
/*0x000*/         ULONG32      State : 3;       // 0 BitPosition                  
/*0x000*/         ULONG32      StackCount : 29; // 3 BitPosition                  
              };                                                                  
          }KSTACK_COUNT, *PKSTACK_COUNT;                                          
                                                                                  
          typedef struct _KPROCESS                            // 45 elements, 0x2D8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _DISPATCHER_HEADER Header;               // 58 elements, 0x18 bytes (sizeof)  
/*0x018*/     struct _LIST_ENTRY ProfileListHead;             // 2 elements, 0x10 bytes (sizeof)   
/*0x028*/     UINT64       DirectoryTableBase;                                                     
/*0x030*/     struct _LIST_ENTRY ThreadListHead;              // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     ULONG32      ProcessLock;                                                            
/*0x044*/     ULONG32      ProcessTimerDelay;                                                      
/*0x048*/     UINT64       DeepFreezeStartTime;                                                    
/*0x050*/     struct _KAFFINITY_EX Affinity;                  // 4 elements, 0xA8 bytes (sizeof)   
/*0x0F8*/     struct _LIST_ENTRY ReadyListHead;               // 2 elements, 0x10 bytes (sizeof)   
/*0x108*/     struct _SINGLE_LIST_ENTRY SwapListEntry;        // 1 elements, 0x8 bytes (sizeof)    
/*0x110*/     struct _KAFFINITY_EX ActiveProcessors;          // 4 elements, 0xA8 bytes (sizeof)   
              union                                           // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                    
                  struct                                      // 11 elements, 0x4 bytes (sizeof)   
                  {                                                                                
/*0x1B8*/             ULONG32      AutoAlignment : 1;         // 0 BitPosition                     
/*0x1B8*/             ULONG32      DisableBoost : 1;          // 1 BitPosition                     
/*0x1B8*/             ULONG32      DisableQuantum : 1;        // 2 BitPosition                     
/*0x1B8*/             ULONG32      DeepFreeze : 1;            // 3 BitPosition                     
/*0x1B8*/             ULONG32      TimerVirtualization : 1;   // 4 BitPosition                     
/*0x1B8*/             ULONG32      CheckStackExtents : 1;     // 5 BitPosition                     
/*0x1B8*/             ULONG32      CacheIsolationEnabled : 1; // 6 BitPosition                     
/*0x1B8*/             ULONG32      PpmPolicy : 3;             // 7 BitPosition                     
/*0x1B8*/             ULONG32      ActiveGroupsMask : 20;     // 10 BitPosition                    
/*0x1B8*/             ULONG32      VaSpaceDeleted : 1;        // 30 BitPosition                    
/*0x1B8*/             ULONG32      ReservedFlags : 1;         // 31 BitPosition                    
                  };                                                                               
/*0x1B8*/         LONG32       ProcessFlags;                                                       
              };                                                                                   
/*0x1BC*/     CHAR         BasePriority;                                                           
/*0x1BD*/     CHAR         QuantumReset;                                                           
/*0x1BE*/     CHAR         Visited;                                                                
/*0x1BF*/     union _KEXECUTE_OPTIONS Flags;                  // 10 elements, 0x1 bytes (sizeof)   
/*0x1C0*/     ULONG32      ThreadSeed[20];                                                         
/*0x210*/     UINT16       IdealNode[20];                                                          
/*0x238*/     UINT16       IdealGlobalNode;                                                        
/*0x23A*/     UINT16       Spare1;                                                                 
/*0x23C*/     union _KSTACK_COUNT StackCount;                 // 3 elements, 0x4 bytes (sizeof)    
/*0x240*/     struct _LIST_ENTRY ProcessListEntry;            // 2 elements, 0x10 bytes (sizeof)   
/*0x250*/     UINT64       CycleTime;                                                              
/*0x258*/     UINT64       ContextSwitches;                                                        
/*0x260*/     struct _KSCHEDULING_GROUP* SchedulingGroup;                                          
/*0x268*/     ULONG32      FreezeCount;                                                            
/*0x26C*/     ULONG32      KernelTime;                                                             
/*0x270*/     ULONG32      UserTime;                                                               
/*0x274*/     ULONG32      ReadyTime;                                                              
/*0x278*/     UINT64       UserDirectoryTableBase;                                                 
/*0x280*/     UINT8        AddressPolicy;                                                          
/*0x281*/     UINT8        Spare2[71];                                                             
/*0x2C8*/     VOID*        InstrumentationCallback;                                                
              union                                           // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                    
/*0x2D0*/         UINT64       SecureHandle;                                                       
                  struct                                      // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                                
/*0x2D0*/             UINT64       SecureProcess : 1;         // 0 BitPosition                     
/*0x2D0*/             UINT64       Unused : 1;                // 1 BitPosition                     
                  }Flags;                                                                          
              }SecureState;                                                                        
          }KPROCESS, *PKPROCESS;                                                                   
                                                                                                   
          typedef struct _RTL_AVL_TREE         // 1 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _RTL_BALANCED_NODE* Root;                                   
          }RTL_AVL_TREE, *PRTL_AVL_TREE;                                         
                                                                                 
          typedef struct _SE_AUDIT_PROCESS_CREATION_INFO      // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _OBJECT_NAME_INFORMATION* ImageFileName;                                   
          }SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO;                                  
                                                                                                
          typedef struct _MMSUPPORT_FLAGS                         // 17 elements, 0x4 bytes (sizeof) 
          {                                                                                          
              union                                               // 2 elements, 0x2 bytes (sizeof)  
              {                                                                                      
                  struct                                          // 2 elements, 0x2 bytes (sizeof)  
                  {                                                                                  
                      struct                                      // 4 elements, 0x1 bytes (sizeof)  
                      {                                                                              
/*0x000*/                 UINT8        WorkingSetType : 3;        // 0 BitPosition                   
/*0x000*/                 UINT8        Reserved0 : 3;             // 3 BitPosition                   
/*0x000*/                 UINT8        MaximumWorkingSetHard : 1; // 6 BitPosition                   
/*0x000*/                 UINT8        MinimumWorkingSetHard : 1; // 7 BitPosition                   
                      };                                                                             
                      struct                                      // 4 elements, 0x1 bytes (sizeof)  
                      {                                                                              
/*0x001*/                 UINT8        SessionMaster : 1;         // 0 BitPosition                   
/*0x001*/                 UINT8        TrimmerState : 2;          // 1 BitPosition                   
/*0x001*/                 UINT8        Reserved : 1;              // 3 BitPosition                   
/*0x001*/                 UINT8        PageStealers : 4;          // 4 BitPosition                   
                      };                                                                             
                  };                                                                                 
/*0x000*/         UINT16       u1;                                                                   
              };                                                                                     
/*0x002*/     UINT8        MemoryPriority;                                                           
              union                                               // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                      
                  struct                                          // 6 elements, 0x1 bytes (sizeof)  
                  {                                                                                  
/*0x003*/             UINT8        WsleDeleted : 1;               // 0 BitPosition                   
/*0x003*/             UINT8        SvmEnabled : 1;                // 1 BitPosition                   
/*0x003*/             UINT8        ForceAge : 1;                  // 2 BitPosition                   
/*0x003*/             UINT8        ForceTrim : 1;                 // 3 BitPosition                   
/*0x003*/             UINT8        NewMaximum : 1;                // 4 BitPosition                   
/*0x003*/             UINT8        CommitReleaseState : 2;        // 5 BitPosition                   
                  };                                                                                 
/*0x003*/         UINT8        u2;                                                                   
              };                                                                                     
          }MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS;                                                       
                                                                                                     
          typedef struct _MMSUPPORT_INSTANCE               // 19 elements, 0xC0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      NextPageColor;                                                      
/*0x004*/     ULONG32      PageFaultCount;                                                     
/*0x008*/     UINT64       TrimmedPageCount;                                                   
/*0x010*/     struct _MMWSL_INSTANCE* VmWorkingSetList;                                        
/*0x018*/     struct _LIST_ENTRY WorkingSetExpansionLinks; // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     UINT64       AgeDistribution[8];                                                 
/*0x068*/     struct _KGATE* ExitOutswapGate;                                                  
/*0x070*/     UINT64       MinimumWorkingSetSize;                                              
/*0x078*/     UINT64       WorkingSetLeafSize;                                                 
/*0x080*/     UINT64       WorkingSetLeafPrivateSize;                                          
/*0x088*/     UINT64       WorkingSetSize;                                                     
/*0x090*/     UINT64       WorkingSetPrivateSize;                                              
/*0x098*/     UINT64       MaximumWorkingSetSize;                                              
/*0x0A0*/     UINT64       PeakWorkingSetSize;                                                 
/*0x0A8*/     ULONG32      HardFaultCount;                                                     
/*0x0AC*/     UINT16       LastTrimStamp;                                                      
/*0x0AE*/     UINT16       PartitionId;                                                        
/*0x0B0*/     UINT64       SelfmapLock;                                                        
/*0x0B8*/     struct _MMSUPPORT_FLAGS Flags;               // 17 elements, 0x4 bytes (sizeof)  
/*0x0BC*/     UINT8        _PADDING0_[0x4];                                                    
          }MMSUPPORT_INSTANCE, *PMMSUPPORT_INSTANCE;                                           
                                                                                               
          typedef struct _MMSUPPORT_SHARED            // 11 elements, 0x50 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       WorkingSetLock;                                                
/*0x004*/     LONG32       GoodCitizenWaiting;                                            
/*0x008*/     UINT64       ReleasedCommitDebt;                                            
/*0x010*/     UINT64       ResetPagesRepurposedCount;                                     
/*0x018*/     VOID*        WsSwapSupport;                                                 
/*0x020*/     VOID*        CommitReleaseContext;                                          
/*0x028*/     LONG32       WorkingSetCoreLock;                                            
/*0x02C*/     UINT8        _PADDING0_[0x4];                                               
/*0x030*/     VOID*        AccessLog;                                                     
/*0x038*/     UINT64       ChargedWslePages;                                              
/*0x040*/     UINT64       ActualWslePages;                                               
/*0x048*/     VOID*        ShadowMapping;                                                 
          }MMSUPPORT_SHARED, *PMMSUPPORT_SHARED;                                          
                                                                                          
          typedef struct _MMSUPPORT_FULL           // 2 elements, 0x110 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _MMSUPPORT_INSTANCE Instance; // 19 elements, 0xC0 bytes (sizeof) 
/*0x0C0*/     struct _MMSUPPORT_SHARED Shared;     // 11 elements, 0x50 bytes (sizeof) 
          }MMSUPPORT_FULL, *PMMSUPPORT_FULL;                                           
                                                                                       
          typedef struct _PS_PROTECTION        // 4 elements, 0x1 bytes (sizeof) 
          {                                                                      
              union                            // 2 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        Level;                                            
                  struct                       // 3 elements, 0x1 bytes (sizeof) 
                  {                                                              
/*0x000*/             UINT8        Type : 3;   // 0 BitPosition                  
/*0x000*/             UINT8        Audit : 1;  // 3 BitPosition                  
/*0x000*/             UINT8        Signer : 4; // 4 BitPosition                  
                  };                                                             
              };                                                                 
          }PS_PROTECTION, *PPS_PROTECTION;                                       
                                                                                 
          typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES // 7 elements, 0x8 bytes (sizeof) 
          {                                                                                  
              struct                                       // 6 elements, 0x8 bytes (sizeof) 
              {                                                                              
/*0x000*/         UINT64       DelayMs : 30;               // 0 BitPosition                  
/*0x000*/         UINT64       CoalescingWindowMs : 30;    // 30 BitPosition                 
/*0x000*/         UINT64       Reserved : 1;               // 60 BitPosition                 
/*0x000*/         UINT64       NewTimerWheel : 1;          // 61 BitPosition                 
/*0x000*/         UINT64       Retry : 1;                  // 62 BitPosition                 
/*0x000*/         UINT64       Locked : 1;                 // 63 BitPosition                 
              };                                                                             
/*0x000*/     UINT64       All;                                                              
          }PS_INTERLOCKED_TIMER_DELAY_VALUES, *PPS_INTERLOCKED_TIMER_DELAY_VALUES;                                  
                                                                                             
          typedef struct _PS_PROCESS_WAKE_INFORMATION   // 4 elements, 0x30 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       NotificationChannel;                                            
/*0x008*/     ULONG32      WakeCounters[7];                                                
/*0x024*/     struct _JOBOBJECT_WAKE_FILTER WakeFilter; // 2 elements, 0x8 bytes (sizeof)  
/*0x02C*/     ULONG32      NoWakeCounter;                                                  
          }PS_PROCESS_WAKE_INFORMATION, *PPS_PROCESS_WAKE_INFORMATION;                                   
                                                                                           
          typedef struct _EPROCESS                                               // 227 elements, 0x850 bytes (sizeof) 
          {                                                                                                            
/*0x000*/     struct _KPROCESS Pcb;                                              // 45 elements, 0x2D8 bytes (sizeof)  
/*0x2D8*/     struct _EX_PUSH_LOCK ProcessLock;                                  // 7 elements, 0x8 bytes (sizeof)     
/*0x2E0*/     VOID*        UniqueProcessId;                                                                            
/*0x2E8*/     struct _LIST_ENTRY ActiveProcessLinks;                             // 2 elements, 0x10 bytes (sizeof)    
/*0x2F8*/     struct _EX_RUNDOWN_REF RundownProtect;                             // 2 elements, 0x8 bytes (sizeof)     
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x300*/         ULONG32      Flags2;                                                                                 
                  struct                                                         // 28 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x300*/             ULONG32      JobNotReallyActive : 1;                       // 0 BitPosition                      
/*0x300*/             ULONG32      AccountingFolded : 1;                         // 1 BitPosition                      
/*0x300*/             ULONG32      NewProcessReported : 1;                       // 2 BitPosition                      
/*0x300*/             ULONG32      ExitProcessReported : 1;                      // 3 BitPosition                      
/*0x300*/             ULONG32      ReportCommitChanges : 1;                      // 4 BitPosition                      
/*0x300*/             ULONG32      LastReportMemory : 1;                         // 5 BitPosition                      
/*0x300*/             ULONG32      ForceWakeCharge : 1;                          // 6 BitPosition                      
/*0x300*/             ULONG32      CrossSessionCreate : 1;                       // 7 BitPosition                      
/*0x300*/             ULONG32      NeedsHandleRundown : 1;                       // 8 BitPosition                      
/*0x300*/             ULONG32      RefTraceEnabled : 1;                          // 9 BitPosition                      
/*0x300*/             ULONG32      PicoCreated : 1;                              // 10 BitPosition                     
/*0x300*/             ULONG32      EmptyJobEvaluated : 1;                        // 11 BitPosition                     
/*0x300*/             ULONG32      DefaultPagePriority : 3;                      // 12 BitPosition                     
/*0x300*/             ULONG32      PrimaryTokenFrozen : 1;                       // 15 BitPosition                     
/*0x300*/             ULONG32      ProcessVerifierTarget : 1;                    // 16 BitPosition                     
/*0x300*/             ULONG32      RestrictSetThreadContext : 1;                 // 17 BitPosition                     
/*0x300*/             ULONG32      AffinityPermanent : 1;                        // 18 BitPosition                     
/*0x300*/             ULONG32      AffinityUpdateEnable : 1;                     // 19 BitPosition                     
/*0x300*/             ULONG32      PropagateNode : 1;                            // 20 BitPosition                     
/*0x300*/             ULONG32      ExplicitAffinity : 1;                         // 21 BitPosition                     
/*0x300*/             ULONG32      ProcessExecutionState : 2;                    // 22 BitPosition                     
/*0x300*/             ULONG32      EnableReadVmLogging : 1;                      // 24 BitPosition                     
/*0x300*/             ULONG32      EnableWriteVmLogging : 1;                     // 25 BitPosition                     
/*0x300*/             ULONG32      FatalAccessTerminationRequested : 1;          // 26 BitPosition                     
/*0x300*/             ULONG32      DisableSystemAllowedCpuSet : 1;               // 27 BitPosition                     
/*0x300*/             ULONG32      ProcessStateChangeRequest : 2;                // 28 BitPosition                     
/*0x300*/             ULONG32      ProcessStateChangeInProgress : 1;             // 30 BitPosition                     
/*0x300*/             ULONG32      InPrivate : 1;                                // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x304*/         ULONG32      Flags;                                                                                  
                  struct                                                         // 29 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x304*/             ULONG32      CreateReported : 1;                           // 0 BitPosition                      
/*0x304*/             ULONG32      NoDebugInherit : 1;                           // 1 BitPosition                      
/*0x304*/             ULONG32      ProcessExiting : 1;                           // 2 BitPosition                      
/*0x304*/             ULONG32      ProcessDelete : 1;                            // 3 BitPosition                      
/*0x304*/             ULONG32      ManageExecutableMemoryWrites : 1;             // 4 BitPosition                      
/*0x304*/             ULONG32      VmDeleted : 1;                                // 5 BitPosition                      
/*0x304*/             ULONG32      OutswapEnabled : 1;                           // 6 BitPosition                      
/*0x304*/             ULONG32      Outswapped : 1;                               // 7 BitPosition                      
/*0x304*/             ULONG32      FailFastOnCommitFail : 1;                     // 8 BitPosition                      
/*0x304*/             ULONG32      Wow64VaSpace4Gb : 1;                          // 9 BitPosition                      
/*0x304*/             ULONG32      AddressSpaceInitialized : 2;                  // 10 BitPosition                     
/*0x304*/             ULONG32      SetTimerResolution : 1;                       // 12 BitPosition                     
/*0x304*/             ULONG32      BreakOnTermination : 1;                       // 13 BitPosition                     
/*0x304*/             ULONG32      DeprioritizeViews : 1;                        // 14 BitPosition                     
/*0x304*/             ULONG32      WriteWatch : 1;                               // 15 BitPosition                     
/*0x304*/             ULONG32      ProcessInSession : 1;                         // 16 BitPosition                     
/*0x304*/             ULONG32      OverrideAddressSpace : 1;                     // 17 BitPosition                     
/*0x304*/             ULONG32      HasAddressSpace : 1;                          // 18 BitPosition                     
/*0x304*/             ULONG32      LaunchPrefetched : 1;                         // 19 BitPosition                     
/*0x304*/             ULONG32      Background : 1;                               // 20 BitPosition                     
/*0x304*/             ULONG32      VmTopDown : 1;                                // 21 BitPosition                     
/*0x304*/             ULONG32      ImageNotifyDone : 1;                          // 22 BitPosition                     
/*0x304*/             ULONG32      PdeUpdateNeeded : 1;                          // 23 BitPosition                     
/*0x304*/             ULONG32      VdmAllowed : 1;                               // 24 BitPosition                     
/*0x304*/             ULONG32      ProcessRundown : 1;                           // 25 BitPosition                     
/*0x304*/             ULONG32      ProcessInserted : 1;                          // 26 BitPosition                     
/*0x304*/             ULONG32      DefaultIoPriority : 3;                        // 27 BitPosition                     
/*0x304*/             ULONG32      ProcessSelfDelete : 1;                        // 30 BitPosition                     
/*0x304*/             ULONG32      SetTimerResolutionLink : 1;                   // 31 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x308*/     union _LARGE_INTEGER CreateTime;                                   // 4 elements, 0x8 bytes (sizeof)     
/*0x310*/     UINT64       ProcessQuotaUsage[2];                                                                       
/*0x320*/     UINT64       ProcessQuotaPeak[2];                                                                        
/*0x330*/     UINT64       PeakVirtualSize;                                                                            
/*0x338*/     UINT64       VirtualSize;                                                                                
/*0x340*/     struct _LIST_ENTRY SessionProcessLinks;                            // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 3 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
/*0x350*/         VOID*        ExceptionPortData;                                                                      
/*0x350*/         UINT64       ExceptionPortValue;                                                                     
/*0x350*/         UINT64       ExceptionPortState : 3;                           // 0 BitPosition                      
              };                                                                                                       
/*0x358*/     struct _EX_FAST_REF Token;                                         // 3 elements, 0x8 bytes (sizeof)     
/*0x360*/     UINT64       MmReserved;                                                                                 
/*0x368*/     struct _EX_PUSH_LOCK AddressCreationLock;                          // 7 elements, 0x8 bytes (sizeof)     
/*0x370*/     struct _EX_PUSH_LOCK PageTableCommitmentLock;                      // 7 elements, 0x8 bytes (sizeof)     
/*0x378*/     struct _ETHREAD* RotateInProgress;                                                                       
/*0x380*/     struct _ETHREAD* ForkInProgress;                                                                         
/*0x388*/     struct _EJOB* CommitChargeJob;                                                                           
/*0x390*/     struct _RTL_AVL_TREE CloneRoot;                                    // 1 elements, 0x8 bytes (sizeof)     
/*0x398*/     UINT64       NumberOfPrivatePages;                                                                       
/*0x3A0*/     UINT64       NumberOfLockedPages;                                                                        
/*0x3A8*/     VOID*        Win32Process;                                                                               
/*0x3B0*/     struct _EJOB* Job;                                                                                       
/*0x3B8*/     VOID*        SectionObject;                                                                              
/*0x3C0*/     VOID*        SectionBaseAddress;                                                                         
/*0x3C8*/     ULONG32      Cookie;                                                                                     
/*0x3CC*/     UINT8        _PADDING0_[0x4];                                                                            
/*0x3D0*/     struct _PAGEFAULT_HISTORY* WorkingSetWatch;                                                              
/*0x3D8*/     VOID*        Win32WindowStation;                                                                         
/*0x3E0*/     VOID*        InheritedFromUniqueProcessId;                                                               
/*0x3E8*/     VOID*        Spare0;                                                                                     
/*0x3F0*/     UINT64       OwnerProcessId;                                                                             
/*0x3F8*/     struct _PEB* Peb;                                                                                        
/*0x400*/     struct _MM_SESSION_SPACE* Session;                                                                       
/*0x408*/     VOID*        Spare1;                                                                                     
/*0x410*/     struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;                                                                
/*0x418*/     struct _HANDLE_TABLE* ObjectTable;                                                                       
/*0x420*/     VOID*        DebugPort;                                                                                  
/*0x428*/     struct _EWOW64PROCESS* WoW64Process;                                                                     
/*0x430*/     VOID*        DeviceMap;                                                                                  
/*0x438*/     VOID*        EtwDataSource;                                                                              
/*0x440*/     UINT64       PageDirectoryPte;                                                                           
/*0x448*/     struct _FILE_OBJECT* ImageFilePointer;                                                                   
/*0x450*/     UINT8        ImageFileName[15];                                                                          
/*0x45F*/     UINT8        PriorityClass;                                                                              
/*0x460*/     VOID*        SecurityPort;                                                                               
/*0x468*/     struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo; // 1 elements, 0x8 bytes (sizeof)     
/*0x470*/     struct _LIST_ENTRY JobLinks;                                       // 2 elements, 0x10 bytes (sizeof)    
/*0x480*/     VOID*        HighestUserAddress;                                                                         
/*0x488*/     struct _LIST_ENTRY ThreadListHead;                                 // 2 elements, 0x10 bytes (sizeof)    
/*0x498*/     ULONG32      ActiveThreads;                                                                              
/*0x49C*/     ULONG32      ImagePathHash;                                                                              
/*0x4A0*/     ULONG32      DefaultHardErrorProcessing;                                                                 
/*0x4A4*/     LONG32       LastThreadExitStatus;                                                                       
/*0x4A8*/     struct _EX_FAST_REF PrefetchTrace;                                 // 3 elements, 0x8 bytes (sizeof)     
/*0x4B0*/     VOID*        LockedPagesList;                                                                            
/*0x4B8*/     union _LARGE_INTEGER ReadOperationCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4C0*/     union _LARGE_INTEGER WriteOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x4C8*/     union _LARGE_INTEGER OtherOperationCount;                          // 4 elements, 0x8 bytes (sizeof)     
/*0x4D0*/     union _LARGE_INTEGER ReadTransferCount;                            // 4 elements, 0x8 bytes (sizeof)     
/*0x4D8*/     union _LARGE_INTEGER WriteTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4E0*/     union _LARGE_INTEGER OtherTransferCount;                           // 4 elements, 0x8 bytes (sizeof)     
/*0x4E8*/     UINT64       CommitChargeLimit;                                                                          
/*0x4F0*/     UINT64       CommitCharge;                                                                               
/*0x4F8*/     UINT64       CommitChargePeak;                                                                           
/*0x500*/     struct _MMSUPPORT_FULL Vm;                                         // 2 elements, 0x110 bytes (sizeof)   
/*0x610*/     struct _LIST_ENTRY MmProcessLinks;                                 // 2 elements, 0x10 bytes (sizeof)    
/*0x620*/     ULONG32      ModifiedPageCount;                                                                          
/*0x624*/     LONG32       ExitStatus;                                                                                 
/*0x628*/     struct _RTL_AVL_TREE VadRoot;                                      // 1 elements, 0x8 bytes (sizeof)     
/*0x630*/     VOID*        VadHint;                                                                                    
/*0x638*/     UINT64       VadCount;                                                                                   
/*0x640*/     UINT64       VadPhysicalPages;                                                                           
/*0x648*/     UINT64       VadPhysicalPagesLimit;                                                                      
/*0x650*/     struct _ALPC_PROCESS_CONTEXT AlpcContext;                          // 3 elements, 0x20 bytes (sizeof)    
/*0x670*/     struct _LIST_ENTRY TimerResolutionLink;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x680*/     struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;                                                
/*0x688*/     ULONG32      RequestedTimerResolution;                                                                   
/*0x68C*/     ULONG32      SmallestTimerResolution;                                                                    
/*0x690*/     union _LARGE_INTEGER ExitTime;                                     // 4 elements, 0x8 bytes (sizeof)     
/*0x698*/     struct _INVERTED_FUNCTION_TABLE* InvertedFunctionTable;                                                  
/*0x6A0*/     struct _EX_PUSH_LOCK InvertedFunctionTableLock;                    // 7 elements, 0x8 bytes (sizeof)     
/*0x6A8*/     ULONG32      ActiveThreadsHighWatermark;                                                                 
/*0x6AC*/     ULONG32      LargePrivateVadCount;                                                                       
/*0x6B0*/     struct _EX_PUSH_LOCK ThreadListLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6B8*/     VOID*        WnfContext;                                                                                 
/*0x6C0*/     struct _EJOB* ServerSilo;                                                                                
/*0x6C8*/     UINT8        SignatureLevel;                                                                             
/*0x6C9*/     UINT8        SectionSignatureLevel;                                                                      
/*0x6CA*/     struct _PS_PROTECTION Protection;                                  // 4 elements, 0x1 bytes (sizeof)     
              struct                                                             // 3 elements, 0x1 bytes (sizeof)     
              {                                                                                                        
/*0x6CB*/         UINT8        HangCount : 3;                                    // 0 BitPosition                      
/*0x6CB*/         UINT8        GhostCount : 3;                                   // 3 BitPosition                      
/*0x6CB*/         UINT8        PrefilterException : 1;                           // 6 BitPosition                      
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x6CC*/         ULONG32      Flags3;                                                                                 
                  struct                                                         // 24 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x6CC*/             ULONG32      Minimal : 1;                                  // 0 BitPosition                      
/*0x6CC*/             ULONG32      ReplacingPageRoot : 1;                        // 1 BitPosition                      
/*0x6CC*/             ULONG32      Crashed : 1;                                  // 2 BitPosition                      
/*0x6CC*/             ULONG32      JobVadsAreTracked : 1;                        // 3 BitPosition                      
/*0x6CC*/             ULONG32      VadTrackingDisabled : 1;                      // 4 BitPosition                      
/*0x6CC*/             ULONG32      AuxiliaryProcess : 1;                         // 5 BitPosition                      
/*0x6CC*/             ULONG32      SubsystemProcess : 1;                         // 6 BitPosition                      
/*0x6CC*/             ULONG32      IndirectCpuSets : 1;                          // 7 BitPosition                      
/*0x6CC*/             ULONG32      RelinquishedCommit : 1;                       // 8 BitPosition                      
/*0x6CC*/             ULONG32      HighGraphicsPriority : 1;                     // 9 BitPosition                      
/*0x6CC*/             ULONG32      CommitFailLogged : 1;                         // 10 BitPosition                     
/*0x6CC*/             ULONG32      ReserveFailLogged : 1;                        // 11 BitPosition                     
/*0x6CC*/             ULONG32      SystemProcess : 1;                            // 12 BitPosition                     
/*0x6CC*/             ULONG32      HideImageBaseAddresses : 1;                   // 13 BitPosition                     
/*0x6CC*/             ULONG32      AddressPolicyFrozen : 1;                      // 14 BitPosition                     
/*0x6CC*/             ULONG32      ProcessFirstResume : 1;                       // 15 BitPosition                     
/*0x6CC*/             ULONG32      ForegroundExternal : 1;                       // 16 BitPosition                     
/*0x6CC*/             ULONG32      ForegroundSystem : 1;                         // 17 BitPosition                     
/*0x6CC*/             ULONG32      HighMemoryPriority : 1;                       // 18 BitPosition                     
/*0x6CC*/             ULONG32      EnableProcessSuspendResumeLogging : 1;        // 19 BitPosition                     
/*0x6CC*/             ULONG32      EnableThreadSuspendResumeLogging : 1;         // 20 BitPosition                     
/*0x6CC*/             ULONG32      SecurityDomainChanged : 1;                    // 21 BitPosition                     
/*0x6CC*/             ULONG32      SecurityFreezeComplete : 1;                   // 22 BitPosition                     
/*0x6CC*/             ULONG32      VmProcessorHost : 1;                          // 23 BitPosition                     
                  };                                                                                                   
              };                                                                                                       
/*0x6D0*/     LONG32       DeviceAsid;                                                                                 
/*0x6D4*/     UINT8        _PADDING1_[0x4];                                                                            
/*0x6D8*/     VOID*        SvmData;                                                                                    
/*0x6E0*/     struct _EX_PUSH_LOCK SvmProcessLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6E8*/     UINT64       SvmLock;                                                                                    
/*0x6F0*/     struct _LIST_ENTRY SvmProcessDeviceListHead;                       // 2 elements, 0x10 bytes (sizeof)    
/*0x700*/     UINT64       LastFreezeInterruptTime;                                                                    
/*0x708*/     struct _PROCESS_DISK_COUNTERS* DiskCounters;                                                             
/*0x710*/     VOID*        PicoContext;                                                                                
/*0x718*/     VOID*        EnclaveTable;                                                                               
/*0x720*/     UINT64       EnclaveNumber;                                                                              
/*0x728*/     struct _EX_PUSH_LOCK EnclaveLock;                                  // 7 elements, 0x8 bytes (sizeof)     
/*0x730*/     ULONG32      HighPriorityFaultsAllowed;                                                                  
/*0x734*/     UINT8        _PADDING2_[0x4];                                                                            
/*0x738*/     struct _PO_PROCESS_ENERGY_CONTEXT* EnergyContext;                                                        
/*0x740*/     VOID*        VmContext;                                                                                  
/*0x748*/     UINT64       SequenceNumber;                                                                             
/*0x750*/     UINT64       CreateInterruptTime;                                                                        
/*0x758*/     UINT64       CreateUnbiasedInterruptTime;                                                                
/*0x760*/     UINT64       TotalUnbiasedFrozenTime;                                                                    
/*0x768*/     UINT64       LastAppStateUpdateTime;                                                                     
              struct                                                             // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                        
/*0x770*/         UINT64       LastAppStateUptime : 61;                          // 0 BitPosition                      
/*0x770*/         UINT64       LastAppState : 3;                                 // 61 BitPosition                     
              };                                                                                                       
/*0x778*/     UINT64       SharedCommitCharge;                                                                         
/*0x780*/     struct _EX_PUSH_LOCK SharedCommitLock;                             // 7 elements, 0x8 bytes (sizeof)     
/*0x788*/     struct _LIST_ENTRY SharedCommitLinks;                              // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                        
                  struct                                                         // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                    
/*0x798*/             UINT64       AllowedCpuSets;                                                                     
/*0x7A0*/             UINT64       DefaultCpuSets;                                                                     
                  };                                                                                                   
                  struct                                                         // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                    
/*0x798*/             UINT64*      AllowedCpuSetsIndirect;                                                             
/*0x7A0*/             UINT64*      DefaultCpuSetsIndirect;                                                             
                  };                                                                                                   
              };                                                                                                       
/*0x7A8*/     VOID*        DiskIoAttribution;                                                                          
/*0x7B0*/     VOID*        DxgProcess;                                                                                 
/*0x7B8*/     ULONG32      Win32KFilterSet;                                                                            
/*0x7BC*/     UINT8        _PADDING3_[0x4];                                                                            
/*0x7C0*/     union _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;        // 7 elements, 0x8 bytes (sizeof)     
/*0x7C8*/     ULONG32      KTimerSets;                                                                                 
/*0x7CC*/     ULONG32      KTimer2Sets;                                                                                
/*0x7D0*/     ULONG32      ThreadTimerSets;                                                                            
/*0x7D4*/     UINT8        _PADDING4_[0x4];                                                                            
/*0x7D8*/     UINT64       VirtualTimerListLock;                                                                       
/*0x7E0*/     struct _LIST_ENTRY VirtualTimerListHead;                           // 2 elements, 0x10 bytes (sizeof)    
              union                                                              // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                        
/*0x7F0*/         struct _WNF_STATE_NAME WakeChannel;                            // 1 elements, 0x8 bytes (sizeof)     
/*0x7F0*/         struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;                  // 4 elements, 0x30 bytes (sizeof)    
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x820*/         ULONG32      MitigationFlags;                                                                        
                  struct                                                         // 32 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x820*/             ULONG32      ControlFlowGuardEnabled : 1;                  // 0 BitPosition                      
/*0x820*/             ULONG32      ControlFlowGuardExportSuppressionEnabled : 1; // 1 BitPosition                      
/*0x820*/             ULONG32      ControlFlowGuardStrict : 1;                   // 2 BitPosition                      
/*0x820*/             ULONG32      DisallowStrippedImages : 1;                   // 3 BitPosition                      
/*0x820*/             ULONG32      ForceRelocateImages : 1;                      // 4 BitPosition                      
/*0x820*/             ULONG32      HighEntropyASLREnabled : 1;                   // 5 BitPosition                      
/*0x820*/             ULONG32      StackRandomizationDisabled : 1;               // 6 BitPosition                      
/*0x820*/             ULONG32      ExtensionPointDisable : 1;                    // 7 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCode : 1;                       // 8 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCodeAllowOptOut : 1;            // 9 BitPosition                      
/*0x820*/             ULONG32      DisableDynamicCodeAllowRemoteDowngrade : 1;   // 10 BitPosition                     
/*0x820*/             ULONG32      AuditDisableDynamicCode : 1;                  // 11 BitPosition                     
/*0x820*/             ULONG32      DisallowWin32kSystemCalls : 1;                // 12 BitPosition                     
/*0x820*/             ULONG32      AuditDisallowWin32kSystemCalls : 1;           // 13 BitPosition                     
/*0x820*/             ULONG32      EnableFilteredWin32kAPIs : 1;                 // 14 BitPosition                     
/*0x820*/             ULONG32      AuditFilteredWin32kAPIs : 1;                  // 15 BitPosition                     
/*0x820*/             ULONG32      DisableNonSystemFonts : 1;                    // 16 BitPosition                     
/*0x820*/             ULONG32      AuditNonSystemFontLoading : 1;                // 17 BitPosition                     
/*0x820*/             ULONG32      PreferSystem32Images : 1;                     // 18 BitPosition                     
/*0x820*/             ULONG32      ProhibitRemoteImageMap : 1;                   // 19 BitPosition                     
/*0x820*/             ULONG32      AuditProhibitRemoteImageMap : 1;              // 20 BitPosition                     
/*0x820*/             ULONG32      ProhibitLowILImageMap : 1;                    // 21 BitPosition                     
/*0x820*/             ULONG32      AuditProhibitLowILImageMap : 1;               // 22 BitPosition                     
/*0x820*/             ULONG32      SignatureMitigationOptIn : 1;                 // 23 BitPosition                     
/*0x820*/             ULONG32      AuditBlockNonMicrosoftBinaries : 1;           // 24 BitPosition                     
/*0x820*/             ULONG32      AuditBlockNonMicrosoftBinariesAllowStore : 1; // 25 BitPosition                     
/*0x820*/             ULONG32      LoaderIntegrityContinuityEnabled : 1;         // 26 BitPosition                     
/*0x820*/             ULONG32      AuditLoaderIntegrityContinuity : 1;           // 27 BitPosition                     
/*0x820*/             ULONG32      EnableModuleTamperingProtection : 1;          // 28 BitPosition                     
/*0x820*/             ULONG32      EnableModuleTamperingProtectionNoInherit : 1; // 29 BitPosition                     
/*0x820*/             ULONG32      RestrictIndirectBranchPrediction : 1;         // 30 BitPosition                     
/*0x820*/             ULONG32      IsolateSecurityDomain : 1;                    // 31 BitPosition                     
                  }MitigationFlagsValues;                                                                              
              };                                                                                                       
              union                                                              // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                        
/*0x824*/         ULONG32      MitigationFlags2;                                                                       
                  struct                                                         // 15 elements, 0x4 bytes (sizeof)    
                  {                                                                                                    
/*0x824*/             ULONG32      EnableExportAddressFilter : 1;                // 0 BitPosition                      
/*0x824*/             ULONG32      AuditExportAddressFilter : 1;                 // 1 BitPosition                      
/*0x824*/             ULONG32      EnableExportAddressFilterPlus : 1;            // 2 BitPosition                      
/*0x824*/             ULONG32      AuditExportAddressFilterPlus : 1;             // 3 BitPosition                      
/*0x824*/             ULONG32      EnableRopStackPivot : 1;                      // 4 BitPosition                      
/*0x824*/             ULONG32      AuditRopStackPivot : 1;                       // 5 BitPosition                      
/*0x824*/             ULONG32      EnableRopCallerCheck : 1;                     // 6 BitPosition                      
/*0x824*/             ULONG32      AuditRopCallerCheck : 1;                      // 7 BitPosition                      
/*0x824*/             ULONG32      EnableRopSimExec : 1;                         // 8 BitPosition                      
/*0x824*/             ULONG32      AuditRopSimExec : 1;                          // 9 BitPosition                      
/*0x824*/             ULONG32      EnableImportAddressFilter : 1;                // 10 BitPosition                     
/*0x824*/             ULONG32      AuditImportAddressFilter : 1;                 // 11 BitPosition                     
/*0x824*/             ULONG32      DisablePageCombine : 1;                       // 12 BitPosition                     
/*0x824*/             ULONG32      SpeculativeStoreBypassDisable : 1;            // 13 BitPosition                     
/*0x824*/             ULONG32      CetShadowStacks : 1;                          // 14 BitPosition                     
                  }MitigationFlags2Values;                                                                             
              };                                                                                                       
/*0x828*/     VOID*        PartitionObject;                                                                            
/*0x830*/     UINT64       SecurityDomain;                                                                             
/*0x838*/     UINT64       ParentSecurityDomain;                                                                       
/*0x840*/     VOID*        CoverageSamplerContext;                                                                     
/*0x848*/     VOID*        MmHotPatchContext;                                                                          
          }EPROCESS, *PEPROCESS;                                                                                       
                                                                                                                       
typedef struct _EPROCESS_QUOTA_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;                                  
                                                                       
          typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE // 2 elements, 0x6C bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      GlobalDeviceMap;                                              
/*0x004*/     ULONG32      LocalDeviceCount[26];                                         
          }OBP_SYSTEM_DOS_DEVICE_STATE, *POBP_SYSTEM_DOS_DEVICE_STATE;                                   
                                                                                         
          typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE // 3 elements, 0x260 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _LIST_ENTRY HashBuckets[37];                                          
/*0x250*/     struct _EX_PUSH_LOCK Lock;               // 7 elements, 0x8 bytes (sizeof)   
/*0x258*/     ULONG32      NumberOfPrivateSpaces;                                          
/*0x25C*/     UINT8        _PADDING0_[0x4];                                                
          }OBJECT_NAMESPACE_LOOKUPTABLE, *POBJECT_NAMESPACE_LOOKUPTABLE;                                    
                                                                                           
          typedef struct _OBP_SILODRIVERSTATE                                   // 4 elements, 0x2E0 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     struct _DEVICE_MAP* SystemDeviceMap;                                                                  
/*0x008*/     struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;         // 2 elements, 0x6C bytes (sizeof)  
/*0x074*/     UINT8        _PADDING0_[0x4];                                                                         
/*0x078*/     struct _EX_PUSH_LOCK DeviceMapLock;                               // 7 elements, 0x8 bytes (sizeof)   
/*0x080*/     struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable; // 3 elements, 0x260 bytes (sizeof) 
          }OBP_SILODRIVERSTATE, *POBP_SILODRIVERSTATE;                                                              
                                                                                                                    
          typedef struct _SEP_SILOSTATE                                    // 6 elements, 0x30 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     struct _SEP_LOGON_SESSION_REFERENCES* SystemLogonSession;                                       
/*0x008*/     struct _SEP_LOGON_SESSION_REFERENCES* AnonymousLogonSession;                                    
/*0x010*/     VOID*        AnonymousLogonToken;                                                               
/*0x018*/     VOID*        AnonymousLogonTokenNoEveryone;                                                     
/*0x020*/     struct _UNICODE_STRING* UncSystemPaths;                                                         
/*0x028*/     struct _CI_NGEN_PATHS* NgenPaths;                                                               
          }SEP_SILOSTATE, *PSEP_SILOSTATE;                                                                    
                                                                                                              
          typedef struct _SEP_RM_LSA_CONNECTION_STATE         // 11 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     VOID*        LsaProcessHandle;                                                      
/*0x008*/     VOID*        LsaCommandPortHandle;                                                  
/*0x010*/     VOID*        SepRmThreadHandle;                                                     
/*0x018*/     VOID*        RmCommandPortHandle;                                                   
/*0x020*/     VOID*        RmCommandServerPortHandle;                                             
/*0x028*/     VOID*        LsaCommandPortSectionHandle;                                           
/*0x030*/     union _LARGE_INTEGER LsaCommandPortSectionSize; // 4 elements, 0x8 bytes (sizeof)   
/*0x038*/     VOID*        LsaViewPortMemory;                                                     
/*0x040*/     VOID*        RmViewPortMemory;                                                      
/*0x048*/     LONG32       LsaCommandPortMemoryDelta;                                             
/*0x04C*/     UINT8        LsaCommandPortActive;                                                  
/*0x04D*/     UINT8        _PADDING0_[0x3];                                                       
          }SEP_RM_LSA_CONNECTION_STATE, *PSEP_RM_LSA_CONNECTION_STATE;                                    
                                                                                                  
          typedef struct _WNF_LOCK           // 1 elements, 0x8 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _EX_PUSH_LOCK PushLock; // 7 elements, 0x8 bytes (sizeof) 
          }WNF_LOCK, *PWNF_LOCK;                                               
                                                                               
          typedef struct _WNF_SILODRIVERSTATE                   // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _WNF_SCOPE_MAP* ScopeMap;                                                     
/*0x008*/     VOID*        PermanentNameStoreRootKey;                                              
/*0x010*/     VOID*        PersistentNameStoreRootKey;                                             
/*0x018*/     INT64        PermanentNameSequenceNumber;                                            
/*0x020*/     struct _WNF_LOCK PermanentNameSequenceNumberLock; // 1 elements, 0x8 bytes (sizeof)  
/*0x028*/     INT64        PermanentNameSequenceNumberPool;                                        
/*0x030*/     INT64        RuntimeNameSequenceNumber;                                              
          }WNF_SILODRIVERSTATE, *PWNF_SILODRIVERSTATE;                                             
                                                                                                   
          typedef struct _ESERVERSILO_GLOBALS                     // 24 elements, 0x480 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _OBP_SILODRIVERSTATE ObSiloState;            // 4 elements, 0x2E0 bytes (sizeof)  
/*0x2E0*/     struct _SEP_SILOSTATE SeSiloState;                  // 6 elements, 0x30 bytes (sizeof)   
/*0x310*/     struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;  // 11 elements, 0x50 bytes (sizeof)  
/*0x360*/     struct _ETW_SILODRIVERSTATE* EtwSiloState;                                               
/*0x368*/     struct _EPROCESS* MiSessionLeaderProcess;                                                
/*0x370*/     struct _EPROCESS* ExpDefaultErrorPortProcess;                                            
/*0x378*/     VOID*        ExpDefaultErrorPort;                                                        
/*0x380*/     ULONG32      HardErrorState;                                                             
/*0x384*/     UINT8        _PADDING0_[0x4];                                                            
/*0x388*/     struct _WNF_SILODRIVERSTATE WnfSiloState;           // 7 elements, 0x38 bytes (sizeof)   
/*0x3C0*/     struct _DBGK_SILOSTATE DbgkSiloState;               // 4 elements, 0x20 bytes (sizeof)   
/*0x3E0*/     struct _UNICODE_STRING PsProtectedCurrentDirectory; // 3 elements, 0x10 bytes (sizeof)   
/*0x3F0*/     struct _UNICODE_STRING PsProtectedEnvironment;      // 3 elements, 0x10 bytes (sizeof)   
/*0x400*/     VOID*        ApiSetSection;                                                              
/*0x408*/     VOID*        ApiSetSchema;                                                               
/*0x410*/     UINT8        OneCoreForwardersEnabled;                                                   
/*0x411*/     UINT8        _PADDING1_[0x7];                                                            
/*0x418*/     struct _UNICODE_STRING NtSystemRoot;                // 3 elements, 0x10 bytes (sizeof)   
/*0x428*/     struct _UNICODE_STRING SiloRootDirectoryName;       // 3 elements, 0x10 bytes (sizeof)   
/*0x438*/     struct _PSP_STORAGE* Storage;                                                            
/*0x440*/     enum _SERVERSILO_STATE State;                                                            
/*0x444*/     LONG32       ExitStatus;                                                                 
/*0x448*/     struct _KEVENT* DeleteEvent;                                                             
/*0x450*/     struct _SILO_USER_SHARED_DATA* UserSharedData;                                           
/*0x458*/     VOID*        UserSharedSection;                                                          
/*0x460*/     struct _WORK_QUEUE_ITEM TerminateWorkItem;          // 3 elements, 0x20 bytes (sizeof)   
          }ESERVERSILO_GLOBALS, *PESERVERSILO_GLOBALS;                                                 
                                                                                                       
          typedef union _KWAIT_STATUS_REGISTER // 7 elements, 0x1 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Flags;                                                
              struct                           // 6 elements, 0x1 bytes (sizeof) 
              {                                                                  
/*0x000*/         UINT8        State : 3;      // 0 BitPosition                  
/*0x000*/         UINT8        Affinity : 1;   // 3 BitPosition                  
/*0x000*/         UINT8        Priority : 1;   // 4 BitPosition                  
/*0x000*/         UINT8        Apc : 1;        // 5 BitPosition                  
/*0x000*/         UINT8        UserApc : 1;    // 6 BitPosition                  
/*0x000*/         UINT8        Alert : 1;      // 7 BitPosition                  
              };                                                                 
          }KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER;                                  
                                                                                 
          typedef struct _KAPC_STATE                          // 9 elements, 0x30 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY ApcListHead[2];                                                 
/*0x020*/     struct _KPROCESS* Process;                                                         
              union                                           // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                  
/*0x028*/         UINT8        InProgressFlags;                                                  
                  struct                                      // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                              
/*0x028*/             UINT8        KernelApcInProgress : 1;   // 0 BitPosition                   
/*0x028*/             UINT8        SpecialApcInProgress : 1;  // 1 BitPosition                   
                  };                                                                             
              };                                                                                 
/*0x029*/     UINT8        KernelApcPending;                                                     
              union                                           // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                  
/*0x02A*/         UINT8        UserApcPendingAll;                                                
                  struct                                      // 2 elements, 0x1 bytes (sizeof)  
                  {                                                                              
/*0x02A*/             UINT8        SpecialUserApcPending : 1; // 0 BitPosition                   
/*0x02A*/             UINT8        UserApcPending : 1;        // 1 BitPosition                   
                  };                                                                             
              };                                                                                 
          }KAPC_STATE, *PKAPC_STATE;                                                             
                                                                                                 
          typedef struct _KWAIT_BLOCK                // 9 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY WaitListEntry;      // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        WaitType;                                                    
/*0x011*/     UINT8        BlockState;                                                  
/*0x012*/     UINT16       WaitKey;                                                     
/*0x014*/     LONG32       SpareLong;                                                   
              union                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x018*/         struct _KTHREAD* Thread;                                              
/*0x018*/         struct _KQUEUE* NotificationQueue;                                    
              };                                                                        
/*0x020*/     VOID*        Object;                                                      
/*0x028*/     VOID*        SparePtr;                                                    
          }KWAIT_BLOCK, *PKWAIT_BLOCK;                                                  
                                                                                        
          typedef struct _KAPC                                        // 17 elements, 0x58 bytes (sizeof) 
          {                                                                                               
/*0x000*/     UINT8        Type;                                                                          
/*0x001*/     UINT8        SpareByte0;                                                                    
/*0x002*/     UINT8        Size;                                                                          
/*0x003*/     UINT8        SpareByte1;                                                                    
/*0x004*/     ULONG32      SpareLong0;                                                                    
/*0x008*/     struct _KTHREAD* Thread;                                                                    
/*0x010*/     struct _LIST_ENTRY ApcListEntry;                        // 2 elements, 0x10 bytes (sizeof)  
              union                                                   // 2 elements, 0x18 bytes (sizeof)  
              {                                                                                           
                  struct                                              // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                       
/*0x020*/             FUNCT_00EF_080B_KernelRoutine* KernelRoutine;                                       
/*0x028*/             FUNCT_00EF_0819_RundownRoutine* RundownRoutine;                                     
/*0x030*/             FUNCT_00EF_0814_NormalRoutine* NormalRoutine;                                       
                  };                                                                                      
/*0x020*/         VOID*        Reserved[3];                                                               
              };                                                                                          
/*0x038*/     VOID*        NormalContext;                                                                 
/*0x040*/     VOID*        SystemArgument1;                                                               
/*0x048*/     VOID*        SystemArgument2;                                                               
/*0x050*/     CHAR         ApcStateIndex;                                                                 
/*0x051*/     CHAR         ApcMode;                                                                       
/*0x052*/     UINT8        Inserted;                                                                      
/*0x053*/     UINT8        _PADDING0_[0x5];                                                               
          }KAPC, *PKAPC;                                                                                  
                                                                                                          
          typedef struct _KLOCK_ENTRY_LOCK_STATE              // 8 elements, 0x10 bytes (sizeof) 
          {                                                                                      
              union                                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                  
                  struct                                      // 4 elements, 0x8 bytes (sizeof)  
                  {                                                                              
/*0x000*/             UINT64       CrossThreadReleasable : 1; // 0 BitPosition                   
/*0x000*/             UINT64       Busy : 1;                  // 1 BitPosition                   
/*0x000*/             UINT64       Reserved : 61;             // 2 BitPosition                   
/*0x000*/             UINT64       InTree : 1;                // 63 BitPosition                  
                  };                                                                             
/*0x000*/         VOID*        LockState;                                                        
              };                                                                                 
              union                                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                  
/*0x008*/         VOID*        SessionState;                                                     
                  struct                                      // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                              
/*0x008*/             ULONG32      SessionId;                                                    
/*0x00C*/             ULONG32      SessionPad;                                                   
                  };                                                                             
              };                                                                                 
          }KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE;                                     
                                                                                                 
          typedef union _KLOCK_ENTRY_BOOST_BITMAP               // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      AllFields;                                                             
              struct                                            // 4 elements, 0x4 bytes (sizeof) 
              {                                                                                   
/*0x000*/         ULONG32      AllBoosts : 17;                  // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved : 15;                   // 17 BitPosition                 
/*0x000*/         UINT16       CpuBoostsBitmap : 15;            // 0 BitPosition                  
/*0x000*/         UINT16       IoBoost : 1;                     // 15 BitPosition                 
              };                                                                                  
              struct                                            // 3 elements, 0x2 bytes (sizeof) 
              {                                                                                   
/*0x002*/         UINT16       IoQoSBoost : 1;                  // 0 BitPosition                  
/*0x002*/         UINT16       IoNormalPriorityWaiterCount : 8; // 1 BitPosition                  
/*0x002*/         UINT16       IoQoSWaiterCount : 7;            // 9 BitPosition                  
              };                                                                                  
          }KLOCK_ENTRY_BOOST_BITMAP, *PKLOCK_ENTRY_BOOST_BITMAP;                                  
                                                                                                  
          typedef struct _KLOCK_ENTRY                                // 31 elements, 0x60 bytes (sizeof) 
          {                                                                                              
              union                                                  // 2 elements, 0x18 bytes (sizeof)  
              {                                                                                          
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;                // 6 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY FreeListEntry;           // 1 elements, 0x8 bytes (sizeof)   
              };                                                                                         
              union                                                  // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                          
/*0x018*/         ULONG32      EntryFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x018*/             UINT8        EntryOffset;                                                          
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x019*/                 UINT8        ThreadLocalFlags;                                                 
                          struct                                     // 2 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x019*/                     UINT8        WaitingBit : 1;           // 0 BitPosition                    
/*0x019*/                     UINT8        Spare0 : 7;               // 1 BitPosition                    
                          };                                                                             
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x01A*/                 UINT8        AcquiredByte;                                                     
/*0x01A*/                 UINT8        AcquiredBit : 1;              // 0 BitPosition                    
                      };                                                                                 
                      union                                          // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                  
/*0x01B*/                 UINT8        CrossThreadFlags;                                                 
                          struct                                     // 4 elements, 0x1 bytes (sizeof)   
                          {                                                                              
/*0x01B*/                     UINT8        HeadNodeBit : 1;          // 0 BitPosition                    
/*0x01B*/                     UINT8        IoPriorityBit : 1;        // 1 BitPosition                    
/*0x01B*/                     UINT8        IoQoSWaiter : 1;          // 2 BitPosition                    
/*0x01B*/                     UINT8        Spare1 : 5;               // 3 BitPosition                    
                          };                                                                             
                      };                                                                                 
                  };                                                                                     
                  struct                                             // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                      
/*0x018*/             ULONG32      StaticState : 8;                  // 0 BitPosition                    
/*0x018*/             ULONG32      AllFlags : 24;                    // 8 BitPosition                    
                  };                                                                                     
              };                                                                                         
/*0x01C*/     ULONG32      SpareFlags;                                                                   
              union                                                  // 3 elements, 0x10 bytes (sizeof)  
              {                                                                                          
/*0x020*/         struct _KLOCK_ENTRY_LOCK_STATE LockState;          // 8 elements, 0x10 bytes (sizeof)  
/*0x020*/         VOID*        LockUnsafe;                                                               
                  struct                                             // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                                      
/*0x020*/             UINT8        CrossThreadReleasableAndBusyByte;                                     
/*0x021*/             UINT8        Reserved[6];                                                          
/*0x027*/             UINT8        InTreeByte;                                                           
                      union                                          // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                                  
/*0x028*/                 VOID*        SessionState;                                                     
                          struct                                     // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                              
/*0x028*/                     ULONG32      SessionId;                                                    
/*0x02C*/                     ULONG32      SessionPad;                                                   
                          };                                                                             
                      };                                                                                 
                  };                                                                                     
              };                                                                                         
              union                                                  // 2 elements, 0x20 bytes (sizeof)  
              {                                                                                          
                  struct                                             // 2 elements, 0x20 bytes (sizeof)  
                  {                                                                                      
/*0x030*/             struct _RTL_RB_TREE OwnerTree;                 // 3 elements, 0x10 bytes (sizeof)  
/*0x040*/             struct _RTL_RB_TREE WaiterTree;                // 3 elements, 0x10 bytes (sizeof)  
                  };                                                                                     
/*0x030*/         CHAR         CpuPriorityKey;                                                           
              };                                                                                         
/*0x050*/     UINT64       EntryLock;                                                                    
/*0x058*/     union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;           // 8 elements, 0x4 bytes (sizeof)   
/*0x05C*/     ULONG32      SparePad;                                                                     
          }KLOCK_ENTRY, *PKLOCK_ENTRY;                                                                   
                                                                                                         
          typedef struct _KTHREAD                                            // 187 elements, 0x5F0 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     struct _DISPATCHER_HEADER Header;                              // 58 elements, 0x18 bytes (sizeof)   
/*0x018*/     VOID*        SListFaultAddress;                                                                      
/*0x020*/     UINT64       QuantumTarget;                                                                          
/*0x028*/     VOID*        InitialStack;                                                                           
/*0x030*/     VOID*        StackLimit;                                                                             
/*0x038*/     VOID*        StackBase;                                                                              
/*0x040*/     UINT64       ThreadLock;                                                                             
/*0x048*/     UINT64       CycleTime;                                                                              
/*0x050*/     ULONG32      CurrentRunTime;                                                                         
/*0x054*/     ULONG32      ExpectedRunTime;                                                                        
/*0x058*/     VOID*        KernelStack;                                                                            
/*0x060*/     struct _XSAVE_FORMAT* StateSaveArea;                                                                 
/*0x068*/     struct _KSCHEDULING_GROUP* SchedulingGroup;                                                          
/*0x070*/     union _KWAIT_STATUS_REGISTER WaitRegister;                     // 7 elements, 0x1 bytes (sizeof)     
/*0x071*/     UINT8        Running;                                                                                
/*0x072*/     UINT8        Alerted[2];                                                                             
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 22 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x074*/             ULONG32      AutoBoostActive : 1;                      // 0 BitPosition                      
/*0x074*/             ULONG32      ReadyTransition : 1;                      // 1 BitPosition                      
/*0x074*/             ULONG32      WaitNext : 1;                             // 2 BitPosition                      
/*0x074*/             ULONG32      SystemAffinityActive : 1;                 // 3 BitPosition                      
/*0x074*/             ULONG32      Alertable : 1;                            // 4 BitPosition                      
/*0x074*/             ULONG32      UserStackWalkActive : 1;                  // 5 BitPosition                      
/*0x074*/             ULONG32      ApcInterruptRequest : 1;                  // 6 BitPosition                      
/*0x074*/             ULONG32      QuantumEndMigrate : 1;                    // 7 BitPosition                      
/*0x074*/             ULONG32      UmsDirectedSwitchEnable : 1;              // 8 BitPosition                      
/*0x074*/             ULONG32      TimerActive : 1;                          // 9 BitPosition                      
/*0x074*/             ULONG32      SystemThread : 1;                         // 10 BitPosition                     
/*0x074*/             ULONG32      ProcessDetachActive : 1;                  // 11 BitPosition                     
/*0x074*/             ULONG32      CalloutActive : 1;                        // 12 BitPosition                     
/*0x074*/             ULONG32      ScbReadyQueue : 1;                        // 13 BitPosition                     
/*0x074*/             ULONG32      ApcQueueable : 1;                         // 14 BitPosition                     
/*0x074*/             ULONG32      ReservedStackInUse : 1;                   // 15 BitPosition                     
/*0x074*/             ULONG32      UmsPerformingSyscall : 1;                 // 16 BitPosition                     
/*0x074*/             ULONG32      TimerSuspended : 1;                       // 17 BitPosition                     
/*0x074*/             ULONG32      SuspendedWaitMode : 1;                    // 18 BitPosition                     
/*0x074*/             ULONG32      SuspendSchedulerApcWait : 1;              // 19 BitPosition                     
/*0x074*/             ULONG32      CetShadowStack : 1;                       // 20 BitPosition                     
/*0x074*/             ULONG32      Reserved : 11;                            // 21 BitPosition                     
                  };                                                                                               
/*0x074*/         LONG32       MiscFlags;                                                                          
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 23 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x078*/             ULONG32      BamQosLevel : 2;                          // 0 BitPosition                      
/*0x078*/             ULONG32      AutoAlignment : 1;                        // 2 BitPosition                      
/*0x078*/             ULONG32      DisableBoost : 1;                         // 3 BitPosition                      
/*0x078*/             ULONG32      AlertedByThreadId : 1;                    // 4 BitPosition                      
/*0x078*/             ULONG32      QuantumDonation : 1;                      // 5 BitPosition                      
/*0x078*/             ULONG32      EnableStackSwap : 1;                      // 6 BitPosition                      
/*0x078*/             ULONG32      GuiThread : 1;                            // 7 BitPosition                      
/*0x078*/             ULONG32      DisableQuantum : 1;                       // 8 BitPosition                      
/*0x078*/             ULONG32      ChargeOnlySchedulingGroup : 1;            // 9 BitPosition                      
/*0x078*/             ULONG32      DeferPreemption : 1;                      // 10 BitPosition                     
/*0x078*/             ULONG32      QueueDeferPreemption : 1;                 // 11 BitPosition                     
/*0x078*/             ULONG32      ForceDeferSchedule : 1;                   // 12 BitPosition                     
/*0x078*/             ULONG32      SharedReadyQueueAffinity : 1;             // 13 BitPosition                     
/*0x078*/             ULONG32      FreezeCount : 1;                          // 14 BitPosition                     
/*0x078*/             ULONG32      TerminationApcRequest : 1;                // 15 BitPosition                     
/*0x078*/             ULONG32      AutoBoostEntriesExhausted : 1;            // 16 BitPosition                     
/*0x078*/             ULONG32      KernelStackResident : 1;                  // 17 BitPosition                     
/*0x078*/             ULONG32      TerminateRequestReason : 2;               // 18 BitPosition                     
/*0x078*/             ULONG32      ProcessStackCountDecremented : 1;         // 20 BitPosition                     
/*0x078*/             ULONG32      RestrictedGuiThread : 1;                  // 21 BitPosition                     
/*0x078*/             ULONG32      VpBackingThread : 1;                      // 22 BitPosition                     
/*0x078*/             ULONG32      ThreadFlagsSpare : 1;                     // 23 BitPosition                     
/*0x078*/             ULONG32      EtwStackTraceApcInserted : 8;             // 24 BitPosition                     
                  };                                                                                               
/*0x078*/         LONG32       ThreadFlags;                                                                        
              };                                                                                                   
/*0x07C*/     UINT8        Tag;                                                                                    
/*0x07D*/     UINT8        SystemHeteroCpuPolicy;                                                                  
              struct                                                         // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                                    
/*0x07E*/         UINT8        UserHeteroCpuPolicy : 7;                      // 0 BitPosition                      
/*0x07E*/         UINT8        ExplicitSystemHeteroCpuPolicy : 1;            // 7 BitPosition                      
              };                                                                                                   
              union                                                          // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                                    
                  struct                                                     // 2 elements, 0x1 bytes (sizeof)     
                  {                                                                                                
/*0x07F*/             UINT8        RunningNonRetpolineCode : 1;              // 0 BitPosition                      
/*0x07F*/             UINT8        SpecCtrlSpare : 7;                        // 1 BitPosition                      
                  };                                                                                               
/*0x07F*/         UINT8        SpecCtrl;                                                                           
              };                                                                                                   
/*0x080*/     ULONG32      SystemCallNumber;                                                                       
/*0x084*/     ULONG32      ReadyTime;                                                                              
/*0x088*/     VOID*        FirstArgument;                                                                          
/*0x090*/     struct _KTRAP_FRAME* TrapFrame;                                                                      
              union                                                          // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                    
/*0x098*/         struct _KAPC_STATE ApcState;                               // 9 elements, 0x30 bytes (sizeof)    
                  struct                                                     // 3 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x098*/             UINT8        ApcStateFill[43];                                                               
/*0x0C3*/             CHAR         Priority;                                                                       
/*0x0C4*/             ULONG32      UserIdealProcessor;                                                             
                  };                                                                                               
              };                                                                                                   
/*0x0C8*/     INT64        WaitStatus;                                                                             
/*0x0D0*/     struct _KWAIT_BLOCK* WaitBlockList;                                                                  
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x0D8*/         struct _LIST_ENTRY WaitListEntry;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x0D8*/         struct _SINGLE_LIST_ENTRY SwapListEntry;                   // 1 elements, 0x8 bytes (sizeof)     
              };                                                                                                   
/*0x0E8*/     struct _DISPATCHER_HEADER* Queue;                                                                    
/*0x0F0*/     VOID*        Teb;                                                                                    
/*0x0F8*/     UINT64       RelativeTimerBias;                                                                      
/*0x100*/     struct _KTIMER Timer;                                          // 6 elements, 0x40 bytes (sizeof)    
              union                                                          // 9 elements, 0xC0 bytes (sizeof)    
              {                                                                                                    
/*0x140*/         struct _KWAIT_BLOCK WaitBlock[4];                                                                
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill4[20];                                                             
/*0x154*/             ULONG32      ContextSwitches;                                                                
/*0x158*/             UINT8        _PADDING0_[0xA8];                                                               
                  };                                                                                               
                  struct                                                     // 5 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill5[68];                                                             
/*0x184*/             UINT8        State;                                                                          
/*0x185*/             CHAR         Spare13;                                                                        
/*0x186*/             UINT8        WaitIrql;                                                                       
/*0x187*/             CHAR         WaitMode;                                                                       
/*0x188*/             UINT8        _PADDING1_[0x78];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill6[116];                                                            
/*0x1B4*/             ULONG32      WaitTime;                                                                       
/*0x1B8*/             UINT8        _PADDING2_[0x48];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill7[164];                                                            
                      union                                                  // 2 elements, 0x4 bytes (sizeof)     
                      {                                                                                            
                          struct                                             // 2 elements, 0x4 bytes (sizeof)     
                          {                                                                                        
/*0x1E4*/                     INT16        KernelApcDisable;                                                       
/*0x1E6*/                     INT16        SpecialApcDisable;                                                      
                          };                                                                                       
/*0x1E4*/                 ULONG32      CombinedApcDisable;                                                         
                      };                                                                                           
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill8[40];                                                             
/*0x168*/             struct _KTHREAD_COUNTERS* ThreadCounters;                                                    
/*0x170*/             UINT8        _PADDING3_[0x90];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill9[88];                                                             
/*0x198*/             struct _XSTATE_SAVE* XStateSave;                                                             
/*0x1A0*/             UINT8        _PADDING4_[0x60];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill10[136];                                                           
/*0x1C8*/             VOID*        Win32Thread;                                                                    
/*0x1D0*/             UINT8        _PADDING5_[0x30];                                                               
                  };                                                                                               
                  struct                                                     // 3 elements, 0xC0 bytes (sizeof)    
                  {                                                                                                
/*0x140*/             UINT8        WaitBlockFill11[176];                                                           
/*0x1F0*/             struct _UMS_CONTROL_BLOCK* Ucb;                                                              
/*0x1F8*/             struct _KUMS_CONTEXT_HEADER* Uch;                                                            
                  };                                                                                               
              };                                                                                                   
/*0x200*/     VOID*        Spare21;                                                                                
/*0x208*/     struct _LIST_ENTRY QueueListEntry;                             // 2 elements, 0x10 bytes (sizeof)    
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x218*/         ULONG32      NextProcessor;                                                                      
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x218*/             ULONG32      NextProcessorNumber : 31;                 // 0 BitPosition                      
/*0x218*/             ULONG32      SharedReadyQueue : 1;                     // 31 BitPosition                     
                  };                                                                                               
              };                                                                                                   
/*0x21C*/     LONG32       QueuePriority;                                                                          
/*0x220*/     struct _KPROCESS* Process;                                                                           
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x228*/         struct _GROUP_AFFINITY UserAffinity;                       // 3 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 7 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x228*/             UINT8        UserAffinityFill[10];                                                           
/*0x232*/             CHAR         PreviousMode;                                                                   
/*0x233*/             CHAR         BasePriority;                                                                   
                      union                                                  // 2 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x234*/                 CHAR         PriorityDecrement;                                                          
                          struct                                             // 2 elements, 0x1 bytes (sizeof)     
                          {                                                                                        
/*0x234*/                     UINT8        ForegroundBoost : 4;              // 0 BitPosition                      
/*0x234*/                     UINT8        UnusualBoost : 4;                 // 4 BitPosition                      
                          };                                                                                       
                      };                                                                                           
/*0x235*/             UINT8        Preempted;                                                                      
/*0x236*/             UINT8        AdjustReason;                                                                   
/*0x237*/             CHAR         AdjustIncrement;                                                                
                  };                                                                                               
              };                                                                                                   
/*0x238*/     UINT64       AffinityVersion;                                                                        
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x240*/         struct _GROUP_AFFINITY Affinity;                           // 3 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 4 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x240*/             UINT8        AffinityFill[10];                                                               
/*0x24A*/             UINT8        ApcStateIndex;                                                                  
/*0x24B*/             UINT8        WaitBlockCount;                                                                 
/*0x24C*/             ULONG32      IdealProcessor;                                                                 
                  };                                                                                               
              };                                                                                                   
/*0x250*/     UINT64       NpxState;                                                                               
              union                                                          // 2 elements, 0x30 bytes (sizeof)    
              {                                                                                                    
/*0x258*/         struct _KAPC_STATE SavedApcState;                          // 9 elements, 0x30 bytes (sizeof)    
                  struct                                                     // 5 elements, 0x30 bytes (sizeof)    
                  {                                                                                                
/*0x258*/             UINT8        SavedApcStateFill[43];                                                          
/*0x283*/             UINT8        WaitReason;                                                                     
/*0x284*/             CHAR         SuspendCount;                                                                   
/*0x285*/             CHAR         Saturation;                                                                     
/*0x286*/             UINT16       SListFaultCount;                                                                
                  };                                                                                               
              };                                                                                                   
              union                                                          // 7 elements, 0x58 bytes (sizeof)    
              {                                                                                                    
/*0x288*/         struct _KAPC SchedulerApc;                                 // 17 elements, 0x58 bytes (sizeof)   
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill0[1];                                                           
/*0x289*/             UINT8        ResourceIndex;                                                                  
/*0x28A*/             UINT8        _PADDING6_[0x56];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill1[3];                                                           
/*0x28B*/             UINT8        QuantumReset;                                                                   
/*0x28C*/             UINT8        _PADDING7_[0x54];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill2[4];                                                           
/*0x28C*/             ULONG32      KernelTime;                                                                     
/*0x290*/             UINT8        _PADDING8_[0x50];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill3[64];                                                          
/*0x2C8*/             struct _KPRCB* WaitPrcb;                                                                     
/*0x2D0*/             UINT8        _PADDING9_[0x10];                                                               
                  };                                                                                               
                  struct                                                     // 2 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill4[72];                                                          
/*0x2D0*/             VOID*        LegoData;                                                                       
/*0x2D8*/             UINT8        _PADDING10_[0x8];                                                               
                  };                                                                                               
                  struct                                                     // 3 elements, 0x58 bytes (sizeof)    
                  {                                                                                                
/*0x288*/             UINT8        SchedulerApcFill5[83];                                                          
/*0x2DB*/             UINT8        CallbackNestingLevel;                                                           
/*0x2DC*/             ULONG32      UserTime;                                                                       
                  };                                                                                               
              };                                                                                                   
/*0x2E0*/     struct _KEVENT SuspendEvent;                                   // 1 elements, 0x18 bytes (sizeof)    
/*0x2F8*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x308*/     struct _LIST_ENTRY MutantListHead;                             // 2 elements, 0x10 bytes (sizeof)    
/*0x318*/     UINT8        AbEntrySummary;                                                                         
/*0x319*/     UINT8        AbWaitEntryCount;                                                                       
/*0x31A*/     UINT8        AbAllocationRegionCount;                                                                
/*0x31B*/     CHAR         SystemPriority;                                                                         
/*0x31C*/     ULONG32      SecureThreadCookie;                                                                     
/*0x320*/     struct _KLOCK_ENTRY LockEntries[6];                                                                  
/*0x560*/     struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;                // 1 elements, 0x8 bytes (sizeof)     
/*0x568*/     struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;                   // 1 elements, 0x8 bytes (sizeof)     
/*0x570*/     UINT8        PriorityFloorCounts[16];                                                                
/*0x580*/     ULONG32      PriorityFloorSummary;                                                                   
/*0x584*/     LONG32       AbCompletedIoBoostCount;                                                                
/*0x588*/     LONG32       AbCompletedIoQoSBoostCount;                                                             
/*0x58C*/     INT16        KeReferenceCount;                                                                       
/*0x58E*/     UINT8        AbOrphanedEntrySummary;                                                                 
/*0x58F*/     UINT8        AbOwnedEntryCount;                                                                      
/*0x590*/     ULONG32      ForegroundLossTime;                                                                     
/*0x594*/     UINT8        _PADDING11_[0x4];                                                                       
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x598*/         struct _LIST_ENTRY GlobalForegroundListEntry;              // 2 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x598*/             struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry; // 1 elements, 0x8 bytes (sizeof)     
/*0x5A0*/             UINT64       InGlobalForegroundList;                                                         
                  };                                                                                               
              };                                                                                                   
/*0x5A8*/     INT64        ReadOperationCount;                                                                     
/*0x5B0*/     INT64        WriteOperationCount;                                                                    
/*0x5B8*/     INT64        OtherOperationCount;                                                                    
/*0x5C0*/     INT64        ReadTransferCount;                                                                      
/*0x5C8*/     INT64        WriteTransferCount;                                                                     
/*0x5D0*/     INT64        OtherTransferCount;                                                                     
/*0x5D8*/     struct _KSCB* QueuedScb;                                                                             
/*0x5E0*/     ULONG32      ThreadTimerDelay;                                                                       
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x5E4*/         LONG32       ThreadFlags2;                                                                       
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
/*0x5E4*/             ULONG32      PpmPolicy : 2;                            // 0 BitPosition                      
/*0x5E4*/             ULONG32      ThreadFlags2Reserved : 30;                // 2 BitPosition                      
                  };                                                                                               
              };                                                                                                   
/*0x5E8*/     VOID*        SchedulerAssist;                                                                        
          }KTHREAD, *PKTHREAD;                                                                                     
                                                                                                                   
          typedef struct _KSEMAPHORE            // 2 elements, 0x20 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     LONG32       Limit;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                         
          }KSEMAPHORE, *PKSEMAPHORE;                                                
                                                                                    
          typedef union _PS_CLIENT_SECURITY_CONTEXT    // 4 elements, 0x8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       ImpersonationData;                                            
/*0x000*/     VOID*        ImpersonationToken;                                           
              struct                                   // 2 elements, 0x8 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       ImpersonationLevel : 2; // 0 BitPosition                  
/*0x000*/         UINT64       EffectiveOnly : 1;      // 2 BitPosition                  
              };                                                                         
          }PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT;                                  
                                                                                         
          typedef struct _ETHREAD                                            // 116 elements, 0x810 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     struct _KTHREAD Tcb;                                           // 187 elements, 0x5F0 bytes (sizeof) 
/*0x5F0*/     union _LARGE_INTEGER CreateTime;                               // 4 elements, 0x8 bytes (sizeof)     
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x5F8*/         union _LARGE_INTEGER ExitTime;                             // 4 elements, 0x8 bytes (sizeof)     
/*0x5F8*/         struct _LIST_ENTRY KeyedWaitChain;                         // 2 elements, 0x10 bytes (sizeof)    
              };                                                                                                   
              union                                                          // 2 elements, 0x10 bytes (sizeof)    
              {                                                                                                    
/*0x608*/         struct _LIST_ENTRY PostBlockList;                          // 2 elements, 0x10 bytes (sizeof)    
                  struct                                                     // 2 elements, 0x10 bytes (sizeof)    
                  {                                                                                                
/*0x608*/             VOID*        ForwardLinkShadow;                                                              
/*0x610*/             VOID*        StartAddress;                                                                   
                  };                                                                                               
              };                                                                                                   
              union                                                          // 3 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x618*/         struct _TERMINATION_PORT* TerminationPort;                                                       
/*0x618*/         struct _ETHREAD* ReaperLink;                                                                     
/*0x618*/         VOID*        KeyedWaitValue;                                                                     
              };                                                                                                   
/*0x620*/     UINT64       ActiveTimerListLock;                                                                    
/*0x628*/     struct _LIST_ENTRY ActiveTimerListHead;                        // 2 elements, 0x10 bytes (sizeof)    
/*0x638*/     struct _CLIENT_ID Cid;                                         // 2 elements, 0x10 bytes (sizeof)    
              union                                                          // 2 elements, 0x20 bytes (sizeof)    
              {                                                                                                    
/*0x648*/         struct _KSEMAPHORE KeyedWaitSemaphore;                     // 2 elements, 0x20 bytes (sizeof)    
/*0x648*/         struct _KSEMAPHORE AlpcWaitSemaphore;                      // 2 elements, 0x20 bytes (sizeof)    
              };                                                                                                   
/*0x668*/     union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;              // 4 elements, 0x8 bytes (sizeof)     
/*0x670*/     struct _LIST_ENTRY IrpList;                                    // 2 elements, 0x10 bytes (sizeof)    
/*0x680*/     UINT64       TopLevelIrp;                                                                            
/*0x688*/     struct _DEVICE_OBJECT* DeviceToVerify;                                                               
/*0x690*/     VOID*        Win32StartAddress;                                                                      
/*0x698*/     VOID*        ChargeOnlySession;                                                                      
/*0x6A0*/     VOID*        LegacyPowerObject;                                                                      
/*0x6A8*/     struct _LIST_ENTRY ThreadListEntry;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x6B8*/     struct _EX_RUNDOWN_REF RundownProtect;                         // 2 elements, 0x8 bytes (sizeof)     
/*0x6C0*/     struct _EX_PUSH_LOCK ThreadLock;                               // 7 elements, 0x8 bytes (sizeof)     
/*0x6C8*/     ULONG32      ReadClusterSize;                                                                        
/*0x6CC*/     LONG32       MmLockOrdering;                                                                         
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D0*/         ULONG32      CrossThreadFlags;                                                                   
                  struct                                                     // 21 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x6D0*/             ULONG32      Terminated : 1;                           // 0 BitPosition                      
/*0x6D0*/             ULONG32      ThreadInserted : 1;                       // 1 BitPosition                      
/*0x6D0*/             ULONG32      HideFromDebugger : 1;                     // 2 BitPosition                      
/*0x6D0*/             ULONG32      ActiveImpersonationInfo : 1;              // 3 BitPosition                      
/*0x6D0*/             ULONG32      HardErrorsAreDisabled : 1;                // 4 BitPosition                      
/*0x6D0*/             ULONG32      BreakOnTermination : 1;                   // 5 BitPosition                      
/*0x6D0*/             ULONG32      SkipCreationMsg : 1;                      // 6 BitPosition                      
/*0x6D0*/             ULONG32      SkipTerminationMsg : 1;                   // 7 BitPosition                      
/*0x6D0*/             ULONG32      CopyTokenOnOpen : 1;                      // 8 BitPosition                      
/*0x6D0*/             ULONG32      ThreadIoPriority : 3;                     // 9 BitPosition                      
/*0x6D0*/             ULONG32      ThreadPagePriority : 3;                   // 12 BitPosition                     
/*0x6D0*/             ULONG32      RundownFail : 1;                          // 15 BitPosition                     
/*0x6D0*/             ULONG32      UmsForceQueueTermination : 1;             // 16 BitPosition                     
/*0x6D0*/             ULONG32      IndirectCpuSets : 1;                      // 17 BitPosition                     
/*0x6D0*/             ULONG32      DisableDynamicCodeOptOut : 1;             // 18 BitPosition                     
/*0x6D0*/             ULONG32      ExplicitCaseSensitivity : 1;              // 19 BitPosition                     
/*0x6D0*/             ULONG32      PicoNotifyExit : 1;                       // 20 BitPosition                     
/*0x6D0*/             ULONG32      DbgWerUserReportActive : 1;               // 21 BitPosition                     
/*0x6D0*/             ULONG32      ForcedSelfTrimActive : 1;                 // 22 BitPosition                     
/*0x6D0*/             ULONG32      SamplingCoverage : 1;                     // 23 BitPosition                     
/*0x6D0*/             ULONG32      ReservedCrossThreadFlags : 8;             // 24 BitPosition                     
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D4*/         ULONG32      SameThreadPassiveFlags;                                                             
                  struct                                                     // 12 elements, 0x4 bytes (sizeof)    
                  {                                                                                                
/*0x6D4*/             ULONG32      ActiveExWorker : 1;                       // 0 BitPosition                      
/*0x6D4*/             ULONG32      MemoryMaker : 1;                          // 1 BitPosition                      
/*0x6D4*/             ULONG32      StoreLockThread : 2;                      // 2 BitPosition                      
/*0x6D4*/             ULONG32      ClonedThread : 1;                         // 4 BitPosition                      
/*0x6D4*/             ULONG32      KeyedEventInUse : 1;                      // 5 BitPosition                      
/*0x6D4*/             ULONG32      SelfTerminate : 1;                        // 6 BitPosition                      
/*0x6D4*/             ULONG32      RespectIoPriority : 1;                    // 7 BitPosition                      
/*0x6D4*/             ULONG32      ActivePageLists : 1;                      // 8 BitPosition                      
/*0x6D4*/             ULONG32      SecureContext : 1;                        // 9 BitPosition                      
/*0x6D4*/             ULONG32      ZeroPageThread : 1;                       // 10 BitPosition                     
/*0x6D4*/             ULONG32      WorkloadClass : 1;                        // 11 BitPosition                     
/*0x6D4*/             ULONG32      ReservedSameThreadPassiveFlags : 20;      // 12 BitPosition                     
                  };                                                                                               
              };                                                                                                   
              union                                                          // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                    
/*0x6D8*/         ULONG32      SameThreadApcFlags;                                                                 
                  struct                                                     // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                
                      struct                                                 // 8 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x6D8*/                 UINT8        OwnsProcessAddressSpaceExclusive : 1; // 0 BitPosition                      
/*0x6D8*/                 UINT8        OwnsProcessAddressSpaceShared : 1;    // 1 BitPosition                      
/*0x6D8*/                 UINT8        HardFaultBehavior : 1;                // 2 BitPosition                      
/*0x6D8*/                 UINT8        StartAddressInvalid : 1;              // 3 BitPosition                      
/*0x6D8*/                 UINT8        EtwCalloutActive : 1;                 // 4 BitPosition                      
/*0x6D8*/                 UINT8        SuppressSymbolLoad : 1;               // 5 BitPosition                      
/*0x6D8*/                 UINT8        Prefetching : 1;                      // 6 BitPosition                      
/*0x6D8*/                 UINT8        OwnsVadExclusive : 1;                 // 7 BitPosition                      
                      };                                                                                           
                      struct                                                 // 4 elements, 0x1 bytes (sizeof)     
                      {                                                                                            
/*0x6D9*/                 UINT8        SystemPagePriorityActive : 1;         // 0 BitPosition                      
/*0x6D9*/                 UINT8        SystemPagePriority : 3;               // 1 BitPosition                      
/*0x6D9*/                 UINT8        AllowWritesToExecutableMemory : 1;    // 4 BitPosition                      
/*0x6D9*/                 UINT8        OwnsVadShared : 1;                    // 5 BitPosition                      
                      };                                                                                           
                  };                                                                                               
              };                                                                                                   
/*0x6DC*/     UINT8        CacheManagerActive;                                                                     
/*0x6DD*/     UINT8        DisablePageFaultClustering;                                                             
/*0x6DE*/     UINT8        ActiveFaultCount;                                                                       
/*0x6DF*/     UINT8        LockOrderState;                                                                         
/*0x6E0*/     UINT64       AlpcMessageId;                                                                          
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x6E8*/         VOID*        AlpcMessage;                                                                        
/*0x6E8*/         ULONG32      AlpcReceiveAttributeSet;                                                            
              };                                                                                                   
/*0x6F0*/     struct _LIST_ENTRY AlpcWaitListEntry;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x700*/     LONG32       ExitStatus;                                                                             
/*0x704*/     ULONG32      CacheManagerCount;                                                                      
/*0x708*/     ULONG32      IoBoostCount;                                                                           
/*0x70C*/     ULONG32      IoQoSBoostCount;                                                                        
/*0x710*/     ULONG32      IoQoSThrottleCount;                                                                     
/*0x714*/     ULONG32      KernelStackReference;                                                                   
/*0x718*/     struct _LIST_ENTRY BoostList;                                  // 2 elements, 0x10 bytes (sizeof)    
/*0x728*/     struct _LIST_ENTRY DeboostList;                                // 2 elements, 0x10 bytes (sizeof)    
/*0x738*/     UINT64       BoostListLock;                                                                          
/*0x740*/     UINT64       IrpListLock;                                                                            
/*0x748*/     VOID*        ReservedForSynchTracking;                                                               
/*0x750*/     struct _SINGLE_LIST_ENTRY CmCallbackListHead;                  // 1 elements, 0x8 bytes (sizeof)     
/*0x758*/     struct _GUID* ActivityId;                                                                            
/*0x760*/     struct _SINGLE_LIST_ENTRY SeLearningModeListHead;              // 1 elements, 0x8 bytes (sizeof)     
/*0x768*/     VOID*        VerifierContext;                                                                        
/*0x770*/     VOID*        AdjustedClientToken;                                                                    
/*0x778*/     VOID*        WorkOnBehalfThread;                                                                     
/*0x780*/     struct _PS_PROPERTY_SET PropertySet;                           // 2 elements, 0x18 bytes (sizeof)    
/*0x798*/     VOID*        PicoContext;                                                                            
/*0x7A0*/     UINT64       UserFsBase;                                                                             
/*0x7A8*/     UINT64       UserGsBase;                                                                             
/*0x7B0*/     struct _THREAD_ENERGY_VALUES* EnergyValues;                                                          
/*0x7B8*/     VOID*        CmDbgInfo;                                                                              
              union                                                          // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                    
/*0x7C0*/         UINT64       SelectedCpuSets;                                                                    
/*0x7C0*/         UINT64*      SelectedCpuSetsIndirect;                                                            
              };                                                                                                   
/*0x7C8*/     struct _EJOB* Silo;                                                                                  
/*0x7D0*/     struct _UNICODE_STRING* ThreadName;                                                                  
/*0x7D8*/     struct _CONTEXT* SetContextState;                                                                    
/*0x7E0*/     ULONG32      LastExpectedRunTime;                                                                    
/*0x7E4*/     ULONG32      HeapData;                                                                               
/*0x7E8*/     struct _LIST_ENTRY OwnerEntryListHead;                         // 2 elements, 0x10 bytes (sizeof)    
/*0x7F8*/     UINT64       DisownedOwnerEntryListLock;                                                             
/*0x800*/     struct _LIST_ENTRY DisownedOwnerEntryListHead;                 // 2 elements, 0x10 bytes (sizeof)    
          }ETHREAD, *PETHREAD;                                                                                     
                                                                                                                   
          typedef struct _ETIMER                        // 19 elements, 0x138 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _KTIMER KeTimer;                   // 6 elements, 0x40 bytes (sizeof)   
/*0x040*/     UINT64       Lock;                                                             
/*0x048*/     struct _KAPC TimerApc;                    // 17 elements, 0x58 bytes (sizeof)  
/*0x0A0*/     struct _KDPC TimerDpc;                    // 11 elements, 0x40 bytes (sizeof)  
/*0x0E0*/     struct _LIST_ENTRY ActiveTimerListEntry;  // 2 elements, 0x10 bytes (sizeof)   
/*0x0F0*/     ULONG32      Period;                                                           
              union                                     // 2 elements, 0x1 bytes (sizeof)    
              {                                                                              
/*0x0F4*/         CHAR         TimerFlags;                                                   
                  struct                                // 4 elements, 0x1 bytes (sizeof)    
                  {                                                                          
/*0x0F4*/             UINT8        ApcAssociated : 1;   // 0 BitPosition                     
/*0x0F4*/             UINT8        FlushDpcs : 1;       // 1 BitPosition                     
/*0x0F4*/             UINT8        Paused : 1;          // 2 BitPosition                     
/*0x0F4*/             UINT8        Spare1 : 5;          // 3 BitPosition                     
                  };                                                                         
              };                                                                             
/*0x0F5*/     UINT8        DueTimeType;                                                      
/*0x0F6*/     UINT16       Spare2;                                                           
/*0x0F8*/     struct _DIAGNOSTIC_CONTEXT* WakeReason;                                        
/*0x100*/     struct _LIST_ENTRY WakeTimerListEntry;    // 2 elements, 0x10 bytes (sizeof)   
/*0x110*/     VOID*        VirtualizedTimerCookie;                                           
/*0x118*/     struct _LIST_ENTRY VirtualizedTimerLinks; // 2 elements, 0x10 bytes (sizeof)   
/*0x128*/     UINT64       DueTime;                                                          
/*0x130*/     ULONG32      CoalescingWindow;                                                 
/*0x134*/     UINT8        _PADDING0_[0x4];                                                  
          }ETIMER, *PETIMER;                                                                 
                                                                                             
          typedef struct _ETW_APC_ENTRY           // 2 elements, 0x60 bytes (sizeof)  
          {                                                                           
              union                               // 2 elements, 0x60 bytes (sizeof)  
              {                                                                       
/*0x000*/         struct _SLIST_ENTRY SListEntry; // 1 elements, 0x10 bytes (sizeof)  
/*0x000*/         struct _KAPC Apc;               // 17 elements, 0x58 bytes (sizeof) 
              };                                                                      
          }ETW_APC_ENTRY, *PETW_APC_ENTRY;                                            
                                                                                      
          typedef struct _ETW_BUFFER_CONTEXT        // 4 elements, 0x4 bytes (sizeof) 
          {                                                                           
              union                                 // 2 elements, 0x2 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x2 bytes (sizeof) 
                  {                                                                   
/*0x000*/             UINT8        ProcessorNumber;                                   
/*0x001*/             UINT8        Alignment;                                         
                  };                                                                  
/*0x000*/         UINT16       ProcessorIndex;                                        
              };                                                                      
/*0x002*/     UINT16       LoggerId;                                                  
          }ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT;                                  
                                                                                      
          typedef struct _ETW_BUFFER_QUEUE          // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _SINGLE_LIST_ENTRY* QueueTail;                                    
/*0x008*/     struct _SINGLE_LIST_ENTRY QueueEntry; // 1 elements, 0x8 bytes (sizeof)  
          }ETW_BUFFER_QUEUE, *PETW_BUFFER_QUEUE;                                       
                                                                                       
          typedef struct _ETW_COUNTERS   // 3 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     LONG32       GuidCount;                                       
/*0x004*/     LONG32       PoolUsage[2];                                    
/*0x00C*/     LONG32       SessionCount;                                    
          }ETW_COUNTERS, *PETW_COUNTERS;                                    
                                                                            
          typedef struct _ETW_DEBUGID_TRACKING_ENTRY // 5 elements, 0x38 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY ListEntry;          // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        ConsumersNotified;                                           
/*0x011*/     UINT8        Spare[3];                                                    
/*0x014*/     ULONG32      DebugIdSize;                                                 
/*0x018*/     union _CVDD  DebugId;                  // 3 elements, 0x1C bytes (sizeof) 
/*0x034*/     UINT8        _PADDING0_[0x4];                                             
          }ETW_DEBUGID_TRACKING_ENTRY, *PETW_DEBUGID_TRACKING_ENTRY;                                   
                                                                                        
          typedef struct _ETW_DECODE_CONTROL_ENTRY    // 4 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _ETW_DECODE_CONTROL_ENTRY* Next;                                    
/*0x008*/     struct _GUID Decode;                    // 4 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _GUID Control;                   // 4 elements, 0x10 bytes (sizeof) 
/*0x028*/     UINT8        ConsumersNotified;                                            
/*0x029*/     UINT8        _PADDING0_[0x7];                                              
          }ETW_DECODE_CONTROL_ENTRY, *PETW_DECODE_CONTROL_ENTRY;                                   
                                                                                         
typedef struct _ETW_EVENT_CALLBACK_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                            
}ETW_EVENT_CALLBACK_CONTEXT, *PETW_EVENT_CALLBACK_CONTEXT;                                  
                                                                             
          typedef struct _RTL_HASH_TABLE          // 4 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      EntryCount;                                               
              struct                              // 2 elements, 0x4 bytes (sizeof)  
              {                                                                      
/*0x004*/         ULONG32      MaskBitCount : 5;  // 0 BitPosition                   
/*0x004*/         ULONG32      BucketCount : 27;  // 5 BitPosition                   
              };                                                                     
/*0x008*/     struct _SINGLE_LIST_ENTRY* Buckets;                                    
          }RTL_HASH_TABLE, *PRTL_HASH_TABLE;                                         
                                                                                     
          typedef struct _ETW_FILTER_EVENT_NAME_DATA // 5 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT8        FilterIn;                                                    
/*0x001*/     UINT8        Level;                                                       
/*0x002*/     UINT8        _PADDING0_[0x6];                                             
/*0x008*/     UINT64       MatchAnyKeyword;                                             
/*0x010*/     UINT64       MatchAllKeyword;                                             
/*0x018*/     struct _RTL_HASH_TABLE NameTable;      // 4 elements, 0x10 bytes (sizeof) 
          }ETW_FILTER_EVENT_NAME_DATA, *PETW_FILTER_EVENT_NAME_DATA;                                   
                                                                                        
          typedef struct _ETW_FILTER_HEADER                            // 12 elements, 0x60 bytes (sizeof) 
          {                                                                                                
/*0x000*/     LONG32       FilterFlags;                                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                
/*0x008*/     struct _ETW_FILTER_PID* PidFilter;                                                           
/*0x010*/     struct _ETW_FILTER_STRING_TOKEN* ExeFilter;                                                  
/*0x018*/     struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;                                                
/*0x020*/     struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;                                             
/*0x028*/     struct _ETW_PERFECT_HASH_FUNCTION* StackWalkIdFilter;                                        
/*0x030*/     struct _ETW_FILTER_EVENT_NAME_DATA* StackWalkNameFilter;                                     
/*0x038*/     struct _EVENT_FILTER_LEVEL_KW* StackWalkLevelKwFilter;                                       
/*0x040*/     struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;                                            
/*0x048*/     struct _ETW_PAYLOAD_FILTER* PayloadFilter;                                                   
/*0x050*/     struct _EVENT_FILTER_HEADER* ProviderSideFilter;                                             
/*0x058*/     struct _ETW_FILTER_EVENT_NAME_DATA* EventNameFilter;                                         
          }ETW_FILTER_HEADER, *PETW_FILTER_HEADER;                                                         
                                                                                                           
          typedef struct _ETW_FILTER_PID // 2 elements, 0x24 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      Count;                                           
/*0x004*/     ULONG32      Pids[8];                                         
          }ETW_FILTER_PID, *PETW_FILTER_PID;                                   
                                                                            
          typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Length;                                                           
/*0x002*/     UINT8        _PADDING0_[0x6];                                                  
/*0x008*/     WCHAR*       String;                                                           
          }ETW_FILTER_STRING_TOKEN_ELEMENT, *PETW_FILTER_STRING_TOKEN_ELEMENT;                                   
                                                                                             
          typedef struct _ETW_FILTER_STRING_TOKEN                // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                         
/*0x000*/     UINT16       Count;                                                                   
/*0x002*/     UINT8        _PADDING0_[0x6];                                                         
/*0x008*/     struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];                                    
          }ETW_FILTER_STRING_TOKEN, *PETW_FILTER_STRING_TOKEN;                                      
                                                                                                    
          typedef struct _ETW_LAST_ENABLE_INFO   // 5 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     union _LARGE_INTEGER EnableFlags;  // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT16       LoggerId;                                                
/*0x00A*/     UINT8        Level;                                                   
              struct                             // 2 elements, 0x1 bytes (sizeof)  
              {                                                                     
/*0x00B*/         UINT8        Enabled : 1;      // 0 BitPosition                   
/*0x00B*/         UINT8        InternalFlag : 7; // 1 BitPosition                   
              };                                                                    
          }ETW_LAST_ENABLE_INFO, *PETW_LAST_ENABLE_INFO;                                   
                                                                                    
          typedef struct _TRACE_ENABLE_INFO // 8 elements, 0x20 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      IsEnabled;                                          
/*0x004*/     UINT8        Level;                                              
/*0x005*/     UINT8        Reserved1;                                          
/*0x006*/     UINT16       LoggerId;                                           
/*0x008*/     ULONG32      EnableProperty;                                     
/*0x00C*/     ULONG32      Reserved2;                                          
/*0x010*/     UINT64       MatchAnyKeyword;                                    
/*0x018*/     UINT64       MatchAllKeyword;                                    
          }TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO;                                   
                                                                               
          typedef struct _ETW_GUID_ENTRY                    // 13 elements, 0x190 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY GuidList;                  // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     INT64        RefCount;                                                             
/*0x018*/     struct _GUID Guid;                            // 4 elements, 0x10 bytes (sizeof)   
/*0x028*/     struct _LIST_ENTRY RegListHead;               // 2 elements, 0x10 bytes (sizeof)   
/*0x038*/     VOID*        SecurityDescriptor;                                                   
              union                                         // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                  
/*0x040*/         struct _ETW_LAST_ENABLE_INFO LastEnable;  // 5 elements, 0x10 bytes (sizeof)   
/*0x040*/         UINT64       MatchId;                                                          
              };                                                                                 
/*0x050*/     struct _TRACE_ENABLE_INFO ProviderEnableInfo; // 8 elements, 0x20 bytes (sizeof)   
/*0x070*/     struct _TRACE_ENABLE_INFO EnableInfo[8];                                           
/*0x170*/     struct _ETW_FILTER_HEADER* FilterData;                                             
/*0x178*/     struct _ETW_SILODRIVERSTATE* SiloState;                                            
/*0x180*/     struct _EX_PUSH_LOCK Lock;                    // 7 elements, 0x8 bytes (sizeof)    
/*0x188*/     struct _ETHREAD* LockOwner;                                                        
          }ETW_GUID_ENTRY, *PETW_GUID_ENTRY;                                                     
                                                                                                 
          typedef struct _ETW_HASH_BUCKET      // 2 elements, 0x38 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY ListHead[3];                                     
/*0x030*/     struct _EX_PUSH_LOCK BucketLock; // 7 elements, 0x8 bytes (sizeof)  
          }ETW_HASH_BUCKET, *PETW_HASH_BUCKET;                                    
                                                                                  
          typedef struct _ETW_HW_TRACE_EXT_INTERFACE                                                                                                                                                                                                       // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                   
/*0x000*/     FUNCT_00A0_12ED_StartProcessorTraceOnEachCore* StartProcessorTraceOnEachCore;                                                                                                                                                                                                   
/*0x008*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* StopProcessorTraceOnEachCore;                                    
/*0x010*/     FUNCT_00A0_12F3_LogProcessorTraceOnCurrentCore_HalIommuEnableDevicePasid_HalIommuDisableDevicePasid_HalIommuUnmapDevice* LogProcessorTraceOnCurrentCore;                                                                                                                        
          }ETW_HW_TRACE_EXT_INTERFACE, *PETW_HW_TRACE_EXT_INTERFACE;                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                              
          typedef struct _ETW_IPT_SUPPORT                                 // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     VOID*        IptHandle;                                                                        
/*0x008*/     UINT64       IptOption;                                                                        
/*0x010*/     struct _ETW_HW_TRACE_EXT_INTERFACE* EtwHwTraceExtInterface;                                    
/*0x018*/     ULONG32      HookIdCount;                                                                      
/*0x01C*/     UINT16       HookId[4];                                                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                                  
          }ETW_IPT_SUPPORT, *PETW_IPT_SUPPORT;                                                               
                                                                                                             
          typedef struct _ETW_LBR_SUPPORT // 4 elements, 0x14 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      LbrHandle;                                        
/*0x004*/     ULONG32      LbrOptions;                                       
/*0x008*/     ULONG32      HookIdCount;                                      
/*0x00C*/     UINT16       HookId[4];                                        
          }ETW_LBR_SUPPORT, *PETW_LBR_SUPPORT;                                   
                                                                             
          typedef struct _ETW_LOGGER_HANDLE     // 1 elements, 0x1 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        DereferenceAndLeave;                                   
          }ETW_LOGGER_HANDLE, *PETW_LOGGER_HANDLE;                                  
                                                                                  
          typedef struct _ETW_PAYLOAD_FILTER                   // 2 elements, 0x58 bytes (sizeof)  
          {                                                                                        
/*0x000*/     LONG32       RefCount;                                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                        
/*0x008*/     struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter; // 18 elements, 0x50 bytes (sizeof) 
          }ETW_PAYLOAD_FILTER, *PETW_PAYLOAD_FILTER;                                               
                                                                                                   
          typedef struct _ETW_PERF_COUNTERS               // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                  
/*0x000*/     LONG32       TotalActiveSessions;                                              
/*0x004*/     LONG32       TotalBufferMemoryNonPagedPool;                                    
/*0x008*/     LONG32       TotalBufferMemoryPagedPool;                                       
/*0x00C*/     LONG32       TotalGuidsEnabled;                                                
/*0x010*/     LONG32       TotalGuidsNotEnabled;                                             
/*0x014*/     LONG32       TotalGuidsPreEnabled;                                             
          }ETW_PERF_COUNTERS, *PETW_PERF_COUNTERS;                                           
                                                                                             
typedef struct _ETW_PERFECT_HASH_FUNCTION // 0 elements, 0x0 bytes (sizeof) 
{                                                                           
}ETW_PERFECT_HASH_FUNCTION, *PETW_PERFECT_HASH_FUNCTION;                                  
                                                                            
          typedef struct _ETW_PMC_SUPPORT                 // 5 elements, 0x38 bytes (sizeof) 
          {                                                                                  
/*0x000*/     enum _KPROFILE_SOURCE Source[8];                                               
/*0x020*/     ULONG32      HookIdCount;                                                      
/*0x024*/     UINT16       HookId[4];                                                        
/*0x02C*/     ULONG32      CountersCount;                                                    
/*0x030*/     struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];                                    
          }ETW_PMC_SUPPORT, *PETW_PMC_SUPPORT;                                               
                                                                                             
          typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE // 3 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _RTL_RB_TREE Tree;               // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _EX_PUSH_LOCK Lock;              // 7 elements, 0x8 bytes (sizeof)  
/*0x018*/     UINT16       SequenceNumber;                                               
/*0x01A*/     UINT8        _PADDING0_[0x6];                                              
          }ETW_PRIV_HANDLE_DEMUX_TABLE, *PETW_PRIV_HANDLE_DEMUX_TABLE;                                   
                                                                                         
          typedef struct _ETW_PROVIDER_TRAITS // 3 elements, 0x20 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _RTL_BALANCED_NODE Node; // 6 elements, 0x18 bytes (sizeof) 
/*0x018*/     ULONG32      ReferenceCount;                                       
/*0x01C*/     UINT8        Traits[1];                                            
/*0x01D*/     UINT8        _PADDING0_[0x3];                                      
          }ETW_PROVIDER_TRAITS, *PETW_PROVIDER_TRAITS;                                   
                                                                                 
          typedef struct _ETW_QUEUE_ENTRY                  // 8 elements, 0x38 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _LIST_ENTRY ListEntry;                // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _ETWP_NOTIFICATION_HEADER* DataBlock;                                    
/*0x018*/     struct _ETW_REG_ENTRY* RegEntry;                                                
/*0x020*/     struct _ETW_REG_ENTRY* ReplyObject;                                             
/*0x028*/     VOID*        WakeReference;                                                     
/*0x030*/     UINT16       RegIndex;                                                          
/*0x032*/     UINT16       ReplyIndex;                                                        
/*0x034*/     ULONG32      Flags;                                                             
          }ETW_QUEUE_ENTRY, *PETW_QUEUE_ENTRY;                                                
                                                                                              
          typedef struct _ETW_REALTIME_CONSUMER              // 26 elements, 0xA0 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY Links;                      // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     VOID*        ProcessHandle;                                                        
/*0x018*/     struct _EPROCESS* ProcessObject;                                                   
/*0x020*/     VOID*        NextNotDelivered;                                                     
/*0x028*/     VOID*        RealtimeConnectContext;                                               
/*0x030*/     struct _KEVENT* DisconnectEvent;                                                   
/*0x038*/     struct _KEVENT* DataAvailableEvent;                                                
/*0x040*/     ULONG32*     UserBufferCount;                                                      
/*0x048*/     struct _SINGLE_LIST_ENTRY* UserBufferListHead;                                     
/*0x050*/     ULONG32      BuffersLost;                                                          
/*0x054*/     ULONG32      EmptyBuffersCount;                                                    
/*0x058*/     UINT16       LoggerId;                                                             
              union                                          // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                  
/*0x05A*/         UINT8        Flags;                                                            
                  struct                                     // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                              
/*0x05A*/             UINT8        ShutDownRequested : 1;    // 0 BitPosition                    
/*0x05A*/             UINT8        NewBuffersLost : 1;       // 1 BitPosition                    
/*0x05A*/             UINT8        Disconnected : 1;         // 2 BitPosition                    
/*0x05A*/             UINT8        Notified : 1;             // 3 BitPosition                    
/*0x05A*/             UINT8        Wow : 1;                  // 4 BitPosition                    
                  };                                                                             
              };                                                                                 
/*0x060*/     struct _RTL_BITMAP ReservedBufferSpaceBitMap;  // 2 elements, 0x10 bytes (sizeof)  
/*0x070*/     UINT8*       ReservedBufferSpace;                                                  
/*0x078*/     ULONG32      ReservedBufferSpaceSize;                                              
/*0x07C*/     ULONG32      UserPagesAllocated;                                                   
/*0x080*/     ULONG32      UserPagesReused;                                                      
/*0x084*/     UINT8        _PADDING0_[0x4];                                                      
/*0x088*/     ULONG32*     EventsLostCount;                                                      
/*0x090*/     ULONG32*     BuffersLostCount;                                                     
/*0x098*/     struct _ETW_SILODRIVERSTATE* SiloState;                                            
          }ETW_REALTIME_CONSUMER, *PETW_REALTIME_CONSUMER;                                       
                                                                                                 
          typedef struct _ETW_REF_CLOCK            // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     union _LARGE_INTEGER StartTime;      // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER StartPerfClock; // 4 elements, 0x8 bytes (sizeof)  
          }ETW_REF_CLOCK, *PETW_REF_CLOCK;                                            
                                                                                      
          typedef struct _ETW_REG_ENTRY                             // 27 elements, 0x70 bytes (sizeof) 
          {                                                                                             
/*0x000*/     struct _LIST_ENTRY RegList;                           // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY GroupRegList;                      // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _ETW_GUID_ENTRY* GuidEntry;                                                        
/*0x028*/     struct _ETW_GUID_ENTRY* GroupEntry;                                                       
              union                                                 // 3 elements, 0x20 bytes (sizeof)  
              {                                                                                         
/*0x030*/         struct _ETW_REPLY_QUEUE* ReplyQueue;                                                  
/*0x030*/         struct _ETW_QUEUE_ENTRY* ReplySlot[4];                                                
                  struct                                            // 2 elements, 0x20 bytes (sizeof)  
                  {                                                                                     
/*0x030*/             VOID*        Caller;                                                              
/*0x038*/             ULONG32      SessionId;                                                           
/*0x03C*/             UINT8        _PADDING0_[0x14];                                                    
                  };                                                                                    
              };                                                                                        
              union                                                 // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                         
/*0x050*/         struct _EPROCESS* Process;                                                            
/*0x050*/         VOID*        CallbackContext;                                                         
              };                                                                                        
/*0x058*/     VOID*        Callback;                                                                    
/*0x060*/     UINT16       Index;                                                                       
              union                                                 // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                         
/*0x062*/         UINT16       Flags;                                                                   
                  struct                                            // 11 elements, 0x2 bytes (sizeof)  
                  {                                                                                     
/*0x062*/             UINT16       DbgKernelRegistration : 1;       // 0 BitPosition                    
/*0x062*/             UINT16       DbgUserRegistration : 1;         // 1 BitPosition                    
/*0x062*/             UINT16       DbgReplyRegistration : 1;        // 2 BitPosition                    
/*0x062*/             UINT16       DbgClassicRegistration : 1;      // 3 BitPosition                    
/*0x062*/             UINT16       DbgSessionSpaceRegistration : 1; // 4 BitPosition                    
/*0x062*/             UINT16       DbgModernRegistration : 1;       // 5 BitPosition                    
/*0x062*/             UINT16       DbgClosed : 1;                   // 6 BitPosition                    
/*0x062*/             UINT16       DbgInserted : 1;                 // 7 BitPosition                    
/*0x062*/             UINT16       DbgWow64 : 1;                    // 8 BitPosition                    
/*0x062*/             UINT16       DbgUseDescriptorType : 1;        // 9 BitPosition                    
/*0x062*/             UINT16       DbgDropProviderTraits : 1;       // 10 BitPosition                   
                  };                                                                                    
              };                                                                                        
/*0x064*/     UINT8        EnableMask;                                                                  
/*0x065*/     UINT8        GroupEnableMask;                                                             
/*0x066*/     UINT8        _PADDING1_[0x2];                                                             
/*0x068*/     struct _ETW_PROVIDER_TRAITS* Traits;                                                      
          }ETW_REG_ENTRY, *PETW_REG_ENTRY;                                                              
                                                                                                        
          typedef struct _KQUEUE                 // 5 elements, 0x40 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;  // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     struct _LIST_ENTRY EntryListHead;  // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     ULONG32      CurrentCount;                                             
/*0x02C*/     ULONG32      MaximumCount;                                             
/*0x030*/     struct _LIST_ENTRY ThreadListHead; // 2 elements, 0x10 bytes (sizeof)  
          }KQUEUE, *PKQUEUE;                                                         
                                                                                     
          typedef struct _ETW_REPLY_QUEUE   // 2 elements, 0x48 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _KQUEUE Queue;         // 5 elements, 0x40 bytes (sizeof) 
/*0x040*/     LONG32       EventsLost;                                         
/*0x044*/     UINT8        _PADDING0_[0x4];                                    
          }ETW_REPLY_QUEUE, *PETW_REPLY_QUEUE;                                   
                                                                               
          typedef struct _ETW_SESSION_PERF_COUNTERS  // 5 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     LONG32       BufferMemoryPagedPool;                                       
/*0x004*/     LONG32       BufferMemoryNonPagedPool;                                    
/*0x008*/     UINT64       EventsLoggedCount;                                           
/*0x010*/     LONG32       EventsLost;                                                  
/*0x014*/     LONG32       NumConsumers;                                                
          }ETW_SESSION_PERF_COUNTERS, *PETW_SESSION_PERF_COUNTERS;                                   
                                                                                        
          typedef struct _ETW_SILO_TRACING_BLOCK     // 3 elements, 0x40 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _EX_FAST_REF* ProcessorBuffers;                                    
/*0x008*/     UINT64*      EventsLoggedCount;                                           
/*0x010*/     INT64*       QpcDelta;                                                    
/*0x018*/     UINT8        _PADDING0_[0x28];                                            
          }ETW_SILO_TRACING_BLOCK, *PETW_SILO_TRACING_BLOCK;                                   
                                                                                        
          typedef struct _ETW_SYSTEM_LOGGER // 2 elements, 0x2 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT8        LoggerId;                                          
/*0x001*/     UINT8        ClockType;                                         
          }ETW_SYSTEM_LOGGER, *PETW_SYSTEM_LOGGER;                                  
                                                                              
          typedef struct _PERFINFO_GROUPMASK // 1 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Masks[8];                                            
          }PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK;                                   
                                                                                
          typedef struct _ETW_SYSTEM_LOGGER_SETTINGS          // 4 elements, 0x174 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];                                      
/*0x010*/     ULONG32      EtwpActiveSystemLoggers;                                               
/*0x014*/     struct _PERFINFO_GROUPMASK SiloGlobalGroupMask; // 1 elements, 0x20 bytes (sizeof)  
/*0x034*/     struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];                                      
          }ETW_SYSTEM_LOGGER_SETTINGS, *PETW_SYSTEM_LOGGER_SETTINGS;                                    
                                                                                                  
           typedef struct _ETW_SILODRIVERSTATE                               // 21 elements, 0x11C0 bytes (sizeof) 
           {                                                                                                       
/*0x000*/      struct _EJOB* Silo;                                                                                 
/*0x008*/      struct _ESERVERSILO_GLOBALS* SiloGlobals;                                                           
/*0x010*/      ULONG32      MaxLoggers;                                                                            
/*0x014*/      UINT8        _PADDING0_[0x4];                                                                       
/*0x018*/      struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;         // 13 elements, 0x190 bytes (sizeof)  
/*0x1A8*/      struct _EX_RUNDOWN_REF_CACHE_AWARE** EtwpLoggerRundown;                                             
/*0x1B0*/      struct _WMI_LOGGER_CONTEXT** EtwpLoggerContext;                                                     
/*0x1B8*/      struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];                                                      
/*0xFB8*/      UINT16       EtwpSecurityLoggers[8];                                                                
/*0xFC8*/      UINT8        EtwpSecurityProviderEnableMask;                                                        
/*0xFC9*/      UINT8        _PADDING1_[0x3];                                                                       
/*0xFCC*/      LONG32       EtwpShutdownInProgress;                                                                
/*0xFD0*/      ULONG32      EtwpSecurityProviderPID;                                                               
/*0xFD4*/      UINT8        _PADDING2_[0x4];                                                                       
/*0xFD8*/      struct _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;     // 3 elements, 0x20 bytes (sizeof)    
/*0xFF8*/      struct _ETW_COUNTERS EtwpCounters;                            // 3 elements, 0x10 bytes (sizeof)    
/*0x1008*/     union _LARGE_INTEGER LogfileBytesWritten;                     // 4 elements, 0x8 bytes (sizeof)     
/*0x1010*/     struct _ETW_SILO_TRACING_BLOCK* ProcessorBlocks;                                                    
/*0x1018*/     struct _EX_WNF_SUBSCRIPTION* ContainerRestoreWnfSubscription;                                       
/*0x1020*/     struct _GUID PartitionId;                                     // 4 elements, 0x10 bytes (sizeof)    
/*0x1030*/     struct _GUID ParentId;                                        // 4 elements, 0x10 bytes (sizeof)    
/*0x1040*/     union _LARGE_INTEGER QpcOffsetFromRoot;                       // 4 elements, 0x8 bytes (sizeof)     
/*0x1048*/     ULONG32      PartitionType;                                                                         
/*0x104C*/     struct _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;      // 4 elements, 0x174 bytes (sizeof)   
           }ETW_SILODRIVERSTATE, *PETW_SILODRIVERSTATE;                                                            
                                                                                                                   
typedef struct _ETW_SOFT_RESTART_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                          
}ETW_SOFT_RESTART_CONTEXT, *PETW_SOFT_RESTART_CONTEXT;                                  
                                                                           
typedef struct _ETW_STACK_CACHE // 0 elements, 0x0 bytes (sizeof) 
{                                                                 
}ETW_STACK_CACHE, *PETW_STACK_CACHE;                                  
                                                                  
          typedef struct _ETW_STACK_TRACE_BLOCK      // 9 elements, 0x80 bytes (sizeof)  
          {                                                                              
/*0x000*/     union _LARGE_INTEGER RelatedTimestamp; // 4 elements, 0x8 bytes (sizeof)   
/*0x008*/     struct _ETHREAD* Thread;                                                   
/*0x010*/     struct _KDPC StackWalkDpc;             // 11 elements, 0x40 bytes (sizeof) 
/*0x050*/     union _SLIST_HEADER ApcListHead;       // 3 elements, 0x10 bytes (sizeof)  
/*0x060*/     struct _ETW_APC_ENTRY* ApcEntry;                                           
/*0x068*/     ULONG32      ApcEntryCount;                                                
/*0x06C*/     LONG32       Flags;                                                        
/*0x070*/     LONG32       ApcCount;                                                     
/*0x074*/     LONG32       MaxApcCount;                                                  
/*0x078*/     UINT8        _PADDING0_[0x8];                                              
          }ETW_STACK_TRACE_BLOCK, *PETW_STACK_TRACE_BLOCK;                                    
                                                                                         
          typedef struct _ETW_SYSTEMTIME // 8 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Year;                                            
/*0x002*/     UINT16       Month;                                           
/*0x004*/     UINT16       DayOfWeek;                                       
/*0x006*/     UINT16       Day;                                             
/*0x008*/     UINT16       Hour;                                            
/*0x00A*/     UINT16       Minute;                                          
/*0x00C*/     UINT16       Second;                                          
/*0x00E*/     UINT16       Milliseconds;                                    
          }ETW_SYSTEMTIME, *PETW_SYSTEMTIME;                                   
                                                                            
          typedef struct _ETW_WMITRACE_WORK          // 16 elements, 0xF0 bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      LoggerId;                                                     
/*0x004*/     ULONG32      SiloSessionId;                                                
              union                                  // 2 elements, 0xE0 bytes (sizeof)  
              {                                                                          
                  struct                             // 8 elements, 0xE0 bytes (sizeof)  
                  {                                                                      
/*0x008*/             CHAR         LoggerName[65];                                       
/*0x049*/             CHAR         FileName[129];                                        
/*0x0CA*/             UINT8        _PADDING0_[0x2];                                      
/*0x0CC*/             ULONG32      MaximumFileSize;                                      
/*0x0D0*/             ULONG32      MinBuffers;                                           
/*0x0D4*/             ULONG32      MaxBuffers;                                           
/*0x0D8*/             ULONG32      BufferSize;                                           
/*0x0DC*/             ULONG32      Mode;                                                 
/*0x0E0*/             ULONG32      FlushTimer;                                           
/*0x0E4*/             UINT8        _PADDING1_[0x4];                                      
                  };                                                                     
                  struct                             // 5 elements, 0xE0 bytes (sizeof)  
                  {                                                                      
/*0x008*/             UINT64       MatchAny;                                             
/*0x010*/             UINT64       MatchAll;                                             
/*0x018*/             ULONG32      EnableProperty;                                       
/*0x01C*/             struct _GUID Guid;             // 4 elements, 0x10 bytes (sizeof)  
/*0x02C*/             UINT8        Level;                                                
/*0x02D*/             UINT8        _PADDING2_[0xBB];                                     
                  };                                                                     
              };                                                                         
/*0x0E8*/     LONG32       Status;                                                       
/*0x0EC*/     UINT8        _PADDING3_[0x4];                                              
          }ETW_WMITRACE_WORK, *PETW_WMITRACE_WORK;                                       
                                                                                         
          typedef struct _ETWP_NOTIFICATION_HEADER          // 15 elements, 0x48 bytes (sizeof) 
          {                                                                                     
/*0x000*/     enum _ETW_NOTIFICATION_TYPE NotificationType;                                     
/*0x004*/     ULONG32      NotificationSize;                                                    
/*0x008*/     LONG32       RefCount;                                                            
/*0x00C*/     UINT8        ReplyRequested;                                                      
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                     
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x010*/         ULONG32      ReplyIndex;                                                      
/*0x010*/         ULONG32      Timeout;                                                         
              };                                                                                
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x014*/         ULONG32      ReplyCount;                                                      
/*0x014*/         ULONG32      NotifyeeCount;                                                   
              };                                                                                
              union                                         // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                 
/*0x018*/         UINT64       ReplyHandle;                                                     
/*0x018*/         VOID*        ReplyObject;                                                     
/*0x018*/         ULONG32      RegIndex;                                                        
              };                                                                                
/*0x020*/     ULONG32      TargetPID;                                                           
/*0x024*/     ULONG32      SourcePID;                                                           
/*0x028*/     struct _GUID DestinationGuid;                 // 4 elements, 0x10 bytes (sizeof)  
/*0x038*/     struct _GUID SourceGuid;                      // 4 elements, 0x10 bytes (sizeof)  
          }ETWP_NOTIFICATION_HEADER, *PETWP_NOTIFICATION_HEADER;                                    
                                                                                                
          typedef struct _EVENT_DATA_DESCRIPTOR // 6 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       Ptr;                                                    
/*0x008*/     ULONG32      Size;                                                   
              union                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                    
/*0x00C*/         ULONG32      Reserved;                                           
                  struct                        // 3 elements, 0x4 bytes (sizeof)  
                  {                                                                
/*0x00C*/             UINT8        Type;                                           
/*0x00D*/             UINT8        Reserved1;                                      
/*0x00E*/             UINT16       Reserved2;                                      
                  };                                                               
              };                                                                   
          }EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR;                                   
                                                                                   
          typedef struct _EVENT_DESCRIPTOR // 7 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT16       Id;                                                
/*0x002*/     UINT8        Version;                                           
/*0x003*/     UINT8        Channel;                                           
/*0x004*/     UINT8        Level;                                             
/*0x005*/     UINT8        Opcode;                                            
/*0x006*/     UINT16       Task;                                              
/*0x008*/     UINT64       Keyword;                                           
          }EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR;                                   
                                                                              
          typedef struct _EVENT_FILTER_DESCRIPTOR // 3 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Ptr;                                                      
/*0x008*/     ULONG32      Size;                                                     
/*0x00C*/     ULONG32      Type;                                                     
          }EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR;                                   
                                                                                     
          typedef struct _EVENT_FILTER_HEADER // 6 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT16       Id;                                                   
/*0x002*/     UINT8        Version;                                              
/*0x003*/     UINT8        Reserved[5];                                          
/*0x008*/     UINT64       InstanceId;                                           
/*0x010*/     ULONG32      Size;                                                 
/*0x014*/     ULONG32      NextOffset;                                           
          }EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER;                                   
                                                                                 
          typedef struct _EVENT_FILTER_LEVEL_KW // 4 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       MatchAnyKeyword;                                        
/*0x008*/     UINT64       MatchAllKeyword;                                        
/*0x010*/     UINT8        Level;                                                  
/*0x011*/     UINT8        FilterIn;                                               
/*0x012*/     UINT8        _PADDING0_[0x6];                                        
          }EVENT_FILTER_LEVEL_KW, *PEVENT_FILTER_LEVEL_KW;                                   
                                                                                   
          typedef struct _EVENT_HEADER                  // 13 elements, 0x50 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT16       Size;                                                            
/*0x002*/     UINT16       HeaderType;                                                      
/*0x004*/     UINT16       Flags;                                                           
/*0x006*/     UINT16       EventProperty;                                                   
/*0x008*/     ULONG32      ThreadId;                                                        
/*0x00C*/     ULONG32      ProcessId;                                                       
/*0x010*/     union _LARGE_INTEGER TimeStamp;           // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _GUID ProviderId;                  // 4 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _EVENT_DESCRIPTOR EventDescriptor; // 7 elements, 0x10 bytes (sizeof)  
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
                  struct                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x038*/             ULONG32      KernelTime;                                              
/*0x03C*/             ULONG32      UserTime;                                                
                  };                                                                        
/*0x038*/         UINT64       ProcessorTime;                                               
              };                                                                            
/*0x040*/     struct _GUID ActivityId;                  // 4 elements, 0x10 bytes (sizeof)  
          }EVENT_HEADER, *PEVENT_HEADER;                                                    
                                                                                            
          typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM // 6 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Reserved1;                                                        
/*0x002*/     UINT16       ExtType;                                                          
              struct                                      // 2 elements, 0x2 bytes (sizeof)  
              {                                                                              
/*0x004*/         UINT16       Linkage : 1;               // 0 BitPosition                   
/*0x004*/         UINT16       Reserved2 : 15;            // 1 BitPosition                   
              };                                                                             
/*0x006*/     UINT16       DataSize;                                                         
/*0x008*/     UINT64       DataPtr;                                                          
          }EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM;                                   
                                                                                             
          typedef struct _EVENT_RECORD                               // 7 elements, 0x70 bytes (sizeof)  
          {                                                                                              
/*0x000*/     struct _EVENT_HEADER EventHeader;                      // 13 elements, 0x50 bytes (sizeof) 
/*0x050*/     struct _ETW_BUFFER_CONTEXT BufferContext;              // 4 elements, 0x4 bytes (sizeof)   
/*0x054*/     UINT16       ExtendedDataCount;                                                            
/*0x056*/     UINT16       UserDataLength;                                                               
/*0x058*/     struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;                                     
/*0x060*/     VOID*        UserData;                                                                     
/*0x068*/     VOID*        UserContext;                                                                  
          }EVENT_RECORD, *PEVENT_RECORD;                                                                 
                                                                                                         
          typedef struct _EWOW64PROCESS        // 3 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     VOID*        Peb;                                                   
/*0x008*/     UINT16       Machine;                                               
/*0x00A*/     UINT8        _PADDING0_[0x2];                                       
/*0x00C*/     enum _SYSTEM_DLL_TYPE NtdllType;                                    
          }EWOW64PROCESS, *PEWOW64PROCESS;                                        
                                                                                  
          typedef struct _EX_PARTITION                           // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _EPARTITION* PartitionObject;                                                  
/*0x008*/     struct _EX_WORK_QUEUE*** WorkQueues;                                                  
/*0x010*/     struct _EX_WORK_QUEUE_MANAGER** WorkQueueManagers;                                    
/*0x018*/     LONG32       QueueAllocationMask;                                                     
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                         
          }EX_PARTITION, *PEX_PARTITION;                                                            
                                                                                                    
          typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE // 4 elements, 0x4 bytes (sizeof) 
          {                                                                                
              union                                      // 2 elements, 0x4 bytes (sizeof) 
              {                                                                            
                  struct                                 // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                        
/*0x000*/             ULONG32      Expanded : 1;         // 0 BitPosition                  
/*0x000*/             ULONG32      Transitioning : 1;    // 1 BitPosition                  
/*0x000*/             ULONG32      Pageable : 1;         // 2 BitPosition                  
                  };                                                                       
/*0x000*/         ULONG32      Value;                                                      
              };                                                                           
          }EX_PUSH_LOCK_AUTO_EXPAND_STATE, *PEX_PUSH_LOCK_AUTO_EXPAND_STATE;                                  
                                                                                           
          typedef struct _EX_PUSH_LOCK_AUTO_EXPAND          // 3 elements, 0x10 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _EX_PUSH_LOCK LocalLock;               // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State; // 4 elements, 0x4 bytes (sizeof)  
/*0x00C*/     ULONG32      Stats;                                                              
          }EX_PUSH_LOCK_AUTO_EXPAND, *PEX_PUSH_LOCK_AUTO_EXPAND;                                   
                                                                                               
          typedef struct _EX_RUNDOWN_REF_CACHE_AWARE // 4 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _EX_RUNDOWN_REF* RunRefs;                                          
/*0x008*/     VOID*        PoolToFree;                                                  
/*0x010*/     ULONG32      RunRefSize;                                                  
/*0x014*/     ULONG32      Number;                                                      
          }EX_RUNDOWN_REF_CACHE_AWARE, *PEX_RUNDOWN_REF_CACHE_AWARE;                                   
                                                                                        
typedef struct _EX_TIMER // 0 elements, 0x0 bytes (sizeof) 
{                                                          
}EX_TIMER, *PEX_TIMER;                                     
                                                           
typedef struct _EX_WNF_SUBSCRIPTION // 0 elements, 0x0 bytes (sizeof) 
{                                                                     
}EX_WNF_SUBSCRIPTION, *PEX_WNF_SUBSCRIPTION;                                  
                                                                      
          typedef struct _KPRIQUEUE                 // 5 elements, 0x2B0 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _DISPATCHER_HEADER Header;     // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     struct _LIST_ENTRY EntryListHead[32];                                     
/*0x218*/     LONG32       CurrentCount[32];                                            
/*0x298*/     ULONG32      MaximumCount;                                                
/*0x29C*/     UINT8        _PADDING0_[0x4];                                             
/*0x2A0*/     struct _LIST_ENTRY ThreadListHead;    // 2 elements, 0x10 bytes (sizeof)  
          }KPRIQUEUE, *PKPRIQUEUE;                                                      
                                                                                        
          typedef struct _EX_WORK_QUEUE                    // 11 elements, 0x2E0 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _KPRIQUEUE WorkPriQueue;              // 5 elements, 0x2B0 bytes (sizeof)  
/*0x2B0*/     struct _EX_PARTITION* Partition;                                                  
/*0x2B8*/     struct _ENODE* Node;                                                              
/*0x2C0*/     ULONG32      WorkItemsProcessed;                                                  
/*0x2C4*/     ULONG32      WorkItemsProcessedLastPass;                                          
/*0x2C8*/     LONG32       ThreadCount;                                                         
/*0x2CC*/     LONG32       MinThreads : 31;                // 0 BitPosition                     
/*0x2D0*/     UINT8        _PADDING0_[0xFFFFFFFFFFFFFFFC];                                      
/*0x2CC*/     ULONG32      TryFailed : 1;                  // 31 BitPosition                    
/*0x2D0*/     LONG32       MaxThreads;                                                          
/*0x2D4*/     enum _EXQUEUEINDEX QueueIndex;                                                    
/*0x2D8*/     struct _KEVENT* AllThreadsExitedEvent;                                            
          }EX_WORK_QUEUE, *PEX_WORK_QUEUE;                                                      
                                                                                                
          typedef struct _KTIMER2                                                                                                                                                                                                                                                                                                // 17 elements, 0x88 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                          
/*0x000*/     struct _DISPATCHER_HEADER Header;                                                                                                                                                                                                                                                                                  // 58 elements, 0x18 bytes (sizeof) 
              union                                                                                                                                                                                                                                                                                                              // 2 elements, 0x30 bytes (sizeof)  
              {                                                                                                                                                                                                                                                                                                                                                      
/*0x018*/         struct _RTL_BALANCED_NODE RbNodes[2];                                                                                                                                                                                                                                                                                                              
/*0x018*/         struct _LIST_ENTRY ListEntry;                                                                                                                                                                                                                                                                                  // 2 elements, 0x10 bytes (sizeof)  
              };                                                                                                                                                                                                                                                                                                                                                     
/*0x048*/     UINT64       DueTime[2];                                                                                                                                                                                                                                                                                                                               
/*0x058*/     INT64        Period;                                                                                                                                                                                                                                                                                                                                   
/*0x060*/     FUNCT_00EF_459F_Callback* Callback;                                                                                                                                                                                                                                                                                                                    
/*0x068*/     VOID*        CallbackContext;                                                                                                                                                                                                                                                                                                                          
/*0x070*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DisableCallback;                                     
/*0x078*/     VOID*        DisableContext;                                                                                                                                                                                                                                                                                                                           
/*0x080*/     UINT8        AbsoluteSystemTime;                                                                                                                                                                                                                                                                                                                       
              union                                                                                                                                                                                                                                                                                                              // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                                      
/*0x081*/         UINT8        TypeFlags;                                                                                                                                                                                                                                                                                                                            
                  struct                                                                                                                                                                                                                                                                                                         // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                                                                                                                                                                                                                                                                                                  
/*0x081*/             UINT8        Unused : 1;                                                                                                                                                                                                                                                                                   // 0 BitPosition                    
/*0x081*/             UINT8        IdleResilient : 1;                                                                                                                                                                                                                                                                            // 1 BitPosition                    
/*0x081*/             UINT8        HighResolution : 1;                                                                                                                                                                                                                                                                           // 2 BitPosition                    
/*0x081*/             UINT8        NoWake : 1;                                                                                                                                                                                                                                                                                   // 3 BitPosition                    
/*0x081*/             UINT8        Unused1 : 4;                                                                                                                                                                                                                                                                                  // 4 BitPosition                    
                  };                                                                                                                                                                                                                                                                                                                                                 
              };                                                                                                                                                                                                                                                                                                                                                     
/*0x082*/     UINT8        CollectionIndex[2];                                                                                                                                                                                                                                                                                                                       
/*0x084*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                          
          }KTIMER2, *PKTIMER2;                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                     
          typedef struct _EX_WORK_QUEUE_MANAGER // 9 elements, 0x118 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _EX_PARTITION* Partition;                                      
/*0x008*/     struct _ENODE* Node;                                                  
/*0x010*/     struct _KEVENT Event;             // 1 elements, 0x18 bytes (sizeof)  
/*0x028*/     struct _KTIMER DeadlockTimer;     // 6 elements, 0x40 bytes (sizeof)  
/*0x068*/     struct _KEVENT ReaperEvent;       // 1 elements, 0x18 bytes (sizeof)  
/*0x080*/     struct _KTIMER2 ReaperTimer;      // 17 elements, 0x88 bytes (sizeof) 
/*0x108*/     VOID*        ThreadHandle;                                            
/*0x110*/     ULONG32      ExitThread;                                              
/*0x114*/     ULONG32      ThreadSeed;                                              
          }EX_WORK_QUEUE_MANAGER, *PEX_WORK_QUEUE_MANAGER;                                    
                                                                                    
          typedef struct _EXCEPTION_POINTERS             // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _EXCEPTION_RECORD* ExceptionRecord;                                    
/*0x008*/     struct _CONTEXT* ContextRecord;                                               
          }EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;                                        
                                                                                            
          typedef struct _EXCEPTION_RECORD               // 6 elements, 0x98 bytes (sizeof) 
          {                                                                                 
/*0x000*/     LONG32       ExceptionCode;                                                   
/*0x004*/     ULONG32      ExceptionFlags;                                                  
/*0x008*/     struct _EXCEPTION_RECORD* ExceptionRecord;                                    
/*0x010*/     VOID*        ExceptionAddress;                                                
/*0x018*/     ULONG32      NumberParameters;                                                
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                 
/*0x020*/     UINT64       ExceptionInformation[15];                                        
          }EXCEPTION_RECORD, *PEXCEPTION_RECORD;                                            
                                                                                            
          typedef struct _EXCEPTION_REGISTRATION_RECORD    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _EXCEPTION_REGISTRATION_RECORD* Next;                                    
/*0x008*/     FUNCT_0198_0197_Handler* Handler;                                               
          }EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;                                   
                                                                                              
          typedef struct _EXHANDLE                   // 4 elements, 0x8 bytes (sizeof) 
          {                                                                            
              union                                  // 3 elements, 0x8 bytes (sizeof) 
              {                                                                        
                  struct                             // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                    
/*0x000*/             ULONG32      TagBits : 2;      // 0 BitPosition                  
/*0x000*/             ULONG32      Index : 30;       // 2 BitPosition                  
                  };                                                                   
/*0x000*/         VOID*        GenericHandleOverlay;                                   
/*0x000*/         UINT64       Value;                                                  
              };                                                                       
          }EXHANDLE, *PEXHANDLE;                                                       
                                                                                       
          typedef struct _EXT_DELETE_PARAMETERS                                                                                                                                                                                                                                                                                 // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                        
/*0x000*/     ULONG32      Version;                                                                                                                                                                                                                                                                                                                                
/*0x004*/     ULONG32      Reserved;                                                                                                                                                                                                                                                                                                                               
/*0x008*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DeleteCallback;                                    
/*0x010*/     VOID*        DeleteContext;                                                                                                                                                                                                                                                                                                                          
          }EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS;                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                                   
          typedef struct _EXT_IOMMU_DEVICE_ID_PCI               // 10 elements, 0x10 bytes (sizeof) 
          {                                                                                         
              union                                             // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                     
/*0x000*/         UINT64       AsUINT64;                                                            
                  struct                                        // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                                 
/*0x000*/             UINT16       PciSegmentNumber;                                                
                      struct                                    // 4 elements, 0x2 bytes (sizeof)   
                      {                                                                             
/*0x002*/                 UINT16       PhantomFunctionBits : 2; // 0 BitPosition                    
/*0x002*/                 UINT16       BusRange : 1;            // 2 BitPosition                    
/*0x002*/                 UINT16       DevicePathLength : 5;    // 3 BitPosition                    
/*0x002*/                 UINT16       StartBusNumber : 8;      // 8 BitPosition                    
                      };                                                                            
                      union                                     // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                             
/*0x004*/                 UINT16       Bdf;                                                         
                          struct                                // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                         
/*0x004*/                     UINT8        SubordinateBus;                                          
/*0x005*/                     UINT8        SecondaryBus;                                            
/*0x006*/                     UINT8        _PADDING0_[0x2];                                         
                          };                                                                        
                      };                                                                            
                  };                                                                                
              };                                                                                    
/*0x008*/     WCHAR*       DevicePath;                                                              
          }EXT_IOMMU_DEVICE_ID_PCI, *PEXT_IOMMU_DEVICE_ID_PCI;                                      
                                                                                                    
          typedef struct _EXT_IOMMU_DEVICE_ID_ACPI // 1 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     CHAR*        ObjectName;                                               
          }EXT_IOMMU_DEVICE_ID_ACPI, *PEXT_IOMMU_DEVICE_ID_ACPI;                                  
                                                                                     
          typedef struct _EXT_IOMMU_DEVICE_ID_TEST // 1 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       UniqueId;                                                 
          }EXT_IOMMU_DEVICE_ID_TEST, *PEXT_IOMMU_DEVICE_ID_TEST;                                  
                                                                                     
          typedef struct _EXT_IOMMU_DEVICE_ID_GIC // 1 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT32       LineNumber;                                              
          }EXT_IOMMU_DEVICE_ID_GIC, *PEXT_IOMMU_DEVICE_ID_GIC;                                  
                                                                                    
          typedef struct _EXT_IOMMU_DEVICE_ID            // 7 elements, 0x18 bytes (sizeof)  
          {                                                                                  
/*0x000*/     enum _EXT_IOMMU_DEVICE_TYPE DeviceType;                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                  
              union                                      // 6 elements, 0x10 bytes (sizeof)  
              {                                                                              
/*0x008*/         struct _EXT_IOMMU_DEVICE_ID_PCI Pci;   // 10 elements, 0x10 bytes (sizeof) 
/*0x008*/         struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi; // 1 elements, 0x8 bytes (sizeof)   
/*0x008*/         UINT8        IoApicId;                                                     
/*0x008*/         UINT64       LogicalId;                                                    
/*0x008*/         struct _EXT_IOMMU_DEVICE_ID_TEST Test; // 1 elements, 0x8 bytes (sizeof)   
/*0x008*/         struct _EXT_IOMMU_DEVICE_ID_GIC Gic;   // 1 elements, 0x4 bytes (sizeof)   
              };                                                                             
          }EXT_IOMMU_DEVICE_ID, *PEXT_IOMMU_DEVICE_ID;                                       
                                                                                             
          typedef struct _EXT_SET_PARAMETERS_V0 // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Version;                                                
/*0x004*/     ULONG32      Reserved;                                               
/*0x008*/     INT64        NoWakeTolerance;                                        
          }EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0;                                   
                                                                                   
          typedef struct _FAKE_HEAP_ENTRY // 2 elements, 0x10 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       Size;                                             
/*0x008*/     UINT64       PreviousSize;                                     
          }FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY;                                   
                                                                             
          typedef struct _FAST_ERESOURCE    // 6 elements, 0x68 bytes (sizeof) 
          {                                                                    
/*0x000*/     VOID*        Reserved1[3];                                       
/*0x018*/     ULONG32      Reserved2;                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                    
/*0x020*/     VOID*        Reserved3[4];                                       
/*0x040*/     ULONG32      Reserved4[4];                                       
/*0x050*/     VOID*        Reserved5;                                          
/*0x058*/     VOID*        Reserved6[2];                                       
          }FAST_ERESOURCE, *PFAST_ERESOURCE;                                   
                                                                               
          typedef struct _KWAIT_CHAIN // 1 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     VOID*        Head;                                        
          }KWAIT_CHAIN, *PKWAIT_CHAIN;                                  
                                                                        
          typedef struct _FAST_ERESOURCE_INTERNAL     // 15 elements, 0x68 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY SystemResourcesList; // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     VOID*        ReservedPointer;                                               
/*0x018*/     INT16        ActiveCount;                                                   
/*0x01A*/     UINT16       Flag;                                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                               
/*0x020*/     struct _KWAIT_CHAIN SharedWaiters;      // 1 elements, 0x8 bytes (sizeof)   
/*0x028*/     struct _KWAIT_CHAIN ExclusiveWaiters;   // 1 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _LIST_ENTRY OwnerEntryListHead;  // 2 elements, 0x10 bytes (sizeof)  
/*0x040*/     ULONG32      ActiveEntries;                                                 
/*0x044*/     ULONG32      ContentionCount;                                               
/*0x048*/     ULONG32      NumberOfSharedWaiters;                                         
/*0x04C*/     ULONG32      NumberOfExclusiveWaiters;                                      
/*0x050*/     VOID*        ReservedWin64OnlyPointer;                                      
              union                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                           
/*0x058*/         VOID*        Address;                                                   
/*0x058*/         UINT64       CreatorBackTraceIndex;                                     
              };                                                                          
/*0x060*/     UINT64       SpinLock;                                                      
          }FAST_ERESOURCE_INTERNAL, *PFAST_ERESOURCE_INTERNAL;                                    
                                                                                          
          typedef struct _FAST_IO_DISPATCH                                                                                // 28 elements, 0xE0 bytes (sizeof) 
          {                                                                                                                                                   
/*0x000*/     ULONG32      SizeOfFastIoDispatch;                                                                                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                   
/*0x008*/     FUNCT_00A9_0E38_FastIoCheckIfPossible* FastIoCheckIfPossible;                                                                                   
/*0x010*/     FUNCT_00A9_0E47_FastIoRead_FastIoWrite* FastIoRead;                                                                                             
/*0x018*/     FUNCT_00A9_0E47_FastIoRead_FastIoWrite* FastIoWrite;                                                                                            
/*0x020*/     FUNCT_00A9_0E51_FastIoQueryBasicInfo* FastIoQueryBasicInfo;                                                                                     
/*0x028*/     FUNCT_00A9_0E5F_FastIoQueryStandardInfo* FastIoQueryStandardInfo;                                                                               
/*0x030*/     FUNCT_00A9_0E6D_FastIoLock* FastIoLock;                                                                                                         
/*0x038*/     FUNCT_00A9_0E78_FastIoUnlockSingle* FastIoUnlockSingle;                                                                                         
/*0x040*/     FUNCT_00A9_0E81_FastIoUnlockAll* FastIoUnlockAll;                                                                                               
/*0x048*/     FUNCT_00A9_0E87_FastIoUnlockAllByKey* FastIoUnlockAllByKey;                                                                                     
/*0x050*/     FUNCT_00A9_0E8E_FastIoDeviceControl* FastIoDeviceControl;                                                                                       
/*0x058*/     FUNCT_00EF_0E99_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* AcquireFileForNtCreateSection;                                     
/*0x060*/     FUNCT_00EF_0E99_AcquireFileForNtCreateSection_ReleaseFileForNtCreateSection* ReleaseFileForNtCreateSection;                                     
/*0x068*/     FUNCT_00EF_0E9C_FastIoDetachDevice* FastIoDetachDevice;                                                                                         
/*0x070*/     FUNCT_00A9_0EA0_FastIoQueryNetworkOpenInfo* FastIoQueryNetworkOpenInfo;                                                                         
/*0x078*/     FUNCT_00A0_0EB0_AcquireForModWrite* AcquireForModWrite;                                                                                         
/*0x080*/     FUNCT_00A9_0EB6_MdlRead_PrepareMdlWrite* MdlRead;                                                                                               
/*0x088*/     FUNCT_00A9_0EC0_MdlReadComplete_MdlReadCompleteCompressed* MdlReadComplete;                                                                     
/*0x090*/     FUNCT_00A9_0EB6_MdlRead_PrepareMdlWrite* PrepareMdlWrite;                                                                                       
/*0x098*/     FUNCT_00A9_0EC5_MdlWriteComplete_MdlWriteCompleteCompressed* MdlWriteComplete;                                                                  
/*0x0A0*/     FUNCT_00A9_0ECB_FastIoReadCompressed_FastIoWriteCompressed* FastIoReadCompressed;                                                               
/*0x0A8*/     FUNCT_00A9_0ECB_FastIoReadCompressed_FastIoWriteCompressed* FastIoWriteCompressed;                                                              
/*0x0B0*/     FUNCT_00A9_0EC0_MdlReadComplete_MdlReadCompleteCompressed* MdlReadCompleteCompressed;                                                           
/*0x0B8*/     FUNCT_00A9_0EC5_MdlWriteComplete_MdlWriteCompleteCompressed* MdlWriteCompleteCompressed;                                                        
/*0x0C0*/     FUNCT_00A9_0EE0_FastIoQueryOpen* FastIoQueryOpen;                                                                                               
/*0x0C8*/     FUNCT_00A0_0EE5_ReleaseForModWrite* ReleaseForModWrite;                                                                                         
/*0x0D0*/     FUNCT_00A0_0EEA_AcquireForCcFlush_ReleaseForCcFlush* AcquireForCcFlush;                                                                         
/*0x0D8*/     FUNCT_00A0_0EEA_AcquireForCcFlush_ReleaseForCcFlush* ReleaseForCcFlush;                                                                         
          }FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;                                                                                                              
                                                                                                                                                              
          typedef struct _FAST_MUTEX        // 5 elements, 0x38 bytes (sizeof) 
          {                                                                    
/*0x000*/     LONG32       Count;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     VOID*        Owner;                                              
/*0x010*/     ULONG32      Contention;                                         
/*0x014*/     UINT8        _PADDING1_[0x4];                                    
/*0x018*/     struct _KEVENT Event;         // 1 elements, 0x18 bytes (sizeof) 
/*0x030*/     ULONG32      OldIrql;                                            
/*0x034*/     UINT8        _PADDING2_[0x4];                                    
          }FAST_MUTEX, *PFAST_MUTEX;                                           
                                                                               
          typedef struct _FAST_OWNER_ENTRY // 1 elements, 0x48 bytes (sizeof) 
          {                                                                   
/*0x000*/     VOID*        Reserved[9];                                       
          }FAST_OWNER_ENTRY, *PFAST_OWNER_ENTRY;                                   
                                                                              
          typedef struct _FAST_OWNER_ENTRY_INTERNAL      // 11 elements, 0x48 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _LIST_ENTRY ListEntry;              // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     UINT8        AbLockHandle;                                                     
              struct                                     // 3 elements, 0x1 bytes (sizeof)   
              {                                                                              
/*0x011*/         UINT8        Disowned : 1;             // 0 BitPosition                    
/*0x011*/         UINT8        DynamicallyAllocated : 1; // 1 BitPosition                    
/*0x011*/         UINT8        CallerExclusive : 1;      // 2 BitPosition                    
              };                                                                             
/*0x012*/     UINT8        IsSublistHead;                                                    
/*0x013*/     UINT8        IsWaiting;                                                        
/*0x014*/     UINT8        _PADDING0_[0x4];                                                  
/*0x018*/     VOID*        LockAddress;                                                      
/*0x020*/     VOID*        ThreadAddress;                                                    
/*0x028*/     struct _LIST_ENTRY SublistHead;            // 2 elements, 0x10 bytes (sizeof)  
/*0x038*/     struct _LIST_ENTRY LockListEntry;          // 2 elements, 0x10 bytes (sizeof)  
          }FAST_OWNER_ENTRY_INTERNAL, *PFAST_OWNER_ENTRY_INTERNAL;                                    
                                                                                             
          typedef struct _FAULT_INFORMATION_ARM64_FLAGS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      WriteNotRead : 1;            // 0 BitPosition                  
/*0x000*/     ULONG32      InstructionNotData : 1;      // 1 BitPosition                  
/*0x000*/     ULONG32      Privileged : 1;              // 2 BitPosition                  
/*0x000*/     ULONG32      FaultAddressValid : 1;       // 3 BitPosition                  
/*0x000*/     ULONG32      Reserved : 28;               // 4 BitPosition                  
          }FAULT_INFORMATION_ARM64_FLAGS, *PFAULT_INFORMATION_ARM64_FLAGS;                                  
                                                                                          
          typedef struct _FAULT_INFORMATION_ARM64          // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                   
/*0x000*/     VOID*        DomainHandle;                                                      
/*0x008*/     VOID*        FaultAddress;                                                      
/*0x010*/     struct _DEVICE_OBJECT* PhysicalDeviceObject;                                    
/*0x018*/     ULONG32      InputMappingId;                                                    
/*0x01C*/     struct _FAULT_INFORMATION_ARM64_FLAGS Flags; // 5 elements, 0x4 bytes (sizeof)  
/*0x020*/     enum _FAULT_INFORMATION_ARM64_TYPE Type;                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                   
          }FAULT_INFORMATION_ARM64, *PFAULT_INFORMATION_ARM64;                                   
                                                                                              
          typedef struct _FAULT_INFORMATION          // 2 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     enum _FAULT_INFORMATION_ARCH Type;                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     struct _FAULT_INFORMATION_ARM64 Arm64; // 6 elements, 0x28 bytes (sizeof) 
          }FAULT_INFORMATION, *PFAULT_INFORMATION;                                      
                                                                                        
          typedef struct _FEATURE_ERROR                     // 14 elements, 0x68 bytes (sizeof) 
          {                                                                                     
/*0x000*/     HRESULT      hr;                                                                  
/*0x004*/     UINT16       lineNumber;                                                          
/*0x006*/     UINT8        _PADDING0_[0x2];                                                     
/*0x008*/     CHAR*        file;                                                                
/*0x010*/     CHAR*        process;                                                             
/*0x018*/     CHAR*        modulePath;                                                          
/*0x020*/     UINT32       callerReturnAddressOffset;                                           
/*0x024*/     UINT8        _PADDING1_[0x4];                                                     
/*0x028*/     CHAR*        callerModule;                                                        
/*0x030*/     CHAR*        message;                                                             
/*0x038*/     UINT16       originLineNumber;                                                    
/*0x03A*/     UINT8        _PADDING2_[0x6];                                                     
/*0x040*/     CHAR*        originFile;                                                          
/*0x048*/     CHAR*        originModule;                                                        
/*0x050*/     UINT32       originCallerReturnAddressOffset;                                     
/*0x054*/     UINT8        _PADDING3_[0x4];                                                     
/*0x058*/     CHAR*        originCallerModule;                                                  
/*0x060*/     CHAR*        originName;                                                          
          }FEATURE_ERROR, *PFEATURE_ERROR;                                                      
                                                                                                
          typedef struct _FEATURE_LOGGED_TRAITS // 3 elements, 0x6 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT16       version;                                               
/*0x002*/     UINT16       baseVersion;                                           
/*0x004*/     UINT8        stage;                                                 
/*0x005*/     UINT8        _PADDING0_[0x1];                                       
          }FEATURE_LOGGED_TRAITS, *PFEATURE_LOGGED_TRAITS;                                  
                                                                                  
          typedef struct _FEATURE_STATE_CHANGE_SUBSCRIPTION__ // 1 elements, 0x4 bytes (sizeof) 
          {                                                                                     
/*0x000*/     INT32        unused;                                                              
          }FEATURE_STATE_CHANGE_SUBSCRIPTION__, *PFEATURE_STATE_CHANGE_SUBSCRIPTION__;                                  
                                                                                                
          typedef struct _FILE_BASIC_INFORMATION   // 5 elements, 0x28 bytes (sizeof) 
          {                                                                           
/*0x000*/     union _LARGE_INTEGER CreationTime;   // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime; // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;  // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     ULONG32      FileAttributes;                                            
/*0x024*/     UINT8        _PADDING0_[0x4];                                           
          }FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;                                   
                                                                                      
          typedef struct _SID_IDENTIFIER_AUTHORITY // 1 elements, 0x6 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Value[6];                                                 
          }SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;                                  
                                                                                     
          typedef struct _SID                                       // 4 elements, 0xC bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT8        Revision;                                                                  
/*0x001*/     UINT8        SubAuthorityCount;                                                         
/*0x002*/     struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority; // 1 elements, 0x6 bytes (sizeof) 
/*0x008*/     ULONG32      SubAuthority[1];                                                           
          }SID, *PSID;                                                                                
                                                                                                      
          typedef struct _FILE_GET_QUOTA_INFORMATION // 3 elements, 0x14 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      NextEntryOffset;                                             
/*0x004*/     ULONG32      SidLength;                                                   
/*0x008*/     struct _SID  Sid;                      // 4 elements, 0xC bytes (sizeof)  
          }FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION;                                   
                                                                                        
          typedef struct _FILE_NETWORK_OPEN_INFORMATION // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                
/*0x000*/     union _LARGE_INTEGER CreationTime;        // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER LastAccessTime;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER LastWriteTime;       // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     union _LARGE_INTEGER ChangeTime;          // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     union _LARGE_INTEGER AllocationSize;      // 4 elements, 0x8 bytes (sizeof)  
/*0x028*/     union _LARGE_INTEGER EndOfFile;           // 4 elements, 0x8 bytes (sizeof)  
/*0x030*/     ULONG32      FileAttributes;                                                 
/*0x034*/     UINT8        _PADDING0_[0x4];                                                
          }FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;                                   
                                                                                           
          typedef struct _FILE_OBJECT                                // 30 elements, 0xD8 bytes (sizeof) 
          {                                                                                              
/*0x000*/     INT16        Type;                                                                         
/*0x002*/     INT16        Size;                                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                              
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                                       
/*0x010*/     struct _VPB* Vpb;                                                                          
/*0x018*/     VOID*        FsContext;                                                                    
/*0x020*/     VOID*        FsContext2;                                                                   
/*0x028*/     struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;                                     
/*0x030*/     VOID*        PrivateCacheMap;                                                              
/*0x038*/     LONG32       FinalStatus;                                                                  
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                              
/*0x040*/     struct _FILE_OBJECT* RelatedFileObject;                                                    
/*0x048*/     UINT8        LockOperation;                                                                
/*0x049*/     UINT8        DeletePending;                                                                
/*0x04A*/     UINT8        ReadAccess;                                                                   
/*0x04B*/     UINT8        WriteAccess;                                                                  
/*0x04C*/     UINT8        DeleteAccess;                                                                 
/*0x04D*/     UINT8        SharedRead;                                                                   
/*0x04E*/     UINT8        SharedWrite;                                                                  
/*0x04F*/     UINT8        SharedDelete;                                                                 
/*0x050*/     ULONG32      Flags;                                                                        
/*0x054*/     UINT8        _PADDING2_[0x4];                                                              
/*0x058*/     struct _UNICODE_STRING FileName;                       // 3 elements, 0x10 bytes (sizeof)  
/*0x068*/     union _LARGE_INTEGER CurrentByteOffset;                // 4 elements, 0x8 bytes (sizeof)   
/*0x070*/     ULONG32      Waiters;                                                                      
/*0x074*/     ULONG32      Busy;                                                                         
/*0x078*/     VOID*        LastLock;                                                                     
/*0x080*/     struct _KEVENT Lock;                                   // 1 elements, 0x18 bytes (sizeof)  
/*0x098*/     struct _KEVENT Event;                                  // 1 elements, 0x18 bytes (sizeof)  
/*0x0B0*/     struct _IO_COMPLETION_CONTEXT* CompletionContext;                                          
/*0x0B8*/     UINT64       IrpListLock;                                                                  
/*0x0C0*/     struct _LIST_ENTRY IrpList;                            // 2 elements, 0x10 bytes (sizeof)  
/*0x0D0*/     VOID*        FileObjectExtension;                                                          
          }FILE_OBJECT, *PFILE_OBJECT;                                                                   
                                                                                                         
          typedef union _FILE_SEGMENT_ELEMENT // 2 elements, 0x8 bytes (sizeof) 
          {                                                                     
/*0x000*/     VOID*        Buffer;                                              
/*0x000*/     UINT64       Alignment;                                           
          }FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;                                  
                                                                                
          typedef struct _FILE_STANDARD_INFORMATION // 5 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     union _LARGE_INTEGER AllocationSize;  // 4 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _LARGE_INTEGER EndOfFile;       // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     ULONG32      NumberOfLinks;                                              
/*0x014*/     UINT8        DeletePending;                                              
/*0x015*/     UINT8        Directory;                                                  
/*0x016*/     UINT8        _PADDING0_[0x2];                                            
          }FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;                                   
                                                                                       
          typedef struct _FILESYSTEM_DISK_COUNTERS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       FsBytesRead;                                               
/*0x008*/     UINT64       FsBytesWritten;                                            
          }FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS;                                   
                                                                                      
          typedef struct _PCAT_FIRMWARE_INFORMATION // 1 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      PlaceHolder;                                               
          }PCAT_FIRMWARE_INFORMATION, *PPCAT_FIRMWARE_INFORMATION;                                  
                                                                                      
          typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK           // 5 elements, 0x40 bytes (sizeof) 
          {                                                                                              
              struct                                                  // 4 elements, 0x4 bytes (sizeof)  
              {                                                                                          
/*0x000*/         ULONG32      FirmwareTypeUefi : 1;                  // 0 BitPosition                   
/*0x000*/         ULONG32      EfiRuntimeUseIum : 1;                  // 1 BitPosition                   
/*0x000*/         ULONG32      EfiRuntimePageProtectionSupported : 1; // 2 BitPosition                   
/*0x000*/         ULONG32      Reserved : 29;                         // 3 BitPosition                   
              };                                                                                         
              union                                                   // 2 elements, 0x38 bytes (sizeof) 
              {                                                                                          
/*0x008*/         struct _EFI_FIRMWARE_INFORMATION EfiInformation;    // 8 elements, 0x38 bytes (sizeof) 
/*0x008*/         struct _PCAT_FIRMWARE_INFORMATION PcatInformation;  // 1 elements, 0x4 bytes (sizeof)  
              }u;                                                                                        
          }FIRMWARE_INFORMATION_LOADER_BLOCK, *PFIRMWARE_INFORMATION_LOADER_BLOCK;                                   
                                                                                                         
typedef struct _FLS_CALLBACK_INFO // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}FLS_CALLBACK_INFO, *PFLS_CALLBACK_INFO;                                  
                                                                    
          typedef union _FS_FILTER_PARAMETERS                                   // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                                        
              struct                                                            // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         union _LARGE_INTEGER* EndingOffset;                                                              
/*0x008*/         struct _ERESOURCE** ResourceToRelease;                                                           
              }AcquireForModifiedPageWriter;                                                                       
              struct                                                            // 1 elements, 0x8 bytes (sizeof)  
              {                                                                                                    
/*0x000*/         struct _ERESOURCE* ResourceToRelease;                                                            
              }ReleaseForModifiedPageWriter;                                                                       
              struct                                                            // 3 elements, 0x10 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;                                                      
/*0x004*/         ULONG32      PageProtection;                                                                     
/*0x008*/         struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;                                        
              }AcquireForSectionSynchronization;                                                                   
              struct                                                            // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;                                    
/*0x004*/         UINT8        _PADDING0_[0x4];                                                                    
/*0x008*/         UINT8        SafeToRecurse;                                                                      
/*0x009*/         UINT8        _PADDING1_[0x7];                                                                    
              }NotifyStreamFileObject;                                                                             
              struct                                                            // 5 elements, 0x20 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         struct _IRP* Irp;                                                                                
/*0x008*/         VOID*        FileInformation;                                                                    
/*0x010*/         ULONG32*     Length;                                                                             
/*0x018*/         enum _FILE_INFORMATION_CLASS FileInformationClass;                                               
/*0x01C*/         LONG32       CompletionStatus;                                                                   
              }QueryOpen;                                                                                          
              struct                                                            // 5 elements, 0x28 bytes (sizeof) 
              {                                                                                                    
/*0x000*/         VOID*        Argument1;                                                                          
/*0x008*/         VOID*        Argument2;                                                                          
/*0x010*/         VOID*        Argument3;                                                                          
/*0x018*/         VOID*        Argument4;                                                                          
/*0x020*/         VOID*        Argument5;                                                                          
              }Others;                                                                                             
          }FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS;                                                           
                                                                                                                   
          typedef struct _FS_FILTER_CALLBACK_DATA      // 6 elements, 0x40 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      SizeOfFsFilterCallbackData;                                    
/*0x004*/     UINT8        Operation;                                                     
/*0x005*/     UINT8        Reserved;                                                      
/*0x006*/     UINT8        _PADDING0_[0x2];                                               
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                        
/*0x010*/     struct _FILE_OBJECT* FileObject;                                            
/*0x018*/     union _FS_FILTER_PARAMETERS Parameters;  // 6 elements, 0x28 bytes (sizeof) 
          }FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA;                                   
                                                                                          
          typedef struct _FS_FILTER_CALLBACKS                                                                                                                                                                                                                              // 16 elements, 0x78 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                    
/*0x000*/     ULONG32      SizeOfFsFilterCallbacks;                                                                                                                                                                                                                                                            
/*0x004*/     ULONG32      Reserved;                                                                                                                                                                                                                                                                           
/*0x008*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreAcquireForSectionSynchronization;                                             
/*0x010*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostAcquireForSectionSynchronization;                                     
/*0x018*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreReleaseForSectionSynchronization;                                             
/*0x020*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostReleaseForSectionSynchronization;                                     
/*0x028*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreAcquireForCcFlush;                                                            
/*0x030*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostAcquireForCcFlush;                                                    
/*0x038*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreReleaseForCcFlush;                                                            
/*0x040*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostReleaseForCcFlush;                                                    
/*0x048*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreAcquireForModifiedPageWriter;                                                 
/*0x050*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostAcquireForModifiedPageWriter;                                         
/*0x058*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreReleaseForModifiedPageWriter;                                                 
/*0x060*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostReleaseForModifiedPageWriter;                                         
/*0x068*/     FUNCT_00A0_0D3E_PreAcquireForSectionSynchronization_PreReleaseForSectionSynchronization_PreAcquireForCcFlush_PreReleaseForCcFlush_PreAcquireForModifiedPageWriter_PreReleaseForModifiedPageWriter_PreQueryOpen* PreQueryOpen;                                                                    
/*0x070*/     FUNCT_00EF_0E14_PostAcquireForSectionSynchronization_PostReleaseForSectionSynchronization_PostAcquireForCcFlush_PostReleaseForCcFlush_PostAcquireForModifiedPageWriter_PostReleaseForModifiedPageWriter_PostQueryOpen* PostQueryOpen;                                                            
          }FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS;                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                               
          typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      StructureSize;                                                  
/*0x004*/     ULONG32      SizeReturned;                                                   
/*0x008*/     ULONG32      Flags;                                                          
/*0x00C*/     ULONG32      DesiredReadAlignment;                                           
          }FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT;                                   
                                                                                           
          typedef struct _FSRTL_ADVANCED_FCB_HEADER   // 19 elements, 0x68 bytes (sizeof) 
          {                                                                               
/*0x000*/     INT16        NodeTypeCode;                                                  
/*0x002*/     INT16        NodeByteSize;                                                  
/*0x004*/     UINT8        Flags;                                                         
/*0x005*/     UINT8        IsFastIoPossible;                                              
/*0x006*/     UINT8        Flags2;                                                        
              struct                                  // 2 elements, 0x1 bytes (sizeof)   
              {                                                                           
/*0x007*/         UINT8        Reserved : 4;          // 0 BitPosition                    
/*0x007*/         UINT8        Version : 4;           // 4 BitPosition                    
              };                                                                          
/*0x008*/     struct _ERESOURCE* Resource;                                                
/*0x010*/     struct _ERESOURCE* PagingIoResource;                                        
/*0x018*/     union _LARGE_INTEGER AllocationSize;    // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/     union _LARGE_INTEGER FileSize;          // 4 elements, 0x8 bytes (sizeof)   
/*0x028*/     union _LARGE_INTEGER ValidDataLength;   // 4 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _FAST_MUTEX* FastMutex;                                              
/*0x038*/     struct _LIST_ENTRY FilterContexts;      // 2 elements, 0x10 bytes (sizeof)  
/*0x048*/     struct _EX_PUSH_LOCK PushLock;          // 7 elements, 0x8 bytes (sizeof)   
/*0x050*/     VOID**       FileContextSupportPointer;                                     
              union                                   // 2 elements, 0x8 bytes (sizeof)   
              {                                                                           
/*0x058*/         VOID*        Oplock;                                                    
/*0x058*/         VOID*        ReservedForRemote;                                         
              };                                                                          
/*0x060*/     VOID*        ReservedContext;                                               
          }FSRTL_ADVANCED_FCB_HEADER, *PFSRTL_ADVANCED_FCB_HEADER;                                    
                                                                                          
          typedef struct _GDI_TEB_BATCH                 // 4 elements, 0x4E8 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x008*/     UINT64       HDC;                                                             
/*0x010*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH, *PGDI_TEB_BATCH;                                                  
                                                                                            
          typedef struct _GDI_TEB_BATCH32               // 4 elements, 0x4E0 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x004*/     ULONG32      HDC;                                                             
/*0x008*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH32, *PGDI_TEB_BATCH32;                                              
                                                                                            
          typedef struct _GDI_TEB_BATCH64               // 4 elements, 0x4E8 bytes (sizeof) 
          {                                                                                 
              struct                                    // 2 elements, 0x4 bytes (sizeof)   
              {                                                                             
/*0x000*/         ULONG32      Offset : 31;             // 0 BitPosition                    
/*0x000*/         ULONG32      HasRenderingCommand : 1; // 31 BitPosition                   
              };                                                                            
/*0x008*/     UINT64       HDC;                                                             
/*0x010*/     ULONG32      Buffer[310];                                                     
          }GDI_TEB_BATCH64, *PGDI_TEB_BATCH64;                                              
                                                                                            
          typedef struct _GENERAL_LOOKASIDE                                                                                                                                                                                                                                                                               // 22 elements, 0x80 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                   
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                                                                                                                                                                                                                                                                               
/*0x000*/         union _SLIST_HEADER ListHead;                                                                                                                                                                                                                                                                           // 3 elements, 0x10 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead;                                                                                                                                                                                                                                                               // 1 elements, 0x8 bytes (sizeof)   
              };                                                                                                                                                                                                                                                                                                                                              
/*0x010*/     UINT16       Depth;                                                                                                                                                                                                                                                                                                                             
/*0x012*/     UINT16       MaximumDepth;                                                                                                                                                                                                                                                                                                                      
/*0x014*/     ULONG32      TotalAllocates;                                                                                                                                                                                                                                                                                                                    
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x018*/         ULONG32      AllocateMisses;                                                                                                                                                                                                                                                                                                                
/*0x018*/         ULONG32      AllocateHits;                                                                                                                                                                                                                                                                                                                  
              };                                                                                                                                                                                                                                                                                                                                              
/*0x01C*/     ULONG32      TotalFrees;                                                                                                                                                                                                                                                                                                                        
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x020*/         ULONG32      FreeMisses;                                                                                                                                                                                                                                                                                                                    
/*0x020*/         ULONG32      FreeHits;                                                                                                                                                                                                                                                                                                                      
              };                                                                                                                                                                                                                                                                                                                                              
/*0x024*/     enum _POOL_TYPE Type;                                                                                                                                                                                                                                                                                                                           
/*0x028*/     ULONG32      Tag;                                                                                                                                                                                                                                                                                                                               
/*0x02C*/     ULONG32      Size;                                                                                                                                                                                                                                                                                                                              
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x030*/         FUNCT_00F2_08E5_AllocateEx* AllocateEx;                                                                                                                                                                                                                                                                                                     
/*0x030*/         FUNCT_00F2_08EF_Allocate* Allocate;                                                                                                                                                                                                                                                                                                         
              };                                                                                                                                                                                                                                                                                                                                              
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x038*/         FUNCT_00EF_08F4_FreeEx* FreeEx;                                                                                                                                                                                                                                                                                                             
/*0x038*/         FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* Free;                                     
              };                                                                                                                                                                                                                                                                                                                                              
/*0x040*/     struct _LIST_ENTRY ListEntry;                                                                                                                                                                                                                                                                               // 2 elements, 0x10 bytes (sizeof)  
/*0x050*/     ULONG32      LastTotalAllocates;                                                                                                                                                                                                                                                                                                                
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x054*/         ULONG32      LastAllocateMisses;                                                                                                                                                                                                                                                                                                            
/*0x054*/         ULONG32      LastAllocateHits;                                                                                                                                                                                                                                                                                                              
              };                                                                                                                                                                                                                                                                                                                                              
/*0x058*/     ULONG32      Future[2];                                                                                                                                                                                                                                                                                                                         
/*0x060*/     UINT8        _PADDING0_[0x20];                                                                                                                                                                                                                                                                                                                  
          }GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;                                                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                              
          typedef struct _GENERAL_LOOKASIDE_POOL                                                                                                                                                                                                                                                                          // 22 elements, 0x60 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                   
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                                                                                                                                                                                                                                                                               
/*0x000*/         union _SLIST_HEADER ListHead;                                                                                                                                                                                                                                                                           // 3 elements, 0x10 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY SingleListHead;                                                                                                                                                                                                                                                               // 1 elements, 0x8 bytes (sizeof)   
              };                                                                                                                                                                                                                                                                                                                                              
/*0x010*/     UINT16       Depth;                                                                                                                                                                                                                                                                                                                             
/*0x012*/     UINT16       MaximumDepth;                                                                                                                                                                                                                                                                                                                      
/*0x014*/     ULONG32      TotalAllocates;                                                                                                                                                                                                                                                                                                                    
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x018*/         ULONG32      AllocateMisses;                                                                                                                                                                                                                                                                                                                
/*0x018*/         ULONG32      AllocateHits;                                                                                                                                                                                                                                                                                                                  
              };                                                                                                                                                                                                                                                                                                                                              
/*0x01C*/     ULONG32      TotalFrees;                                                                                                                                                                                                                                                                                                                        
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x020*/         ULONG32      FreeMisses;                                                                                                                                                                                                                                                                                                                    
/*0x020*/         ULONG32      FreeHits;                                                                                                                                                                                                                                                                                                                      
              };                                                                                                                                                                                                                                                                                                                                              
/*0x024*/     enum _POOL_TYPE Type;                                                                                                                                                                                                                                                                                                                           
/*0x028*/     ULONG32      Tag;                                                                                                                                                                                                                                                                                                                               
/*0x02C*/     ULONG32      Size;                                                                                                                                                                                                                                                                                                                              
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x030*/         FUNCT_00F2_08E5_AllocateEx* AllocateEx;                                                                                                                                                                                                                                                                                                     
/*0x030*/         FUNCT_00F2_08EF_Allocate* Allocate;                                                                                                                                                                                                                                                                                                         
              };                                                                                                                                                                                                                                                                                                                                              
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x038*/         FUNCT_00EF_08F4_FreeEx* FreeEx;                                                                                                                                                                                                                                                                                                             
/*0x038*/         FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* Free;                                     
              };                                                                                                                                                                                                                                                                                                                                              
/*0x040*/     struct _LIST_ENTRY ListEntry;                                                                                                                                                                                                                                                                               // 2 elements, 0x10 bytes (sizeof)  
/*0x050*/     ULONG32      LastTotalAllocates;                                                                                                                                                                                                                                                                                                                
              union                                                                                                                                                                                                                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                               
/*0x054*/         ULONG32      LastAllocateMisses;                                                                                                                                                                                                                                                                                                            
/*0x054*/         ULONG32      LastAllocateHits;                                                                                                                                                                                                                                                                                                              
              };                                                                                                                                                                                                                                                                                                                                              
/*0x058*/     ULONG32      Future[2];                                                                                                                                                                                                                                                                                                                         
          }GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                              
          typedef struct _HAL_CHANNEL_MEMORY_RANGES // 6 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       PageFrameIndex;                                             
/*0x008*/     UINT16       MpnId;                                                      
/*0x00A*/     UINT16       Node;                                                       
/*0x00C*/     UINT16       Channel;                                                    
/*0x00E*/     UINT8        IsPowerManageable;                                          
/*0x00F*/     UINT8        DeepPowerState;                                             
          }HAL_CHANNEL_MEMORY_RANGES, *PHAL_CHANNEL_MEMORY_RANGES;                                   
                                                                                       
          typedef struct _HAL_CLOCK_TIMER_CONFIGURATION      // 9 elements, 0x20 bytes (sizeof) 
          {                                                                                     
              union                                          // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                 
/*0x000*/         UINT8        Flags;                                                           
                  struct                                     // 4 elements, 0x1 bytes (sizeof)  
                  {                                                                             
/*0x000*/             UINT8        AlwaysOnTimer : 1;        // 0 BitPosition                   
/*0x000*/             UINT8        HighLatency : 1;          // 1 BitPosition                   
/*0x000*/             UINT8        PerCpuTimer : 1;          // 2 BitPosition                   
/*0x000*/             UINT8        DynamicTickSupported : 1; // 3 BitPosition                   
                  };                                                                            
              };                                                                                
/*0x004*/     ULONG32      KnownType;                                                           
/*0x008*/     ULONG32      Capabilities;                                                        
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                     
/*0x010*/     UINT64       MaxIncrement;                                                        
/*0x018*/     ULONG32      MinIncrement;                                                        
/*0x01C*/     UINT8        _PADDING1_[0x4];                                                     
          }HAL_CLOCK_TIMER_CONFIGURATION, *PHAL_CLOCK_TIMER_CONFIGURATION;                                   
                                                                                                
          typedef struct _HAL_DP_REPLACE_PARAMETERS                 // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Flags;                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                            
/*0x008*/     struct _PNP_REPLACE_PROCESSOR_LIST* TargetProcessors;                                    
/*0x010*/     struct _PNP_REPLACE_PROCESSOR_LIST* SpareProcessors;                                     
          }HAL_DP_REPLACE_PARAMETERS, *PHAL_DP_REPLACE_PARAMETERS;                                     
                                                                                                       
          typedef struct _HAL_HV_DMA_DOMAIN_INFO // 2 elements, 0x8 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      DomainId;                                               
/*0x004*/     UINT8        IsStage1;                                               
/*0x005*/     UINT8        _PADDING0_[0x3];                                        
          }HAL_HV_DMA_DOMAIN_INFO, *PHAL_HV_DMA_DOMAIN_INFO;                                  
                                                                                   
          typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES // 7 elements, 0xC bytes (sizeof) 
          {                                                                                
              struct                                     // 5 elements, 0x4 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      SvmSupported : 1;         // 0 BitPosition                  
/*0x000*/         ULONG32      PciExecute : 1;           // 1 BitPosition                  
/*0x000*/         ULONG32      NoExecute : 1;            // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 28;            // 3 BitPosition                  
/*0x000*/         ULONG32      OverflowPossible : 1;     // 31 BitPosition                 
              };                                                                           
/*0x004*/     ULONG32      PasidCount;                                                     
/*0x008*/     ULONG32      IommuIndex;                                                     
          }HAL_HV_SVM_DEVICE_CAPABILITIES, *PHAL_HV_SVM_DEVICE_CAPABILITIES;                                  
                                                                                           
          typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES // 7 elements, 0x18 bytes (sizeof) 
          {                                                                                 
              struct                                     // 2 elements, 0x4 bytes (sizeof)  
              {                                                                             
/*0x000*/         ULONG32      SvmSupported : 1;         // 0 BitPosition                   
/*0x000*/         ULONG32      GpaAlwaysValid : 1;       // 1 BitPosition                   
              };                                                                            
/*0x004*/     ULONG32      MaxPasidSpaceCount;                                              
/*0x008*/     ULONG32      MaxPasidSpacePasidCount;                                         
/*0x00C*/     ULONG32      MaxPrqSize;                                                      
/*0x010*/     ULONG32      IommuCount;                                                      
/*0x014*/     ULONG32      MinIommuPasidCount;                                              
          }HAL_HV_SVM_SYSTEM_CAPABILITIES, *PHAL_HV_SVM_SYSTEM_CAPABILITIES;                                   
                                                                                            
          typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION                                                                                                                                                                                                                                                                                                                                                                      // 62 elements, 0x1E0 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x000*/     ULONG32      Enlightenments;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x004*/     ULONG32      HypervisorConnected;                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x008*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* EndOfInterrupt;                                      
/*0x010*/     FUNCT_00EF_3D9F_ApicWriteIcr* ApicWriteIcr;                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x018*/     ULONG32      Reserved0;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x01C*/     ULONG32      SpinCountMask;                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x020*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* LongSpinWait;                                                                                                                                                                                                                                                            
/*0x028*/     FUNCT_0004_3DA3_HalTimerWatchdogQueryDueTime_GetReferenceTime_GetQpcBias* GetReferenceTime;                                                                                                                                                                                                                                                                                                                                                               
/*0x030*/     FUNCT_00A0_3DA5_SetSystemSleepProperty* SetSystemSleepProperty;                                                                                                                                                                                                                                                                                                                                                                                           
/*0x038*/     FUNCT_00A0_3DAA_EnterSleepState* EnterSleepState;                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x040*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* NotifyDebugDeviceAvailable;                                                                                                                                                                                                              
/*0x048*/     FUNCT_00A0_3DAD_MapDeviceInterrupt* MapDeviceInterrupt;                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x050*/     FUNCT_00A0_3DB3_UnmapDeviceInterrupt* UnmapDeviceInterrupt;                                                                                                                                                                                                                                                                                                                                                                                               
/*0x058*/     FUNCT_00A0_3DB5_RetargetDeviceInterrupt* RetargetDeviceInterrupt;                                                                                                                                                                                                                                                                                                                                                                                         
/*0x060*/     FUNCT_00A0_3DBC_SetHpetConfig* SetHpetConfig;                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x068*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* NotifyHpetEnabled;                                                                                                                                                                                                                       
/*0x070*/     FUNCT_00A0_3DC3_HalGetProcessorId_QueryAssociatedProcessors* QueryAssociatedProcessors;                                                                                                                                                                                                                                                                                                                                                                   
/*0x078*/     FUNCT_00A0_3DC8_ReadMultipleMsr_WriteMultipleMsr* ReadMultipleMsr;                                                                                                                                                                                                                                                                                                                                                                                        
/*0x080*/     FUNCT_00A0_3DC8_ReadMultipleMsr_WriteMultipleMsr* WriteMultipleMsr;                                                                                                                                                                                                                                                                                                                                                                                       
/*0x088*/     FUNCT_00A0_3DCE_ReadCpuid* ReadCpuid;                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x090*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* LpWritebackInvalidate;                                                                                                                                                                                                                                               
/*0x098*/     FUNCT_00A0_3DD8_GetMachineCheckContext* GetMachineCheckContext;                                                                                                                                                                                                                                                                                                                                                                                           
/*0x0A0*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* SuspendPartition;                                                                                                                                                                                                                                                                                                              
/*0x0A8*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* ResumePartition;                                                                                                                                                                                                                                                                                                               
/*0x0B0*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* SetSystemMachineCheckProperty;                                                                                                                                                                                                             
/*0x0B8*/     FUNCT_00A0_3DE1_WheaErrorNotification* WheaErrorNotification;                                                                                                                                                                                                                                                                                                                                                                                             
/*0x0C0*/     FUNCT_0009_3DF1_HalVectorToIDTEntryEx_GetProcessorIndexFromVpIndex* GetProcessorIndexFromVpIndex;                                                                                                                                                                                                                                                                                                                                                         
/*0x0C8*/     FUNCT_00A0_3DF3_SyntheticClusterIpi* SyntheticClusterIpi;                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x0D0*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* VpStartEnabled;                                                                                                                                                            
/*0x0D8*/     FUNCT_00A0_3D18_HalDpReplaceControl_StartVirtualProcessor* StartVirtualProcessor;                                                                                                                                                                                                                                                                                                                                                                         
/*0x0E0*/     FUNCT_00A0_3DF7_HalStartLastBranchRecord_GetVpIndexFromApicId* GetVpIndexFromApicId;                                                                                                                                                                                                                                                                                                                                                                      
/*0x0E8*/     FUNCT_00A0_3DFB_IumAccessPciDevice* IumAccessPciDevice;                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x0F0*/     FUNCT_0004_3E05_IumEfiRuntimeService* IumEfiRuntimeService;                                                                                                                                                                                                                                                                                                                                                                                               
/*0x0F8*/     FUNCT_00EF_3E0B_SvmGetSystemCapabilities* SvmGetSystemCapabilities;                                                                                                                                                                                                                                                                                                                                                                                       
/*0x100*/     FUNCT_00A0_3E17_SvmGetDeviceCapabilities* SvmGetDeviceCapabilities;                                                                                                                                                                                                                                                                                                                                                                                       
/*0x108*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* SvmCreatePasidSpace;                                                                                                                                                                                                                                                                                                 
/*0x110*/     FUNCT_00A0_3E26_SvmSetPasidAddressSpace* SvmSetPasidAddressSpace;                                                                                                                                                                                                                                                                                                                                                                                         
/*0x118*/     FUNCT_00EF_3E2B_SvmFlushPasid* SvmFlushPasid;                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x120*/     FUNCT_00A0_3E39_SvmAttachPasidSpace* SvmAttachPasidSpace;                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x128*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* SvmDetachPasidSpace;                                                                                                                                                                                                                                                 
/*0x130*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* SvmEnablePasid;                                                                                                                                                                                                                                                                                                      
/*0x138*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* SvmDisablePasid;                                                                                                                                                                                                                                                                                                     
/*0x140*/     FUNCT_00A0_3E3F_SvmAcknowledgePageRequest* SvmAcknowledgePageRequest;                                                                                                                                                                                                                                                                                                                                                                                     
/*0x148*/     FUNCT_00A0_3E44_SvmCreatePrQueue* SvmCreatePrQueue;                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x150*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* SvmDeletePrQueue;                                                                                                                                                                                                                                                    
/*0x158*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* SvmClearPrqStalled;                                                                                                                                                                                                                                                  
/*0x160*/     FUNCT_00A0_3E4B_SvmSetDeviceEnabled* SvmSetDeviceEnabled;                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x168*/     FUNCT_00A0_3E4F_HalTimerWatchdogTriggerSystemReset_HvDebuggerPowerHandler* HvDebuggerPowerHandler;                                                                                                                                                                                                                                                                                                                                                        
/*0x170*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* SetQpcBias;                                                                                                                                                                                                                                                                                                                    
/*0x178*/     FUNCT_0004_3DA3_HalTimerWatchdogQueryDueTime_GetReferenceTime_GetQpcBias* GetQpcBias;                                                                                                                                                                                                                                                                                                                                                                     
/*0x180*/     FUNCT_00A0_3E51_RegisterDeviceId* RegisterDeviceId;                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x188*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* UnregisterDeviceId;                                                                                                                                                                                                                                                                                                            
/*0x190*/     FUNCT_00A0_3E78_AllocateDeviceDomain_DeleteDeviceDomain* AllocateDeviceDomain;                                                                                                                                                                                                                                                                                                                                                                            
/*0x198*/     FUNCT_00A0_3E7F_AttachDeviceDomain* AttachDeviceDomain;                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x1A0*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* DetachDeviceDomain;                                                                                                                                                                                                                                                                                                            
/*0x1A8*/     FUNCT_00A0_3E78_AllocateDeviceDomain_DeleteDeviceDomain* DeleteDeviceDomain;                                                                                                                                                                                                                                                                                                                                                                              
/*0x1B0*/     FUNCT_00A0_3E83_MapDeviceLogicalRange* MapDeviceLogicalRange;                                                                                                                                                                                                                                                                                                                                                                                             
/*0x1B8*/     FUNCT_00A0_3E8B_UnmapDeviceLogicalRange* UnmapDeviceLogicalRange;                                                                                                                                                                                                                                                                                                                                                                                         
/*0x1C0*/     FUNCT_00A0_3E90_MapDeviceSparsePages* MapDeviceSparsePages;                                                                                                                                                                                                                                                                                                                                                                                               
/*0x1C8*/     FUNCT_00A0_3E96_UnmapDeviceSparsePages* UnmapDeviceSparsePages;                                                                                                                                                                                                                                                                                                                                                                                           
/*0x1D0*/     FUNCT_00A0_3E9B_GetDmaGuardEnabled* GetDmaGuardEnabled;                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x1D8*/     FUNCT_00A0_3E9E_UpdateMicrocode* UpdateMicrocode;                                                                                                                                                                                                                                                                                                                                                                                                         
          }HAL_INTEL_ENLIGHTENMENT_INFORMATION, *PHAL_INTEL_ENLIGHTENMENT_INFORMATION;                                                                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
          typedef struct _HAL_IOMMU_DISPATCH                                                                                                                                                                                                                                                                         // 19 elements, 0x98 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalIommuSupportEnabled;                                     
/*0x008*/     FUNCT_00A0_3FB6_HalIommuGetConfiguration* HalIommuGetConfiguration;                                                                                                                                                                                                                                                                        
/*0x010*/     FUNCT_00A0_3FBC_HalIommuGetLibraryContext* HalIommuGetLibraryContext;                                                                                                                                                                                                                                                                      
/*0x018*/     FUNCT_00A0_3FC1_HalIommuMapDevice* HalIommuMapDevice;                                                                                                                                                                                                                                                                                      
/*0x020*/     FUNCT_00A0_12F3_LogProcessorTraceOnCurrentCore_HalIommuEnableDevicePasid_HalIommuDisableDevicePasid_HalIommuUnmapDevice* HalIommuEnableDevicePasid;                                                                                                                                                                                        
/*0x028*/     FUNCT_00A0_3FD6_HalIommuSetAddressSpace* HalIommuSetAddressSpace;                                                                                                                                                                                                                                                                          
/*0x030*/     FUNCT_00A0_12F3_LogProcessorTraceOnCurrentCore_HalIommuEnableDevicePasid_HalIommuDisableDevicePasid_HalIommuUnmapDevice* HalIommuDisableDevicePasid;                                                                                                                                                                                       
/*0x038*/     FUNCT_00A0_12F3_LogProcessorTraceOnCurrentCore_HalIommuEnableDevicePasid_HalIommuDisableDevicePasid_HalIommuUnmapDevice* HalIommuUnmapDevice;                                                                                                                                                                                              
/*0x040*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* HalIommuFreeLibraryContext;                                                                                                 
/*0x048*/     FUNCT_00EF_3FDA_HalIommuFlushTb_HalIommuFlushAllPasid* HalIommuFlushTb;                                                                                                                                                                                                                                                                    
/*0x050*/     FUNCT_00EF_3FDA_HalIommuFlushTb_HalIommuFlushAllPasid* HalIommuFlushAllPasid;                                                                                                                                                                                                                                                              
/*0x058*/     FUNCT_00A9_3CCA_HalVectorToIDTEntry_HalIommuProcessPageRequestQueue* HalIommuProcessPageRequestQueue;                                                                                                                                                                                                                                      
/*0x060*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalIommuFaultRoutine;                                                                                                                                     
/*0x068*/     FUNCT_00F2_3FDF_HalIommuReferenceAsid* HalIommuReferenceAsid;                                                                                                                                                                                                                                                                              
/*0x070*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalIommuDereferenceAsid;                                                                                                                                  
/*0x078*/     FUNCT_00A0_3FE1_HalIommuServicePageFault* HalIommuServicePageFault;                                                                                                                                                                                                                                                                        
/*0x080*/     FUNCT_00A0_3FE6_HalIommuDevicePowerChange* HalIommuDevicePowerChange;                                                                                                                                                                                                                                                                      
/*0x088*/     FUNCT_00A0_3FEB_HalRequestGenericErrorRecovery_HalIommuBeginDeviceReset* HalIommuBeginDeviceReset;                                                                                                                                                                                                                                         
/*0x090*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* HalIommuFinalizeDeviceReset;                                                                                                
          }HAL_IOMMU_DISPATCH, *PHAL_IOMMU_DISPATCH;                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _HAL_LBR_ENTRY // 3 elements, 0x18 bytes (sizeof) 
          {                                                                
/*0x000*/     VOID*        FromAddress;                                    
/*0x008*/     VOID*        ToAddress;                                      
/*0x010*/     VOID*        Reserved;                                       
          }HAL_LBR_ENTRY, *PHAL_LBR_ENTRY;                                   
                                                                           
          typedef struct _HAL_LOG_REGISTER_CONTEXT    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                              
/*0x000*/     FUNCT_00EF_3EB8_LogRoutine* LogRoutine;                                    
/*0x008*/     ULONG32      Flag;                                                         
/*0x00C*/     UINT8        _PADDING0_[0x4];                                              
          }HAL_LOG_REGISTER_CONTEXT, *PHAL_LOG_REGISTER_CONTEXT;                                   
                                                                                         
          typedef struct _HAL_NODE_RANGE    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       PageFrameIndex;                                     
/*0x008*/     ULONG32      Node;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
          }HAL_NODE_RANGE, *PHAL_NODE_RANGE;                                   
                                                                               
typedef struct _HAL_PMC_COUNTERS // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}HAL_PMC_COUNTERS, *PHAL_PMC_COUNTERS;                                  
                                                                   
          typedef struct _HAL_PRIVATE_DISPATCH                                                                                                                                                                                                                                                                                                                                                                                                       // 143 elements, 0x478 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x000*/     ULONG32      Version;                                                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x008*/     FUNCT_3A42_3A41_HalHandlerForBus* HalHandlerForBus;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x010*/     FUNCT_3A42_3AA1_HalHandlerForConfigSpace* HalHandlerForConfigSpace;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* HalLocateHiberRanges;                                                                                                                                                      
/*0x020*/     FUNCT_00A0_3AA5_HalRegisterBusHandler* HalRegisterBusHandler;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x028*/     FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers* HalSetWakeEnable;                                                                                                                                                                                                                                                                                                                        
/*0x030*/     FUNCT_00A0_3AB6_HalSetWakeAlarm* HalSetWakeAlarm;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x038*/     FUNCT_00A9_3ABA_HalPciTranslateBusAddress* HalPciTranslateBusAddress;                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x040*/     FUNCT_00A0_3AC1_HalPciAssignSlotResources* HalPciAssignSlotResources;                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x048*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalHaltSystem;                                                          
/*0x050*/     FUNCT_00A9_3ACB_HalFindBusAddressTranslation* HalFindBusAddressTranslation;                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x058*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalResetDisplay;                                                                                                                                                                              
/*0x060*/     FUNCT_00A0_3AD4_HalAllocateMapRegisters* HalAllocateMapRegisters;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x068*/     FUNCT_00A0_3AE0_KdSetupPciDeviceForDebugging_KdSetupIntegratedDeviceForDebugging* KdSetupPciDeviceForDebugging;                                                                                                                                                                                                                                                                                                                                                              
/*0x070*/     FUNCT_00A0_3B1A_KdReleasePciDeviceForDebugging_KdReleaseIntegratedDeviceForDebugging* KdReleasePciDeviceForDebugging;                                                                                                                                                                                                                                                                                                                                                        
/*0x078*/     FUNCT_00F2_3B1D_KdGetAcpiTablePhase0* KdGetAcpiTablePhase0;                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x080*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* KdCheckPowerButton;                                                     
/*0x088*/     FUNCT_00A9_3CCA_HalVectorToIDTEntry_HalIommuProcessPageRequestQueue* HalVectorToIDTEntry;                                                                                                                                                                                                                                                                                                                                                                                    
/*0x090*/     FUNCT_00F2_3CCD_KdMapPhysicalMemory64* KdMapPhysicalMemory64;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x098*/     FUNCT_00EF_1A56_ComponentCriticalTransition_KdUnmapVirtualAddress* KdUnmapVirtualAddress;                                                                                                                                                                                                                                                                                                                                                                                    
/*0x0A0*/     FUNCT_0009_3CD2_KdGetPciDataByOffset_KdSetPciDataByOffset* KdGetPciDataByOffset;                                                                                                                                                                                                                                                                                                                                                                                             
/*0x0A8*/     FUNCT_0009_3CD2_KdGetPciDataByOffset_KdSetPciDataByOffset* KdSetPciDataByOffset;                                                                                                                                                                                                                                                                                                                                                                                             
/*0x0B0*/     FUNCT_0009_3CD9_HalGetInterruptVectorOverride* HalGetInterruptVectorOverride;                                                                                                                                                                                                                                                                                                                                                                                                
/*0x0B8*/     FUNCT_00A0_3CE1_HalGetVectorInputOverride* HalGetVectorInputOverride;                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x0C0*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* HalLoadMicrocode;                                                                                                                                                                                                                                             
/*0x0C8*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalUnloadMicrocode;                                                                                                                                                                                                                                         
/*0x0D0*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalPostMicrocodeUpdate;                                                                                                                                                                                                                                     
/*0x0D8*/     FUNCT_00A0_3CF9_HalAllocateMessageTargetOverride* HalAllocateMessageTargetOverride;                                                                                                                                                                                                                                                                                                                                                                                          
/*0x0E0*/     FUNCT_00EF_3D03_HalFreeMessageTargetOverride* HalFreeMessageTargetOverride;                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x0E8*/     FUNCT_00A0_3D08_HalDpReplaceBegin* HalDpReplaceBegin;                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x0F0*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* HalDpReplaceTarget;                                                                                                                                                        
/*0x0F8*/     FUNCT_00A0_3D18_HalDpReplaceControl_StartVirtualProcessor* HalDpReplaceControl;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x100*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* HalDpReplaceEnd;                                                                                                                                                           
/*0x108*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalPrepareForBugcheck;                                                                                                                                                                                                                                                                      
/*0x110*/     FUNCT_00A9_3D1C_HalQueryWakeTime* HalQueryWakeTime;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x118*/     FUNCT_00EF_3D20_HalReportIdleStateUsage* HalReportIdleStateUsage;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x120*/     FUNCT_00EF_3D25_HalTscSynchronization* HalTscSynchronization;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x128*/     FUNCT_00A0_3D29_HalWheaInitProcessorGenericSection* HalWheaInitProcessorGenericSection;                                                                                                                                                                                                                                                                                                                                                                                      
/*0x130*/     FUNCT_00EF_3D50_HalStopLegacyUsbInterrupts* HalStopLegacyUsbInterrupts;                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x138*/     FUNCT_00A0_3D53_HalReadWheaPhysicalMemory_HalWriteWheaPhysicalMemory* HalReadWheaPhysicalMemory;                                                                                                                                                                                                                                                                                                                                                                             
/*0x140*/     FUNCT_00A0_3D53_HalReadWheaPhysicalMemory_HalWriteWheaPhysicalMemory* HalWriteWheaPhysicalMemory;                                                                                                                                                                                                                                                                                                                                                                            
/*0x148*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalDpMaskLevelTriggeredInterrupts;                                                                                                                                                                                                                          
/*0x150*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalDpUnmaskLevelTriggeredInterrupts;                                                                                                                                                                                                                        
/*0x158*/     FUNCT_00A0_3D58_HalDpGetInterruptReplayState* HalDpGetInterruptReplayState;                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x160*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* HalDpReplayInterrupts;                                                                                                                                                                                                                                        
/*0x168*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalQueryIoPortAccessSupported;                                                                                                                                                                
/*0x170*/     FUNCT_00A0_3AE0_KdSetupPciDeviceForDebugging_KdSetupIntegratedDeviceForDebugging* KdSetupIntegratedDeviceForDebugging;                                                                                                                                                                                                                                                                                                                                                       
/*0x178*/     FUNCT_00A0_3B1A_KdReleasePciDeviceForDebugging_KdReleaseIntegratedDeviceForDebugging* KdReleaseIntegratedDeviceForDebugging;                                                                                                                                                                                                                                                                                                                                                 
/*0x180*/     FUNCT_00EF_3D5C_HalGetEnlightenmentInformation* HalGetEnlightenmentInformation;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x188*/     FUNCT_00F2_3EA2_HalAllocateEarlyPages* HalAllocateEarlyPages;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x190*/     FUNCT_00F2_3EA8_HalMapEarlyPages* HalMapEarlyPages;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x198*/     VOID*        Dummy1;                                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x1A0*/     VOID*        Dummy2;                                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x1A8*/     FUNCT_00EF_3EAD_HalNotifyProcessorFreeze* HalNotifyProcessorFreeze;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x1B0*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* HalPrepareProcessorForIdle;                                                                                                                                                                                                                                                             
/*0x1B8*/     FUNCT_00EF_3EB1_HalRegisterLogRoutine* HalRegisterLogRoutine;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x1C0*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalResumeProcessorFromIdle;                                             
/*0x1C8*/     VOID*        Dummy;                                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x1D0*/     FUNCT_0009_3DF1_HalVectorToIDTEntryEx_GetProcessorIndexFromVpIndex* HalVectorToIDTEntryEx;                                                                                                                                                                                                                                                                                                                                                                                   
/*0x1D8*/     FUNCT_00A0_3EBD_HalSecondaryInterruptQueryPrimaryInformation_HalInterruptVectorDataToGsiv* HalSecondaryInterruptQueryPrimaryInformation;                                                                                                                                                                                                                                                                                                                                     
/*0x1E0*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* HalMaskInterrupt;                                                                                                                                                                                                                                                                                                                       
/*0x1E8*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* HalUnmaskInterrupt;                                                                                                                                                                                                                                                                                                                     
/*0x1F0*/     FUNCT_00A9_3EFD_HalIsInterruptTypeSecondary* HalIsInterruptTypeSecondary;                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x1F8*/     FUNCT_00A0_3EFF_HalAllocateGsivForSecondaryInterrupt* HalAllocateGsivForSecondaryInterrupt;                                                                                                                                                                                                                                                                                                                                                                                  
/*0x200*/     FUNCT_00A0_3F04_HalAddInterruptRemapping* HalAddInterruptRemapping;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x208*/     FUNCT_00EF_3F1F_HalRemoveInterruptRemapping* HalRemoveInterruptRemapping;                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x210*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalSaveAndDisableHvEnlightenment;                                       
/*0x218*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalRestoreHvEnlightenment;                                              
/*0x220*/     FUNCT_00EF_3F21_HalFlushIoBuffersExternalCache* HalFlushIoBuffersExternalCache;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x228*/     FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers* HalFlushExternalCache;                                                                                                                                                                                                                                                                                                                   
/*0x230*/     FUNCT_00A0_3F25_HalPciEarlyRestore* HalPciEarlyRestore;                                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x238*/     FUNCT_00A0_3DC3_HalGetProcessorId_QueryAssociatedProcessors* HalGetProcessorId;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x240*/     FUNCT_00A0_3F27_HalAllocatePmcCounterSet* HalAllocatePmcCounterSet;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x248*/     FUNCT_00EF_3F2F_HalCollectPmcCounters* HalCollectPmcCounters;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x250*/     FUNCT_00EF_3F33_HalFreePmcCounterSet* HalFreePmcCounterSet;                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x258*/     FUNCT_00A0_3F36_HalProcessorHalt* HalProcessorHalt;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x260*/     FUNCT_0004_3F3B_HalTimerQueryCycleCounter* HalTimerQueryCycleCounter;                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x268*/     VOID*        Dummy3;                                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x270*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalPciMarkHiberPhase;                                                   
/*0x278*/     FUNCT_00A0_3F3D_HalQueryProcessorRestartEntryPoint* HalQueryProcessorRestartEntryPoint;                                                                                                                                                                                                                                                                                                                                                                                      
/*0x280*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* HalRequestInterrupt;                                                                                                                                                                                                                                                                    
/*0x288*/     FUNCT_00A0_3F40_HalEnumerateUnmaskedInterrupts* HalEnumerateUnmaskedInterrupts;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x290*/     FUNCT_00EF_3F57_HalFlushAndInvalidatePageExternalCache* HalFlushAndInvalidatePageExternalCache;                                                                                                                                                                                                                                                                                                                                                                              
/*0x298*/     FUNCT_00A0_3F5A_KdEnumerateDebuggingDevices* KdEnumerateDebuggingDevices;                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x2A0*/     FUNCT_00EF_3F66_HalFlushIoRectangleExternalCache* HalFlushIoRectangleExternalCache;                                                                                                                                                                                                                                                                                                                                                                                          
/*0x2A8*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalPowerEarlyRestore;                                                                                                                                                                                                                                                                       
/*0x2B0*/     FUNCT_00A0_3F6E_HalQueryCapsuleCapabilities* HalQueryCapsuleCapabilities;                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x2B8*/     FUNCT_00A0_3F74_HalUpdateCapsule* HalUpdateCapsule;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x2C0*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalPciMultiStageResumeCapable;                                                                                                                                                                
/*0x2C8*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalDmaFreeCrashDumpRegisters;                                                                                                                                                                                                                                                               
/*0x2D0*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalAcpiAoacCapable;                                                                                                                                                                           
/*0x2D8*/     FUNCT_00A0_3F79_HalInterruptSetDestination* HalInterruptSetDestination;                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x2E0*/     FUNCT_00EF_3F7E_HalGetClockConfiguration* HalGetClockConfiguration;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x2E8*/     FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers* HalClockTimerActivate;                                                                                                                                                                                                                                                                                                                   
/*0x2F0*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalClockTimerInitialize;                                                
/*0x2F8*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalClockTimerStop;                                                      
/*0x300*/     FUNCT_00A0_3F8C_HalClockTimerArm* HalClockTimerArm;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x308*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalTimerOnlyClockInterruptPending;                                                                                                                                                            
/*0x310*/     FUNCT_00F2_3F95_HalAcpiGetMultiNode_HalTimerGetReferencePage* HalAcpiGetMultiNode;                                                                                                                                                                                                                                                                                                                                                                                           
/*0x318*/     FUNCT_3F98_3F97_HalPowerSetRebootHandler* HalPowerSetRebootHandler;                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x320*/     FUNCT_00EF_3F9E_HalIommuRegisterDispatchTable* HalIommuRegisterDispatchTable;                                                                                                                                                                                                                                                                                                                                                                                                
/*0x328*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalTimerWatchdogStart;                                                  
/*0x330*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalTimerWatchdogResetCountdown;                                         
/*0x338*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalTimerWatchdogStop;                                                   
/*0x340*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalTimerWatchdogGeneratedLastReset;                                                                                                                                                           
/*0x348*/     FUNCT_00A0_3E4F_HalTimerWatchdogTriggerSystemReset_HvDebuggerPowerHandler* HalTimerWatchdogTriggerSystemReset;                                                                                                                                                                                                                                                                                                                                                               
/*0x350*/     FUNCT_00A0_3EBD_HalSecondaryInterruptQueryPrimaryInformation_HalInterruptVectorDataToGsiv* HalInterruptVectorDataToGsiv;                                                                                                                                                                                                                                                                                                                                                     
/*0x358*/     FUNCT_00A0_3FEF_HalInterruptGetHighestPriorityInterrupt* HalInterruptGetHighestPriorityInterrupt;                                                                                                                                                                                                                                                                                                                                                                            
/*0x360*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* HalProcessorOn;                                                                                                                                                                                                                                                                         
/*0x368*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalProcessorOff;                                                                                                                                                                                                                                            
/*0x370*/     FUNCT_00A0_3CF7_HalUnloadMicrocode_HalPostMicrocodeUpdate_HalDpMaskLevelTriggeredInterrupts_HalDpUnmaskLevelTriggeredInterrupts_HalProcessorOff_HalProcessorFreeze_NotifyDebugDeviceAvailable_NotifyHpetEnabled* HalProcessorFreeze;                                                                                                                                                                                                                                         
/*0x378*/     FUNCT_00A0_3FF3_HalDmaLinkDeviceObjectByToken* HalDmaLinkDeviceObjectByToken;                                                                                                                                                                                                                                                                                                                                                                                                
/*0x380*/     FUNCT_00A0_3DDF_HalDmaCheckAdapterToken_SuspendPartition_ResumePartition_SetQpcBias_UnregisterDeviceId_DetachDeviceDomain* HalDmaCheckAdapterToken;                                                                                                                                                                                                                                                                                                                          
/*0x388*/     VOID*        Dummy4;                                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x390*/     FUNCT_00A0_3FF7_HalTimerConvertPerformanceCounterToAuxiliaryCounter_HalTimerConvertAuxiliaryCounterToPerformanceCounter* HalTimerConvertPerformanceCounterToAuxiliaryCounter;                                                                                                                                                                                                                                                                                                
/*0x398*/     FUNCT_00A0_3FF7_HalTimerConvertPerformanceCounterToAuxiliaryCounter_HalTimerConvertAuxiliaryCounterToPerformanceCounter* HalTimerConvertAuxiliaryCounterToPerformanceCounter;                                                                                                                                                                                                                                                                                                
/*0x3A0*/     FUNCT_00A0_3FFC_HalTimerQueryAuxiliaryCounterFrequency_KdWatchdogDelayExpiration_HalTimerQueryHostPerformanceCounter* HalTimerQueryAuxiliaryCounterFrequency;                                                                                                                                                                                                                                                                                                                
/*0x3A8*/     FUNCT_00A0_3FFE_HalConnectThermalInterrupt_HalConnectSyntheticInterrupt* HalConnectThermalInterrupt;                                                                                                                                                                                                                                                                                                                                                                         
/*0x3B0*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalIsEFIRuntimeActive;                                                                                                                                                                        
/*0x3B8*/     FUNCT_00A9_403D_HalTimerQueryAndResetRtcErrors* HalTimerQueryAndResetRtcErrors;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x3C0*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalAcpiLateRestore;                                                     
/*0x3C8*/     FUNCT_00A0_3FFC_HalTimerQueryAuxiliaryCounterFrequency_KdWatchdogDelayExpiration_HalTimerQueryHostPerformanceCounter* KdWatchdogDelayExpiration;                                                                                                                                                                                                                                                                                                                             
/*0x3D0*/     FUNCT_00A0_403F_HalGetProcessorStats* HalGetProcessorStats;                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x3D8*/     FUNCT_0004_3DA3_HalTimerWatchdogQueryDueTime_GetReferenceTime_GetQpcBias* HalTimerWatchdogQueryDueTime;                                                                                                                                                                                                                                                                                                                                                                      
/*0x3E0*/     FUNCT_00A0_3FFE_HalConnectThermalInterrupt_HalConnectSyntheticInterrupt* HalConnectSyntheticInterrupt;                                                                                                                                                                                                                                                                                                                                                                       
/*0x3E8*/     FUNCT_00EF_3D1A_HalPrepareForBugcheck_HalPowerEarlyRestore_HalDmaFreeCrashDumpRegisters_HalPreprocessNmi_LongSpinWait_HalIommuFaultRoutine_HalIommuDereferenceAsid_StallRoutine* HalPreprocessNmi;                                                                                                                                                                                                                                                                           
/*0x3F0*/     FUNCT_00A0_4049_HalEnumerateEnvironmentVariablesWithFilter* HalEnumerateEnvironmentVariablesWithFilter;                                                                                                                                                                                                                                                                                                                                                                      
/*0x3F8*/     FUNCT_00A0_4053_HalCaptureLastBranchRecordStack* HalCaptureLastBranchRecordStack;                                                                                                                                                                                                                                                                                                                                                                                            
/*0x400*/     FUNCT_00A9_3AD2_HalResetDisplay_HalQueryIoPortAccessSupported_HalPciMultiStageResumeCapable_HalAcpiAoacCapable_HalTimerOnlyClockInterruptPending_HalTimerWatchdogGeneratedLastReset_HalIsEFIRuntimeActive_HalClearLastBranchRecordStack_VpStartEnabled_HalIommuSupportEnabled* HalClearLastBranchRecordStack;                                                                                                                                                                
/*0x408*/     FUNCT_00A0_3E24_HalMaskInterrupt_HalUnmaskInterrupt_HalConfigureLastBranchRecord_SvmCreatePasidSpace_SvmEnablePasid_SvmDisablePasid* HalConfigureLastBranchRecord;                                                                                                                                                                                                                                                                                                           
/*0x410*/     FUNCT_00A9_405D_HalGetLastBranchInformation* HalGetLastBranchInformation;                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x418*/     FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers* HalResumeLastBranchRecord;                                                                                                                                                                                                                                                                                                               
/*0x420*/     FUNCT_00A0_3DF7_HalStartLastBranchRecord_GetVpIndexFromApicId* HalStartLastBranchRecord;                                                                                                                                                                                                                                                                                                                                                                                     
/*0x428*/     FUNCT_00A0_3DD6_HalPrepareProcessorForIdle_HalRequestInterrupt_HalProcessorOn_HalStopLastBranchRecord_LpWritebackInvalidate_SvmDetachPasidSpace_SvmDeletePrQueue_SvmClearPrqStalled* HalStopLastBranchRecord;                                                                                                                                                                                                                                                                
/*0x430*/     FUNCT_00A0_12F1_StopProcessorTraceOnEachCore_DestroyProcedure_HalLoadMicrocode_HalDpReplayInterrupts_HalIommuBlockDevice_SetSystemMachineCheckProperty_HalIommuFreeLibraryContext_HalIommuFinalizeDeviceReset* HalIommuBlockDevice;                                                                                                                                                                                                                                          
/*0x438*/     FUNCT_00A0_4061_HalIommuUnblockDevice* HalIommuUnblockDevice;                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x440*/     FUNCT_00A0_4065_HalGetIommuInterface* HalGetIommuInterface;                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x448*/     FUNCT_00A0_3FEB_HalRequestGenericErrorRecovery_HalIommuBeginDeviceReset* HalRequestGenericErrorRecovery;                                                                                                                                                                                                                                                                                                                                                                     
/*0x450*/     FUNCT_00A0_3FFC_HalTimerQueryAuxiliaryCounterFrequency_KdWatchdogDelayExpiration_HalTimerQueryHostPerformanceCounter* HalTimerQueryHostPerformanceCounter;                                                                                                                                                                                                                                                                                                                   
/*0x458*/     FUNCT_00A0_40F0_HalTopologyQueryProcessorRelationships* HalTopologyQueryProcessorRelationships;                                                                                                                                                                                                                                                                                                                                                                              
/*0x460*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* HalInitPlatformDebugTriggers;                                           
/*0x468*/     FUNCT_00EF_3AB3_HalSetWakeEnable_HalFlushExternalCache_HalClockTimerActivate_HalResumeLastBranchRecord_HalRunPlatformDebugTriggers* HalRunPlatformDebugTriggers;                                                                                                                                                                                                                                                                                                             
/*0x470*/     FUNCT_00F2_3F95_HalAcpiGetMultiNode_HalTimerGetReferencePage* HalTimerGetReferencePage;                                                                                                                                                                                                                                                                                                                                                                                      
          }HAL_PRIVATE_DISPATCH, *PHAL_PRIVATE_DISPATCH;                                                                                                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
          typedef union _HAL_UNMASKED_INTERRUPT_FLAGS  // 3 elements, 0x2 bytes (sizeof) 
          {                                                                              
              struct                                   // 2 elements, 0x2 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT16       SecondaryInterrupt : 1; // 0 BitPosition                  
/*0x000*/         UINT16       Reserved : 15;          // 1 BitPosition                  
              };                                                                         
/*0x000*/     UINT16       AsUSHORT;                                                     
          }HAL_UNMASKED_INTERRUPT_FLAGS, *PHAL_UNMASKED_INTERRUPT_FLAGS;                                  
                                                                                         
          typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION // 8 elements, 0x20 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Version;                                                             
/*0x002*/     UINT16       Size;                                                                
/*0x004*/     union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;     // 3 elements, 0x2 bytes (sizeof)  
/*0x006*/     UINT8        _PADDING0_[0x2];                                                     
/*0x008*/     enum _KINTERRUPT_MODE Mode;                                                       
/*0x00C*/     enum _KINTERRUPT_POLARITY Polarity;                                               
/*0x010*/     ULONG32      Gsiv;                                                                
/*0x014*/     UINT16       PinNumber;                                                           
/*0x016*/     UINT8        _PADDING1_[0x2];                                                     
/*0x018*/     VOID*        DeviceHandle;                                                        
          }HAL_UNMASKED_INTERRUPT_INFORMATION, *PHAL_UNMASKED_INTERRUPT_INFORMATION;                                   
                                                                                                
          typedef struct _HANDLE_REVOCATION_INFO                   // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _LIST_ENTRY ListEntry;                        // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _OB_HANDLE_REVOCATION_BLOCK* RevocationBlock;                                    
/*0x018*/     UINT8        AllowHandleRevocation;                                                     
/*0x019*/     UINT8        Padding1[3];                                                               
/*0x01C*/     UINT8        Padding2[4];                                                               
          }HANDLE_REVOCATION_INFO, *PHANDLE_REVOCATION_INFO;                                          
                                                                                                      
          typedef struct _HANDLE_TABLE_FREE_LIST               // 5 elements, 0x40 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _EX_PUSH_LOCK FreeListLock;               // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;                                    
/*0x010*/     union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;                                     
/*0x018*/     LONG32       HandleCount;                                                           
/*0x01C*/     ULONG32      HighWaterMark;                                                         
/*0x020*/     UINT8        _PADDING0_[0x20];                                                      
          }HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST;                                      
                                                                                                  
          typedef struct _HANDLE_TABLE                                       // 17 elements, 0x80 bytes (sizeof) 
          {                                                                                                      
/*0x000*/     ULONG32      NextHandleNeedingPool;                                                                
/*0x004*/     LONG32       ExtraInfoPages;                                                                       
/*0x008*/     UINT64       TableCode;                                                                            
/*0x010*/     struct _EPROCESS* QuotaProcess;                                                                    
/*0x018*/     struct _LIST_ENTRY HandleTableList;                            // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     ULONG32      UniqueProcessId;                                                                      
              union                                                          // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                  
/*0x02C*/         ULONG32      Flags;                                                                            
                  struct                                                     // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                                              
/*0x02C*/             UINT8        StrictFIFO : 1;                           // 0 BitPosition                    
/*0x02C*/             UINT8        EnableHandleExceptions : 1;               // 1 BitPosition                    
/*0x02C*/             UINT8        Rundown : 1;                              // 2 BitPosition                    
/*0x02C*/             UINT8        Duplicated : 1;                           // 3 BitPosition                    
/*0x02C*/             UINT8        RaiseUMExceptionOnInvalidHandleClose : 1; // 4 BitPosition                    
                  };                                                                                             
              };                                                                                                 
/*0x030*/     struct _EX_PUSH_LOCK HandleContentionEvent;                    // 7 elements, 0x8 bytes (sizeof)   
/*0x038*/     struct _EX_PUSH_LOCK HandleTableLock;                          // 7 elements, 0x8 bytes (sizeof)   
              union                                                          // 2 elements, 0x40 bytes (sizeof)  
              {                                                                                                  
/*0x040*/         struct _HANDLE_TABLE_FREE_LIST FreeLists[1];                                                   
                  struct                                                     // 2 elements, 0x40 bytes (sizeof)  
                  {                                                                                              
/*0x040*/             UINT8        ActualEntry[32];                                                              
/*0x060*/             struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;                                                
/*0x068*/             UINT8        _PADDING0_[0x18];                                                             
                  };                                                                                             
              };                                                                                                 
          }HANDLE_TABLE, *PHANDLE_TABLE;                                                                         
                                                                                                                 
          typedef union _HANDLE_TABLE_ENTRY                           // 15 elements, 0x10 bytes (sizeof) 
          {                                                                                               
/*0x000*/     INT64        VolatileLowValue;                                                              
/*0x000*/     INT64        LowValue;                                                                      
              struct                                                  // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                           
/*0x000*/         struct _HANDLE_TABLE_ENTRY_INFO* InfoTable;                                             
                  union                                               // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                                       
/*0x008*/             INT64        HighValue;                                                             
/*0x008*/             union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;                                     
/*0x008*/             struct _EXHANDLE LeafHandleValue;               // 4 elements, 0x8 bytes (sizeof)   
                  };                                                                                      
              };                                                                                          
/*0x000*/     INT64        RefCountField;                                                                 
              struct                                                  // 4 elements, 0x8 bytes (sizeof)   
              {                                                                                           
/*0x000*/         UINT64       Unlocked : 1;                          // 0 BitPosition                    
/*0x000*/         UINT64       RefCnt : 16;                           // 1 BitPosition                    
/*0x000*/         UINT64       Attributes : 3;                        // 17 BitPosition                   
/*0x000*/         UINT64       ObjectPointerBits : 44;                // 20 BitPosition                   
              };                                                                                          
              struct                                                  // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                           
/*0x008*/         ULONG32      GrantedAccessBits : 25;                // 0 BitPosition                    
/*0x008*/         ULONG32      NoRightsUpgrade : 1;                   // 25 BitPosition                   
/*0x008*/         ULONG32      Spare1 : 6;                            // 26 BitPosition                   
              };                                                                                          
/*0x00C*/     ULONG32      Spare2;                                                                        
          }HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY;                                                      
                                                                                                          
          typedef struct _HANDLE_TABLE_ENTRY_INFO // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      AuditMask;                                               
/*0x004*/     ULONG32      MaxRelativeAccessMask;                                   
          }HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO;                                  
                                                                                    
          typedef struct _HANDLE_TRACE_DB_ENTRY // 4 elements, 0xA0 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _CLIENT_ID ClientId;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        Handle;                                                 
/*0x018*/     ULONG32      Type;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                        
/*0x020*/     VOID*        StackTrace[16];                                         
          }HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY;                                   
                                                                                   
          typedef struct _HANDLE_TRACE_DEBUG_INFO       // 6 elements, 0xF0 bytes (sizeof) 
          {                                                                                
/*0x000*/     LONG32       RefCount;                                                       
/*0x004*/     ULONG32      TableSize;                                                      
/*0x008*/     ULONG32      BitMaskFlags;                                                   
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                
/*0x010*/     struct _FAST_MUTEX CloseCompactionLock;   // 5 elements, 0x38 bytes (sizeof) 
/*0x048*/     ULONG32      CurrentStackIndex;                                              
/*0x04C*/     UINT8        _PADDING1_[0x4];                                                
/*0x050*/     struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];                                    
          }HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO;                                   
                                                                                           
          typedef struct _HARDWARE_PTE           // 16 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Valid : 1;            // 0 BitPosition                   
/*0x000*/     UINT64       Write : 1;            // 1 BitPosition                   
/*0x000*/     UINT64       Owner : 1;            // 2 BitPosition                   
/*0x000*/     UINT64       WriteThrough : 1;     // 3 BitPosition                   
/*0x000*/     UINT64       CacheDisable : 1;     // 4 BitPosition                   
/*0x000*/     UINT64       Accessed : 1;         // 5 BitPosition                   
/*0x000*/     UINT64       Dirty : 1;            // 6 BitPosition                   
/*0x000*/     UINT64       LargePage : 1;        // 7 BitPosition                   
/*0x000*/     UINT64       Global : 1;           // 8 BitPosition                   
/*0x000*/     UINT64       CopyOnWrite : 1;      // 9 BitPosition                   
/*0x000*/     UINT64       Prototype : 1;        // 10 BitPosition                  
/*0x000*/     UINT64       reserved0 : 1;        // 11 BitPosition                  
/*0x000*/     UINT64       PageFrameNumber : 36; // 12 BitPosition                  
/*0x000*/     UINT64       reserved1 : 4;        // 48 BitPosition                  
/*0x000*/     UINT64       SoftwareWsIndex : 11; // 52 BitPosition                  
/*0x000*/     UINT64       NoExecute : 1;        // 63 BitPosition                  
          }HARDWARE_PTE, *PHARDWARE_PTE;                                            
                                                                                    
          typedef struct _HBASE_BLOCK          // 26 elements, 0x1000 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Signature;                                                
/*0x004*/     ULONG32      Sequence1;                                                
/*0x008*/     ULONG32      Sequence2;                                                
/*0x00C*/     union _LARGE_INTEGER TimeStamp;  // 4 elements, 0x8 bytes (sizeof)     
/*0x014*/     ULONG32      Major;                                                    
/*0x018*/     ULONG32      Minor;                                                    
/*0x01C*/     ULONG32      Type;                                                     
/*0x020*/     ULONG32      Format;                                                   
/*0x024*/     ULONG32      RootCell;                                                 
/*0x028*/     ULONG32      Length;                                                   
/*0x02C*/     ULONG32      Cluster;                                                  
/*0x030*/     UINT8        FileName[64];                                             
/*0x070*/     struct _GUID RmId;               // 4 elements, 0x10 bytes (sizeof)    
/*0x080*/     struct _GUID LogId;              // 4 elements, 0x10 bytes (sizeof)    
/*0x090*/     ULONG32      Flags;                                                    
/*0x094*/     struct _GUID TmId;               // 4 elements, 0x10 bytes (sizeof)    
/*0x0A4*/     ULONG32      GuidSignature;                                            
/*0x0A8*/     UINT64       LastReorganizeTime;                                       
/*0x0B0*/     ULONG32      Reserved1[83];                                            
/*0x1FC*/     ULONG32      CheckSum;                                                 
/*0x200*/     ULONG32      Reserved2[882];                                           
/*0xFC8*/     struct _GUID ThawTmId;           // 4 elements, 0x10 bytes (sizeof)    
/*0xFD8*/     struct _GUID ThawRmId;           // 4 elements, 0x10 bytes (sizeof)    
/*0xFE8*/     struct _GUID ThawLogId;          // 4 elements, 0x10 bytes (sizeof)    
/*0xFF8*/     ULONG32      BootType;                                                 
/*0xFFC*/     ULONG32      BootRecover;                                              
          }HBASE_BLOCK, *PHBASE_BLOCK;                                               
                                                                                     
          typedef struct _HBIN                // 6 elements, 0x20 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Signature;                                            
/*0x004*/     ULONG32      FileOffset;                                           
/*0x008*/     ULONG32      Size;                                                 
/*0x00C*/     ULONG32      Reserved1[2];                                         
/*0x014*/     union _LARGE_INTEGER TimeStamp; // 4 elements, 0x8 bytes (sizeof)  
/*0x01C*/     ULONG32      Spare;                                                
          }HBIN, *PHBIN;                                                         
                                                                                 
          typedef struct _HCELL                  // 2 elements, 0x8 bytes (sizeof) 
          {                                                                        
/*0x000*/     LONG32       Size;                                                   
              union                              // 1 elements, 0x4 bytes (sizeof) 
              {                                                                    
                  struct                         // 1 elements, 0x4 bytes (sizeof) 
                  {                                                                
                      union                      // 2 elements, 0x4 bytes (sizeof) 
                      {                                                            
/*0x004*/                 ULONG32      UserData;                                   
/*0x004*/                 ULONG32      Next;                                       
                      }u;                                                          
                  }NewCell;                                                        
              }u;                                                                  
          }HCELL, *PHCELL;                                                         
                                                                                   
          typedef struct _HEADLESS_LOADER_BLOCK // 20 elements, 0x40 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT8        UsedBiosSettings;                                        
/*0x001*/     UINT8        DataBits;                                                
/*0x002*/     UINT8        StopBits;                                                
/*0x003*/     UINT8        Parity;                                                  
/*0x004*/     ULONG32      BaudRate;                                                
/*0x008*/     ULONG32      PortNumber;                                              
/*0x00C*/     UINT8        _PADDING0_[0x4];                                         
/*0x010*/     UINT8*       PortAddress;                                             
/*0x018*/     UINT16       PciDeviceId;                                             
/*0x01A*/     UINT16       PciVendorId;                                             
/*0x01C*/     UINT8        PciBusNumber;                                            
/*0x01D*/     UINT8        _PADDING1_[0x1];                                         
/*0x01E*/     UINT16       PciBusSegment;                                           
/*0x020*/     UINT8        PciSlotNumber;                                           
/*0x021*/     UINT8        PciFunctionNumber;                                       
/*0x022*/     UINT8        _PADDING2_[0x2];                                         
/*0x024*/     ULONG32      PciFlags;                                                
/*0x028*/     struct _GUID SystemGUID;          // 4 elements, 0x10 bytes (sizeof)  
/*0x038*/     UINT8        IsMMIODevice;                                            
/*0x039*/     UINT8        TerminalType;                                            
/*0x03A*/     UINT8        InterfaceType;                                           
/*0x03B*/     UINT8        RegisterBitWidth;                                        
/*0x03C*/     UINT8        RegisterAccessSize;                                      
/*0x03D*/     UINT8        _PADDING3_[0x3];                                         
          }HEADLESS_LOADER_BLOCK, *PHEADLESS_LOADER_BLOCK;                                    
                                                                                    
          typedef struct _HEAP_UNPACKED_ENTRY         // 10 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     VOID*        PreviousBlockPrivateData;                                      
              union                                   // 3 elements, 0x8 bytes (sizeof)   
              {                                                                           
                  struct                              // 3 elements, 0x8 bytes (sizeof)   
                  {                                                                       
/*0x008*/             UINT16       Size;                                                  
/*0x00A*/             UINT8        Flags;                                                 
/*0x00B*/             UINT8        SmallTagIndex;                                         
/*0x00C*/             UINT8        _PADDING0_[0x4];                                       
                  };                                                                      
                  struct                              // 4 elements, 0x8 bytes (sizeof)   
                  {                                                                       
/*0x008*/             ULONG32      SubSegmentCode;                                        
/*0x00C*/             UINT16       PreviousSize;                                          
                      union                           // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                   
/*0x00E*/                 UINT8        SegmentOffset;                                     
/*0x00E*/                 UINT8        LFHFlags;                                          
                      };                                                                  
/*0x00F*/             UINT8        UnusedBytes;                                           
                  };                                                                      
/*0x008*/         UINT64       CompactHeader;                                             
              };                                                                          
          }HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY;                                    
                                                                                          
          typedef struct _HEAP_EXTENDED_ENTRY      // 7 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     VOID*        Reserved;                                                  
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x008*/             UINT16       FunctionIndex;                                     
/*0x00A*/             UINT16       ContextValue;                                      
                  };                                                                  
/*0x008*/         ULONG32      InterceptorValue;                                      
              };                                                                      
/*0x00C*/     UINT16       UnusedBytesLength;                                         
/*0x00E*/     UINT8        EntryOffset;                                               
/*0x00F*/     UINT8        ExtendedBlockSignature;                                    
          }HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY;                                   
                                                                                      
          typedef struct _HEAP_ENTRY                          // 26 elements, 0x10 bytes (sizeof) 
          {                                                                                       
              union                                           // 5 elements, 0x10 bytes (sizeof)  
              {                                                                                   
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry;  // 10 elements, 0x10 bytes (sizeof) 
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        PreviousBlockPrivateData;                                      
                      union                                   // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 3 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       Size;                                                  
/*0x00A*/                     UINT8        Flags;                                                 
/*0x00B*/                     UINT8        SmallTagIndex;                                         
/*0x00C*/                     UINT8        _PADDING0_[0x4];                                       
                          };                                                                      
                          struct                              // 4 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      SubSegmentCode;                                        
/*0x00C*/                     UINT16       PreviousSize;                                          
                              union                           // 2 elements, 0x1 bytes (sizeof)   
                              {                                                                   
/*0x00E*/                         UINT8        SegmentOffset;                                     
/*0x00E*/                         UINT8        LFHFlags;                                          
                              };                                                                  
/*0x00F*/                     UINT8        UnusedBytes;                                           
                          };                                                                      
/*0x008*/                 UINT64       CompactHeader;                                             
                      };                                                                          
                  };                                                                              
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry;  // 7 elements, 0x10 bytes (sizeof)  
                  struct                                      // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        Reserved;                                                      
                      union                                   // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       FunctionIndex;                                         
/*0x00A*/                     UINT16       ContextValue;                                          
                          };                                                                      
/*0x008*/                 ULONG32      InterceptorValue;                                          
                      };                                                                          
/*0x00C*/             UINT16       UnusedBytesLength;                                             
/*0x00E*/             UINT8        EntryOffset;                                                   
/*0x00F*/             UINT8        ExtendedBlockSignature;                                        
                  };                                                                              
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        ReservedForAlignment;                                          
                      union                                   // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      Code1;                                                 
                              union                           // 2 elements, 0x4 bytes (sizeof)   
                              {                                                                   
                                  struct                      // 3 elements, 0x4 bytes (sizeof)   
                                  {                                                               
/*0x00C*/                             UINT16       Code2;                                         
/*0x00E*/                             UINT8        Code3;                                         
/*0x00F*/                             UINT8        Code4;                                         
                                  };                                                              
/*0x00C*/                         ULONG32      Code234;                                           
                              };                                                                  
                          };                                                                      
/*0x008*/                 UINT64       AgregateCode;                                              
                      };                                                                          
                  };                                                                              
              };                                                                                  
          }HEAP_ENTRY, *PHEAP_ENTRY;                                                              
                                                                                                  
          typedef struct _HEAP_SEGMENT                     // 14 elements, 0x70 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _HEAP_ENTRY Entry;                    // 26 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SegmentSignature;                                                   
/*0x014*/     ULONG32      SegmentFlags;                                                       
/*0x018*/     struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _HEAP* Heap;                                                              
/*0x030*/     VOID*        BaseAddress;                                                        
/*0x038*/     ULONG32      NumberOfPages;                                                      
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                    
/*0x040*/     struct _HEAP_ENTRY* FirstEntry;                                                  
/*0x048*/     struct _HEAP_ENTRY* LastValidEntry;                                              
/*0x050*/     ULONG32      NumberOfUnCommittedPages;                                           
/*0x054*/     ULONG32      NumberOfUnCommittedRanges;                                          
/*0x058*/     UINT16       SegmentAllocatorBackTraceIndex;                                     
/*0x05A*/     UINT16       Reserved;                                                           
/*0x05C*/     UINT8        _PADDING1_[0x4];                                                    
/*0x060*/     struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x10 bytes (sizeof)  
          }HEAP_SEGMENT, *PHEAP_SEGMENT;                                                       
                                                                                               
          typedef union _RTL_RUN_ONCE // 3 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     VOID*        Ptr;                                         
/*0x000*/     UINT64       Value;                                       
/*0x000*/     UINT64       State : 2; // 0 BitPosition                  
          }RTL_RUN_ONCE, *PRTL_RUN_ONCE;                                  
                                                                        
          typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA   // 4 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       CommitLimitBytes;                                              
/*0x008*/     UINT64       CommitLimitFailureCode;                                        
/*0x010*/     UINT64       MaxAllocationSizeBytes;                                        
/*0x018*/     UINT64       AllocationLimitFailureCode;                                    
          }RTL_HEAP_MEMORY_LIMIT_DATA, *PRTL_HEAP_MEMORY_LIMIT_DATA;                                   
                                                                                          
          typedef struct _HEAP_COUNTERS              // 23 elements, 0x78 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       TotalMemoryReserved;                                          
/*0x008*/     UINT64       TotalMemoryCommitted;                                         
/*0x010*/     UINT64       TotalMemoryLargeUCR;                                          
/*0x018*/     UINT64       TotalSizeInVirtualBlocks;                                     
/*0x020*/     ULONG32      TotalSegments;                                                
/*0x024*/     ULONG32      TotalUCRs;                                                    
/*0x028*/     ULONG32      CommittOps;                                                   
/*0x02C*/     ULONG32      DeCommitOps;                                                  
/*0x030*/     ULONG32      LockAcquires;                                                 
/*0x034*/     ULONG32      LockCollisions;                                               
/*0x038*/     ULONG32      CommitRate;                                                   
/*0x03C*/     ULONG32      DecommittRate;                                                
/*0x040*/     ULONG32      CommitFailures;                                               
/*0x044*/     ULONG32      InBlockCommitFailures;                                        
/*0x048*/     ULONG32      PollIntervalCounter;                                          
/*0x04C*/     ULONG32      DecommitsSinceLastCheck;                                      
/*0x050*/     ULONG32      HeapPollInterval;                                             
/*0x054*/     ULONG32      AllocAndFreeOps;                                              
/*0x058*/     ULONG32      AllocationIndicesActive;                                      
/*0x05C*/     ULONG32      InBlockDeccommits;                                            
/*0x060*/     UINT64       InBlockDeccomitSize;                                          
/*0x068*/     UINT64       HighWatermarkSize;                                            
/*0x070*/     UINT64       LastPolledSize;                                               
          }HEAP_COUNTERS, *PHEAP_COUNTERS;                                               
                                                                                         
          typedef struct _HEAP_TUNING_PARAMETERS   // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      CommittThresholdShift;                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     UINT64       MaxPreCommittThreshold;                                    
          }HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS;                                   
                                                                                      
          typedef struct _HEAP                                     // 59 elements, 0x2C0 bytes (sizeof) 
          {                                                                                             
              union                                                // 2 elements, 0x70 bytes (sizeof)   
              {                                                                                         
/*0x000*/         struct _HEAP_SEGMENT Segment;                    // 14 elements, 0x70 bytes (sizeof)  
                  struct                                           // 14 elements, 0x70 bytes (sizeof)  
                  {                                                                                     
/*0x000*/             struct _HEAP_ENTRY Entry;                    // 26 elements, 0x10 bytes (sizeof)  
/*0x010*/             ULONG32      SegmentSignature;                                                    
/*0x014*/             ULONG32      SegmentFlags;                                                        
/*0x018*/             struct _LIST_ENTRY SegmentListEntry;         // 2 elements, 0x10 bytes (sizeof)   
/*0x028*/             struct _HEAP* Heap;                                                               
/*0x030*/             VOID*        BaseAddress;                                                         
/*0x038*/             ULONG32      NumberOfPages;                                                       
/*0x03C*/             UINT8        _PADDING0_[0x4];                                                     
/*0x040*/             struct _HEAP_ENTRY* FirstEntry;                                                   
/*0x048*/             struct _HEAP_ENTRY* LastValidEntry;                                               
/*0x050*/             ULONG32      NumberOfUnCommittedPages;                                            
/*0x054*/             ULONG32      NumberOfUnCommittedRanges;                                           
/*0x058*/             UINT16       SegmentAllocatorBackTraceIndex;                                      
/*0x05A*/             UINT16       Reserved;                                                            
/*0x05C*/             UINT8        _PADDING1_[0x4];                                                     
/*0x060*/             struct _LIST_ENTRY UCRSegmentList;           // 2 elements, 0x10 bytes (sizeof)   
                  };                                                                                    
              };                                                                                        
/*0x070*/     ULONG32      Flags;                                                                       
/*0x074*/     ULONG32      ForceFlags;                                                                  
/*0x078*/     ULONG32      CompatibilityFlags;                                                          
/*0x07C*/     ULONG32      EncodeFlagMask;                                                              
/*0x080*/     struct _HEAP_ENTRY Encoding;                         // 26 elements, 0x10 bytes (sizeof)  
/*0x090*/     ULONG32      Interceptor;                                                                 
/*0x094*/     ULONG32      VirtualMemoryThreshold;                                                      
/*0x098*/     ULONG32      Signature;                                                                   
/*0x09C*/     UINT8        _PADDING2_[0x4];                                                             
/*0x0A0*/     UINT64       SegmentReserve;                                                              
/*0x0A8*/     UINT64       SegmentCommit;                                                               
/*0x0B0*/     UINT64       DeCommitFreeBlockThreshold;                                                  
/*0x0B8*/     UINT64       DeCommitTotalFreeThreshold;                                                  
/*0x0C0*/     UINT64       TotalFreeSize;                                                               
/*0x0C8*/     UINT64       MaximumAllocationSize;                                                       
/*0x0D0*/     UINT16       ProcessHeapsListIndex;                                                       
/*0x0D2*/     UINT16       HeaderValidateLength;                                                        
/*0x0D4*/     UINT8        _PADDING3_[0x4];                                                             
/*0x0D8*/     VOID*        HeaderValidateCopy;                                                          
/*0x0E0*/     UINT16       NextAvailableTagIndex;                                                       
/*0x0E2*/     UINT16       MaximumTagIndex;                                                             
/*0x0E4*/     UINT8        _PADDING4_[0x4];                                                             
/*0x0E8*/     struct _HEAP_TAG_ENTRY* TagEntries;                                                       
/*0x0F0*/     struct _LIST_ENTRY UCRList;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x100*/     UINT64       AlignRound;                                                                  
/*0x108*/     UINT64       AlignMask;                                                                   
/*0x110*/     struct _LIST_ENTRY VirtualAllocdBlocks;              // 2 elements, 0x10 bytes (sizeof)   
/*0x120*/     struct _LIST_ENTRY SegmentList;                      // 2 elements, 0x10 bytes (sizeof)   
/*0x130*/     UINT16       AllocatorBackTraceIndex;                                                     
/*0x132*/     UINT8        _PADDING5_[0x2];                                                             
/*0x134*/     ULONG32      NonDedicatedListLength;                                                      
/*0x138*/     VOID*        BlocksIndex;                                                                 
/*0x140*/     VOID*        UCRIndex;                                                                    
/*0x148*/     struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;                                          
/*0x150*/     struct _LIST_ENTRY FreeLists;                        // 2 elements, 0x10 bytes (sizeof)   
/*0x160*/     struct _HEAP_LOCK* LockVariable;                                                          
/*0x168*/     FUNCT_00A0_302E_CommitRoutine* CommitRoutine;                                             
/*0x170*/     union _RTL_RUN_ONCE StackTraceInitVar;               // 3 elements, 0x8 bytes (sizeof)    
/*0x178*/     struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;  // 4 elements, 0x20 bytes (sizeof)   
/*0x198*/     VOID*        FrontEndHeap;                                                                
/*0x1A0*/     UINT16       FrontHeapLockCount;                                                          
/*0x1A2*/     UINT8        FrontEndHeapType;                                                            
/*0x1A3*/     UINT8        RequestedFrontEndHeapType;                                                   
/*0x1A4*/     UINT8        _PADDING6_[0x4];                                                             
/*0x1A8*/     WCHAR*       FrontEndHeapUsageData;                                                       
/*0x1B0*/     UINT16       FrontEndHeapMaximumIndex;                                                    
/*0x1B2*/     UINT8        FrontEndHeapStatusBitmap[129];                                               
/*0x233*/     UINT8        _PADDING7_[0x5];                                                             
/*0x238*/     struct _HEAP_COUNTERS Counters;                      // 23 elements, 0x78 bytes (sizeof)  
/*0x2B0*/     struct _HEAP_TUNING_PARAMETERS TuningParameters;     // 2 elements, 0x10 bytes (sizeof)   
          }HEAP, *PHEAP;                                                                                
                                                                                                        
          typedef struct _HEAP_ENTRY_EXTRA                  // 5 elements, 0x10 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                
                  struct                                    // 3 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x000*/             UINT16       AllocatorBackTraceIndex;                                    
/*0x002*/             UINT16       TagIndex;                                                   
/*0x004*/             UINT8        _PADDING0_[0x4];                                            
/*0x008*/             UINT64       Settable;                                                   
                  };                                                                           
                  struct                                    // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                            
/*0x000*/             UINT64       ZeroInit;                                                   
/*0x008*/             UINT64       ZeroInit1;                                                  
                  };                                                                           
              };                                                                               
          }HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA;                                               
                                                                                               
          typedef struct _HEAP_FAILURE_INFORMATION          // 16 elements, 0x6D0 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Version;                                                              
/*0x004*/     ULONG32      StructureSize;                                                        
/*0x008*/     enum _HEAP_FAILURE_TYPE FailureType;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x010*/     VOID*        HeapAddress;                                                          
/*0x018*/     VOID*        Address;                                                              
/*0x020*/     VOID*        Param1;                                                               
/*0x028*/     VOID*        Param2;                                                               
/*0x030*/     VOID*        Param3;                                                               
/*0x038*/     VOID*        PreviousBlock;                                                        
/*0x040*/     VOID*        NextBlock;                                                            
/*0x048*/     struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry; // 2 elements, 0x10 bytes (sizeof)   
/*0x058*/     VOID*        StackTrace[32];                                                       
/*0x158*/     UINT8        HeapMajorVersion;                                                     
/*0x159*/     UINT8        HeapMinorVersion;                                                     
/*0x15A*/     UINT8        _PADDING1_[0x6];                                                      
/*0x160*/     struct _EXCEPTION_RECORD ExceptionRecord;     // 6 elements, 0x98 bytes (sizeof)   
/*0x1F8*/     UINT8        _PADDING2_[0x8];                                                      
/*0x200*/     struct _CONTEXT ContextRecord;                // 64 elements, 0x4D0 bytes (sizeof) 
          }HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION;                                     
                                                                                                 
          typedef struct _HEAP_FREE_ENTRY                     // 28 elements, 0x20 bytes (sizeof) 
          {                                                                                       
              union                                           // 6 elements, 0x10 bytes (sizeof)  
              {                                                                                   
/*0x000*/         struct _HEAP_ENTRY HeapEntry;               // 26 elements, 0x10 bytes (sizeof) 
/*0x000*/         struct _HEAP_UNPACKED_ENTRY UnpackedEntry;  // 10 elements, 0x10 bytes (sizeof) 
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        PreviousBlockPrivateData;                                      
                      union                                   // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 3 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       Size;                                                  
/*0x00A*/                     UINT8        Flags;                                                 
/*0x00B*/                     UINT8        SmallTagIndex;                                         
/*0x00C*/                     UINT8        _PADDING0_[0x4];                                       
                          };                                                                      
                          struct                              // 4 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      SubSegmentCode;                                        
/*0x00C*/                     UINT16       PreviousSize;                                          
                              union                           // 2 elements, 0x1 bytes (sizeof)   
                              {                                                                   
/*0x00E*/                         UINT8        SegmentOffset;                                     
/*0x00E*/                         UINT8        LFHFlags;                                          
                              };                                                                  
/*0x00F*/                     UINT8        UnusedBytes;                                           
                          };                                                                      
/*0x008*/                 UINT64       CompactHeader;                                             
                      };                                                                          
                  };                                                                              
/*0x000*/         struct _HEAP_EXTENDED_ENTRY ExtendedEntry;  // 7 elements, 0x10 bytes (sizeof)  
                  struct                                      // 5 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        Reserved;                                                      
                      union                                   // 2 elements, 0x4 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x4 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     UINT16       FunctionIndex;                                         
/*0x00A*/                     UINT16       ContextValue;                                          
                          };                                                                      
/*0x008*/                 ULONG32      InterceptorValue;                                          
                      };                                                                          
/*0x00C*/             UINT16       UnusedBytesLength;                                             
/*0x00E*/             UINT8        EntryOffset;                                                   
/*0x00F*/             UINT8        ExtendedBlockSignature;                                        
                  };                                                                              
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x000*/             VOID*        ReservedForAlignment;                                          
                      union                                   // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                           
                          struct                              // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                       
/*0x008*/                     ULONG32      Code1;                                                 
                              union                           // 2 elements, 0x4 bytes (sizeof)   
                              {                                                                   
                                  struct                      // 3 elements, 0x4 bytes (sizeof)   
                                  {                                                               
/*0x00C*/                             UINT16       Code2;                                         
/*0x00E*/                             UINT8        Code3;                                         
/*0x00F*/                             UINT8        Code4;                                         
                                  };                                                              
/*0x00C*/                         ULONG32      Code234;                                           
                              };                                                                  
                          };                                                                      
/*0x008*/                 UINT64       AgregateCode;                                              
                      };                                                                          
                  };                                                                              
              };                                                                                  
/*0x010*/     struct _LIST_ENTRY FreeList;                    // 2 elements, 0x10 bytes (sizeof)  
          }HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY;                                                    
                                                                                                  
          typedef struct _HEAP_FREE_ENTRY_EXTRA // 2 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT16       TagIndex;                                              
/*0x002*/     UINT16       FreeBackTraceIndex;                                    
          }HEAP_FREE_ENTRY_EXTRA, *PHEAP_FREE_ENTRY_EXTRA;                                  
                                                                                  
          typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS // 4 elements, 0x4 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      SafeInputValidation : 1;   // 0 BitPosition                  
/*0x000*/     ULONG32      Padding : 1;               // 1 BitPosition                  
/*0x000*/     ULONG32      CommitLFHSubsegments : 1;  // 2 BitPosition                  
/*0x000*/     ULONG32      AllocateHeapFromEnv : 1;   // 3 BitPosition                  
          }HEAP_GLOBAL_APPCOMPAT_FLAGS, *PHEAP_GLOBAL_APPCOMPAT_FLAGS;                                  
                                                                                        
          typedef struct _HEAP_LIST_LOOKUP              // 9 elements, 0x38 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _HEAP_LIST_LOOKUP* ExtendedLookup;                                    
/*0x008*/     ULONG32      ArraySize;                                                      
/*0x00C*/     ULONG32      ExtraItem;                                                      
/*0x010*/     ULONG32      ItemCount;                                                      
/*0x014*/     ULONG32      OutOfRangeItems;                                                
/*0x018*/     ULONG32      BaseIndex;                                                      
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                
/*0x020*/     struct _LIST_ENTRY* ListHead;                                                
/*0x028*/     ULONG32*     ListsInUseUlong;                                                
/*0x030*/     struct _LIST_ENTRY** ListHints;                                              
          }HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP;                                           
                                                                                           
          typedef struct _RTL_CRITICAL_SECTION               // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;                                    
/*0x008*/     LONG32       LockCount;                                                           
/*0x00C*/     LONG32       RecursionCount;                                                      
/*0x010*/     VOID*        OwningThread;                                                        
/*0x018*/     VOID*        LockSemaphore;                                                       
/*0x020*/     UINT64       SpinCount;                                                           
          }RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;                                        
                                                                                                
          typedef struct _HEAP_LOCK                             // 1 elements, 0x68 bytes (sizeof)  
          {                                                                                         
              union                                             // 2 elements, 0x68 bytes (sizeof)  
              {                                                                                     
/*0x000*/         struct _RTL_CRITICAL_SECTION CriticalSection; // 6 elements, 0x28 bytes (sizeof)  
/*0x000*/         struct _ERESOURCE Resource;                   // 17 elements, 0x68 bytes (sizeof) 
              }Lock;                                                                                
          }HEAP_LOCK, *PHEAP_LOCK;                                                                  
                                                                                                    
          typedef struct _HEAP_PSEUDO_TAG_ENTRY // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Allocs;                                                 
/*0x004*/     ULONG32      Frees;                                                  
/*0x008*/     UINT64       Size;                                                   
          }HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY;                                   
                                                                                   
          typedef struct _HEAP_STOP_ON_TAG      // 3 elements, 0x4 bytes (sizeof) 
          {                                                                       
              union                             // 2 elements, 0x4 bytes (sizeof) 
              {                                                                   
/*0x000*/         ULONG32      HeapAndTagIndex;                                   
                  struct                        // 2 elements, 0x4 bytes (sizeof) 
                  {                                                               
/*0x000*/             UINT16       TagIndex;                                      
/*0x002*/             UINT16       HeapIndex;                                     
                  };                                                              
              };                                                                  
          }HEAP_STOP_ON_TAG, *PHEAP_STOP_ON_TAG;                                  
                                                                                  
          typedef struct _HEAP_STOP_ON_VALUES      // 6 elements, 0x30 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       AllocAddress;                                              
/*0x008*/     struct _HEAP_STOP_ON_TAG AllocTag;   // 3 elements, 0x4 bytes (sizeof)  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                           
/*0x010*/     UINT64       ReAllocAddress;                                            
/*0x018*/     struct _HEAP_STOP_ON_TAG ReAllocTag; // 3 elements, 0x4 bytes (sizeof)  
/*0x01C*/     UINT8        _PADDING1_[0x4];                                           
/*0x020*/     UINT64       FreeAddress;                                               
/*0x028*/     struct _HEAP_STOP_ON_TAG FreeTag;    // 3 elements, 0x4 bytes (sizeof)  
/*0x02C*/     UINT8        _PADDING2_[0x4];                                           
          }HEAP_STOP_ON_VALUES, *PHEAP_STOP_ON_VALUES;                                   
                                                                                      
          typedef struct _HEAP_SUBALLOCATOR_CALLBACKS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       Allocate;                                                     
/*0x008*/     UINT64       Free;                                                         
/*0x010*/     UINT64       Commit;                                                       
/*0x018*/     UINT64       Decommit;                                                     
/*0x020*/     UINT64       ExtendContext;                                                
          }HEAP_SUBALLOCATOR_CALLBACKS, *PHEAP_SUBALLOCATOR_CALLBACKS;                                   
                                                                                         
          typedef struct _HEAP_TAG_ENTRY          // 6 elements, 0x48 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Allocs;                                                   
/*0x004*/     ULONG32      Frees;                                                    
/*0x008*/     UINT64       Size;                                                     
/*0x010*/     UINT16       TagIndex;                                                 
/*0x012*/     UINT16       CreatorBackTraceIndex;                                    
/*0x014*/     WCHAR        TagName[24];                                              
/*0x044*/     UINT8        _PADDING0_[0x4];                                          
          }HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY;                                         
                                                                                     
          typedef struct _HEAP_UCR_DESCRIPTOR  // 4 elements, 0x30 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY SegmentEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     VOID*        Address;                                               
/*0x028*/     UINT64       Size;                                                  
          }HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR;                                   
                                                                                  
          typedef struct _HEAP_VAMGR_ALLOCATOR     // 14 elements, 0x30 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       TreeLock;                                                   
/*0x008*/     struct _RTL_RB_TREE FreeRanges;      // 3 elements, 0x10 bytes (sizeof)  
/*0x018*/     struct _HEAP_VAMGR_VASPACE* VaSpace;                                     
/*0x020*/     VOID*        PartitionHandle;                                            
/*0x028*/     UINT16       ChunksPerRegion;                                            
/*0x02A*/     UINT16       RefCount;                                                   
/*0x02C*/     UINT8        AllocatorIndex;                                             
/*0x02D*/     UINT8        NumaNode;                                                   
              struct                               // 5 elements, 0x1 bytes (sizeof)   
              {                                                                        
/*0x02E*/         UINT8        LockType : 1;       // 0 BitPosition                    
/*0x02E*/         UINT8        MemoryType : 2;     // 1 BitPosition                    
/*0x02E*/         UINT8        ConstrainedVA : 1;  // 3 BitPosition                    
/*0x02E*/         UINT8        AllowFreeHead : 1;  // 4 BitPosition                    
/*0x02E*/         UINT8        Spare0 : 3;         // 5 BitPosition                    
              };                                                                       
/*0x02F*/     UINT8        Spare1;                                                     
          }HEAP_VAMGR_ALLOCATOR, *PHEAP_VAMGR_ALLOCATOR;                                    
                                                                                       
          typedef struct _RTL_CSPARSE_BITMAP          // 11 elements, 0x40 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       CommitDirectory;                                               
/*0x008*/     UINT64*      CommitBitmap;                                                  
/*0x010*/     UINT64*      UserBitmap;                                                    
/*0x018*/     INT64        BitCount;                                                      
/*0x020*/     UINT64       BitmapLock;                                                    
/*0x028*/     UINT64       DecommitPageIndex;                                             
/*0x030*/     UINT64       RtlpCSparseBitmapWakeLock;                                     
/*0x038*/     UINT8        LockType;                                                      
/*0x039*/     UINT8        AddressSpace;                                                  
/*0x03A*/     UINT8        MemType;                                                       
/*0x03B*/     UINT8        AllocAlignment;                                                
/*0x03C*/     UINT8        _PADDING0_[0x4];                                               
          }RTL_CSPARSE_BITMAP, *PRTL_CSPARSE_BITMAP;                                      
                                                                                          
          typedef struct _RTL_SPARSE_ARRAY       // 3 elements, 0x50 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _RTL_CSPARSE_BITMAP Bitmap; // 11 elements, 0x40 bytes (sizeof) 
/*0x040*/     UINT64       ElementCount;                                             
/*0x048*/     ULONG32      ElementSizeShift;                                         
/*0x04C*/     UINT8        _PADDING0_[0x4];                                          
          }RTL_SPARSE_ARRAY, *PRTL_SPARSE_ARRAY;                                     
                                                                                     
          typedef struct _HEAP_VAMGR_VASPACE                     // 3 elements, 0x60 bytes (sizeof) 
          {                                                                                         
/*0x000*/     enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                         
/*0x008*/     UINT64       BaseAddress;                                                             
/*0x010*/     struct _RTL_SPARSE_ARRAY VaRangeArray;             // 3 elements, 0x50 bytes (sizeof) 
          }HEAP_VAMGR_VASPACE, *PHEAP_VAMGR_VASPACE;                                                
                                                                                                    
          typedef struct _HEAP_VAMGR_CTX                    // 4 elements, 0x3040 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _HEAP_VAMGR_VASPACE VaSpace;           // 3 elements, 0x60 bytes (sizeof)   
/*0x060*/     UINT64       AllocatorLock;                                                        
/*0x068*/     ULONG32      AllocatorCount;                                                       
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x070*/     struct _HEAP_VAMGR_ALLOCATOR Allocators[255];                                      
          }HEAP_VAMGR_CTX, *PHEAP_VAMGR_CTX;                                                     
                                                                                                 
          typedef struct _HEAP_VAMGR_RANGE          // 12 elements, 0x20 bytes (sizeof) 
          {                                                                             
              union                                 // 5 elements, 0x18 bytes (sizeof)  
              {                                                                         
/*0x000*/         struct _RTL_BALANCED_NODE RbNode; // 6 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _SINGLE_LIST_ENTRY Next;   // 1 elements, 0x8 bytes (sizeof)   
                  struct                            // 4 elements, 0x1 bytes (sizeof)   
                  {                                                                     
/*0x000*/             UINT8        Allocated : 1;   // 0 BitPosition                    
/*0x000*/             UINT8        Internal : 1;    // 1 BitPosition                    
/*0x000*/             UINT8        Standalone : 1;  // 2 BitPosition                    
/*0x000*/             UINT8        Spare0 : 5;      // 3 BitPosition                    
                  };                                                                    
/*0x001*/         UINT8        AllocatorIndex;                                          
/*0x008*/         UINT64       OwnerCtx[2];                                             
              };                                                                        
              union                                 // 3 elements, 0x8 bytes (sizeof)   
              {                                                                         
/*0x018*/         UINT64       SizeInChunks;                                            
                  struct                            // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                     
/*0x018*/             UINT16       ChunkCount;                                          
/*0x01A*/             UINT16       PrevChunkCount;                                      
/*0x01C*/             UINT8        _PADDING0_[0x4];                                     
                  };                                                                    
/*0x018*/         UINT64       Signature;                                               
              };                                                                        
          }HEAP_VAMGR_RANGE, *PHEAP_VAMGR_RANGE;                                        
                                                                                        
          typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY // 5 elements, 0x40 bytes (sizeof)  
          {                                                                            
/*0x000*/     struct _LIST_ENTRY Entry;            // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _HEAP_ENTRY_EXTRA ExtraStuff; // 5 elements, 0x10 bytes (sizeof)  
/*0x020*/     UINT64       CommitSize;                                                 
/*0x028*/     UINT64       ReserveSize;                                                
/*0x030*/     struct _HEAP_ENTRY BusyBlock;        // 26 elements, 0x10 bytes (sizeof) 
          }HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY;                                    
                                                                                       
          typedef struct _HIVE_LIST_ENTRY      // 17 elements, 0x98 bytes (sizeof) 
          {                                                                        
/*0x000*/     WCHAR*       FileName;                                               
/*0x008*/     WCHAR*       BaseName;                                               
/*0x010*/     WCHAR*       RegRootName;                                            
/*0x018*/     struct _CMHIVE* CmHive;                                              
/*0x020*/     ULONG32      HHiveFlags;                                             
/*0x024*/     ULONG32      CmHiveFlags;                                            
/*0x028*/     ULONG32      CmKcbCacheSize;                                         
/*0x02C*/     UINT8        _PADDING0_[0x4];                                        
/*0x030*/     struct _CMHIVE* CmHive2;                                             
/*0x038*/     UINT8        HiveMounted;                                            
/*0x039*/     UINT8        ThreadFinished;                                         
/*0x03A*/     UINT8        ThreadStarted;                                          
/*0x03B*/     UINT8        Allocate;                                               
/*0x03C*/     UINT8        WinPERequired;                                          
/*0x03D*/     UINT8        _PADDING1_[0x3];                                        
/*0x040*/     struct _KEVENT StartEvent;       // 1 elements, 0x18 bytes (sizeof)  
/*0x058*/     struct _KEVENT FinishedEvent;    // 1 elements, 0x18 bytes (sizeof)  
/*0x070*/     struct _KEVENT MountLock;        // 1 elements, 0x18 bytes (sizeof)  
/*0x088*/     struct _UNICODE_STRING FilePath; // 3 elements, 0x10 bytes (sizeof)  
          }HIVE_LIST_ENTRY, *PHIVE_LIST_ENTRY;                                     
                                                                                   
          typedef struct __2019100516120901258D749E1E747FD39_Locations_RecoverableLocations // 3 elements, 0xC bytes (sizeof) 
          {                                                                                                                   
/*0x000*/     enum _CM_LOAD_FAILURE_TYPE Failure;                                                                             
/*0x004*/     LONG32       Status;                                                                                            
/*0x008*/     ULONG32      Point;                                                                                             
          }_2019100516120901258D749E1E747FD39_Locations_RecoverableLocations, *P_2019100516120901258D749E1E747FD39_Locations_RecoverableLocations;                                  
                                                                                                                              
          typedef struct _HIVE_LOAD_FAILURE                                                                      // 13 elements, 0x160 bytes (sizeof) 
          {                                                                                                                                           
/*0x000*/     struct _HHIVE* Hive;                                                                                                                    
/*0x008*/     UINT16       Index;                                                                                                                     
/*0x00A*/     UINT16       RecoverableIndex;                                                                                                          
/*0x00C*/     struct __2019100516120901258D749E1E747FD39_Locations_RecoverableLocations Locations[8];                                                 
/*0x06C*/     struct __2019100516120901258D749E1E747FD39_Locations_RecoverableLocations RecoverableLocations[8];                                      
/*0x0CC*/     UINT8        _PADDING0_[0x4];                                                                                                           
              struct                                                                                             // 3 elements, 0x18 bytes (sizeof)   
              {                                                                                                                                       
/*0x0D0*/         ULONG32      Action;                                                                                                                
/*0x0D4*/         UINT8        _PADDING1_[0x4];                                                                                                       
/*0x0D8*/         VOID*        Handle;                                                                                                                
/*0x0E0*/         LONG32       Status;                                                                                                                
/*0x0E4*/         UINT8        _PADDING2_[0x4];                                                                                                       
              }RegistryIO;                                                                                                                            
              struct                                                                                             // 1 elements, 0x8 bytes (sizeof)    
              {                                                                                                                                       
/*0x0E8*/         VOID*        CheckStack;                                                                                                            
              }CheckRegistry2;                                                                                                                        
              struct                                                                                             // 4 elements, 0x20 bytes (sizeof)   
              {                                                                                                                                       
/*0x0F0*/         ULONG32      Cell;                                                                                                                  
/*0x0F4*/         UINT8        _PADDING1_[0x4];                                                                                                       
/*0x0F8*/         struct _CELL_DATA* CellPoint;                                                                                                       
/*0x100*/         VOID*        RootPoint;                                                                                                             
/*0x108*/         ULONG32      Index;                                                                                                                 
/*0x10C*/         UINT8        _PADDING2_[0x4];                                                                                                       
              }CheckKey;                                                                                                                              
              struct                                                                                             // 4 elements, 0x18 bytes (sizeof)   
              {                                                                                                                                       
/*0x110*/         struct _CELL_DATA* List;                                                                                                            
/*0x118*/         ULONG32      Index;                                                                                                                 
/*0x11C*/         ULONG32      Cell;                                                                                                                  
/*0x120*/         struct _CELL_DATA* CellPoint;                                                                                                       
              }CheckValueList;                                                                                                                        
              struct                                                                                             // 3 elements, 0x10 bytes (sizeof)   
              {                                                                                                                                       
/*0x128*/         ULONG32      Space;                                                                                                                 
/*0x12C*/         ULONG32      MapPoint;                                                                                                              
/*0x130*/         struct _HBIN* BinPoint;                                                                                                             
              }CheckHive;                                                                                                                             
              struct                                                                                             // 3 elements, 0x10 bytes (sizeof)   
              {                                                                                                                                       
/*0x138*/         ULONG32      Space;                                                                                                                 
/*0x13C*/         ULONG32      MapPoint;                                                                                                              
/*0x140*/         struct _HBIN* BinPoint;                                                                                                             
              }CheckHive1;                                                                                                                            
              struct                                                                                             // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                                                                       
/*0x148*/         struct _HBIN* Bin;                                                                                                                  
/*0x150*/         struct _HCELL* CellPoint;                                                                                                           
              }CheckBin;                                                                                                                              
              struct                                                                                             // 1 elements, 0x4 bytes (sizeof)    
              {                                                                                                                                       
/*0x158*/         ULONG32      FileOffset;                                                                                                            
              }RecoverData;                                                                                                                           
          }HIVE_LOAD_FAILURE, *PHIVE_LOAD_FAILURE;                                                                                                    
                                                                                                                                                      
          typedef struct _HIVE_WAIT_PACKET    // 3 elements, 0x28 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _KEVENT WakeEvent;       // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     LONG32       Status;                                               
/*0x01C*/     UINT8        _PADDING0_[0x4];                                      
/*0x020*/     struct _HIVE_WAIT_PACKET* Next;                                    
          }HIVE_WAIT_PACKET, *PHIVE_WAIT_PACKET;                                   
                                                                                 
          typedef struct _HMAP_DIRECTORY           // 1 elements, 0x2000 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _HMAP_TABLE* Directory[1024];                                      
          }HMAP_DIRECTORY, *PHMAP_DIRECTORY;                                            
                                                                                        
          typedef struct _HMAP_ENTRY            // 3 elements, 0x18 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       BlockOffset;                                            
/*0x008*/     UINT64       PermanentBinAddress;                                    
/*0x010*/     ULONG32      MemAlloc;                                               
/*0x014*/     UINT8        _PADDING0_[0x4];                                        
          }HMAP_ENTRY, *PHMAP_ENTRY;                                               
                                                                                   
          typedef struct _HMAP_TABLE         // 1 elements, 0x3000 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _HMAP_ENTRY Table[512];                                      
          }HMAP_TABLE, *PHMAP_TABLE;                                              
                                                                                  
          typedef struct _HV_GET_BIN_CONTEXT         // 1 elements, 0x2 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT16       OutstandingReference : 1; // 0 BitPosition                  
          }HV_GET_BIN_CONTEXT, *PHV_GET_BIN_CONTEXT;                                   
                                                                                       
          typedef struct _HV_GET_CELL_CONTEXT        // 2 elements, 0x8 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      Cell;                                                       
/*0x004*/     struct _HV_GET_BIN_CONTEXT BinContext; // 1 elements, 0x2 bytes (sizeof) 
/*0x006*/     UINT8        _PADDING0_[0x2];                                            
          }HV_GET_CELL_CONTEXT, *PHV_GET_CELL_CONTEXT;                                  
                                                                                       
          typedef union _HV_PARTITION_PRIVILEGE_MASK                                  // 40 elements, 0x8 bytes (sizeof) 
          {                                                                                                              
/*0x000*/     UINT64       AsUINT64;                                                                                     
              struct                                                                  // 39 elements, 0x8 bytes (sizeof) 
              {                                                                                                          
/*0x000*/         UINT64       AccessVpRunTimeReg : 1;                                // 0 BitPosition                   
/*0x000*/         UINT64       AccessPartitionReferenceCounter : 1;                   // 1 BitPosition                   
/*0x000*/         UINT64       AccessSynicRegs : 1;                                   // 2 BitPosition                   
/*0x000*/         UINT64       AccessSyntheticTimerRegs : 1;                          // 3 BitPosition                   
/*0x000*/         UINT64       AccessIntrCtrlRegs : 1;                                // 4 BitPosition                   
/*0x000*/         UINT64       AccessHypercallMsrs : 1;                               // 5 BitPosition                   
/*0x000*/         UINT64       AccessVpIndex : 1;                                     // 6 BitPosition                   
/*0x000*/         UINT64       AccessResetReg : 1;                                    // 7 BitPosition                   
/*0x000*/         UINT64       AccessStatsReg : 1;                                    // 8 BitPosition                   
/*0x000*/         UINT64       AccessPartitionReferenceTsc : 1;                       // 9 BitPosition                   
/*0x000*/         UINT64       AccessGuestIdleReg : 1;                                // 10 BitPosition                  
/*0x000*/         UINT64       AccessFrequencyRegs : 1;                               // 11 BitPosition                  
/*0x000*/         UINT64       AccessDebugRegs : 1;                                   // 12 BitPosition                  
/*0x000*/         UINT64       AccessReenlightenmentControls : 1;                     // 13 BitPosition                  
/*0x000*/         UINT64       AccessRootSchedulerReg : 1;                            // 14 BitPosition                  
/*0x000*/         UINT64       Reserved1 : 17;                                        // 15 BitPosition                  
/*0x000*/         UINT64       CreatePartitions : 1;                                  // 32 BitPosition                  
/*0x000*/         UINT64       AccessPartitionId : 1;                                 // 33 BitPosition                  
/*0x000*/         UINT64       AccessMemoryPool : 1;                                  // 34 BitPosition                  
/*0x000*/         UINT64       AdjustMessageBuffers : 1;                              // 35 BitPosition                  
/*0x000*/         UINT64       PostMessages : 1;                                      // 36 BitPosition                  
/*0x000*/         UINT64       SignalEvents : 1;                                      // 37 BitPosition                  
/*0x000*/         UINT64       CreatePort : 1;                                        // 38 BitPosition                  
/*0x000*/         UINT64       ConnectPort : 1;                                       // 39 BitPosition                  
/*0x000*/         UINT64       AccessStats : 1;                                       // 40 BitPosition                  
/*0x000*/         UINT64       Reserved2 : 2;                                         // 41 BitPosition                  
/*0x000*/         UINT64       Debugging : 1;                                         // 43 BitPosition                  
/*0x000*/         UINT64       CpuManagement : 1;                                     // 44 BitPosition                  
/*0x000*/         UINT64       ConfigureProfiler : 1;                                 // 45 BitPosition                  
/*0x000*/         UINT64       AccessVpExitTracing : 1;                               // 46 BitPosition                  
/*0x000*/         UINT64       EnableExtendedGvaRangesForFlushVirtualAddressList : 1; // 47 BitPosition                  
/*0x000*/         UINT64       AccessVsm : 1;                                         // 48 BitPosition                  
/*0x000*/         UINT64       AccessVpRegisters : 1;                                 // 49 BitPosition                  
/*0x000*/         UINT64       UnusedBit : 1;                                         // 50 BitPosition                  
/*0x000*/         UINT64       FastHypercallOutput : 1;                               // 51 BitPosition                  
/*0x000*/         UINT64       EnableExtendedHypercalls : 1;                          // 52 BitPosition                  
/*0x000*/         UINT64       StartVirtualProcessor : 1;                             // 53 BitPosition                  
/*0x000*/         UINT64       Isolation : 1;                                         // 54 BitPosition                  
/*0x000*/         UINT64       Reserved3 : 9;                                         // 55 BitPosition                  
              };                                                                                                         
          }HV_PARTITION_PRIVILEGE_MASK, *PHV_PARTITION_PRIVILEGE_MASK;                                                   
                                                                                                                         
          typedef struct _HV_X64_HYPERVISOR_FEATURES                                     // 32 elements, 0x10 bytes (sizeof) 
          {                                                                                                                  
/*0x000*/     union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;                    // 40 elements, 0x8 bytes (sizeof)  
              struct                                                                     // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                                              
/*0x008*/         UINT32       MaxSupportedCState : 4;                                   // 0 BitPosition                    
/*0x008*/         UINT32       HpetNeededForC3PowerState_Deprecated : 1;                 // 4 BitPosition                    
/*0x008*/         UINT32       Reserved : 27;                                            // 5 BitPosition                    
              };                                                                                                             
              struct                                                                     // 28 elements, 0x4 bytes (sizeof)  
              {                                                                                                              
/*0x00C*/         UINT32       MwaitAvailable_Deprecated : 1;                            // 0 BitPosition                    
/*0x00C*/         UINT32       GuestDebuggingAvailable : 1;                              // 1 BitPosition                    
/*0x00C*/         UINT32       PerformanceMonitorsAvailable : 1;                         // 2 BitPosition                    
/*0x00C*/         UINT32       CpuDynamicPartitioningAvailable : 1;                      // 3 BitPosition                    
/*0x00C*/         UINT32       XmmRegistersForFastHypercallAvailable : 1;                // 4 BitPosition                    
/*0x00C*/         UINT32       GuestIdleAvailable : 1;                                   // 5 BitPosition                    
/*0x00C*/         UINT32       HypervisorSleepStateSupportAvailable : 1;                 // 6 BitPosition                    
/*0x00C*/         UINT32       NumaDistanceQueryAvailable : 1;                           // 7 BitPosition                    
/*0x00C*/         UINT32       FrequencyRegsAvailable : 1;                               // 8 BitPosition                    
/*0x00C*/         UINT32       SyntheticMachineCheckAvailable : 1;                       // 9 BitPosition                    
/*0x00C*/         UINT32       GuestCrashRegsAvailable : 1;                              // 10 BitPosition                   
/*0x00C*/         UINT32       DebugRegsAvailable : 1;                                   // 11 BitPosition                   
/*0x00C*/         UINT32       Npiep1Available : 1;                                      // 12 BitPosition                   
/*0x00C*/         UINT32       DisableHypervisorAvailable : 1;                           // 13 BitPosition                   
/*0x00C*/         UINT32       ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1; // 14 BitPosition                   
/*0x00C*/         UINT32       FastHypercallOutputAvailable : 1;                         // 15 BitPosition                   
/*0x00C*/         UINT32       SvmFeaturesAvailable : 1;                                 // 16 BitPosition                   
/*0x00C*/         UINT32       SintPollingModeAvailable : 1;                             // 17 BitPosition                   
/*0x00C*/         UINT32       HypercallMsrLockAvailable : 1;                            // 18 BitPosition                   
/*0x00C*/         UINT32       DirectSyntheticTimers : 1;                                // 19 BitPosition                   
/*0x00C*/         UINT32       RegisterPatAvailable : 1;                                 // 20 BitPosition                   
/*0x00C*/         UINT32       RegisterBndcfgsAvailable : 1;                             // 21 BitPosition                   
/*0x00C*/         UINT32       WatchdogTimerAvailable : 1;                               // 22 BitPosition                   
/*0x00C*/         UINT32       SyntheticTimeUnhaltedTimerAvailable : 1;                  // 23 BitPosition                   
/*0x00C*/         UINT32       DeviceDomainsAvailable : 1;                               // 24 BitPosition                   
/*0x00C*/         UINT32       S1DeviceDomainsAvailable : 1;                             // 25 BitPosition                   
/*0x00C*/         UINT32       LbrAvailable : 1;                                         // 26 BitPosition                   
/*0x00C*/         UINT32       Reserved1 : 5;                                            // 27 BitPosition                   
              };                                                                                                             
          }HV_X64_HYPERVISOR_FEATURES, *PHV_X64_HYPERVISOR_FEATURES;                                                         
                                                                                                                             
          typedef struct _I386_LOADER_BLOCK // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     VOID*        CommonDataArea;                                     
/*0x008*/     ULONG32      MachineType;                                        
/*0x00C*/     ULONG32      VirtualBias;                                        
          }I386_LOADER_BLOCK, *PI386_LOADER_BLOCK;                                   
                                                                               
          typedef struct _IMAGE_DATA_DIRECTORY // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      VirtualAddress;                                       
/*0x004*/     ULONG32      Size;                                                 
          }IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;                                  
                                                                                 
          typedef struct _IMAGE_DEBUG_DIRECTORY // 8 elements, 0x1C bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Characteristics;                                        
/*0x004*/     ULONG32      TimeDateStamp;                                          
/*0x008*/     UINT16       MajorVersion;                                           
/*0x00A*/     UINT16       MinorVersion;                                           
/*0x00C*/     ULONG32      Type;                                                   
/*0x010*/     ULONG32      SizeOfData;                                             
/*0x014*/     ULONG32      AddressOfRawData;                                       
/*0x018*/     ULONG32      PointerToRawData;                                       
          }IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;                                   
                                                                                   
          typedef struct _IMAGE_DOS_HEADER // 19 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       e_magic;                                            
/*0x002*/     UINT16       e_cblp;                                             
/*0x004*/     UINT16       e_cp;                                               
/*0x006*/     UINT16       e_crlc;                                             
/*0x008*/     UINT16       e_cparhdr;                                          
/*0x00A*/     UINT16       e_minalloc;                                         
/*0x00C*/     UINT16       e_maxalloc;                                         
/*0x00E*/     UINT16       e_ss;                                               
/*0x010*/     UINT16       e_sp;                                               
/*0x012*/     UINT16       e_csum;                                             
/*0x014*/     UINT16       e_ip;                                               
/*0x016*/     UINT16       e_cs;                                               
/*0x018*/     UINT16       e_lfarlc;                                           
/*0x01A*/     UINT16       e_ovno;                                             
/*0x01C*/     UINT16       e_res[4];                                           
/*0x024*/     UINT16       e_oemid;                                            
/*0x026*/     UINT16       e_oeminfo;                                          
/*0x028*/     UINT16       e_res2[10];                                         
/*0x03C*/     LONG32       e_lfanew;                                           
          }IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;                                    
                                                                               
          typedef struct _IMAGE_FILE_HEADER      // 7 elements, 0x14 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Machine;                                                 
/*0x002*/     UINT16       NumberOfSections;                                        
/*0x004*/     ULONG32      TimeDateStamp;                                           
/*0x008*/     ULONG32      PointerToSymbolTable;                                    
/*0x00C*/     ULONG32      NumberOfSymbols;                                         
/*0x010*/     UINT16       SizeOfOptionalHeader;                                    
/*0x012*/     UINT16       Characteristics;                                         
          }IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;                                   
                                                                                    
          typedef struct _IMAGE_OPTIONAL_HEADER64             // 30 elements, 0xF0 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT16       Magic;                                                                 
/*0x002*/     UINT8        MajorLinkerVersion;                                                    
/*0x003*/     UINT8        MinorLinkerVersion;                                                    
/*0x004*/     ULONG32      SizeOfCode;                                                            
/*0x008*/     ULONG32      SizeOfInitializedData;                                                 
/*0x00C*/     ULONG32      SizeOfUninitializedData;                                               
/*0x010*/     ULONG32      AddressOfEntryPoint;                                                   
/*0x014*/     ULONG32      BaseOfCode;                                                            
/*0x018*/     UINT64       ImageBase;                                                             
/*0x020*/     ULONG32      SectionAlignment;                                                      
/*0x024*/     ULONG32      FileAlignment;                                                         
/*0x028*/     UINT16       MajorOperatingSystemVersion;                                           
/*0x02A*/     UINT16       MinorOperatingSystemVersion;                                           
/*0x02C*/     UINT16       MajorImageVersion;                                                     
/*0x02E*/     UINT16       MinorImageVersion;                                                     
/*0x030*/     UINT16       MajorSubsystemVersion;                                                 
/*0x032*/     UINT16       MinorSubsystemVersion;                                                 
/*0x034*/     ULONG32      Win32VersionValue;                                                     
/*0x038*/     ULONG32      SizeOfImage;                                                           
/*0x03C*/     ULONG32      SizeOfHeaders;                                                         
/*0x040*/     ULONG32      CheckSum;                                                              
/*0x044*/     UINT16       Subsystem;                                                             
/*0x046*/     UINT16       DllCharacteristics;                                                    
/*0x048*/     UINT64       SizeOfStackReserve;                                                    
/*0x050*/     UINT64       SizeOfStackCommit;                                                     
/*0x058*/     UINT64       SizeOfHeapReserve;                                                     
/*0x060*/     UINT64       SizeOfHeapCommit;                                                      
/*0x068*/     ULONG32      LoaderFlags;                                                           
/*0x06C*/     ULONG32      NumberOfRvaAndSizes;                                                   
/*0x070*/     struct _IMAGE_DATA_DIRECTORY DataDirectory[16];                                     
          }IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;                                    
                                                                                                  
          typedef struct _IMAGE_NT_HEADERS64                  // 3 elements, 0x108 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Signature;                                                             
/*0x004*/     struct _IMAGE_FILE_HEADER FileHeader;           // 7 elements, 0x14 bytes (sizeof)  
/*0x018*/     struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader; // 30 elements, 0xF0 bytes (sizeof) 
          }IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;                                              
                                                                                                  
          typedef struct _IMAGE_ROM_OPTIONAL_HEADER // 13 elements, 0x38 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT16       Magic;                                                       
/*0x002*/     UINT8        MajorLinkerVersion;                                          
/*0x003*/     UINT8        MinorLinkerVersion;                                          
/*0x004*/     ULONG32      SizeOfCode;                                                  
/*0x008*/     ULONG32      SizeOfInitializedData;                                       
/*0x00C*/     ULONG32      SizeOfUninitializedData;                                     
/*0x010*/     ULONG32      AddressOfEntryPoint;                                         
/*0x014*/     ULONG32      BaseOfCode;                                                  
/*0x018*/     ULONG32      BaseOfData;                                                  
/*0x01C*/     ULONG32      BaseOfBss;                                                   
/*0x020*/     ULONG32      GprMask;                                                     
/*0x024*/     ULONG32      CprMask[4];                                                  
/*0x034*/     ULONG32      GpValue;                                                     
          }IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;                                    
                                                                                        
          typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY // 4 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      BeginAddress;                                                 
/*0x004*/     ULONG32      EndAddress;                                                   
              union                                    // 2 elements, 0x4 bytes (sizeof) 
              {                                                                          
/*0x008*/         ULONG32      UnwindInfoAddress;                                        
/*0x008*/         ULONG32      UnwindData;                                               
              };                                                                         
          }IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY;                                  
                                                                                         
          typedef struct _IMAGE_SECTION_HEADER   // 10 elements, 0x28 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Name[8];                                                  
              union                              // 2 elements, 0x4 bytes (sizeof)   
              {                                                                      
/*0x008*/         ULONG32      PhysicalAddress;                                      
/*0x008*/         ULONG32      VirtualSize;                                          
              }Misc;                                                                 
/*0x00C*/     ULONG32      VirtualAddress;                                           
/*0x010*/     ULONG32      SizeOfRawData;                                            
/*0x014*/     ULONG32      PointerToRawData;                                         
/*0x018*/     ULONG32      PointerToRelocations;                                     
/*0x01C*/     ULONG32      PointerToLinenumbers;                                     
/*0x020*/     UINT16       NumberOfRelocations;                                      
/*0x022*/     UINT16       NumberOfLinenumbers;                                      
/*0x024*/     ULONG32      Characteristics;                                          
          }IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;                                    
                                                                                     
          typedef struct _IMAGE_SECURITY_CONTEXT             // 5 elements, 0x8 bytes (sizeof) 
          {                                                                                    
              union                                          // 3 elements, 0x8 bytes (sizeof) 
              {                                                                                
/*0x000*/         VOID*        PageHashes;                                                     
/*0x000*/         UINT64       Value;                                                          
                  struct                                     // 3 elements, 0x8 bytes (sizeof) 
                  {                                                                            
/*0x000*/             UINT64       SecurityBeingCreated : 2; // 0 BitPosition                  
/*0x000*/             UINT64       SecurityMandatory : 1;    // 2 BitPosition                  
/*0x000*/             UINT64       PageHashPointer : 61;     // 3 BitPosition                  
                  };                                                                           
              };                                                                               
          }IMAGE_SECURITY_CONTEXT, *PIMAGE_SECURITY_CONTEXT;                                   
                                                                                               
          typedef struct _INPUT_MAPPING_ELEMENT // 1 elements, 0x4 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      InputMappingId;                                        
          }INPUT_MAPPING_ELEMENT, *PINPUT_MAPPING_ELEMENT;                                  
                                                                                  
          typedef struct _INTERFACE                                                                                                                                                                                                                                                                                                   // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     UINT16       Size;                                                                                                                                                                                                                                                                                                                                         
/*0x002*/     UINT16       Version;                                                                                                                                                                                                                                                                                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                              
/*0x008*/     VOID*        Context;                                                                                                                                                                                                                                                                                                                                      
/*0x010*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceReference;                                      
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceDereference;                                    
          }INTERFACE, *PINTERFACE;                                                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _INTERRUPT_REMAPPING_INFO     // 4 elements, 0x10 bytes (sizeof) 
          {                                                                               
              struct                                   // 3 elements, 0x4 bytes (sizeof)  
              {                                                                           
/*0x000*/         ULONG32      IrtIndex : 30;          // 0 BitPosition                   
/*0x000*/         ULONG32      FlagHalInternal : 1;    // 30 BitPosition                  
/*0x000*/         ULONG32      FlagTranslated : 1;     // 31 BitPosition                  
              };                                                                          
              union                                    // 1 elements, 0xC bytes (sizeof)  
              {                                                                           
                  struct                               // 4 elements, 0xC bytes (sizeof)  
                  {                                                                       
/*0x004*/             ULONG32      MessageAddressHigh;                                    
/*0x008*/             ULONG32      MessageAddressLow;                                     
/*0x00C*/             UINT16       MessageData;                                           
/*0x00E*/             UINT16       Reserved;                                              
                  }Msi;                                                                   
              }u;                                                                         
          }INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO;                                   
                                                                                          
          typedef struct _INTERRUPT_HT_INTR_INFO             // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                    
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 9 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x000*/             ULONG32      Mask : 1;                 // 0 BitPosition                  
/*0x000*/             ULONG32      Polarity : 1;             // 1 BitPosition                  
/*0x000*/             ULONG32      MessageType : 3;          // 2 BitPosition                  
/*0x000*/             ULONG32      RequestEOI : 1;           // 5 BitPosition                  
/*0x000*/             ULONG32      DestinationMode : 1;      // 6 BitPosition                  
/*0x000*/             ULONG32      MessageType3 : 1;         // 7 BitPosition                  
/*0x000*/             ULONG32      Destination : 8;          // 8 BitPosition                  
/*0x000*/             ULONG32      Vector : 8;               // 16 BitPosition                 
/*0x000*/             ULONG32      ExtendedAddress : 8;      // 24 BitPosition                 
                  }bits;                                                                       
/*0x000*/         ULONG32      AsULONG;                                                        
              }LowPart;                                                                        
              union                                          // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                
                  struct                                     // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x004*/             ULONG32      ExtendedDestination : 24; // 0 BitPosition                  
/*0x004*/             ULONG32      Reserved : 6;             // 24 BitPosition                 
/*0x004*/             ULONG32      PassPW : 1;               // 30 BitPosition                 
/*0x004*/             ULONG32      WaitingForEOI : 1;        // 31 BitPosition                 
                  }bits;                                                                       
/*0x004*/         ULONG32      AsULONG;                                                        
              }HighPart;                                                                       
          }INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO;                                   
                                                                                               
          typedef struct _INTERRUPT_VECTOR_DATA                        // 13 elements, 0x58 bytes (sizeof) 
          {                                                                                                
/*0x000*/     enum _INTERRUPT_CONNECTION_TYPE Type;                                                        
/*0x004*/     ULONG32      Vector;                                                                         
/*0x008*/     UINT8        Irql;                                                                           
/*0x009*/     UINT8        _PADDING0_[0x3];                                                                
/*0x00C*/     enum _KINTERRUPT_POLARITY Polarity;                                                          
/*0x010*/     enum _KINTERRUPT_MODE Mode;                                                                  
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                
/*0x018*/     struct _GROUP_AFFINITY TargetProcessors;                 // 3 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;           // 4 elements, 0x10 bytes (sizeof)  
              struct                                                   // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                            
/*0x038*/         ULONG32      Gsiv;                                                                       
                  struct                                               // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                        
/*0x03C*/             ULONG32      WakeInterrupt : 1;                  // 0 BitPosition                    
/*0x03C*/             ULONG32      ReservedFlags : 31;                 // 1 BitPosition                    
                  };                                                                                       
              }ControllerInput;                                                                            
/*0x040*/     UINT64       HvDeviceId;                                                                     
              union                                                    // 4 elements, 0x10 bytes (sizeof)  
              {                                                                                            
                  struct                                               // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                        
/*0x048*/             union _LARGE_INTEGER Address;                    // 4 elements, 0x8 bytes (sizeof)   
/*0x050*/             ULONG32      DataPayload;                                                            
/*0x054*/             UINT8        _PADDING2_[0x4];                                                        
                  }XapicMessage;                                                                           
                  struct                                               // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                        
/*0x048*/             struct _INTERRUPT_HT_INTR_INFO IntrInfo;         // 2 elements, 0x8 bytes (sizeof)   
                  }Hypertransport;                                                                         
                  struct                                               // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                        
/*0x048*/             union _LARGE_INTEGER Address;                    // 4 elements, 0x8 bytes (sizeof)   
/*0x050*/             ULONG32      DataPayload;                                                            
/*0x054*/             UINT8        _PADDING2_[0x4];                                                        
                  }GenericMessage;                                                                         
                  struct                                               // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                        
/*0x048*/             enum _HAL_APIC_DESTINATION_MODE DestinationMode;                                     
                  }MessageRequest;                                                                         
              };                                                                                           
          }INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA;                                                 
                                                                                                           
          typedef struct _INTERRUPT_CONNECTION_DATA     // 2 elements, 0x60 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Count;                                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                                
/*0x008*/     struct _INTERRUPT_VECTOR_DATA Vectors[1];                                    
          }INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA;                                   
                                                                                           
          typedef struct _INVERTED_FUNCTION_TABLE_ENTRY                // 5 elements, 0x18 bytes (sizeof) 
          {                                                                                               
              union                                                    // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                           
/*0x000*/         struct _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable;                                    
/*0x000*/         struct _DYNAMIC_FUNCTION_TABLE* DynamicTable;                                           
              };                                                                                          
/*0x008*/     VOID*        ImageBase;                                                                     
/*0x010*/     ULONG32      SizeOfImage;                                                                   
/*0x014*/     ULONG32      SizeOfTable;                                                                   
          }INVERTED_FUNCTION_TABLE_ENTRY, *PINVERTED_FUNCTION_TABLE_ENTRY;                                   
                                                                                                          
          typedef struct _INVERTED_FUNCTION_TABLE                    // 5 elements, 0x1810 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      CurrentSize;                                                                   
/*0x004*/     ULONG32      MaximumSize;                                                                   
/*0x008*/     ULONG32      Epoch;                                                                         
/*0x00C*/     UINT8        Overflow;                                                                      
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                               
/*0x010*/     struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[256];                                      
          }INVERTED_FUNCTION_TABLE, *PINVERTED_FUNCTION_TABLE;                                            
                                                                                                          
          typedef union _INVPCID_DESCRIPTOR           // 4 elements, 0x10 bytes (sizeof) 
          {                                                                              
              struct                                  // 4 elements, 0x10 bytes (sizeof) 
              {                                                                          
                  union                               // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                      
                      struct                          // 2 elements, 0x8 bytes (sizeof)  
                      {                                                                  
/*0x000*/                 UINT64       Pcid : 12;     // 0 BitPosition                   
/*0x000*/                 UINT64       Reserved : 52; // 12 BitPosition                  
                      };                                                                 
/*0x000*/             UINT64       EntirePcid;                                           
                  };                                                                     
/*0x008*/         UINT64       Virtual;                                                  
              }IndividualAddress;                                                        
              struct                                  // 4 elements, 0x10 bytes (sizeof) 
              {                                                                          
                  union                               // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                      
                      struct                          // 2 elements, 0x8 bytes (sizeof)  
                      {                                                                  
/*0x000*/                 UINT64       Pcid : 12;     // 0 BitPosition                   
/*0x000*/                 UINT64       Reserved : 52; // 12 BitPosition                  
                      };                                                                 
/*0x000*/             UINT64       EntirePcid;                                           
                  };                                                                     
/*0x008*/         UINT64       Reserved2;                                                
              }SingleContext;                                                            
              struct                                  // 1 elements, 0x10 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       Reserved[2];                                              
              }AllContextAndGlobals;                                                     
              struct                                  // 1 elements, 0x10 bytes (sizeof) 
              {                                                                          
/*0x000*/         UINT64       Reserved[2];                                              
              }AllContext;                                                               
          }INVPCID_DESCRIPTOR, *PINVPCID_DESCRIPTOR;                                     
                                                                                         
          typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR // 9 elements, 0x48 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Version;                                                           
/*0x004*/     ULONG32      Size;                                                              
/*0x008*/     ULONG32      CryptoIndex;                                                       
/*0x00C*/     ULONG32      AlgorithmId;                                                       
/*0x010*/     ULONG32      DataUnitSize;                                                      
/*0x014*/     ULONG32      KeySize;                                                           
/*0x018*/     UINT8        KeyHash[32];                                                       
/*0x038*/     VOID*        KeyVirtualAddress;                                                 
/*0x040*/     union _LARGE_INTEGER KeyPhysicalAddress;     // 4 elements, 0x8 bytes (sizeof)  
          }IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR, *PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;                                   
                                                                                              
          typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS                 // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                               
/*0x000*/     UINT64       Tweak;                                                                         
/*0x008*/     struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR* KeyDescriptor;                                    
          }IO_ADAPTER_CRYPTO_PARAMETERS, *PIO_ADAPTER_CRYPTO_PARAMETERS;                                   
                                                                                                          
          typedef struct _IO_CLIENT_EXTENSION             // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _IO_CLIENT_EXTENSION* NextExtension;                                    
/*0x008*/     VOID*        ClientIdentificationAddress;                                      
          }IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION;                                       
                                                                                             
          typedef struct _IO_COMPLETION_CONTEXT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     VOID*        Port;                                                   
/*0x008*/     VOID*        Key;                                                    
          }IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;                                   
                                                                                   
          typedef struct _IO_DRIVER_CREATE_CONTEXT        // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     INT16        Size;                                                             
/*0x002*/     UINT8        _PADDING0_[0x6];                                                  
/*0x008*/     struct _ECP_LIST* ExtraCreateParameter;                                        
/*0x010*/     VOID*        DeviceObjectHint;                                                 
/*0x018*/     struct _TXN_PARAMETER_BLOCK* TxnParameters;                                    
/*0x020*/     struct _EJOB* SiloContext;                                                     
          }IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;                                   
                                                                                             
          typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER                    // 3 elements, 0x10 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT16       Validation;                                                                         
/*0x002*/     UINT16       Flags;                                                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                    
/*0x008*/     FUNCT_00EF_3270_TrackedOffsetCallback* TrackedOffsetCallback;                                    
          }IO_IRP_EXT_TRACK_OFFSET_HEADER, *PIO_IRP_EXT_TRACK_OFFSET_HEADER;                                   
                                                                                                               
          typedef struct _IO_MINI_COMPLETION_PACKET_USER              // 9 elements, 0x50 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _LIST_ENTRY ListEntry;                           // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      PacketType;                                                                   
/*0x014*/     UINT8        _PADDING0_[0x4];                                                              
/*0x018*/     VOID*        KeyContext;                                                                   
/*0x020*/     VOID*        ApcContext;                                                                   
/*0x028*/     LONG32       IoStatus;                                                                     
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                              
/*0x030*/     UINT64       IoStatusInformation;                                                          
/*0x038*/     FUNCT_00EF_1047_MiniPacketCallback* MiniPacketCallback;                                    
/*0x040*/     VOID*        Context;                                                                      
/*0x048*/     UINT8        Allocated;                                                                    
/*0x049*/     UINT8        _PADDING2_[0x7];                                                              
          }IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER;                                   
                                                                                                         
          typedef struct _IO_PRIORITY_INFO       // 4 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Size;                                                    
/*0x004*/     ULONG32      ThreadPriority;                                          
/*0x008*/     ULONG32      PagePriority;                                            
/*0x00C*/     enum _IO_PRIORITY_HINT IoPriority;                                    
          }IO_PRIORITY_INFO, *PIO_PRIORITY_INFO;                                    
                                                                                    
          typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK // 4 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT8        Removed;                                                      
/*0x001*/     UINT8        Reserved[3];                                                  
/*0x004*/     LONG32       IoCount;                                                      
/*0x008*/     struct _KEVENT RemoveEvent;             // 1 elements, 0x18 bytes (sizeof) 
          }IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK;                                   
                                                                                         
          typedef struct _IO_REMOVE_LOCK                  // 1 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _IO_REMOVE_LOCK_COMMON_BLOCK Common; // 4 elements, 0x20 bytes (sizeof) 
          }IO_REMOVE_LOCK, *PIO_REMOVE_LOCK;                                                 
                                                                                             
          typedef struct _IO_RESOURCE_DESCRIPTOR           // 7 elements, 0x20 bytes (sizeof)  
          {                                                                                    
/*0x000*/     UINT8        Option;                                                             
/*0x001*/     UINT8        Type;                                                               
/*0x002*/     UINT8        ShareDisposition;                                                   
/*0x003*/     UINT8        Spare1;                                                             
/*0x004*/     UINT16       Flags;                                                              
/*0x006*/     UINT16       Spare2;                                                             
              union                                        // 13 elements, 0x18 bytes (sizeof) 
              {                                                                                
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Port;                                                                       
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory;                                                                     
                  struct                                   // 6 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      MinimumVector;                                              
/*0x00C*/             ULONG32      MaximumVector;                                              
/*0x010*/             UINT16       AffinityPolicy;                                             
/*0x012*/             UINT16       Group;                                                      
/*0x014*/             enum _IRQ_PRIORITY PriorityPolicy;                                       
/*0x018*/             UINT64       TargetedProcessors;                                         
                  }Interrupt;                                                                  
                  struct                                   // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      MinimumChannel;                                             
/*0x00C*/             ULONG32      MaximumChannel;                                             
                  }Dma;                                                                        
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      RequestLine;                                                
/*0x00C*/             ULONG32      Reserved;                                                   
/*0x010*/             ULONG32      Channel;                                                    
/*0x014*/             ULONG32      TransferWidth;                                              
                  }DmaV3;                                                                      
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      Alignment;                                                  
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Generic;                                                                    
                  struct                                   // 1 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Data[3];                                                    
                  }DevicePrivate;                                                              
                  struct                                   // 4 elements, 0x10 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length;                                                     
/*0x00C*/             ULONG32      MinBusNumber;                                               
/*0x010*/             ULONG32      MaxBusNumber;                                               
/*0x014*/             ULONG32      Reserved;                                                   
                  }BusNumber;                                                                  
                  struct                                   // 3 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             ULONG32      Priority;                                                   
/*0x00C*/             ULONG32      Reserved1;                                                  
/*0x010*/             ULONG32      Reserved2;                                                  
                  }ConfigData;                                                                 
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length40;                                                   
/*0x00C*/             ULONG32      Alignment40;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory40;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length48;                                                   
/*0x00C*/             ULONG32      Alignment48;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory48;                                                                   
                  struct                                   // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                            
/*0x008*/             ULONG32      Length64;                                                   
/*0x00C*/             ULONG32      Alignment64;                                                
/*0x010*/             union _LARGE_INTEGER MinimumAddress; // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _LARGE_INTEGER MaximumAddress; // 4 elements, 0x8 bytes (sizeof)   
                  }Memory64;                                                                   
                  struct                                   // 6 elements, 0xC bytes (sizeof)   
                  {                                                                            
/*0x008*/             UINT8        Class;                                                      
/*0x009*/             UINT8        Type;                                                       
/*0x00A*/             UINT8        Reserved1;                                                  
/*0x00B*/             UINT8        Reserved2;                                                  
/*0x00C*/             ULONG32      IdLowPart;                                                  
/*0x010*/             ULONG32      IdHighPart;                                                 
                  }Connection;                                                                 
              }u;                                                                              
          }IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;                                    
                                                                                               
          typedef struct _IO_RESOURCE_LIST                   // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Version;                                                             
/*0x002*/     UINT16       Revision;                                                            
/*0x004*/     ULONG32      Count;                                                               
/*0x008*/     struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];                                    
          }IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;                                                
                                                                                                
          typedef struct _IO_RESOURCE_REQUIREMENTS_LIST // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      ListSize;                                                       
/*0x004*/     enum _INTERFACE_TYPE InterfaceType;                                          
/*0x008*/     ULONG32      BusNumber;                                                      
/*0x00C*/     ULONG32      SlotNumber;                                                     
/*0x010*/     ULONG32      Reserved[3];                                                    
/*0x01C*/     ULONG32      AlternativeLists;                                               
/*0x020*/     struct _IO_RESOURCE_LIST List[1];                                            
          }IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;                                   
                                                                                           
          typedef struct _IO_SECURITY_CONTEXT                   // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;                                    
/*0x008*/     struct _ACCESS_STATE* AccessState;                                                   
/*0x010*/     ULONG32      DesiredAccess;                                                          
/*0x014*/     ULONG32      FullCreateOptions;                                                      
          }IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;                                             
                                                                                                   
          typedef struct _SYSTEM_POWER_STATE_CONTEXT            // 10 elements, 0x4 bytes (sizeof) 
          {                                                                                        
              union                                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                    
                  struct                                        // 9 elements, 0x4 bytes (sizeof)  
                  {                                                                                
/*0x000*/             ULONG32      Reserved1 : 8;               // 0 BitPosition                   
/*0x000*/             ULONG32      TargetSystemState : 4;       // 8 BitPosition                   
/*0x000*/             ULONG32      EffectiveSystemState : 4;    // 12 BitPosition                  
/*0x000*/             ULONG32      CurrentSystemState : 4;      // 16 BitPosition                  
/*0x000*/             ULONG32      IgnoreHibernationPath : 1;   // 20 BitPosition                  
/*0x000*/             ULONG32      PseudoTransition : 1;        // 21 BitPosition                  
/*0x000*/             ULONG32      KernelSoftReboot : 1;        // 22 BitPosition                  
/*0x000*/             ULONG32      DirectedDripsTransition : 1; // 23 BitPosition                  
/*0x000*/             ULONG32      Reserved2 : 8;               // 24 BitPosition                  
                  };                                                                               
/*0x000*/         ULONG32      ContextAsUlong;                                                     
              };                                                                                   
          }SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT;                                   
                                                                                                   
          typedef struct _IO_STACK_LOCATION                                                     // 9 elements, 0x48 bytes (sizeof)  
          {                                                                                                                         
/*0x000*/     UINT8        MajorFunction;                                                                                           
/*0x001*/     UINT8        MinorFunction;                                                                                           
/*0x002*/     UINT8        Flags;                                                                                                   
/*0x003*/     UINT8        Control;                                                                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                         
              union                                                                             // 39 elements, 0x20 bytes (sizeof) 
              {                                                                                                                     
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                                 
/*0x010*/             ULONG32      Options;                                                                                         
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             UINT16       FileAttributes;                                                                                  
/*0x01A*/             UINT16       ShareAccess;                                                                                     
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             ULONG32      EaLength;                                                                                        
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }Create;                                                                                                          
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                                 
/*0x010*/             ULONG32      Options;                                                                                         
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             UINT16       Reserved;                                                                                        
/*0x01A*/             UINT16       ShareAccess;                                                                                     
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;                                                             
                  }CreatePipe;                                                                                                      
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _IO_SECURITY_CONTEXT* SecurityContext;                                                                 
/*0x010*/             ULONG32      Options;                                                                                         
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             UINT16       Reserved;                                                                                        
/*0x01A*/             UINT16       ShareAccess;                                                                                     
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             struct _MAILSLOT_CREATE_PARAMETERS* Parameters;                                                               
                  }CreateMailslot;                                                                                                  
                  struct                                                                        // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      Key;                                                                                             
/*0x014*/             ULONG32      Flags;                                                                                           
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)   
                  }Read;                                                                                                            
                  struct                                                                        // 4 elements, 0x18 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      Key;                                                                                             
/*0x014*/             ULONG32      Flags;                                                                                           
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)   
                  }Write;                                                                                                           
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             struct _UNICODE_STRING* FileName;                                                                             
/*0x018*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                            
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             ULONG32      FileIndex;                                                                                       
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }QueryDirectory;                                                                                                  
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      CompletionFilter;                                                                                
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }NotifyDirectory;                                                                                                 
                  struct                                                                        // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      CompletionFilter;                                                                                
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x018*/             enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;                                     
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }NotifyDirectoryEx;                                                                                               
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                            
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }QueryFile;                                                                                                       
                  struct                                                                        // 7 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             enum _FILE_INFORMATION_CLASS FileInformationClass;                                                            
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x018*/             struct _FILE_OBJECT* FileObject;                                                                              
                      union                                                                     // 3 elements, 0x8 bytes (sizeof)   
                      {                                                                                                             
                          struct                                                                // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                                                         
/*0x020*/                     UINT8        ReplaceIfExists;                                                                         
/*0x021*/                     UINT8        AdvanceOnly;                                                                             
/*0x022*/                     UINT8        _PADDING3_[0x6];                                                                         
                          };                                                                                                        
/*0x020*/                 ULONG32      ClusterCount;                                                                                
/*0x020*/                 VOID*        DeleteHandle;                                                                                
                      };                                                                                                            
                  }SetFile;                                                                                                         
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             VOID*        EaList;                                                                                          
/*0x018*/             ULONG32      EaListLength;                                                                                    
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             ULONG32      EaIndex;                                                                                         
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }QueryEa;                                                                                                         
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
                  }SetEa;                                                                                                           
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             enum _FSINFOCLASS FsInformationClass;                                                                         
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }QueryVolume;                                                                                                     
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             enum _FSINFOCLASS FsInformationClass;                                                                         
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }SetVolume;                                                                                                       
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      OutputBufferLength;                                                                              
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      InputBufferLength;                                                                               
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x018*/             ULONG32      FsControlCode;                                                                                   
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                 
/*0x020*/             VOID*        Type3InputBuffer;                                                                                
                  }FileSystemControl;                                                                                               
                  struct                                                                        // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             union _LARGE_INTEGER* Length;                                                                                 
/*0x010*/             ULONG32      Key;                                                                                             
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             union _LARGE_INTEGER ByteOffset;                                          // 4 elements, 0x8 bytes (sizeof)   
                  }LockControl;                                                                                                     
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      OutputBufferLength;                                                                              
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      InputBufferLength;                                                                               
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x018*/             ULONG32      IoControlCode;                                                                                   
/*0x01C*/             UINT8        _PADDING3_[0x4];                                                                                 
/*0x020*/             VOID*        Type3InputBuffer;                                                                                
                  }DeviceIoControl;                                                                                                 
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      SecurityInformation;                                                                             
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      Length;                                                                                          
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }QuerySecurity;                                                                                                   
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      SecurityInformation;                                                                             
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             VOID*        SecurityDescriptor;                                                                              
                  }SetSecurity;                                                                                                     
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _VPB* Vpb;                                                                                             
/*0x010*/             struct _DEVICE_OBJECT* DeviceObject;                                                                          
                  }MountVolume;                                                                                                     
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _VPB* Vpb;                                                                                             
/*0x010*/             struct _DEVICE_OBJECT* DeviceObject;                                                                          
                  }VerifyVolume;                                                                                                    
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             struct _SCSI_REQUEST_BLOCK* Srb;                                                                              
                  }Scsi;                                                                                                            
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             VOID*        StartSid;                                                                                        
/*0x018*/             struct _FILE_GET_QUOTA_INFORMATION* SidList;                                                                  
/*0x020*/             ULONG32      SidListLength;                                                                                   
/*0x024*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }QueryQuota;                                                                                                      
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             ULONG32      Length;                                                                                          
                  }SetQuota;                                                                                                        
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             enum _DEVICE_RELATION_TYPE Type;                                                                              
                  }QueryDeviceRelations;                                                                                            
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _GUID* InterfaceType;                                                                                  
/*0x010*/             UINT16       Size;                                                                                            
/*0x012*/             UINT16       Version;                                                                                         
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             struct _INTERFACE* Interface;                                                                                 
/*0x020*/             VOID*        InterfaceSpecificData;                                                                           
                  }QueryInterface;                                                                                                  
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             struct _DEVICE_CAPABILITIES* Capabilities;                                                                    
                  }DeviceCapabilities;                                                                                              
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;                                             
                  }FilterResourceRequirements;                                                                                      
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             ULONG32      WhichSpace;                                                                                      
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             VOID*        Buffer;                                                                                          
/*0x018*/             ULONG32      Offset;                                                                                          
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             ULONG32      Length;                                                                                          
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }ReadWriteConfig;                                                                                                 
                  struct                                                                        // 1 elements, 0x1 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             UINT8        Lock;                                                                                            
                  }SetLock;                                                                                                         
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             enum _BUS_QUERY_ID_TYPE IdType;                                                                               
                  }QueryId;                                                                                                         
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             enum _DEVICE_TEXT_TYPE DeviceTextType;                                                                        
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             ULONG32      LocaleId;                                                                                        
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }QueryDeviceText;                                                                                                 
                  struct                                                                        // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             UINT8        InPath;                                                                                          
/*0x009*/             UINT8        Reserved[3];                                                                                     
/*0x00C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x010*/             enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;                                                                    
/*0x014*/             UINT8        _PADDING2_[0x4];                                                                                 
                  }UsageNotification;                                                                                               
                  struct                                                                        // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             enum _SYSTEM_POWER_STATE PowerState;                                                                          
                  }WaitWake;                                                                                                        
                  struct                                                                        // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                                                 
/*0x008*/             struct _POWER_SEQUENCE* PowerSequence;                                                                        
                  }PowerSequence;                                                                                                   
                  struct                                                                        // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
                      union                                                                     // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                                                             
/*0x008*/                 ULONG32      SystemContext;                                                                               
/*0x008*/                 struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;           // 10 elements, 0x4 bytes (sizeof)  
                      };                                                                                                            
/*0x010*/             enum _POWER_STATE_TYPE Type;                                                                                  
/*0x014*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x018*/             union _POWER_STATE State;                                                 // 2 elements, 0x4 bytes (sizeof)   
/*0x01C*/             UINT8        _PADDING2_[0x4];                                                                                 
/*0x020*/             enum _POWER_ACTION ShutdownType;                                                                              
/*0x024*/             UINT8        _PADDING3_[0x4];                                                                                 
                  }Power;                                                                                                           
                  struct                                                                        // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             struct _CM_RESOURCE_LIST* AllocatedResources;                                                                 
/*0x010*/             struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;                                                       
                  }StartDevice;                                                                                                     
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             UINT64       ProviderId;                                                                                      
/*0x010*/             VOID*        DataPath;                                                                                        
/*0x018*/             ULONG32      BufferSize;                                                                                      
/*0x01C*/             UINT8        _PADDING1_[0x4];                                                                                 
/*0x020*/             VOID*        Buffer;                                                                                          
                  }WMI;                                                                                                             
                  struct                                                                        // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                 
/*0x008*/             VOID*        Argument1;                                                                                       
/*0x010*/             VOID*        Argument2;                                                                                       
/*0x018*/             VOID*        Argument3;                                                                                       
/*0x020*/             VOID*        Argument4;                                                                                       
                  }Others;                                                                                                          
              }Parameters;                                                                                                          
/*0x028*/     struct _DEVICE_OBJECT* DeviceObject;                                                                                  
/*0x030*/     struct _FILE_OBJECT* FileObject;                                                                                      
/*0x038*/     FUNCT_00A0_182F_CompletionRoutine* CompletionRoutine;                                                                 
/*0x040*/     VOID*        Context;                                                                                                 
          }IO_STACK_LOCATION, *PIO_STACK_LOCATION;                                                                                  
                                                                                                                                    
          typedef struct _IO_STATUS_BLOCK // 3 elements, 0x10 bytes (sizeof) 
          {                                                                  
              union                       // 2 elements, 0x8 bytes (sizeof)  
              {                                                              
/*0x000*/         LONG32       Status;                                       
/*0x000*/         VOID*        Pointer;                                      
              };                                                             
/*0x008*/     UINT64       Information;                                      
          }IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;                                   
                                                                             
          typedef struct _IO_TIMER                        // 6 elements, 0x30 bytes (sizeof) 
          {                                                                                  
/*0x000*/     INT16        Type;                                                             
/*0x002*/     INT16        TimerFlag;                                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                  
/*0x008*/     struct _LIST_ENTRY TimerList;               // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     FUNCT_00EF_0F04_TimerRoutine* TimerRoutine;                                    
/*0x020*/     VOID*        Context;                                                          
/*0x028*/     struct _DEVICE_OBJECT* DeviceObject;                                           
          }IO_TIMER, *PIO_TIMER;                                                             
                                                                                             
          typedef struct _IO_WORKITEM              // 7 elements, 0x58 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _WORK_QUEUE_ITEM WorkItem;    // 3 elements, 0x20 bytes (sizeof) 
/*0x020*/     FUNCT_00EF_47CE_Routine* Routine;                                       
/*0x028*/     VOID*        IoObject;                                                  
/*0x030*/     VOID*        Context;                                                   
/*0x038*/     struct _ETHREAD* WorkOnBehalfThread;                                    
/*0x040*/     ULONG32      Type;                                                      
/*0x044*/     struct _GUID ActivityId;             // 4 elements, 0x10 bytes (sizeof) 
/*0x054*/     UINT8        _PADDING0_[0x4];                                           
          }IO_WORKITEM, *PIO_WORKITEM;                                                
                                                                                      
          typedef struct _iobuf             // 8 elements, 0x30 bytes (sizeof) 
          {                                                                    
/*0x000*/     CHAR*        _ptr;                                               
/*0x008*/     INT32        _cnt;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
/*0x010*/     CHAR*        _base;                                              
/*0x018*/     INT32        _flag;                                              
/*0x01C*/     INT32        _file;                                              
/*0x020*/     INT32        _charbuf;                                           
/*0x024*/     INT32        _bufsiz;                                            
/*0x028*/     CHAR*        _tmpfname;                                          
          }iobuf, *Piobuf;                                                     
                                                                               
typedef struct _IOMMU_DMA_DOMAIN // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}IOMMU_DMA_DOMAIN, *PIOMMU_DMA_DOMAIN;                                  
                                                                   
          typedef union _IOMMU_SVM_CAPABILITIES             // 6 elements, 0xC bytes (sizeof) 
          {                                                                                   
              struct                                        // 3 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      AtsCapability : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      PriCapability : 1;           // 1 BitPosition                  
/*0x000*/         ULONG32      PasidCapability : 1;         // 2 BitPosition                  
              };                                                                              
              struct                                        // 6 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x004*/         ULONG32      PasidMaxWidth : 5;           // 0 BitPosition                  
/*0x004*/         ULONG32      PasidExePerm : 1;            // 5 BitPosition                  
/*0x004*/         ULONG32      PasidPrivMode : 1;           // 6 BitPosition                  
/*0x004*/         ULONG32      AtsPageAlignedRequest : 1;   // 7 BitPosition                  
/*0x004*/         ULONG32      AtsGlobalInvalidate : 1;     // 8 BitPosition                  
/*0x004*/         ULONG32      AtsInvalidateQueueDepth : 5; // 9 BitPosition                  
              }CapReg;                                                                        
/*0x008*/     ULONG32      Rsvd : 15;                       // 0 BitPosition                  
/*0x000*/     ULONG32      AsULONG;                                                           
          }IOMMU_SVM_CAPABILITIES, *PIOMMU_SVM_CAPABILITIES;                                  
                                                                                              
          typedef struct _IOP_FILE_OBJECT_EXTENSION     // 3 elements, 0x58 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      FoExtFlags;                                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                                
/*0x008*/     VOID*        FoExtPerTypeExtension[9];                                       
/*0x050*/     enum _IOP_PRIORITY_HINT FoIoPriorityHint;                                    
/*0x054*/     UINT8        _PADDING1_[0x4];                                                
          }IOP_FILE_OBJECT_EXTENSION, *PIOP_FILE_OBJECT_EXTENSION;                                   
                                                                                           
          typedef struct _IOP_IRP_EXTENSION                                      // 14 elements, 0x38 bytes (sizeof) 
          {                                                                                                          
              union                                                              // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                                      
/*0x000*/         UINT16       ExtensionFlags;                                                                       
                  struct                                                         // 3 elements, 0x2 bytes (sizeof)   
                  {                                                                                                  
/*0x000*/             UINT16       Allocated : 1;                                // 0 BitPosition                    
/*0x000*/             UINT16       PropagateId : 1;                              // 1 BitPosition                    
/*0x000*/             UINT16       SpareBits : 14;                               // 2 BitPosition                    
                  };                                                                                                 
              };                                                                                                     
/*0x002*/     UINT16       TypesAllocated;                                                                           
/*0x004*/     UINT8        GenericExtension[4];                                                                      
/*0x008*/     VOID*        VerifierContext;                                                                          
/*0x010*/     UINT64       DiskIoAttributionHandle;                                                                  
/*0x018*/     struct _GUID ActivityId;                                           // 4 elements, 0x10 bytes (sizeof)  
              union                                                              // 4 elements, 0x10 bytes (sizeof)  
              {                                                                                                      
/*0x028*/         union _LARGE_INTEGER Timestamp;                                // 4 elements, 0x8 bytes (sizeof)   
/*0x028*/         ULONG32      ZeroingOffset;                                                                        
                  struct                                                         // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                  
/*0x028*/             struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* FsTrackOffsetBlob;                                     
/*0x030*/             INT64        FsTrackedOffset;                                                                  
                  };                                                                                                 
/*0x028*/         struct _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;  // 2 elements, 0x10 bytes (sizeof)  
              };                                                                                                     
          }IOP_IRP_EXTENSION, *PIOP_IRP_EXTENSION;                                                                   
                                                                                                                     
          typedef struct _IOP_IRP_EXTENSION_STATUS // 3 elements, 0xC bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Flags;                                                    
/*0x004*/     ULONG32      ActivityId;                                               
/*0x008*/     ULONG32      IoTracking;                                               
          }IOP_IRP_EXTENSION_STATUS, *PIOP_IRP_EXTENSION_STATUS;                                  
                                                                                     
          typedef struct _IOP_IRP_STACK_PROFILER // 2 elements, 0x54 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Profile[20];                                             
/*0x050*/     ULONG32      TotalIrps;                                               
          }IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER;                                   
                                                                                    
          typedef struct _IOV_FORCED_PENDING_TRACE // 3 elements, 0x200 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _IRP* Irp;                                                        
/*0x008*/     struct _ETHREAD* Thread;                                                 
/*0x010*/     VOID*        StackTrace[62];                                             
          }IOV_FORCED_PENDING_TRACE, *PIOV_FORCED_PENDING_TRACE;                                    
                                                                                       
          typedef struct _IOV_IRP_TRACE               // 7 elements, 0x80 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _IRP* Irp;                                                          
/*0x008*/     struct _KTHREAD* Thread;                                                   
              union                                   // 2 elements, 0x4 bytes (sizeof)  
              {                                                                          
                  struct                              // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                      
/*0x010*/             INT16        KernelApcDisable;                                     
/*0x012*/             INT16        SpecialApcDisable;                                    
                  };                                                                     
/*0x010*/         ULONG32      CombinedApcDisable;                                       
              };                                                                         
/*0x014*/     UINT8        Irql;                                                         
/*0x015*/     UINT8        _PADDING0_[0x3];                                              
/*0x018*/     VOID*        StackTrace[13];                                               
          }IOV_IRP_TRACE, *PIOV_IRP_TRACE;                                               
                                                                                         
          typedef struct _IRP                                              // 23 elements, 0xD0 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     INT16        Type;                                                                               
/*0x002*/     UINT16       Size;                                                                               
/*0x004*/     UINT16       AllocationProcessorNumber;                                                          
/*0x006*/     UINT16       Reserved;                                                                           
/*0x008*/     struct _MDL* MdlAddress;                                                                         
/*0x010*/     ULONG32      Flags;                                                                              
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                    
              union                                                        // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                                
/*0x018*/         struct _IRP* MasterIrp;                                                                      
/*0x018*/         LONG32       IrpCount;                                                                       
/*0x018*/         VOID*        SystemBuffer;                                                                   
              }AssociatedIrp;                                                                                  
/*0x020*/     struct _LIST_ENTRY ThreadListEntry;                          // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _IO_STATUS_BLOCK IoStatus;                            // 3 elements, 0x10 bytes (sizeof)  
/*0x040*/     CHAR         RequestorMode;                                                                      
/*0x041*/     UINT8        PendingReturned;                                                                    
/*0x042*/     CHAR         StackCount;                                                                         
/*0x043*/     CHAR         CurrentLocation;                                                                    
/*0x044*/     UINT8        Cancel;                                                                             
/*0x045*/     UINT8        CancelIrql;                                                                         
/*0x046*/     CHAR         ApcEnvironment;                                                                     
/*0x047*/     UINT8        AllocationFlags;                                                                    
/*0x048*/     struct _IO_STATUS_BLOCK* UserIosb;                                                               
/*0x050*/     struct _KEVENT* UserEvent;                                                                       
              union                                                        // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                                
                  struct                                                   // 3 elements, 0x10 bytes (sizeof)  
                  {                                                                                            
                      union                                                // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                                        
/*0x058*/                 FUNCT_00EF_15D2_UserApcRoutine* UserApcRoutine;                                      
/*0x058*/                 VOID*        IssuingProcess;                                                         
                      };                                                                                       
/*0x060*/             VOID*        UserApcContext;                                                             
                  }AsynchronousParameters;                                                                     
/*0x058*/         union _LARGE_INTEGER AllocationSize;                     // 4 elements, 0x8 bytes (sizeof)   
              }Overlay;                                                                                        
/*0x068*/     FUNCT_00EF_0EF2_CancelRoutine_DriverStartIo* CancelRoutine;                                      
/*0x070*/     VOID*        UserBuffer;                                                                         
              union                                                        // 3 elements, 0x58 bytes (sizeof)  
              {                                                                                                
                  struct                                                   // 9 elements, 0x58 bytes (sizeof)  
                  {                                                                                            
                      union                                                // 2 elements, 0x20 bytes (sizeof)  
                      {                                                                                        
/*0x078*/                 struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;    // 3 elements, 0x18 bytes (sizeof)  
/*0x078*/                 VOID*        DriverContext[4];                                                       
                      };                                                                                       
/*0x098*/             struct _ETHREAD* Thread;                                                                 
/*0x0A0*/             CHAR*        AuxiliaryBuffer;                                                            
/*0x0A8*/             struct _LIST_ENTRY ListEntry;                        // 2 elements, 0x10 bytes (sizeof)  
                      union                                                // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                                        
/*0x0B8*/                 struct _IO_STACK_LOCATION* CurrentStackLocation;                                     
/*0x0B8*/                 ULONG32      PacketType;                                                             
                      };                                                                                       
/*0x0C0*/             struct _FILE_OBJECT* OriginalFileObject;                                                 
/*0x0C8*/             VOID*        IrpExtension;                                                               
                  }Overlay;                                                                                    
/*0x078*/         struct _KAPC Apc;                                        // 17 elements, 0x58 bytes (sizeof) 
/*0x078*/         VOID*        CompletionKey;                                                                  
              }Tail;                                                                                           
          }IRP, *PIRP;                                                                                         
                                                                                                               
          typedef struct _ISR_THUNK   // 5 elements, 0x8 bytes (sizeof) 
          {                                                             
/*0x000*/     UINT8        PushImm;                                     
/*0x001*/     UINT8        Vector;                                      
/*0x002*/     UINT8        PushRbp;                                     
/*0x003*/     UINT8        JmpOp;                                       
/*0x004*/     LONG32       JmpOffset;                                   
          }ISR_THUNK, *PISR_THUNK;                                      
                                                                        
          typedef struct _ISRDPCSTATS    // 8 elements, 0x40 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       IsrTime;                                         
/*0x008*/     UINT64       IsrTimeStart;                                    
/*0x010*/     UINT64       IsrCount;                                        
/*0x018*/     UINT64       DpcTime;                                         
/*0x020*/     UINT64       DpcTimeStart;                                    
/*0x028*/     UINT64       DpcCount;                                        
/*0x030*/     UINT8        IsrActive;                                       
/*0x031*/     UINT8        Reserved[15];                                    
          }ISRDPCSTATS, *PISRDPCSTATS;                                      
                                                                            
typedef struct _JOB_ACCESS_STATE // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}JOB_ACCESS_STATE, *PJOB_ACCESS_STATE;                                  
                                                                   
typedef struct _JOB_CPU_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_CPU_RATE_CONTROL, *PJOB_CPU_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_NET_RATE_CONTROL // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}JOB_NET_RATE_CONTROL, *PJOB_NET_RATE_CONTROL;                                  
                                                                       
typedef struct _JOB_NOTIFICATION_INFORMATION // 0 elements, 0x0 bytes (sizeof) 
{                                                                              
}JOB_NOTIFICATION_INFORMATION, *PJOB_NOTIFICATION_INFORMATION;                                  
                                                                               
          typedef struct _OB_DUPLICATE_OBJECT_STATE       // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _EPROCESS* SourceProcess;                                               
/*0x008*/     VOID*        SourceHandle;                                                     
/*0x010*/     VOID*        Object;                                                           
/*0x018*/     ULONG32      TargetAccess;                                                     
/*0x01C*/     struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo; // 2 elements, 0x8 bytes (sizeof)  
/*0x024*/     ULONG32      HandleAttributes;                                                 
          }OB_DUPLICATE_OBJECT_STATE, *POB_DUPLICATE_OBJECT_STATE;                                   
                                                                                             
          typedef struct _KALPC_HANDLE_DATA                       // 3 elements, 0x30 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      ObjectType;                                                               
/*0x004*/     ULONG32      Count;                                                                    
/*0x008*/     struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext; // 6 elements, 0x28 bytes (sizeof) 
          }KALPC_HANDLE_DATA, *PKALPC_HANDLE_DATA;                                                   
                                                                                                     
          typedef struct _KALPC_WORK_ON_BEHALF_DATA      // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _ALPC_WORK_ON_BEHALF_TICKET Ticket; // 2 elements, 0x8 bytes (sizeof) 
          }KALPC_WORK_ON_BEHALF_DATA, *PKALPC_WORK_ON_BEHALF_DATA;                                  
                                                                                           
          typedef struct _KALPC_MESSAGE_ATTRIBUTES                // 9 elements, 0x48 bytes (sizeof) 
          {                                                                                          
/*0x000*/     VOID*        ClientContext;                                                            
/*0x008*/     VOID*        ServerContext;                                                            
/*0x010*/     VOID*        PortContext;                                                              
/*0x018*/     VOID*        CancelPortContext;                                                        
/*0x020*/     struct _KALPC_SECURITY_DATA* SecurityData;                                             
/*0x028*/     struct _KALPC_VIEW* View;                                                              
/*0x030*/     struct _KALPC_HANDLE_DATA* HandleData;                                                 
/*0x038*/     union _KALPC_DIRECT_EVENT DirectEvent;              // 3 elements, 0x8 bytes (sizeof)  
/*0x040*/     struct _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData; // 1 elements, 0x8 bytes (sizeof)  
          }KALPC_MESSAGE_ATTRIBUTES, *PKALPC_MESSAGE_ATTRIBUTES;                                     
                                                                                                     
          typedef struct _PORT_MESSAGE             // 7 elements, 0x28 bytes (sizeof) 
          {                                                                           
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x000*/             INT16        DataLength;                                        
/*0x002*/             INT16        TotalLength;                                       
                  }s1;                                                                
/*0x000*/         ULONG32      Length;                                                
              }u1;                                                                    
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x004*/             INT16        Type;                                              
/*0x006*/             INT16        DataInfoOffset;                                    
                  }s2;                                                                
/*0x004*/         ULONG32      ZeroInit;                                              
              }u2;                                                                    
              union                                // 2 elements, 0x10 bytes (sizeof) 
              {                                                                       
/*0x008*/         struct _CLIENT_ID ClientId;      // 2 elements, 0x10 bytes (sizeof) 
/*0x008*/         FLOAT64      DoNotUseThisField;                                     
              };                                                                      
/*0x018*/     ULONG32      MessageId;                                                 
/*0x01C*/     UINT8        _PADDING0_[0x4];                                           
              union                                // 2 elements, 0x8 bytes (sizeof)  
              {                                                                       
/*0x020*/         UINT64       ClientViewSize;                                        
/*0x020*/         ULONG32      CallbackId;                                            
              };                                                                      
          }PORT_MESSAGE, *PPORT_MESSAGE;                                              
                                                                                      
          typedef struct _KALPC_MESSAGE                           // 23 elements, 0x118 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY Entry;                           // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _ALPC_PORT* PortQueue;                                                            
/*0x018*/     struct _ALPC_PORT* OwnerPort;                                                            
/*0x020*/     struct _ETHREAD* WaitingThread;                                                          
              union                                               // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                        
                  struct                                          // 11 elements, 0x4 bytes (sizeof)   
                  {                                                                                    
/*0x028*/             ULONG32      QueueType : 3;                 // 0 BitPosition                     
/*0x028*/             ULONG32      QueuePortType : 4;             // 3 BitPosition                     
/*0x028*/             ULONG32      Canceled : 1;                  // 7 BitPosition                     
/*0x028*/             ULONG32      Ready : 1;                     // 8 BitPosition                     
/*0x028*/             ULONG32      ReleaseMessage : 1;            // 9 BitPosition                     
/*0x028*/             ULONG32      SharedQuota : 1;               // 10 BitPosition                    
/*0x028*/             ULONG32      ReplyWaitReply : 1;            // 11 BitPosition                    
/*0x028*/             ULONG32      OwnerPortReference : 1;        // 12 BitPosition                    
/*0x028*/             ULONG32      ReceiverReference : 1;         // 13 BitPosition                    
/*0x028*/             ULONG32      ViewAttributeRetrieved : 1;    // 14 BitPosition                    
/*0x028*/             ULONG32      InDispatch : 1;                // 15 BitPosition                    
                  }s1;                                                                                 
/*0x028*/         ULONG32      State;                                                                  
              }u1;                                                                                     
/*0x02C*/     LONG32       SequenceNo;                                                                 
              union                                               // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                        
/*0x030*/         struct _EPROCESS* QuotaProcess;                                                      
/*0x030*/         VOID*        QuotaBlock;                                                             
              };                                                                                       
/*0x038*/     struct _ALPC_PORT* CancelSequencePort;                                                   
/*0x040*/     struct _ALPC_PORT* CancelQueuePort;                                                      
/*0x048*/     LONG32       CancelSequenceNo;                                                           
/*0x04C*/     UINT8        _PADDING0_[0x4];                                                            
/*0x050*/     struct _LIST_ENTRY CancelListEntry;                 // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _KALPC_RESERVE* Reserve;                                                          
/*0x068*/     struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes; // 9 elements, 0x48 bytes (sizeof)   
/*0x0B0*/     VOID*        DataUserVa;                                                                 
/*0x0B8*/     struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;                                      
/*0x0C0*/     struct _ALPC_PORT* ConnectionPort;                                                       
/*0x0C8*/     struct _ETHREAD* ServerThread;                                                           
/*0x0D0*/     VOID*        WakeReference;                                                              
/*0x0D8*/     VOID*        WakeReference2;                                                             
/*0x0E0*/     VOID*        ExtensionBuffer;                                                            
/*0x0E8*/     UINT64       ExtensionBufferSize;                                                        
/*0x0F0*/     struct _PORT_MESSAGE PortMessage;                   // 7 elements, 0x28 bytes (sizeof)   
          }KALPC_MESSAGE, *PKALPC_MESSAGE;                                                             
                                                                                                       
          typedef struct _KALPC_REGION            // 10 elements, 0x58 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _LIST_ENTRY RegionListEntry; // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _KALPC_SECTION* Section;                                         
/*0x018*/     UINT64       Offset;                                                    
/*0x020*/     UINT64       Size;                                                      
/*0x028*/     UINT64       ViewSize;                                                  
              union                               // 1 elements, 0x4 bytes (sizeof)   
              {                                                                       
                  struct                          // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                   
/*0x030*/             ULONG32      Secure : 1;    // 0 BitPosition                    
                  }s1;                                                                
              }u1;                                                                    
/*0x034*/     ULONG32      NumberOfViews;                                             
/*0x038*/     struct _LIST_ENTRY ViewListHead;    // 2 elements, 0x10 bytes (sizeof)  
/*0x048*/     struct _KALPC_VIEW* ReadOnlyView;                                       
/*0x050*/     struct _KALPC_VIEW* ReadWriteView;                                      
          }KALPC_REGION, *PKALPC_REGION;                                              
                                                                                      
          typedef struct _KALPC_RESERVE               // 5 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _ALPC_PORT* OwnerPort;                                              
/*0x008*/     struct _ALPC_HANDLE_TABLE* HandleTable;                                    
/*0x010*/     VOID*        Handle;                                                       
/*0x018*/     struct _KALPC_MESSAGE* Message;                                            
/*0x020*/     LONG32       Active;                                                       
/*0x024*/     UINT8        _PADDING0_[0x4];                                              
          }KALPC_RESERVE, *PKALPC_RESERVE;                                               
                                                                                         
          typedef struct _KALPC_SECTION               // 9 elements, 0x48 bytes (sizeof) 
          {                                                                              
/*0x000*/     VOID*        SectionObject;                                                
/*0x008*/     UINT64       Size;                                                         
/*0x010*/     struct _ALPC_HANDLE_TABLE* HandleTable;                                    
/*0x018*/     VOID*        SectionHandle;                                                
/*0x020*/     struct _EPROCESS* OwnerProcess;                                            
/*0x028*/     struct _ALPC_PORT* OwnerPort;                                              
              union                                   // 1 elements, 0x4 bytes (sizeof)  
              {                                                                          
                  struct                              // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                      
/*0x030*/             ULONG32      Internal : 1;      // 0 BitPosition                   
/*0x030*/             ULONG32      Secure : 1;        // 1 BitPosition                   
                  }s1;                                                                   
              }u1;                                                                       
/*0x034*/     ULONG32      NumberOfRegions;                                              
/*0x038*/     struct _LIST_ENTRY RegionListHead;      // 2 elements, 0x10 bytes (sizeof) 
          }KALPC_SECTION, *PKALPC_SECTION;                                               
                                                                                         
          typedef struct _KALPC_SECURITY_DATA                  // 6 elements, 0x70 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _ALPC_HANDLE_TABLE* HandleTable;                                             
/*0x008*/     VOID*        ContextHandle;                                                         
/*0x010*/     struct _EPROCESS* OwningProcess;                                                    
/*0x018*/     struct _ALPC_PORT* OwnerPort;                                                       
/*0x020*/     struct _SECURITY_CLIENT_CONTEXT DynamicSecurity; // 6 elements, 0x48 bytes (sizeof) 
              union                                            // 1 elements, 0x4 bytes (sizeof)  
              {                                                                                   
                  struct                                       // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                               
/*0x068*/             ULONG32      Revoked : 1;                // 0 BitPosition                   
/*0x068*/             ULONG32      Impersonated : 1;           // 1 BitPosition                   
                  }s1;                                                                            
              }u1;                                                                                
          }KALPC_SECURITY_DATA, *PKALPC_SECURITY_DATA;                                            
                                                                                                  
          typedef struct _KALPC_VIEW                   // 11 elements, 0x60 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _LIST_ENTRY ViewListEntry;        // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _KALPC_REGION* Region;                                                
/*0x018*/     struct _ALPC_PORT* OwnerPort;                                                
/*0x020*/     struct _EPROCESS* OwnerProcess;                                              
/*0x028*/     VOID*        Address;                                                        
/*0x030*/     UINT64       Size;                                                           
/*0x038*/     VOID*        SecureViewHandle;                                               
/*0x040*/     VOID*        WriteAccessHandle;                                              
              union                                    // 1 elements, 0x4 bytes (sizeof)   
              {                                                                            
                  struct                               // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                        
/*0x048*/             ULONG32      WriteAccess : 1;    // 0 BitPosition                    
/*0x048*/             ULONG32      AutoRelease : 1;    // 1 BitPosition                    
/*0x048*/             ULONG32      ForceUnlink : 1;    // 2 BitPosition                    
/*0x048*/             ULONG32      SystemSpace : 1;    // 3 BitPosition                    
                  }s1;                                                                     
              }u1;                                                                         
/*0x04C*/     ULONG32      NumberOfOwnerMessages;                                          
/*0x050*/     struct _LIST_ENTRY ProcessViewListEntry; // 2 elements, 0x10 bytes (sizeof)  
          }KALPC_VIEW, *PKALPC_VIEW;                                                       
                                                                                           
          typedef struct _KDESCRIPTOR // 3 elements, 0x10 bytes (sizeof) 
          {                                                              
/*0x000*/     UINT16       Pad[3];                                       
/*0x006*/     UINT16       Limit;                                        
/*0x008*/     VOID*        Base;                                         
          }KDESCRIPTOR, *PKDESCRIPTOR;                                   
                                                                         
          typedef struct _KDPC_LIST                 // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _SINGLE_LIST_ENTRY ListHead;   // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _SINGLE_LIST_ENTRY* LastEntry;                                    
          }KDPC_LIST, *PKDPC_LIST;                                                     
                                                                                       
          typedef struct _KDPC_DATA       // 5 elements, 0x28 bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _KDPC_LIST DpcList;  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       DpcLock;                                          
/*0x018*/     LONG32       DpcQueueDepth;                                    
/*0x01C*/     ULONG32      DpcCount;                                         
/*0x020*/     struct _KDPC* ActiveDpc;                                       
          }KDPC_DATA, *PKDPC_DATA;                                           
                                                                             
          typedef struct _RTL_BALANCED_LINKS          // 5 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _RTL_BALANCED_LINKS* Parent;                                        
/*0x008*/     struct _RTL_BALANCED_LINKS* LeftChild;                                     
/*0x010*/     struct _RTL_BALANCED_LINKS* RightChild;                                    
/*0x018*/     CHAR         Balance;                                                      
/*0x019*/     UINT8        Reserved[3];                                                  
/*0x01C*/     UINT8        _PADDING0_[0x4];                                              
          }RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;                                     
                                                                                         
          typedef struct _KTMOBJECT_NAMESPACE_LINK // 2 elements, 0x28 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _RTL_BALANCED_LINKS Links;    // 5 elements, 0x20 bytes (sizeof) 
/*0x020*/     UINT8        Expired;                                                   
/*0x021*/     UINT8        _PADDING0_[0x7];                                           
          }KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK;                                   
                                                                                      
          typedef struct _KMUTANT                 // 5 elements, 0x38 bytes (sizeof)  
          {                                                                           
/*0x000*/     struct _DISPATCHER_HEADER Header;   // 58 elements, 0x18 bytes (sizeof) 
/*0x018*/     struct _LIST_ENTRY MutantListEntry; // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _KTHREAD* OwnerThread;                                           
/*0x030*/     UINT8        Abandoned;                                                 
/*0x031*/     UINT8        ApcDisable;                                                
/*0x032*/     UINT8        _PADDING0_[0x6];                                           
          }KMUTANT, *PKMUTANT;                                                        
                                                                                      
          typedef struct _KENLISTMENT_HISTORY   // 2 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      Notification;                                          
/*0x004*/     enum _KENLISTMENT_STATE NewState;                                   
          }KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY;                                  
                                                                                  
          typedef struct _KENLISTMENT                            // 26 elements, 0x1E0 bytes (sizeof) 
          {                                                                                           
/*0x000*/     ULONG32      cookie;                                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                           
/*0x008*/     struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;    // 2 elements, 0x28 bytes (sizeof)   
/*0x030*/     struct _GUID EnlistmentId;                         // 4 elements, 0x10 bytes (sizeof)   
/*0x040*/     struct _KMUTANT Mutex;                             // 5 elements, 0x38 bytes (sizeof)   
/*0x078*/     struct _LIST_ENTRY NextSameTx;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x088*/     struct _LIST_ENTRY NextSameRm;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x098*/     struct _KRESOURCEMANAGER* ResourceManager;                                              
/*0x0A0*/     struct _KTRANSACTION* Transaction;                                                      
/*0x0A8*/     enum _KENLISTMENT_STATE State;                                                          
/*0x0AC*/     ULONG32      Flags;                                                                     
/*0x0B0*/     ULONG32      NotificationMask;                                                          
/*0x0B4*/     UINT8        _PADDING1_[0x4];                                                           
/*0x0B8*/     VOID*        Key;                                                                       
/*0x0C0*/     ULONG32      KeyRefCount;                                                               
/*0x0C4*/     UINT8        _PADDING2_[0x4];                                                           
/*0x0C8*/     VOID*        RecoveryInformation;                                                       
/*0x0D0*/     ULONG32      RecoveryInformationLength;                                                 
/*0x0D4*/     UINT8        _PADDING3_[0x4];                                                           
/*0x0D8*/     VOID*        DynamicNameInformation;                                                    
/*0x0E0*/     ULONG32      DynamicNameInformationLength;                                              
/*0x0E4*/     UINT8        _PADDING4_[0x4];                                                           
/*0x0E8*/     struct _KTMNOTIFICATION_PACKET* FinalNotification;                                      
/*0x0F0*/     struct _KENLISTMENT* SupSubEnlistment;                                                  
/*0x0F8*/     VOID*        SupSubEnlHandle;                                                           
/*0x100*/     VOID*        SubordinateTxHandle;                                                       
/*0x108*/     struct _GUID CrmEnlistmentEnId;                    // 4 elements, 0x10 bytes (sizeof)   
/*0x118*/     struct _GUID CrmEnlistmentTmId;                    // 4 elements, 0x10 bytes (sizeof)   
/*0x128*/     struct _GUID CrmEnlistmentRmId;                    // 4 elements, 0x10 bytes (sizeof)   
/*0x138*/     ULONG32      NextHistory;                                                               
/*0x13C*/     struct _KENLISTMENT_HISTORY History[20];                                                
/*0x1DC*/     UINT8        _PADDING5_[0x4];                                                           
          }KENLISTMENT, *PKENLISTMENT;                                                                
                                                                                                      
          typedef struct _KENTROPY_TIMING_STATE // 4 elements, 0x150 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      EntropyCount;                                            
/*0x004*/     ULONG32      Buffer[64];                                              
/*0x104*/     UINT8        _PADDING0_[0x4];                                         
/*0x108*/     struct _KDPC Dpc;                 // 11 elements, 0x40 bytes (sizeof) 
/*0x148*/     ULONG32      LastDeliveredBuffer;                                     
/*0x14C*/     UINT8        _PADDING1_[0x4];                                         
          }KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE;                                    
                                                                                    
          typedef struct _KERNEL_STACK_SEGMENT // 4 elements, 0x20 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       StackBase;                                             
/*0x008*/     UINT64       StackLimit;                                            
/*0x010*/     UINT64       KernelStack;                                           
/*0x018*/     UINT64       InitialStack;                                          
          }KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT;                                   
                                                                                  
          typedef struct _KEXCEPTION_FRAME // 30 elements, 0x140 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       P1Home;                                              
/*0x008*/     UINT64       P2Home;                                              
/*0x010*/     UINT64       P3Home;                                              
/*0x018*/     UINT64       P4Home;                                              
/*0x020*/     UINT64       P5;                                                  
/*0x028*/     UINT64       Spare1;                                              
/*0x030*/     struct _M128A Xmm6;          // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     struct _M128A Xmm7;          // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/     struct _M128A Xmm8;          // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _M128A Xmm9;          // 2 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _M128A Xmm10;         // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     struct _M128A Xmm11;         // 2 elements, 0x10 bytes (sizeof)   
/*0x090*/     struct _M128A Xmm12;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _M128A Xmm13;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _M128A Xmm14;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _M128A Xmm15;         // 2 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     UINT64       TrapFrame;                                           
/*0x0D8*/     UINT64       OutputBuffer;                                        
/*0x0E0*/     UINT64       OutputLength;                                        
/*0x0E8*/     UINT64       Spare2;                                              
/*0x0F0*/     UINT64       MxCsr;                                               
/*0x0F8*/     UINT64       Rbp;                                                 
/*0x100*/     UINT64       Rbx;                                                 
/*0x108*/     UINT64       Rdi;                                                 
/*0x110*/     UINT64       Rsi;                                                 
/*0x118*/     UINT64       R12;                                                 
/*0x120*/     UINT64       R13;                                                 
/*0x128*/     UINT64       R14;                                                 
/*0x130*/     UINT64       R15;                                                 
/*0x138*/     UINT64       Return;                                              
          }KEXCEPTION_FRAME, *PKEXCEPTION_FRAME;                                     
                                                                                
          typedef struct _KFLOATING_SAVE // 1 elements, 0x4 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Dummy;                                          
          }KFLOATING_SAVE, *PKFLOATING_SAVE;                                  
                                                                           
          typedef struct _KGATE                 // 1 elements, 0x18 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _DISPATCHER_HEADER Header; // 58 elements, 0x18 bytes (sizeof) 
          }KGATE, *PKGATE;                                                          
                                                                                    
          typedef union _KGDTENTRY64                    // 8 elements, 0x10 bytes (sizeof) 
          {                                                                                
              struct                                    // 5 elements, 0x10 bytes (sizeof) 
              {                                                                            
/*0x000*/         UINT16       LimitLow;                                                   
/*0x002*/         UINT16       BaseLow;                                                    
                  union                                 // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                        
                      struct                            // 4 elements, 0x4 bytes (sizeof)  
                      {                                                                    
/*0x004*/                 UINT8        BaseMiddle;                                         
/*0x005*/                 UINT8        Flags1;                                             
/*0x006*/                 UINT8        Flags2;                                             
/*0x007*/                 UINT8        BaseHigh;                                           
                      }Bytes;                                                              
                      struct                            // 10 elements, 0x4 bytes (sizeof) 
                      {                                                                    
/*0x004*/                 ULONG32      BaseMiddle : 8;  // 0 BitPosition                   
/*0x004*/                 ULONG32      Type : 5;        // 8 BitPosition                   
/*0x004*/                 ULONG32      Dpl : 2;         // 13 BitPosition                  
/*0x004*/                 ULONG32      Present : 1;     // 15 BitPosition                  
/*0x004*/                 ULONG32      LimitHigh : 4;   // 16 BitPosition                  
/*0x004*/                 ULONG32      System : 1;      // 20 BitPosition                  
/*0x004*/                 ULONG32      LongMode : 1;    // 21 BitPosition                  
/*0x004*/                 ULONG32      DefaultBig : 1;  // 22 BitPosition                  
/*0x004*/                 ULONG32      Granularity : 1; // 23 BitPosition                  
/*0x004*/                 ULONG32      BaseHigh : 8;    // 24 BitPosition                  
                      }Bits;                                                               
                  };                                                                       
/*0x008*/         ULONG32      BaseUpper;                                                  
/*0x00C*/         ULONG32      MustBeZero;                                                 
              };                                                                           
              struct                                    // 2 elements, 0x10 bytes (sizeof) 
              {                                                                            
/*0x000*/         INT64        DataLow;                                                    
/*0x008*/         INT64        DataHigh;                                                   
              };                                                                           
          }KGDTENTRY64, *PKGDTENTRY64;                                                     
                                                                                           
          typedef union _KIDTENTRY64              // 11 elements, 0x10 bytes (sizeof) 
          {                                                                           
              struct                              // 6 elements, 0x10 bytes (sizeof)  
              {                                                                       
/*0x000*/         UINT16       OffsetLow;                                             
/*0x002*/         UINT16       Selector;                                              
                  struct                          // 5 elements, 0x2 bytes (sizeof)   
                  {                                                                   
/*0x004*/             UINT16       IstIndex : 3;  // 0 BitPosition                    
/*0x004*/             UINT16       Reserved0 : 5; // 3 BitPosition                    
/*0x004*/             UINT16       Type : 5;      // 8 BitPosition                    
/*0x004*/             UINT16       Dpl : 2;       // 13 BitPosition                   
/*0x004*/             UINT16       Present : 1;   // 15 BitPosition                   
                  };                                                                  
/*0x006*/         UINT16       OffsetMiddle;                                          
/*0x008*/         ULONG32      OffsetHigh;                                            
/*0x00C*/         ULONG32      Reserved1;                                             
              };                                                                      
/*0x000*/     UINT64       Alignment;                                                 
          }KIDTENTRY64, *PKIDTENTRY64;                                                
                                                                                      
          typedef struct _KINTERRUPT                                                                                                                                                                                                                                                                                                                                                                                                // 34 elements, 0x100 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     INT16        Type;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x002*/     INT16        Size;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x008*/     struct _LIST_ENTRY InterruptListEntry;                                                                                                                                                                                                                                                                                                                                                                                // 2 elements, 0x10 bytes (sizeof)   
/*0x018*/     FUNCT_00A9_4001_ServiceRoutine* ServiceRoutine;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x020*/     FUNCT_00A9_4029_MessageServiceRoutine* MessageServiceRoutine;                                                                                                                                                                                                                                                                                                                                                                                              
/*0x028*/     ULONG32      MessageIndex;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x030*/     VOID*        ServiceContext;                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x038*/     UINT64       SpinLock;                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x040*/     ULONG32      TickCount;                                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x044*/     UINT8        _PADDING2_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x048*/     UINT64*      ActualLock;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x050*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* DispatchAddress;                                      
/*0x058*/     ULONG32      Vector;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x05C*/     UINT8        Irql;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x05D*/     UINT8        SynchronizeIrql;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x05E*/     UINT8        FloatingSave;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x05F*/     UINT8        Connected;                                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x060*/     ULONG32      Number;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x064*/     UINT8        ShareVector;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x065*/     UINT8        EmulateActiveBoth;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x066*/     UINT16       ActiveCount;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x068*/     LONG32       InternalState;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x06C*/     enum _KINTERRUPT_MODE Mode;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x070*/     enum _KINTERRUPT_POLARITY Polarity;                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x074*/     ULONG32      ServiceCount;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x078*/     ULONG32      DispatchCount;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x07C*/     UINT8        _PADDING3_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x080*/     struct _KEVENT* PassiveEvent;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x088*/     struct _KTRAP_FRAME* TrapFrame;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x090*/     VOID*        DisconnectData;                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x098*/     struct _KTHREAD* ServiceThread;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x0A0*/     struct _INTERRUPT_CONNECTION_DATA* ConnectionData;                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x0A8*/     VOID*        IntTrackEntry;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x0B0*/     struct _ISRDPCSTATS IsrDpcStats;                                                                                                                                                                                                                                                                                                                                                                                      // 8 elements, 0x40 bytes (sizeof)   
/*0x0F0*/     VOID*        RedirectObject;                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x0F8*/     UINT8        Padding[8];                                                                                                                                                                                                                                                                                                                                                                                                                                   
          }KINTERRUPT, *PKINTERRUPT;                                                                                                                                                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _KIST_BASE_FRAME        // 4 elements, 0x20 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _KPCR* KernelGsBase;                                           
/*0x008*/     struct _KIST_LINK_FRAME* IstStack;                                    
/*0x010*/     UINT64       PreviousGsBase;                                          
/*0x018*/     UINT64       PreviousCr3;                                             
          }KIST_BASE_FRAME, *PKIST_BASE_FRAME;                                      
                                                                                    
          typedef struct _KIST_LINK_FRAME            // 4 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _KIST_BASE_FRAME* IstBaseFrame;                                    
/*0x008*/     ULONG32      Signature;                                                   
/*0x00C*/     ULONG32      Reserved0;                                                   
/*0x010*/     UINT64       Reserved[2];                                                 
          }KIST_LINK_FRAME, *PKIST_LINK_FRAME;                                          
                                                                                        
          typedef struct _KLDR_DATA_TABLE_ENTRY                // 21 elements, 0xA0 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _LIST_ENTRY InLoadOrderLinks;             // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     VOID*        ExceptionTable;                                                         
/*0x018*/     ULONG32      ExceptionTableSize;                                                     
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                        
/*0x020*/     VOID*        GpValue;                                                                
/*0x028*/     struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;                                     
/*0x030*/     VOID*        DllBase;                                                                
/*0x038*/     VOID*        EntryPoint;                                                             
/*0x040*/     ULONG32      SizeOfImage;                                                            
/*0x044*/     UINT8        _PADDING1_[0x4];                                                        
/*0x048*/     struct _UNICODE_STRING FullDllName;              // 3 elements, 0x10 bytes (sizeof)  
/*0x058*/     struct _UNICODE_STRING BaseDllName;              // 3 elements, 0x10 bytes (sizeof)  
/*0x068*/     ULONG32      Flags;                                                                  
/*0x06C*/     UINT16       LoadCount;                                                              
              union                                            // 4 elements, 0x2 bytes (sizeof)   
              {                                                                                    
                  struct                                       // 3 elements, 0x2 bytes (sizeof)   
                  {                                                                                
/*0x06E*/             UINT16       SignatureLevel : 4;         // 0 BitPosition                    
/*0x06E*/             UINT16       SignatureType : 3;          // 4 BitPosition                    
/*0x06E*/             UINT16       Unused : 9;                 // 7 BitPosition                    
                  };                                                                               
/*0x06E*/         UINT16       EntireField;                                                        
              }u1;                                                                                 
/*0x070*/     VOID*        SectionPointer;                                                         
/*0x078*/     ULONG32      CheckSum;                                                               
/*0x07C*/     ULONG32      CoverageSectionSize;                                                    
/*0x080*/     VOID*        CoverageSection;                                                        
/*0x088*/     VOID*        LoadedImports;                                                          
/*0x090*/     VOID*        Spare;                                                                  
/*0x098*/     ULONG32      SizeOfImageNotRounded;                                                  
/*0x09C*/     ULONG32      TimeDateStamp;                                                          
          }KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY;                                         
                                                                                                   
          typedef struct _KSPIN_LOCK_QUEUE    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _KSPIN_LOCK_QUEUE* Next;                                    
/*0x008*/     UINT64*      Lock;                                                 
          }KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;                                   
                                                                                 
          typedef struct _KLOCK_QUEUE_HANDLE      // 2 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _KSPIN_LOCK_QUEUE LockQueue; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        OldIrql;                                                  
/*0x011*/     UINT8        _PADDING0_[0x7];                                          
          }KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE;                                   
                                                                                     
          typedef struct _NT_TIB                                    // 8 elements, 0x38 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;                                    
/*0x008*/     VOID*        StackBase;                                                                  
/*0x010*/     VOID*        StackLimit;                                                                 
/*0x018*/     VOID*        SubSystemTib;                                                               
              union                                                 // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                        
/*0x020*/         VOID*        FiberData;                                                              
/*0x020*/         ULONG32      Version;                                                                
              };                                                                                       
/*0x028*/     VOID*        ArbitraryUserPointer;                                                       
/*0x030*/     struct _NT_TIB* Self;                                                                    
          }NT_TIB, *PNT_TIB;                                                                           
                                                                                                       
          typedef union _KPRCBFLAG                        // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     LONG32       PrcbFlags;                                                       
              struct                                      // 4 elements, 0x4 bytes (sizeof) 
              {                                                                             
/*0x000*/         ULONG32      BamQosLevel : 2;           // 0 BitPosition                  
/*0x000*/         ULONG32      PendingQosUpdate : 2;      // 2 BitPosition                  
/*0x000*/         ULONG32      CacheIsolationEnabled : 1; // 4 BitPosition                  
/*0x000*/         ULONG32      PrcbFlagsReserved : 27;    // 5 BitPosition                  
              };                                                                            
          }KPRCBFLAG, *PKPRCBFLAG;                                                          
                                                                                            
          typedef struct _KSPECIAL_REGISTERS     // 30 elements, 0xF0 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Cr0;                                                      
/*0x008*/     UINT64       Cr2;                                                      
/*0x010*/     UINT64       Cr3;                                                      
/*0x018*/     UINT64       Cr4;                                                      
/*0x020*/     UINT64       KernelDr0;                                                
/*0x028*/     UINT64       KernelDr1;                                                
/*0x030*/     UINT64       KernelDr2;                                                
/*0x038*/     UINT64       KernelDr3;                                                
/*0x040*/     UINT64       KernelDr6;                                                
/*0x048*/     UINT64       KernelDr7;                                                
/*0x050*/     struct _KDESCRIPTOR Gdtr;          // 3 elements, 0x10 bytes (sizeof)  
/*0x060*/     struct _KDESCRIPTOR Idtr;          // 3 elements, 0x10 bytes (sizeof)  
/*0x070*/     UINT16       Tr;                                                       
/*0x072*/     UINT16       Ldtr;                                                     
/*0x074*/     ULONG32      MxCsr;                                                    
/*0x078*/     UINT64       DebugControl;                                             
/*0x080*/     UINT64       LastBranchToRip;                                          
/*0x088*/     UINT64       LastBranchFromRip;                                        
/*0x090*/     UINT64       LastExceptionToRip;                                       
/*0x098*/     UINT64       LastExceptionFromRip;                                     
/*0x0A0*/     UINT64       Cr8;                                                      
/*0x0A8*/     UINT64       MsrGsBase;                                                
/*0x0B0*/     UINT64       MsrGsSwap;                                                
/*0x0B8*/     UINT64       MsrStar;                                                  
/*0x0C0*/     UINT64       MsrLStar;                                                 
/*0x0C8*/     UINT64       MsrCStar;                                                 
/*0x0D0*/     UINT64       MsrSyscallMask;                                           
/*0x0D8*/     UINT64       Xcr0;                                                     
/*0x0E0*/     UINT64       MsrFsBase;                                                
/*0x0E8*/     UINT64       SpecialPadding0;                                          
          }KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS;                                    
                                                                                     
          typedef struct _KPROCESSOR_STATE                 // 2 elements, 0x5C0 bytes (sizeof)  
          {                                                                                     
/*0x000*/     struct _KSPECIAL_REGISTERS SpecialRegisters; // 30 elements, 0xF0 bytes (sizeof)  
/*0x0F0*/     struct _CONTEXT ContextFrame;                // 64 elements, 0x4D0 bytes (sizeof) 
          }KPROCESSOR_STATE, *PKPROCESSOR_STATE;                                                
                                                                                                
          typedef struct _PP_LOOKASIDE_LIST // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _GENERAL_LOOKASIDE* P;                                    
/*0x008*/     struct _GENERAL_LOOKASIDE* L;                                    
          }PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST;                                   
                                                                               
          typedef struct _KTIMER_TABLE_ENTRY // 3 elements, 0x20 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       Lock;                                                
/*0x008*/     struct _LIST_ENTRY Entry;      // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     union _ULARGE_INTEGER Time;    // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY;                                   
                                                                                
          typedef struct _KTIMER_TABLE                      // 2 elements, 0x2200 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _KTIMER* TimerExpiry[64];                                                   
/*0x200*/     struct _KTIMER_TABLE_ENTRY TimerEntries[256];                                      
          }KTIMER_TABLE, *PKTIMER_TABLE;                                                         
                                                                                                 
          typedef struct _PROC_IDLE_POLICY     // 6 elements, 0x6 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        PromotePercent;                                       
/*0x001*/     UINT8        DemotePercent;                                        
/*0x002*/     UINT8        PromotePercentBase;                                   
/*0x003*/     UINT8        DemotePercentBase;                                    
/*0x004*/     UINT8        AllowScaling;                                         
/*0x005*/     UINT8        ForceLightIdle;                                       
          }PROC_IDLE_POLICY, *PPROC_IDLE_POLICY;                                  
                                                                                 
          typedef union _PPM_IDLE_SYNCHRONIZATION_STATE // 3 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       AsLong;                                                        
/*0x000*/     LONG32       RefCount : 24;               // 0 BitPosition                  
/*0x000*/     ULONG32      State : 8;                   // 24 BitPosition                 
          }PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE;                                  
                                                                                          
          typedef struct _PROC_FEEDBACK                   // 18 elements, 0x90 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT64       Lock;                                                              
/*0x008*/     UINT64       CyclesLast;                                                        
/*0x010*/     UINT64       CyclesActive;                                                      
/*0x018*/     struct _PROC_FEEDBACK_COUNTER* Counters[2];                                     
/*0x028*/     UINT64       LastUpdateTime;                                                    
/*0x030*/     UINT64       UnscaledTime;                                                      
/*0x038*/     INT64        UnaccountedTime;                                                   
/*0x040*/     UINT64       ScaledTime[2];                                                     
/*0x050*/     UINT64       UnaccountedKernelTime;                                             
/*0x058*/     UINT64       PerformanceScaledKernelTime;                                       
/*0x060*/     ULONG32      UserTimeLast;                                                      
/*0x064*/     ULONG32      KernelTimeLast;                                                    
/*0x068*/     UINT64       IdleGenerationNumberLast;                                          
/*0x070*/     UINT64       HvActiveTimeLast;                                                  
/*0x078*/     UINT64       StallCyclesLast;                                                   
/*0x080*/     UINT64       StallTime;                                                         
/*0x088*/     UINT8        KernelTimesIndex;                                                  
/*0x089*/     UINT8        CounterDiscardsIdleTime;                                           
/*0x08A*/     UINT8        _PADDING0_[0x6];                                                   
          }PROC_FEEDBACK, *PPROC_FEEDBACK;                                                    
                                                                                              
          typedef struct _PPM_FFH_THROTTLE_STATE_INFO // 5 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT8        EnableLogging;                                                
/*0x001*/     UINT8        _PADDING0_[0x3];                                              
/*0x004*/     ULONG32      MismatchCount;                                                
/*0x008*/     UINT8        Initialized;                                                  
/*0x009*/     UINT8        _PADDING1_[0x7];                                              
/*0x010*/     UINT64       LastValue;                                                    
/*0x018*/     union _LARGE_INTEGER LastLogTickCount;  // 4 elements, 0x8 bytes (sizeof)  
          }PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO;                                   
                                                                                         
          typedef struct _PROC_IDLE_SNAP // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Time;                                            
/*0x008*/     UINT64       Idle;                                            
          }PROC_IDLE_SNAP, *PPROC_IDLE_SNAP;                                   
                                                                            
          typedef struct _PROCESSOR_POWER_STATE                         // 56 elements, 0x200 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     struct _PPM_IDLE_STATES* IdleStates;                                                           
/*0x008*/     struct _PROC_IDLE_ACCOUNTING* IdleAccounting;                                                  
/*0x010*/     UINT64       IdleTimeLast;                                                                     
/*0x018*/     UINT64       IdleTimeTotal;                                                                    
/*0x020*/     UINT64       IdleTimeEntry;                                                                    
/*0x028*/     UINT64       IdleTimeExpiration;                                                               
/*0x030*/     UINT8        NonInterruptibleTransition;                                                       
/*0x031*/     UINT8        PepWokenTransition;                                                               
/*0x032*/     UINT8        HvTargetState;                                                                    
/*0x033*/     UINT8        Reserved;                                                                         
/*0x034*/     ULONG32      TargetIdleState;                                                                  
/*0x038*/     struct _PROC_IDLE_POLICY IdlePolicy;                      // 6 elements, 0x6 bytes (sizeof)    
/*0x03E*/     UINT8        _PADDING0_[0x2];                                                                  
/*0x040*/     union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;    // 3 elements, 0x4 bytes (sizeof)    
/*0x044*/     UINT8        _PADDING1_[0x4];                                                                  
/*0x048*/     struct _PROC_FEEDBACK PerfFeedback;                       // 18 elements, 0x90 bytes (sizeof)  
/*0x0D8*/     enum _PROC_HYPERVISOR_STATE Hypervisor;                                                        
/*0x0DC*/     ULONG32      LastSysTime;                                                                      
/*0x0E0*/     UINT64       WmiDispatchPtr;                                                                   
/*0x0E8*/     LONG32       WmiInterfaceEnabled;                                                              
/*0x0EC*/     UINT8        _PADDING2_[0x4];                                                                  
/*0x0F0*/     struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo; // 5 elements, 0x20 bytes (sizeof)   
/*0x110*/     struct _KDPC PerfActionDpc;                               // 11 elements, 0x40 bytes (sizeof)  
/*0x150*/     LONG32       PerfActionMask;                                                                   
/*0x154*/     UINT8        _PADDING3_[0x4];                                                                  
/*0x158*/     struct _PROC_IDLE_SNAP HvIdleCheck;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x168*/     struct _PROC_PERF_CHECK* PerfCheck;                                                            
/*0x170*/     struct _PROC_PERF_DOMAIN* Domain;                                                              
/*0x178*/     struct _PROC_PERF_CONSTRAINT* PerfConstraint;                                                  
/*0x180*/     struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;                                               
/*0x188*/     struct _PPM_CONCURRENCY_ACCOUNTING* ClassConcurrency;                                          
/*0x190*/     struct _PROC_PERF_LOAD* Load;                                                                  
/*0x198*/     struct _PROC_PERF_HISTORY* PerfHistory;                                                        
/*0x1A0*/     UINT8        ArchitecturalEfficiencyClass;                                                     
/*0x1A1*/     UINT8        PerformanceSchedulingClass;                                                       
/*0x1A2*/     UINT8        EfficiencySchedulingClass;                                                        
/*0x1A3*/     UINT8        GuaranteedPerformancePercent;                                                     
/*0x1A4*/     UINT8        Parked;                                                                           
/*0x1A5*/     UINT8        LongPriorQosPeriod;                                                               
/*0x1A6*/     UINT16       LatestAffinitizedPercent;                                                         
/*0x1A8*/     ULONG32      LatestPerformancePercent;                                                         
/*0x1AC*/     ULONG32      AveragePerformancePercent;                                                        
/*0x1B0*/     ULONG32      RelativePerformance;                                                              
/*0x1B4*/     ULONG32      Utility;                                                                          
/*0x1B8*/     ULONG32      AffinitizedUtility;                                                               
/*0x1BC*/     UINT8        _PADDING4_[0x4];                                                                  
              union                                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                              
/*0x1C0*/         UINT64       SnapTimeLast;                                                                 
/*0x1C0*/         UINT64       EnergyConsumed;                                                               
              };                                                                                             
/*0x1C8*/     UINT64       ActiveTime;                                                                       
/*0x1D0*/     UINT64       TotalTime;                                                                        
/*0x1D8*/     struct _POP_FX_DEVICE* FxDevice;                                                               
/*0x1E0*/     UINT64       LastQosTranstionTsc;                                                              
/*0x1E8*/     UINT64       QosTransitionHysteresis;                                                          
/*0x1F0*/     enum _KHETERO_CPU_QOS RequestedQosClass;                                                       
/*0x1F4*/     enum _KHETERO_CPU_QOS ResolvedQosClass;                                                        
/*0x1F8*/     UINT16       QosEquivalencyMask;                                                               
/*0x1FA*/     UINT16       HwFeedbackTableIndex;                                                             
/*0x1FC*/     UINT8        HwFeedbackParkHint;                                                               
/*0x1FD*/     UINT8        HwFeedbackPerformanceClass;                                                       
/*0x1FE*/     UINT8        HwFeedbackEfficiencyClass;                                                        
/*0x1FF*/     UINT8        HeteroCoreType;                                                                   
          }PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE;                                                   
                                                                                                             
          typedef struct _SYNCH_COUNTERS                                          // 46 elements, 0xB8 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     ULONG32      SpinLockAcquireCount;                                                                      
/*0x004*/     ULONG32      SpinLockContentionCount;                                                                   
/*0x008*/     ULONG32      SpinLockSpinCount;                                                                         
/*0x00C*/     ULONG32      IpiSendRequestBroadcastCount;                                                              
/*0x010*/     ULONG32      IpiSendRequestRoutineCount;                                                                
/*0x014*/     ULONG32      IpiSendSoftwareInterruptCount;                                                             
/*0x018*/     ULONG32      ExInitializeResourceCount;                                                                 
/*0x01C*/     ULONG32      ExReInitializeResourceCount;                                                               
/*0x020*/     ULONG32      ExDeleteResourceCount;                                                                     
/*0x024*/     ULONG32      ExecutiveResourceAcquiresCount;                                                            
/*0x028*/     ULONG32      ExecutiveResourceContentionsCount;                                                         
/*0x02C*/     ULONG32      ExecutiveResourceReleaseExclusiveCount;                                                    
/*0x030*/     ULONG32      ExecutiveResourceReleaseSharedCount;                                                       
/*0x034*/     ULONG32      ExecutiveResourceConvertsCount;                                                            
/*0x038*/     ULONG32      ExAcqResExclusiveAttempts;                                                                 
/*0x03C*/     ULONG32      ExAcqResExclusiveAcquiresExclusive;                                                        
/*0x040*/     ULONG32      ExAcqResExclusiveAcquiresExclusiveRecursive;                                               
/*0x044*/     ULONG32      ExAcqResExclusiveWaits;                                                                    
/*0x048*/     ULONG32      ExAcqResExclusiveNotAcquires;                                                              
/*0x04C*/     ULONG32      ExAcqResSharedAttempts;                                                                    
/*0x050*/     ULONG32      ExAcqResSharedAcquiresExclusive;                                                           
/*0x054*/     ULONG32      ExAcqResSharedAcquiresShared;                                                              
/*0x058*/     ULONG32      ExAcqResSharedAcquiresSharedRecursive;                                                     
/*0x05C*/     ULONG32      ExAcqResSharedWaits;                                                                       
/*0x060*/     ULONG32      ExAcqResSharedNotAcquires;                                                                 
/*0x064*/     ULONG32      ExAcqResSharedStarveExclusiveAttempts;                                                     
/*0x068*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresExclusive;                                            
/*0x06C*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresShared;                                               
/*0x070*/     ULONG32      ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;                                      
/*0x074*/     ULONG32      ExAcqResSharedStarveExclusiveWaits;                                                        
/*0x078*/     ULONG32      ExAcqResSharedStarveExclusiveNotAcquires;                                                  
/*0x07C*/     ULONG32      ExAcqResSharedWaitForExclusiveAttempts;                                                    
/*0x080*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresExclusive;                                           
/*0x084*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresShared;                                              
/*0x088*/     ULONG32      ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;                                     
/*0x08C*/     ULONG32      ExAcqResSharedWaitForExclusiveWaits;                                                       
/*0x090*/     ULONG32      ExAcqResSharedWaitForExclusiveNotAcquires;                                                 
/*0x094*/     ULONG32      ExSetResOwnerPointerExclusive;                                                             
/*0x098*/     ULONG32      ExSetResOwnerPointerSharedNew;                                                             
/*0x09C*/     ULONG32      ExSetResOwnerPointerSharedOld;                                                             
/*0x0A0*/     ULONG32      ExTryToAcqExclusiveAttempts;                                                               
/*0x0A4*/     ULONG32      ExTryToAcqExclusiveAcquires;                                                               
/*0x0A8*/     ULONG32      ExBoostExclusiveOwner;                                                                     
/*0x0AC*/     ULONG32      ExBoostSharedOwners;                                                                       
/*0x0B0*/     ULONG32      ExEtwSynchTrackingNotificationsCount;                                                      
/*0x0B4*/     ULONG32      ExEtwSynchTrackingNotificationsAccountedCount;                                             
          }SYNCH_COUNTERS, *PSYNCH_COUNTERS;                                                                          
                                                                                                                      
          typedef struct _KSECURE_FAULT_INFORMATION // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       FaultCode;                                                  
/*0x008*/     UINT64       FaultVa;                                                    
          }KSECURE_FAULT_INFORMATION, *PKSECURE_FAULT_INFORMATION;                                   
                                                                                       
          typedef struct _KSHARED_READY_QUEUE         // 13 elements, 0x270 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       Lock;                                                           
/*0x008*/     ULONG32      ReadySummary;                                                   
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                
/*0x010*/     struct _LIST_ENTRY ReadyListHead[32];                                        
/*0x210*/     CHAR         RunningSummary[64];                                             
/*0x250*/     UINT8        Span;                                                           
/*0x251*/     UINT8        LowProcIndex;                                                   
/*0x252*/     UINT8        QueueIndex;                                                     
/*0x253*/     UINT8        ProcCount;                                                      
/*0x254*/     UINT8        ScanOwner;                                                      
/*0x255*/     UINT8        Spare[3];                                                       
/*0x258*/     UINT64       Affinity;                                                       
/*0x260*/     ULONG32      ReadyThreadCount;                                               
/*0x264*/     UINT8        _PADDING1_[0x4];                                                
/*0x268*/     UINT64       ReadyQueueExpectedRunTime;                                      
          }KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE;                                     
                                                                                           
          typedef struct _KTIMER_EXPIRATION_TRACE      // 2 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT64       InterruptTime;                                                 
/*0x008*/     union _LARGE_INTEGER PerformanceCounter; // 4 elements, 0x8 bytes (sizeof)  
          }KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE;                                   
                                                                                          
          typedef struct _MACHINE_FRAME // 8 elements, 0x28 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT64       Rip;                                            
/*0x008*/     UINT16       SegCs;                                          
/*0x00A*/     UINT16       Fill1[3];                                       
/*0x010*/     ULONG32      EFlags;                                         
/*0x014*/     ULONG32      Fill2;                                          
/*0x018*/     UINT64       Rsp;                                            
/*0x020*/     UINT16       SegSs;                                          
/*0x022*/     UINT16       Fill3[3];                                       
          }MACHINE_FRAME, *PMACHINE_FRAME;                                   
                                                                           
          typedef struct _MACHINE_CHECK_CONTEXT   // 6 elements, 0x50 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _MACHINE_FRAME MachineFrame; // 8 elements, 0x28 bytes (sizeof) 
/*0x028*/     UINT64       Rax;                                                      
/*0x030*/     UINT64       Rcx;                                                      
/*0x038*/     UINT64       Rdx;                                                      
/*0x040*/     UINT64       GsBase;                                                   
/*0x048*/     UINT64       Cr3;                                                      
          }MACHINE_CHECK_CONTEXT, *PMACHINE_CHECK_CONTEXT;                                   
                                                                                     
          typedef struct _KREQUEST_PACKET                   // 2 elements, 0x20 bytes (sizeof) 
          {                                                                                    
/*0x000*/     VOID*        CurrentPacket[3];                                                   
/*0x018*/     FUNCT_00EF_1B97_WorkerRoutine* WorkerRoutine;                                    
          }KREQUEST_PACKET, *PKREQUEST_PACKET;                                                 
                                                                                               
          typedef struct _REQUEST_MAILBOX            // 5 elements, 0x40 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _REQUEST_MAILBOX* Next;                                            
/*0x008*/     UINT64       RequestSummary;                                              
/*0x010*/     struct _KREQUEST_PACKET RequestPacket; // 2 elements, 0x20 bytes (sizeof) 
/*0x030*/     LONG32*      NodeTargetCountAddr;                                         
/*0x038*/     LONG32       NodeTargetCount;                                             
/*0x03C*/     UINT8        _PADDING0_[0x4];                                             
          }REQUEST_MAILBOX, *PREQUEST_MAILBOX;                                          
                                                                                        
           typedef struct _KPRCB                                                    // 329 elements, 0x7EC0 bytes (sizeof) 
           {                                                                                                               
/*0x000*/      ULONG32      MxCsr;                                                                                         
/*0x004*/      UINT8        LegacyNumber;                                                                                  
/*0x005*/      UINT8        ReservedMustBeZero;                                                                            
/*0x006*/      UINT8        InterruptRequest;                                                                              
/*0x007*/      UINT8        IdleHalt;                                                                                      
/*0x008*/      struct _KTHREAD* CurrentThread;                                                                             
/*0x010*/      struct _KTHREAD* NextThread;                                                                                
/*0x018*/      struct _KTHREAD* IdleThread;                                                                                
/*0x020*/      UINT8        NestingLevel;                                                                                  
/*0x021*/      UINT8        ClockOwner;                                                                                    
               union                                                                // 2 elements, 0x1 bytes (sizeof)      
               {                                                                                                           
/*0x022*/          UINT8        PendingTickFlags;                                                                          
                   struct                                                           // 2 elements, 0x1 bytes (sizeof)      
                   {                                                                                                       
/*0x022*/              UINT8        PendingTick : 1;                                // 0 BitPosition                       
/*0x022*/              UINT8        PendingBackupTick : 1;                          // 1 BitPosition                       
                   };                                                                                                      
               };                                                                                                          
/*0x023*/      UINT8        IdleState;                                                                                     
/*0x024*/      ULONG32      Number;                                                                                        
/*0x028*/      UINT64       RspBase;                                                                                       
/*0x030*/      UINT64       PrcbLock;                                                                                      
/*0x038*/      CHAR*        PriorityState;                                                                                 
/*0x040*/      CHAR         CpuType;                                                                                       
/*0x041*/      CHAR         CpuID;                                                                                         
               union                                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                                           
/*0x042*/          UINT16       CpuStep;                                                                                   
                   struct                                                           // 2 elements, 0x2 bytes (sizeof)      
                   {                                                                                                       
/*0x042*/              UINT8        CpuStepping;                                                                           
/*0x043*/              UINT8        CpuModel;                                                                              
                   };                                                                                                      
               };                                                                                                          
/*0x044*/      ULONG32      MHz;                                                                                           
/*0x048*/      UINT64       HalReserved[8];                                                                                
/*0x088*/      UINT16       MinorVersion;                                                                                  
/*0x08A*/      UINT16       MajorVersion;                                                                                  
/*0x08C*/      UINT8        BuildType;                                                                                     
/*0x08D*/      UINT8        CpuVendor;                                                                                     
/*0x08E*/      UINT8        CoresPerPhysicalProcessor;                                                                     
/*0x08F*/      UINT8        LogicalProcessorsPerCore;                                                                      
/*0x090*/      UINT64       PrcbPad04[6];                                                                                  
/*0x0C0*/      struct _KNODE* ParentNode;                                                                                  
/*0x0C8*/      UINT64       GroupSetMember;                                                                                
/*0x0D0*/      UINT8        Group;                                                                                         
/*0x0D1*/      UINT8        GroupIndex;                                                                                    
/*0x0D2*/      UINT8        PrcbPad05[2];                                                                                  
/*0x0D4*/      ULONG32      InitialApicId;                                                                                 
/*0x0D8*/      ULONG32      ScbOffset;                                                                                     
/*0x0DC*/      ULONG32      ApicMask;                                                                                      
/*0x0E0*/      VOID*        AcpiReserved;                                                                                  
/*0x0E8*/      ULONG32      CFlushSize;                                                                                    
/*0x0EC*/      union _KPRCBFLAG PrcbFlags;                                          // 5 elements, 0x4 bytes (sizeof)      
               union                                                                // 2 elements, 0x10 bytes (sizeof)     
               {                                                                                                           
                   struct                                                           // 8 elements, 0x10 bytes (sizeof)     
                   {                                                                                                       
/*0x0F0*/              UINT64       TrappedSecurityDomain;                                                                 
                       union                                                        // 2 elements, 0x1 bytes (sizeof)      
                       {                                                                                                   
/*0x0F8*/                  UINT8        BpbState;                                                                          
                           struct                                                   // 6 elements, 0x1 bytes (sizeof)      
                           {                                                                                               
/*0x0F8*/                      UINT8        BpbCpuIdle : 1;                         // 0 BitPosition                       
/*0x0F8*/                      UINT8        BpbFlushRsbOnTrap : 1;                  // 1 BitPosition                       
/*0x0F8*/                      UINT8        BpbIbpbOnReturn : 1;                    // 2 BitPosition                       
/*0x0F8*/                      UINT8        BpbIbpbOnTrap : 1;                      // 3 BitPosition                       
/*0x0F8*/                      UINT8        BpbIbpbOnRetpolineExit : 1;             // 4 BitPosition                       
/*0x0F8*/                      UINT8        BpbStateReserved : 3;                   // 5 BitPosition                       
                           };                                                                                              
                       };                                                                                                  
                       union                                                        // 2 elements, 0x1 bytes (sizeof)      
                       {                                                                                                   
/*0x0F9*/                  UINT8        BpbFeatures;                                                                       
                           struct                                                   // 4 elements, 0x1 bytes (sizeof)      
                           {                                                                                               
/*0x0F9*/                      UINT8        BpbClearOnIdle : 1;                     // 0 BitPosition                       
/*0x0F9*/                      UINT8        BpbEnabled : 1;                         // 1 BitPosition                       
/*0x0F9*/                      UINT8        BpbSmep : 1;                            // 2 BitPosition                       
/*0x0F9*/                      UINT8        BpbFeaturesReserved : 5;                // 3 BitPosition                       
                           };                                                                                              
                       };                                                                                                  
/*0x0FA*/              UINT8        BpbCurrentSpecCtrl;                                                                    
/*0x0FB*/              UINT8        BpbKernelSpecCtrl;                                                                     
/*0x0FC*/              UINT8        BpbNmiSpecCtrl;                                                                        
/*0x0FD*/              UINT8        BpbUserSpecCtrl;                                                                       
/*0x0FE*/              INT16        PairRegister;                                                                          
                   };                                                                                                      
/*0x0F0*/          UINT64       PrcbPad11[2];                                                                              
               };                                                                                                          
/*0x100*/      struct _KPROCESSOR_STATE ProcessorState;                             // 2 elements, 0x5C0 bytes (sizeof)    
/*0x6C0*/      struct _XSAVE_AREA_HEADER* ExtendedSupervisorState;                                                         
/*0x6C8*/      ULONG32      ProcessorSignature;                                                                            
/*0x6CC*/      ULONG32      ProcessorFlags;                                                                                
               union                                                                // 2 elements, 0x8 bytes (sizeof)      
               {                                                                                                           
                   struct                                                           // 5 elements, 0x8 bytes (sizeof)      
                   {                                                                                                       
/*0x6D0*/              UINT8        BpbRetpolineExitSpecCtrl;                                                              
/*0x6D1*/              UINT8        BpbTrappedRetpolineExitSpecCtrl;                                                       
                       union                                                        // 2 elements, 0x1 bytes (sizeof)      
                       {                                                                                                   
/*0x6D2*/                  UINT8        BpbTrappedBpbState;                                                                
                           struct                                                   // 6 elements, 0x1 bytes (sizeof)      
                           {                                                                                               
/*0x6D2*/                      UINT8        BpbTrappedCpuIdle : 1;                  // 0 BitPosition                       
/*0x6D2*/                      UINT8        BpbTrappedFlushRsbOnTrap : 1;           // 1 BitPosition                       
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnReturn : 1;             // 2 BitPosition                       
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnTrap : 1;               // 3 BitPosition                       
/*0x6D2*/                      UINT8        BpbTrappedIbpbOnRetpolineExit : 1;      // 4 BitPosition                       
/*0x6D2*/                      UINT8        BpbtrappedBpbStateReserved : 3;         // 5 BitPosition                       
                           };                                                                                              
                       };                                                                                                  
                       union                                                        // 2 elements, 0x1 bytes (sizeof)      
                       {                                                                                                   
/*0x6D3*/                  UINT8        BpbRetpolineState;                                                                 
                           struct                                                   // 4 elements, 0x1 bytes (sizeof)      
                           {                                                                                               
/*0x6D3*/                      UINT8        BpbRunningNonRetpolineCode : 1;         // 0 BitPosition                       
/*0x6D3*/                      UINT8        BpbIndirectCallsSafe : 1;               // 1 BitPosition                       
/*0x6D3*/                      UINT8        BpbRetpolineEnabled : 1;                // 2 BitPosition                       
/*0x6D3*/                      UINT8        BpbRetpolineStateReserved : 5;          // 3 BitPosition                       
                           };                                                                                              
                       };                                                                                                  
/*0x6D4*/              ULONG32      PrcbPad12b;                                                                            
                   };                                                                                                      
/*0x6D0*/          UINT64       PrcbPad12a;                                                                                
               };                                                                                                          
/*0x6D8*/      UINT64       PrcbPad12[3];                                                                                  
/*0x6F0*/      struct _KSPIN_LOCK_QUEUE LockQueue[17];                                                                     
/*0x800*/      struct _PP_LOOKASIDE_LIST PPLookasideList[16];                                                              
/*0x900*/      struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];                                                  
/*0x1500*/     struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];                                                   
/*0x2100*/     struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];                                                    
/*0x2D00*/     UINT64       PrcbPad20;                                                                                     
/*0x2D08*/     struct _SINGLE_LIST_ENTRY DeferredReadyListHead;                     // 1 elements, 0x8 bytes (sizeof)      
/*0x2D10*/     LONG32       MmPageFaultCount;                                                                              
/*0x2D14*/     LONG32       MmCopyOnWriteCount;                                                                            
/*0x2D18*/     LONG32       MmTransitionCount;                                                                             
/*0x2D1C*/     LONG32       MmDemandZeroCount;                                                                             
/*0x2D20*/     LONG32       MmPageReadCount;                                                                               
/*0x2D24*/     LONG32       MmPageReadIoCount;                                                                             
/*0x2D28*/     LONG32       MmDirtyPagesWriteCount;                                                                        
/*0x2D2C*/     LONG32       MmDirtyWriteIoCount;                                                                           
/*0x2D30*/     LONG32       MmMappedPagesWriteCount;                                                                       
/*0x2D34*/     LONG32       MmMappedWriteIoCount;                                                                          
/*0x2D38*/     ULONG32      KeSystemCalls;                                                                                 
/*0x2D3C*/     ULONG32      KeContextSwitches;                                                                             
/*0x2D40*/     ULONG32      PrcbPad40;                                                                                     
/*0x2D44*/     ULONG32      CcFastReadNoWait;                                                                              
/*0x2D48*/     ULONG32      CcFastReadWait;                                                                                
/*0x2D4C*/     ULONG32      CcFastReadNotPossible;                                                                         
/*0x2D50*/     ULONG32      CcCopyReadNoWait;                                                                              
/*0x2D54*/     ULONG32      CcCopyReadWait;                                                                                
/*0x2D58*/     ULONG32      CcCopyReadNoWaitMiss;                                                                          
/*0x2D5C*/     LONG32       IoReadOperationCount;                                                                          
/*0x2D60*/     LONG32       IoWriteOperationCount;                                                                         
/*0x2D64*/     LONG32       IoOtherOperationCount;                                                                         
/*0x2D68*/     union _LARGE_INTEGER IoReadTransferCount;                            // 4 elements, 0x8 bytes (sizeof)      
/*0x2D70*/     union _LARGE_INTEGER IoWriteTransferCount;                           // 4 elements, 0x8 bytes (sizeof)      
/*0x2D78*/     union _LARGE_INTEGER IoOtherTransferCount;                           // 4 elements, 0x8 bytes (sizeof)      
/*0x2D80*/     LONG32       PacketBarrier;                                                                                 
/*0x2D84*/     LONG32       TargetCount;                                                                                   
/*0x2D88*/     ULONG32      IpiFrozen;                                                                                     
/*0x2D8C*/     ULONG32      PrcbPad30;                                                                                     
/*0x2D90*/     VOID*        IsrDpcStats;                                                                                   
/*0x2D98*/     ULONG32      DeviceInterrupts;                                                                              
/*0x2D9C*/     LONG32       LookasideIrpFloat;                                                                             
/*0x2DA0*/     ULONG32      InterruptLastCount;                                                                            
/*0x2DA4*/     ULONG32      InterruptRate;                                                                                 
/*0x2DA8*/     UINT64       LastNonHrTimerExpiration;                                                                      
/*0x2DB0*/     struct _KPRCB* PairPrcb;                                                                                    
/*0x2DB8*/     UINT64       PrcbPad35[1];                                                                                  
/*0x2DC0*/     union _SLIST_HEADER InterruptObjectPool;                             // 3 elements, 0x10 bytes (sizeof)     
/*0x2DD0*/     UINT64       PrcbPad41[6];                                                                                  
/*0x2E00*/     struct _KDPC_DATA DpcData[2];                                                                               
/*0x2E50*/     VOID*        DpcStack;                                                                                      
/*0x2E58*/     LONG32       MaximumDpcQueueDepth;                                                                          
/*0x2E5C*/     ULONG32      DpcRequestRate;                                                                                
/*0x2E60*/     ULONG32      MinimumDpcRate;                                                                                
/*0x2E64*/     ULONG32      DpcLastCount;                                                                                  
/*0x2E68*/     UINT8        ThreadDpcEnable;                                                                               
/*0x2E69*/     UINT8        QuantumEnd;                                                                                    
/*0x2E6A*/     UINT8        DpcRoutineActive;                                                                              
/*0x2E6B*/     UINT8        IdleSchedule;                                                                                  
               union                                                                // 4 elements, 0x4 bytes (sizeof)      
               {                                                                                                           
/*0x2E6C*/         LONG32       DpcRequestSummary;                                                                         
/*0x2E6C*/         INT16        DpcRequestSlot[2];                                                                         
                   struct                                                           // 2 elements, 0x4 bytes (sizeof)      
                   {                                                                                                       
/*0x2E6C*/             INT16        NormalDpcState;                                                                        
/*0x2E6E*/             INT16        ThreadDpcState;                                                                        
                   };                                                                                                      
                   struct                                                           // 10 elements, 0x4 bytes (sizeof)     
                   {                                                                                                       
/*0x2E6C*/             ULONG32      DpcNormalProcessingActive : 1;                  // 0 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalProcessingRequested : 1;               // 1 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalThreadSignal : 1;                      // 2 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalTimerExpiration : 1;                   // 3 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalDpcPresent : 1;                        // 4 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalLocalInterrupt : 1;                    // 5 BitPosition                       
/*0x2E6C*/             ULONG32      DpcNormalSpare : 10;                            // 6 BitPosition                       
/*0x2E6C*/             ULONG32      DpcThreadActive : 1;                            // 16 BitPosition                      
/*0x2E6C*/             ULONG32      DpcThreadRequested : 1;                         // 17 BitPosition                      
/*0x2E6C*/             ULONG32      DpcThreadSpare : 14;                            // 18 BitPosition                      
                   };                                                                                                      
               };                                                                                                          
/*0x2E70*/     ULONG32      LastTimerHand;                                                                                 
/*0x2E74*/     ULONG32      LastTick;                                                                                      
/*0x2E78*/     ULONG32      ClockInterrupts;                                                                               
/*0x2E7C*/     ULONG32      ReadyScanTick;                                                                                 
/*0x2E80*/     VOID*        InterruptObject[256];                                                                          
/*0x3680*/     struct _KTIMER_TABLE TimerTable;                                     // 2 elements, 0x2200 bytes (sizeof)   
/*0x5880*/     struct _KGATE DpcGate;                                               // 1 elements, 0x18 bytes (sizeof)     
/*0x5898*/     VOID*        PrcbPad52;                                                                                     
/*0x58A0*/     struct _KDPC CallDpc;                                                // 11 elements, 0x40 bytes (sizeof)    
/*0x58E0*/     LONG32       ClockKeepAlive;                                                                                
/*0x58E4*/     UINT8        PrcbPad60[2];                                                                                  
/*0x58E6*/     UINT16       NmiActive;                                                                                     
/*0x58E8*/     LONG32       DpcWatchdogPeriod;                                                                             
/*0x58EC*/     LONG32       DpcWatchdogCount;                                                                              
/*0x58F0*/     LONG32       KeSpinLockOrdering;                                                                            
/*0x58F4*/     ULONG32      DpcWatchdogProfileCumulativeDpcThreshold;                                                      
/*0x58F8*/     VOID*        CachedPtes;                                                                                    
/*0x5900*/     struct _LIST_ENTRY WaitListHead;                                     // 2 elements, 0x10 bytes (sizeof)     
/*0x5910*/     UINT64       WaitLock;                                                                                      
/*0x5918*/     ULONG32      ReadySummary;                                                                                  
/*0x591C*/     LONG32       AffinitizedSelectionMask;                                                                      
/*0x5920*/     ULONG32      QueueIndex;                                                                                    
/*0x5924*/     ULONG32      PrcbPad75[3];                                                                                  
/*0x5930*/     struct _KDPC TimerExpirationDpc;                                     // 11 elements, 0x40 bytes (sizeof)    
/*0x5970*/     struct _RTL_RB_TREE ScbQueue;                                        // 3 elements, 0x10 bytes (sizeof)     
/*0x5980*/     struct _LIST_ENTRY DispatcherReadyListHead[32];                                                             
/*0x5B80*/     ULONG32      InterruptCount;                                                                                
/*0x5B84*/     ULONG32      KernelTime;                                                                                    
/*0x5B88*/     ULONG32      UserTime;                                                                                      
/*0x5B8C*/     ULONG32      DpcTime;                                                                                       
/*0x5B90*/     ULONG32      InterruptTime;                                                                                 
/*0x5B94*/     ULONG32      AdjustDpcThreshold;                                                                            
/*0x5B98*/     UINT8        DebuggerSavedIRQL;                                                                             
/*0x5B99*/     UINT8        GroupSchedulingOverQuota;                                                                      
/*0x5B9A*/     UINT8        DeepSleep;                                                                                     
/*0x5B9B*/     UINT8        PrcbPad80;                                                                                     
/*0x5B9C*/     ULONG32      DpcTimeCount;                                                                                  
/*0x5BA0*/     ULONG32      DpcTimeLimit;                                                                                  
/*0x5BA4*/     ULONG32      PeriodicCount;                                                                                 
/*0x5BA8*/     ULONG32      PeriodicBias;                                                                                  
/*0x5BAC*/     ULONG32      AvailableTime;                                                                                 
/*0x5BB0*/     ULONG32      KeExceptionDispatchCount;                                                                      
/*0x5BB4*/     ULONG32      ReadyThreadCount;                                                                              
/*0x5BB8*/     UINT64       ReadyQueueExpectedRunTime;                                                                     
/*0x5BC0*/     UINT64       StartCycles;                                                                                   
/*0x5BC8*/     UINT64       TaggedCyclesStart;                                                                             
/*0x5BD0*/     UINT64       TaggedCycles[2];                                                                               
/*0x5BE0*/     UINT64       GenerationTarget;                                                                              
/*0x5BE8*/     UINT64       AffinitizedCycles;                                                                             
/*0x5BF0*/     UINT64       ImportantCycles;                                                                               
/*0x5BF8*/     UINT64       UnimportantCycles;                                                                             
/*0x5C00*/     ULONG32      DpcWatchdogProfileSingleDpcThreshold;                                                          
/*0x5C04*/     LONG32       MmSpinLockOrdering;                                                                            
/*0x5C08*/     VOID*        CachedStack;                                                                                   
/*0x5C10*/     ULONG32      PageColor;                                                                                     
/*0x5C14*/     ULONG32      NodeColor;                                                                                     
/*0x5C18*/     ULONG32      NodeShiftedColor;                                                                              
/*0x5C1C*/     ULONG32      SecondaryColorMask;                                                                            
/*0x5C20*/     UINT8        PrcbPad81[7];                                                                                  
/*0x5C27*/     UINT8        TbFlushListActive;                                                                             
/*0x5C28*/     UINT64       PrcbPad82[2];                                                                                  
/*0x5C38*/     UINT64       CycleTime;                                                                                     
/*0x5C40*/     UINT64       Cycles[2][4];                                                                                  
/*0x5C80*/     ULONG32      CcFastMdlReadNoWait;                                                                           
/*0x5C84*/     ULONG32      CcFastMdlReadWait;                                                                             
/*0x5C88*/     ULONG32      CcFastMdlReadNotPossible;                                                                      
/*0x5C8C*/     ULONG32      CcMapDataNoWait;                                                                               
/*0x5C90*/     ULONG32      CcMapDataWait;                                                                                 
/*0x5C94*/     ULONG32      CcPinMappedDataCount;                                                                          
/*0x5C98*/     ULONG32      CcPinReadNoWait;                                                                               
/*0x5C9C*/     ULONG32      CcPinReadWait;                                                                                 
/*0x5CA0*/     ULONG32      CcMdlReadNoWait;                                                                               
/*0x5CA4*/     ULONG32      CcMdlReadWait;                                                                                 
/*0x5CA8*/     ULONG32      CcLazyWriteHotSpots;                                                                           
/*0x5CAC*/     ULONG32      CcLazyWriteIos;                                                                                
/*0x5CB0*/     ULONG32      CcLazyWritePages;                                                                              
/*0x5CB4*/     ULONG32      CcDataFlushes;                                                                                 
/*0x5CB8*/     ULONG32      CcDataPages;                                                                                   
/*0x5CBC*/     ULONG32      CcLostDelayedWrites;                                                                           
/*0x5CC0*/     ULONG32      CcFastReadResourceMiss;                                                                        
/*0x5CC4*/     ULONG32      CcCopyReadWaitMiss;                                                                            
/*0x5CC8*/     ULONG32      CcFastMdlReadResourceMiss;                                                                     
/*0x5CCC*/     ULONG32      CcMapDataNoWaitMiss;                                                                           
/*0x5CD0*/     ULONG32      CcMapDataWaitMiss;                                                                             
/*0x5CD4*/     ULONG32      CcPinReadNoWaitMiss;                                                                           
/*0x5CD8*/     ULONG32      CcPinReadWaitMiss;                                                                             
/*0x5CDC*/     ULONG32      CcMdlReadNoWaitMiss;                                                                           
/*0x5CE0*/     ULONG32      CcMdlReadWaitMiss;                                                                             
/*0x5CE4*/     ULONG32      CcReadAheadIos;                                                                                
/*0x5CE8*/     LONG32       MmCacheTransitionCount;                                                                        
/*0x5CEC*/     LONG32       MmCacheReadCount;                                                                              
/*0x5CF0*/     LONG32       MmCacheIoCount;                                                                                
/*0x5CF4*/     ULONG32      PrcbPad91;                                                                                     
/*0x5CF8*/     VOID*        MmInternal;                                                                                    
/*0x5D00*/     struct _PROCESSOR_POWER_STATE PowerState;                            // 56 elements, 0x200 bytes (sizeof)   
/*0x5F00*/     VOID*        HyperPte;                                                                                      
/*0x5F08*/     struct _LIST_ENTRY ScbList;                                          // 2 elements, 0x10 bytes (sizeof)     
/*0x5F18*/     struct _KDPC ForceIdleDpc;                                           // 11 elements, 0x40 bytes (sizeof)    
/*0x5F58*/     struct _KDPC DpcWatchdogDpc;                                         // 11 elements, 0x40 bytes (sizeof)    
/*0x5F98*/     struct _KTIMER DpcWatchdogTimer;                                     // 6 elements, 0x40 bytes (sizeof)     
/*0x5FD8*/     struct _CACHE_DESCRIPTOR Cache[5];                                                                          
/*0x6014*/     ULONG32      CacheCount;                                                                                    
/*0x6018*/     ULONG32      CachedCommit;                                                                                  
/*0x601C*/     ULONG32      CachedResidentAvailable;                                                                       
/*0x6020*/     VOID*        WheaInfo;                                                                                      
/*0x6028*/     VOID*        EtwSupport;                                                                                    
/*0x6030*/     VOID*        ExSaPageArray;                                                                                 
/*0x6038*/     ULONG32      KeAlignmentFixupCount;                                                                         
/*0x603C*/     ULONG32      PrcbPad95;                                                                                     
/*0x6040*/     union _SLIST_HEADER HypercallPageList;                               // 3 elements, 0x10 bytes (sizeof)     
/*0x6050*/     UINT64*      StatisticsPage;                                                                                
/*0x6058*/     UINT64       PrcbPad85[5];                                                                                  
/*0x6080*/     VOID*        HypercallCachedPages;                                                                          
/*0x6088*/     VOID*        VirtualApicAssist;                                                                             
/*0x6090*/     struct _KAFFINITY_EX PackageProcessorSet;                            // 4 elements, 0xA8 bytes (sizeof)     
/*0x6138*/     UINT64       PrcbPad86;                                                                                     
/*0x6140*/     UINT64       SharedReadyQueueMask;                                                                          
/*0x6148*/     struct _KSHARED_READY_QUEUE* SharedReadyQueue;                                                              
/*0x6150*/     ULONG32      SharedQueueScanOwner;                                                                          
/*0x6154*/     ULONG32      ScanSiblingIndex;                                                                              
/*0x6158*/     UINT64       CoreProcessorSet;                                                                              
/*0x6160*/     UINT64       ScanSiblingMask;                                                                               
/*0x6168*/     UINT64       LLCMask;                                                                                       
/*0x6170*/     UINT64       CacheProcessorMask[5];                                                                         
/*0x6198*/     struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;                                        
/*0x61A0*/     VOID*        ProfileEventIndexAddress;                                                                      
/*0x61A8*/     VOID**       DpcWatchdogProfile;                                                                            
/*0x61B0*/     VOID**       DpcWatchdogProfileCurrentEmptyCapture;                                                         
/*0x61B8*/     VOID*        SchedulerAssist;                                                                               
/*0x61C0*/     struct _SYNCH_COUNTERS SynchCounters;                                // 46 elements, 0xB8 bytes (sizeof)    
/*0x6278*/     UINT64       PrcbPad94;                                                                                     
/*0x6280*/     struct _FILESYSTEM_DISK_COUNTERS FsCounters;                         // 2 elements, 0x10 bytes (sizeof)     
/*0x6290*/     UINT8        VendorString[13];                                                                              
/*0x629D*/     UINT8        PrcbPad100[3];                                                                                 
/*0x62A0*/     UINT64       FeatureBits;                                                                                   
/*0x62A8*/     union _LARGE_INTEGER UpdateSignature;                                // 4 elements, 0x8 bytes (sizeof)      
/*0x62B0*/     UINT64       PteBitCache;                                                                                   
/*0x62B8*/     ULONG32      PteBitOffset;                                                                                  
/*0x62BC*/     ULONG32      PrcbPad105;                                                                                    
/*0x62C0*/     struct _CONTEXT* Context;                                                                                   
/*0x62C8*/     ULONG32      ContextFlagsInit;                                                                              
/*0x62CC*/     ULONG32      PrcbPad115;                                                                                    
/*0x62D0*/     struct _XSAVE_AREA* ExtendedState;                                                                          
/*0x62D8*/     VOID*        IsrStack;                                                                                      
/*0x62E0*/     struct _KENTROPY_TIMING_STATE EntropyTimingState;                    // 4 elements, 0x150 bytes (sizeof)    
/*0x6430*/     UINT64       PrcbPad110;                                                                                    
               struct                                                               // 15 elements, 0x38 bytes (sizeof)    
               {                                                                                                           
/*0x6438*/         ULONG32      UpdateCycle;                                                                               
                   union                                                            // 2 elements, 0x2 bytes (sizeof)      
                   {                                                                                                       
/*0x643C*/             INT16        PairLocal;                                                                             
                       struct                                                       // 2 elements, 0x2 bytes (sizeof)      
                       {                                                                                                   
/*0x643C*/                 UINT8        PairLocalLow;                                                                      
                           struct                                                   // 5 elements, 0x1 bytes (sizeof)      
                           {                                                                                               
/*0x643D*/                     UINT8        PairLocalForceStibp : 1;                // 0 BitPosition                       
/*0x643D*/                     UINT8        Reserved : 4;                           // 1 BitPosition                       
/*0x643D*/                     UINT8        Frozen : 1;                             // 5 BitPosition                       
/*0x643D*/                     UINT8        ForceUntrusted : 1;                     // 6 BitPosition                       
/*0x643D*/                     UINT8        SynchIpi : 1;                           // 7 BitPosition                       
                           };                                                                                              
                       };                                                                                                  
                   };                                                                                                      
                   union                                                            // 2 elements, 0x2 bytes (sizeof)      
                   {                                                                                                       
/*0x643E*/             INT16        PairRemote;                                                                            
                       struct                                                       // 2 elements, 0x2 bytes (sizeof)      
                       {                                                                                                   
/*0x643E*/                 UINT8        PairRemoteLow;                                                                     
/*0x643F*/                 UINT8        Reserved2;                                                                         
                       };                                                                                                  
                   };                                                                                                      
/*0x6440*/         UINT8        Trace[24];                                                                                 
/*0x6458*/         UINT64       LocalDomain;                                                                               
/*0x6460*/         UINT64       RemoteDomain;                                                                              
/*0x6468*/         struct _KTHREAD* Thread;                                                                                
               }StibpPairingTrace;                                                                                         
/*0x6470*/     struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;                        // 1 elements, 0x8 bytes (sizeof)      
/*0x6478*/     struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;                     // 1 elements, 0x8 bytes (sizeof)      
/*0x6480*/     struct _KDPC AbDpc;                                                  // 11 elements, 0x40 bytes (sizeof)    
/*0x64C0*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;            // 2 elements, 0x54 bytes (sizeof)     
/*0x6514*/     struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;           // 2 elements, 0x54 bytes (sizeof)     
/*0x6568*/     struct _KSECURE_FAULT_INFORMATION SecureFault;                       // 2 elements, 0x10 bytes (sizeof)     
/*0x6578*/     UINT64       PrcbPad120;                                                                                    
/*0x6580*/     struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;                   // 13 elements, 0x270 bytes (sizeof)   
/*0x67F0*/     UINT64       PrcbPad125[2];                                                                                 
/*0x6800*/     ULONG32      TimerExpirationTraceCount;                                                                     
/*0x6804*/     ULONG32      PrcbPad127;                                                                                    
/*0x6808*/     struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];                                                   
/*0x6908*/     UINT64       PrcbPad128[7];                                                                                 
/*0x6940*/     struct _REQUEST_MAILBOX* Mailbox;                                                                           
/*0x6948*/     UINT64       PrcbPad130[7];                                                                                 
/*0x6980*/     struct _MACHINE_CHECK_CONTEXT McheckContext[2];                                                             
/*0x6A20*/     UINT64       PrcbPad134[4];                                                                                 
/*0x6A40*/     struct _KLOCK_QUEUE_HANDLE SelfmapLockHandle[4];                                                            
/*0x6AA0*/     UINT64       PrcbPad134a[4];                                                                                
/*0x6AC0*/     UINT8        PrcbPad138[960];                                                                               
/*0x6E80*/     UINT64       KernelDirectoryTableBase;                                                                      
/*0x6E88*/     UINT64       RspBaseShadow;                                                                                 
/*0x6E90*/     UINT64       UserRspShadow;                                                                                 
/*0x6E98*/     ULONG32      ShadowFlags;                                                                                   
/*0x6E9C*/     ULONG32      DbgMceNestingLevel;                                                                            
/*0x6EA0*/     ULONG32      DbgMceFlags;                                                                                   
/*0x6EA4*/     ULONG32      PrcbPad139;                                                                                    
/*0x6EA8*/     UINT64       PrcbPad140[507];                                                                               
/*0x7E80*/     struct _REQUEST_MAILBOX RequestMailbox[1];                                                                  
           }KPRCB, *PKPRCB;                                                                                                
                                                                                                                           
          typedef struct _KPCR                             // 27 elements, 0x8040 bytes (sizeof)  
          {                                                                                       
              union                                        // 2 elements, 0x38 bytes (sizeof)     
              {                                                                                   
/*0x000*/         struct _NT_TIB NtTib;                    // 8 elements, 0x38 bytes (sizeof)     
                  struct                                   // 7 elements, 0x38 bytes (sizeof)     
                  {                                                                               
/*0x000*/             union _KGDTENTRY64* GdtBase;                                                
/*0x008*/             struct _KTSS64* TssBase;                                                    
/*0x010*/             UINT64       UserRsp;                                                       
/*0x018*/             struct _KPCR* Self;                                                         
/*0x020*/             struct _KPRCB* CurrentPrcb;                                                 
/*0x028*/             struct _KSPIN_LOCK_QUEUE* LockArray;                                        
/*0x030*/             VOID*        Used_Self;                                                     
                  };                                                                              
              };                                                                                  
/*0x038*/     union _KIDTENTRY64* IdtBase;                                                        
/*0x040*/     UINT64       Unused[2];                                                             
/*0x050*/     UINT8        Irql;                                                                  
/*0x051*/     UINT8        SecondLevelCacheAssociativity;                                         
/*0x052*/     UINT8        ObsoleteNumber;                                                        
/*0x053*/     UINT8        Fill0;                                                                 
/*0x054*/     ULONG32      Unused0[3];                                                            
/*0x060*/     UINT16       MajorVersion;                                                          
/*0x062*/     UINT16       MinorVersion;                                                          
/*0x064*/     ULONG32      StallScaleFactor;                                                      
/*0x068*/     VOID*        Unused1[3];                                                            
/*0x080*/     ULONG32      KernelReserved[15];                                                    
/*0x0BC*/     ULONG32      SecondLevelCacheSize;                                                  
/*0x0C0*/     ULONG32      HalReserved[16];                                                       
/*0x100*/     ULONG32      Unused2;                                                               
/*0x104*/     UINT8        _PADDING0_[0x4];                                                       
/*0x108*/     VOID*        KdVersionBlock;                                                        
/*0x110*/     VOID*        Unused3;                                                               
/*0x118*/     ULONG32      PcrAlign1[24];                                                         
/*0x178*/     UINT8        _PADDING1_[0x8];                                                       
/*0x180*/     struct _KPRCB Prcb;                          // 329 elements, 0x7EC0 bytes (sizeof) 
          }KPCR, *PKPCR;                                                                          
                                                                                                  
          typedef struct _RTL_AVL_TABLE                         // 11 elements, 0x68 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _RTL_BALANCED_LINKS BalancedRoot;          // 5 elements, 0x20 bytes (sizeof)  
/*0x020*/     VOID*        OrderedPointer;                                                          
/*0x028*/     ULONG32      WhichOrderedElement;                                                     
/*0x02C*/     ULONG32      NumberGenericTableElements;                                              
/*0x030*/     ULONG32      DepthOfTree;                                                             
/*0x034*/     UINT8        _PADDING0_[0x4];                                                         
/*0x038*/     struct _RTL_BALANCED_LINKS* RestartKey;                                               
/*0x040*/     ULONG32      DeleteCount;                                                             
/*0x044*/     UINT8        _PADDING1_[0x4];                                                         
/*0x048*/     FUNCT_26C5_26C4_CompareRoutine* CompareRoutine;                                       
/*0x050*/     FUNCT_00F2_26CE_AllocateRoutine* AllocateRoutine;                                     
/*0x058*/     FUNCT_00EF_26D2_FreeRoutine* FreeRoutine;                                             
/*0x060*/     VOID*        TableContext;                                                            
          }RTL_AVL_TABLE, *PRTL_AVL_TABLE;                                                          
                                                                                                    
          typedef struct _KTMOBJECT_NAMESPACE // 5 elements, 0xA8 bytes (sizeof)  
          {                                                                       
/*0x000*/     struct _RTL_AVL_TABLE Table;    // 11 elements, 0x68 bytes (sizeof) 
/*0x068*/     struct _KMUTANT Mutex;          // 5 elements, 0x38 bytes (sizeof)  
/*0x0A0*/     UINT16       LinksOffset;                                           
/*0x0A2*/     UINT16       GuidOffset;                                            
/*0x0A4*/     UINT8        Expired;                                               
/*0x0A5*/     UINT8        _PADDING0_[0x3];                                       
          }KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE;                                    
                                                                                  
          typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY NotificationListHead;        // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        Port;                                                                 
/*0x018*/     UINT64       Key;                                                                  
/*0x020*/     struct _EPROCESS* BindingProcess;                                                  
          }KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING;                                   
                                                                                                 
          typedef struct _KRESOURCEMANAGER                                   // 20 elements, 0x250 bytes (sizeof) 
          {                                                                                                       
/*0x000*/     struct _KEVENT NotificationAvailable;                          // 1 elements, 0x18 bytes (sizeof)   
/*0x018*/     ULONG32      cookie;                                                                                
/*0x01C*/     enum _KRESOURCEMANAGER_STATE State;                                                                 
/*0x020*/     ULONG32      Flags;                                                                                 
/*0x024*/     UINT8        _PADDING0_[0x4];                                                                       
/*0x028*/     struct _KMUTANT Mutex;                                         // 5 elements, 0x38 bytes (sizeof)   
/*0x060*/     struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;                // 2 elements, 0x28 bytes (sizeof)   
/*0x088*/     struct _GUID RmId;                                             // 4 elements, 0x10 bytes (sizeof)   
/*0x098*/     struct _KQUEUE NotificationQueue;                              // 5 elements, 0x40 bytes (sizeof)   
/*0x0D8*/     struct _KMUTANT NotificationMutex;                             // 5 elements, 0x38 bytes (sizeof)   
/*0x110*/     struct _LIST_ENTRY EnlistmentHead;                             // 2 elements, 0x10 bytes (sizeof)   
/*0x120*/     ULONG32      EnlistmentCount;                                                                       
/*0x124*/     UINT8        _PADDING1_[0x4];                                                                       
/*0x128*/     FUNCT_00A0_267F_NotificationRoutine* NotificationRoutine;                                           
/*0x130*/     VOID*        Key;                                                                                   
/*0x138*/     struct _LIST_ENTRY ProtocolListHead;                           // 2 elements, 0x10 bytes (sizeof)   
/*0x148*/     struct _LIST_ENTRY PendingPropReqListHead;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x158*/     struct _LIST_ENTRY CRMListEntry;                               // 2 elements, 0x10 bytes (sizeof)   
/*0x168*/     struct _KTM* Tm;                                                                                    
/*0x170*/     struct _UNICODE_STRING Description;                            // 3 elements, 0x10 bytes (sizeof)   
/*0x180*/     struct _KTMOBJECT_NAMESPACE Enlistments;                       // 5 elements, 0xA8 bytes (sizeof)   
/*0x228*/     struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding; // 4 elements, 0x28 bytes (sizeof)   
          }KRESOURCEMANAGER, *PKRESOURCEMANAGER;                                                                  
                                                                                                                  
          typedef struct _KSCB                      // 27 elements, 0x1A8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       GenerationCycles;                                             
/*0x008*/     UINT64       MinQuotaCycleTarget;                                          
/*0x010*/     UINT64       MaxQuotaCycleTarget;                                          
/*0x018*/     UINT64       RankCycleTarget;                                              
/*0x020*/     UINT64       LongTermCycles;                                               
/*0x028*/     UINT64       LastReportedCycles;                                           
/*0x030*/     UINT64       OverQuotaHistory;                                             
/*0x038*/     UINT64       ReadyTime;                                                    
/*0x040*/     UINT64       InsertTime;                                                   
/*0x048*/     struct _LIST_ENTRY PerProcessorList;  // 2 elements, 0x10 bytes (sizeof)   
/*0x058*/     struct _RTL_BALANCED_NODE QueueNode;  // 6 elements, 0x18 bytes (sizeof)   
              struct                                // 7 elements, 0x1 bytes (sizeof)    
              {                                                                          
/*0x070*/         UINT8        Inserted : 1;        // 0 BitPosition                     
/*0x070*/         UINT8        MaxOverQuota : 1;    // 1 BitPosition                     
/*0x070*/         UINT8        MinOverQuota : 1;    // 2 BitPosition                     
/*0x070*/         UINT8        RankBias : 1;        // 3 BitPosition                     
/*0x070*/         UINT8        SoftCap : 1;         // 4 BitPosition                     
/*0x070*/         UINT8        ShareRankOwner : 1;  // 5 BitPosition                     
/*0x070*/         UINT8        Spare1 : 2;          // 6 BitPosition                     
              };                                                                         
/*0x071*/     UINT8        Depth;                                                        
/*0x072*/     UINT16       ReadySummary;                                                 
/*0x074*/     ULONG32      Rank;                                                         
/*0x078*/     ULONG32*     ShareRank;                                                    
/*0x080*/     ULONG32      OwnerShareRank;                                               
/*0x084*/     UINT8        _PADDING0_[0x4];                                              
/*0x088*/     struct _LIST_ENTRY ReadyListHead[16];                                      
/*0x188*/     struct _RTL_RB_TREE ChildScbQueue;    // 3 elements, 0x10 bytes (sizeof)   
/*0x198*/     struct _KSCB* Parent;                                                      
/*0x1A0*/     struct _KSCB* Root;                                                        
          }KSCB, *PKSCB;                                                                 
                                                                                         
          typedef struct _KSCHEDULING_GROUP_POLICY // 9 elements, 0x8 bytes (sizeof) 
          {                                                                          
              union                                // 3 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x000*/         ULONG32      Value;                                                
/*0x000*/         UINT16       Weight;                                               
                  struct                           // 2 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT16       MinRate;                                          
/*0x002*/             UINT16       MaxRate;                                          
                  };                                                                 
              };                                                                     
              union                                // 2 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x004*/         ULONG32      AllFlags;                                             
                  struct                           // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x004*/             ULONG32      Type : 1;       // 0 BitPosition                  
/*0x004*/             ULONG32      Disabled : 1;   // 1 BitPosition                  
/*0x004*/             ULONG32      RankBias : 1;   // 2 BitPosition                  
/*0x004*/             ULONG32      Spare1 : 29;    // 3 BitPosition                  
                  };                                                                 
              };                                                                     
          }KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY;                                  
                                                                                     
          typedef struct _KSCHEDULING_GROUP               // 15 elements, 0x240 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _KSCHEDULING_GROUP_POLICY Policy;    // 9 elements, 0x8 bytes (sizeof)    
/*0x008*/     ULONG32      RelativeWeight;                                                     
/*0x00C*/     ULONG32      ChildMinRate;                                                       
/*0x010*/     ULONG32      ChildMinWeight;                                                     
/*0x014*/     ULONG32      ChildTotalWeight;                                                   
/*0x018*/     UINT64       QueryHistoryTimeStamp;                                              
/*0x020*/     INT64        NotificationCycles;                                                 
/*0x028*/     INT64        MaxQuotaLimitCycles;                                                
/*0x030*/     INT64        MaxQuotaCyclesRemaining;                                            
              union                                       // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                
/*0x038*/         struct _LIST_ENTRY SchedulingGroupList; // 2 elements, 0x10 bytes (sizeof)   
/*0x038*/         struct _LIST_ENTRY Sibling;             // 2 elements, 0x10 bytes (sizeof)   
              };                                                                               
/*0x048*/     struct _KDPC* NotificationDpc;                                                   
/*0x050*/     struct _LIST_ENTRY ChildList;               // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _KSCHEDULING_GROUP* Parent;                                               
/*0x068*/     UINT8        _PADDING0_[0x18];                                                   
/*0x080*/     struct _KSCB PerProcessor[1];                                                    
/*0x228*/     UINT8        _PADDING1_[0x18];                                                   
          }KSCHEDULING_GROUP, *PKSCHEDULING_GROUP;                                             
                                                                                               
          typedef struct _KSECONDARY_IDT_ENTRY   // 4 elements, 0x30 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       SpinLock;                                                
/*0x008*/     struct _KEVENT ConnectLock;        // 1 elements, 0x18 bytes (sizeof) 
/*0x020*/     UINT8        LineMasked;                                              
/*0x021*/     UINT8        _PADDING0_[0x7];                                         
/*0x028*/     struct _KINTERRUPT* InterruptList;                                    
          }KSECONDARY_IDT_ENTRY, *PKSECONDARY_IDT_ENTRY;                                   
                                                                                    
          typedef struct _KSTACK_CONTROL             // 4 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       StackBase;                                                   
              union                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x008*/         UINT64       ActualLimit;                                             
/*0x008*/         UINT64       StackExpansion : 1;   // 0 BitPosition                   
              };                                                                        
/*0x010*/     struct _KERNEL_STACK_SEGMENT Previous; // 4 elements, 0x20 bytes (sizeof) 
          }KSTACK_CONTROL, *PKSTACK_CONTROL;                                            
                                                                                        
          typedef struct _KSYSTEM_TIME // 3 elements, 0xC bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      LowPart;                                      
/*0x004*/     LONG32       High1Time;                                    
/*0x008*/     LONG32       High2Time;                                    
          }KSYSTEM_TIME, *PKSYSTEM_TIME;                                  
                                                                         
          typedef struct _KTB_FLUSH_VA                   // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                
              union                                      // 4 elements, 0x8 bytes (sizeof) 
              {                                                                            
                  struct                                 // 2 elements, 0x8 bytes (sizeof) 
                  {                                                                        
/*0x000*/             UINT64       NumberOfEntries : 10; // 0 BitPosition                  
/*0x000*/             UINT64       PageSize : 2;         // 10 BitPosition                 
                  };                                                                       
/*0x000*/         VOID*        Va;                                                         
/*0x000*/         UINT64       VaLong;                                                     
              }u1;                                                                         
          }KTB_FLUSH_VA, *PKTB_FLUSH_VA;                                                   
                                                                                           
          typedef struct _KTHREAD_COUNTERS               // 7 elements, 0x1A8 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       WaitReasonBitMap;                                                 
/*0x008*/     struct _THREAD_PERFORMANCE_DATA* UserData;                                     
/*0x010*/     ULONG32      Flags;                                                            
/*0x014*/     ULONG32      ContextSwitches;                                                  
/*0x018*/     UINT64       CycleTimeBias;                                                    
/*0x020*/     UINT64       HardwareCounters;                                                 
/*0x028*/     struct _COUNTER_READING HwCounter[16];                                         
          }KTHREAD_COUNTERS, *PKTHREAD_COUNTERS;                                             
                                                                                             
          typedef struct _KTIMER2_COLLECTION // 2 elements, 0x18 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _RTL_RB_TREE Tree;      // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       NextDueTime;                                         
          }KTIMER2_COLLECTION, *PKTIMER2_COLLECTION;                                   
                                                                                
          typedef struct _KTM                                   // 33 elements, 0x3C0 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      cookie;                                                                   
/*0x004*/     UINT8        _PADDING0_[0x4];                                                          
/*0x008*/     struct _KMUTANT Mutex;                            // 5 elements, 0x38 bytes (sizeof)   
/*0x040*/     enum _KTM_STATE State;                                                                 
/*0x044*/     UINT8        _PADDING1_[0x4];                                                          
/*0x048*/     struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;   // 2 elements, 0x28 bytes (sizeof)   
/*0x070*/     struct _GUID TmIdentity;                          // 4 elements, 0x10 bytes (sizeof)   
/*0x080*/     ULONG32      Flags;                                                                    
/*0x084*/     ULONG32      VolatileFlags;                                                            
/*0x088*/     struct _UNICODE_STRING LogFileName;               // 3 elements, 0x10 bytes (sizeof)   
/*0x098*/     struct _FILE_OBJECT* LogFileObject;                                                    
/*0x0A0*/     VOID*        MarshallingContext;                                                       
/*0x0A8*/     VOID*        LogManagementContext;                                                     
/*0x0B0*/     struct _KTMOBJECT_NAMESPACE Transactions;         // 5 elements, 0xA8 bytes (sizeof)   
/*0x158*/     struct _KTMOBJECT_NAMESPACE ResourceManagers;     // 5 elements, 0xA8 bytes (sizeof)   
/*0x200*/     struct _KMUTANT LsnOrderedMutex;                  // 5 elements, 0x38 bytes (sizeof)   
/*0x238*/     struct _LIST_ENTRY LsnOrderedList;                // 2 elements, 0x10 bytes (sizeof)   
/*0x248*/     union _LARGE_INTEGER CommitVirtualClock;          // 4 elements, 0x8 bytes (sizeof)    
/*0x250*/     struct _FAST_MUTEX CommitVirtualClockMutex;       // 5 elements, 0x38 bytes (sizeof)   
/*0x288*/     union _CLS_LSN BaseLsn;                           // 2 elements, 0x8 bytes (sizeof)    
/*0x290*/     union _CLS_LSN CurrentReadLsn;                    // 2 elements, 0x8 bytes (sizeof)    
/*0x298*/     union _CLS_LSN LastRecoveredLsn;                  // 2 elements, 0x8 bytes (sizeof)    
/*0x2A0*/     VOID*        TmRmHandle;                                                               
/*0x2A8*/     struct _KRESOURCEMANAGER* TmRm;                                                        
/*0x2B0*/     struct _KEVENT LogFullNotifyEvent;                // 1 elements, 0x18 bytes (sizeof)   
/*0x2C8*/     struct _WORK_QUEUE_ITEM CheckpointWorkItem;       // 3 elements, 0x20 bytes (sizeof)   
/*0x2E8*/     union _CLS_LSN CheckpointTargetLsn;               // 2 elements, 0x8 bytes (sizeof)    
/*0x2F0*/     struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem; // 3 elements, 0x20 bytes (sizeof)   
/*0x310*/     struct _ERESOURCE LogWriteResource;               // 17 elements, 0x68 bytes (sizeof)  
/*0x378*/     ULONG32      LogFlags;                                                                 
/*0x37C*/     LONG32       LogFullStatus;                                                            
/*0x380*/     LONG32       RecoveryStatus;                                                           
/*0x384*/     UINT8        _PADDING2_[0x4];                                                          
/*0x388*/     union _CLS_LSN LastCheckBaseLsn;                  // 2 elements, 0x8 bytes (sizeof)    
/*0x390*/     struct _LIST_ENTRY RestartOrderedList;            // 2 elements, 0x10 bytes (sizeof)   
/*0x3A0*/     struct _WORK_QUEUE_ITEM OfflineWorkItem;          // 3 elements, 0x20 bytes (sizeof)   
          }KTM, *PKTM;                                                                               
                                                                                                     
typedef struct _KTMNOTIFICATION_PACKET // 0 elements, 0x0 bytes (sizeof) 
{                                                                        
}KTMNOTIFICATION_PACKET, *PKTMNOTIFICATION_PACKET;                                  
                                                                         
          typedef struct _KTRANSACTION_HISTORY                                // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     enum _<unnamed-enum-KTMOH_CommitTransaction_Result> RecordType;                                   
/*0x004*/     ULONG32      Payload;                                                                             
          }KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY;                                                        
                                                                                                                
          typedef struct _KTRANSACTION                              // 41 elements, 0x2D8 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _KEVENT OutcomeEvent;                          // 1 elements, 0x18 bytes (sizeof)   
/*0x018*/     ULONG32      cookie;                                                                       
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                              
/*0x020*/     struct _KMUTANT Mutex;                                // 5 elements, 0x38 bytes (sizeof)   
/*0x058*/     struct _KTRANSACTION* TreeTx;                                                              
/*0x060*/     struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink; // 2 elements, 0x28 bytes (sizeof)   
/*0x088*/     struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;     // 2 elements, 0x28 bytes (sizeof)   
/*0x0B0*/     struct _GUID UOW;                                     // 4 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     enum _KTRANSACTION_STATE State;                                                            
/*0x0C4*/     ULONG32      Flags;                                                                        
/*0x0C8*/     struct _LIST_ENTRY EnlistmentHead;                    // 2 elements, 0x10 bytes (sizeof)   
/*0x0D8*/     ULONG32      EnlistmentCount;                                                              
/*0x0DC*/     ULONG32      RecoverableEnlistmentCount;                                                   
/*0x0E0*/     ULONG32      PrePrepareRequiredEnlistmentCount;                                            
/*0x0E4*/     ULONG32      PrepareRequiredEnlistmentCount;                                               
/*0x0E8*/     ULONG32      OutcomeRequiredEnlistmentCount;                                               
/*0x0EC*/     ULONG32      PendingResponses;                                                             
/*0x0F0*/     struct _KENLISTMENT* SuperiorEnlistment;                                                   
/*0x0F8*/     union _CLS_LSN LastLsn;                               // 2 elements, 0x8 bytes (sizeof)    
/*0x100*/     struct _LIST_ENTRY PromotedEntry;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x110*/     struct _KTRANSACTION* PromoterTransaction;                                                 
/*0x118*/     VOID*        PromotePropagation;                                                           
/*0x120*/     ULONG32      IsolationLevel;                                                               
/*0x124*/     ULONG32      IsolationFlags;                                                               
/*0x128*/     union _LARGE_INTEGER Timeout;                         // 4 elements, 0x8 bytes (sizeof)    
/*0x130*/     struct _UNICODE_STRING Description;                   // 3 elements, 0x10 bytes (sizeof)   
/*0x140*/     struct _KTHREAD* RollbackThread;                                                           
/*0x148*/     struct _WORK_QUEUE_ITEM RollbackWorkItem;             // 3 elements, 0x20 bytes (sizeof)   
/*0x168*/     struct _KDPC RollbackDpc;                             // 11 elements, 0x40 bytes (sizeof)  
/*0x1A8*/     struct _KTIMER RollbackTimer;                         // 6 elements, 0x40 bytes (sizeof)   
/*0x1E8*/     struct _LIST_ENTRY LsnOrderedEntry;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x1F8*/     enum _KTRANSACTION_OUTCOME Outcome;                                                        
/*0x1FC*/     UINT8        _PADDING1_[0x4];                                                              
/*0x200*/     struct _KTM* Tm;                                                                           
/*0x208*/     INT64        CommitReservation;                                                            
/*0x210*/     struct _KTRANSACTION_HISTORY TransactionHistory[10];                                       
/*0x260*/     ULONG32      TransactionHistoryCount;                                                      
/*0x264*/     UINT8        _PADDING2_[0x4];                                                              
/*0x268*/     VOID*        DTCPrivateInformation;                                                        
/*0x270*/     ULONG32      DTCPrivateInformationLength;                                                  
/*0x274*/     UINT8        _PADDING3_[0x4];                                                              
/*0x278*/     struct _KMUTANT DTCPrivateInformationMutex;           // 5 elements, 0x38 bytes (sizeof)   
/*0x2B0*/     VOID*        PromotedTxSelfHandle;                                                         
/*0x2B8*/     ULONG32      PendingPromotionCount;                                                        
/*0x2BC*/     UINT8        _PADDING4_[0x4];                                                              
/*0x2C0*/     struct _KEVENT PromotionCompletedEvent;               // 1 elements, 0x18 bytes (sizeof)   
          }KTRANSACTION, *PKTRANSACTION;                                                                 
                                                                                                         
          typedef struct _KTRAP_FRAME                   // 62 elements, 0x190 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       P1Home;                                                           
/*0x008*/     UINT64       P2Home;                                                           
/*0x010*/     UINT64       P3Home;                                                           
/*0x018*/     UINT64       P4Home;                                                           
/*0x020*/     UINT64       P5;                                                               
              union                                     // 2 elements, 0x1 bytes (sizeof)    
              {                                                                              
/*0x028*/         CHAR         PreviousMode;                                                 
/*0x028*/         UINT8        InterruptRetpolineState;                                      
              };                                                                             
/*0x029*/     UINT8        PreviousIrql;                                                     
              union                                     // 2 elements, 0x1 bytes (sizeof)    
              {                                                                              
/*0x02A*/         UINT8        FaultIndicator;                                               
/*0x02A*/         UINT8        NmiMsrIbrs;                                                   
              };                                                                             
/*0x02B*/     UINT8        ExceptionActive;                                                  
/*0x02C*/     ULONG32      MxCsr;                                                            
/*0x030*/     UINT64       Rax;                                                              
/*0x038*/     UINT64       Rcx;                                                              
/*0x040*/     UINT64       Rdx;                                                              
/*0x048*/     UINT64       R8;                                                               
/*0x050*/     UINT64       R9;                                                               
/*0x058*/     UINT64       R10;                                                              
/*0x060*/     UINT64       R11;                                                              
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x068*/         UINT64       GsBase;                                                       
/*0x068*/         UINT64       GsSwap;                                                       
              };                                                                             
/*0x070*/     struct _M128A Xmm0;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     struct _M128A Xmm1;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x090*/     struct _M128A Xmm2;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _M128A Xmm3;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _M128A Xmm4;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _M128A Xmm5;                       // 2 elements, 0x10 bytes (sizeof)   
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x0D0*/         UINT64       FaultAddress;                                                 
/*0x0D0*/         UINT64       ContextRecord;                                                
              };                                                                             
/*0x0D8*/     UINT64       Dr0;                                                              
/*0x0E0*/     UINT64       Dr1;                                                              
/*0x0E8*/     UINT64       Dr2;                                                              
/*0x0F0*/     UINT64       Dr3;                                                              
/*0x0F8*/     UINT64       Dr6;                                                              
/*0x100*/     UINT64       Dr7;                                                              
/*0x108*/     UINT64       DebugControl;                                                     
/*0x110*/     UINT64       LastBranchToRip;                                                  
/*0x118*/     UINT64       LastBranchFromRip;                                                
/*0x120*/     UINT64       LastExceptionToRip;                                               
/*0x128*/     UINT64       LastExceptionFromRip;                                             
/*0x130*/     UINT16       SegDs;                                                            
/*0x132*/     UINT16       SegEs;                                                            
/*0x134*/     UINT16       SegFs;                                                            
/*0x136*/     UINT16       SegGs;                                                            
/*0x138*/     UINT64       TrapFrame;                                                        
/*0x140*/     UINT64       Rbx;                                                              
/*0x148*/     UINT64       Rdi;                                                              
/*0x150*/     UINT64       Rsi;                                                              
/*0x158*/     UINT64       Rbp;                                                              
              union                                     // 2 elements, 0x8 bytes (sizeof)    
              {                                                                              
/*0x160*/         UINT64       ErrorCode;                                                    
/*0x160*/         UINT64       ExceptionFrame;                                               
              };                                                                             
/*0x168*/     UINT64       Rip;                                                              
/*0x170*/     UINT16       SegCs;                                                            
/*0x172*/     UINT8        Fill0;                                                            
/*0x173*/     UINT8        Logging;                                                          
/*0x174*/     UINT16       Fill1[2];                                                         
/*0x178*/     ULONG32      EFlags;                                                           
/*0x17C*/     ULONG32      Fill2;                                                            
/*0x180*/     UINT64       Rsp;                                                              
/*0x188*/     UINT16       SegSs;                                                            
/*0x18A*/     UINT16       Fill3;                                                            
/*0x18C*/     ULONG32      Fill4;                                                            
          }KTRAP_FRAME, *PKTRAP_FRAME;                                                       
                                                                                             
          typedef struct _KTSS64      // 8 elements, 0x68 bytes (sizeof) 
          {                                                              
/*0x000*/     ULONG32      Reserved0;                                    
/*0x004*/     UINT64       Rsp0;                                         
/*0x00C*/     UINT64       Rsp1;                                         
/*0x014*/     UINT64       Rsp2;                                         
/*0x01C*/     UINT64       Ist[8];                                       
/*0x05C*/     UINT64       Reserved1;                                    
/*0x064*/     UINT16       Reserved2;                                    
/*0x066*/     UINT16       IoMapBase;                                    
          }KTSS64, *PKTSS64;                                             
                                                                         
          typedef struct _KUMS_CONTEXT_HEADER           // 16 elements, 0x70 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT64       P1Home;                                                          
/*0x008*/     UINT64       P2Home;                                                          
/*0x010*/     UINT64       P3Home;                                                          
/*0x018*/     UINT64       P4Home;                                                          
/*0x020*/     VOID*        StackTop;                                                        
/*0x028*/     UINT64       StackSize;                                                       
/*0x030*/     UINT64       RspOffset;                                                       
/*0x038*/     UINT64       Rip;                                                             
/*0x040*/     struct _XSAVE_FORMAT* FltSave;                                                
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
                  struct                                // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                         
/*0x048*/             UINT64       Volatile : 1;        // 0 BitPosition                    
/*0x048*/             UINT64       Reserved : 63;       // 1 BitPosition                    
                  };                                                                        
/*0x048*/         UINT64       Flags;                                                       
              };                                                                            
/*0x050*/     struct _KTRAP_FRAME* TrapFrame;                                               
/*0x058*/     struct _KEXCEPTION_FRAME* ExceptionFrame;                                     
/*0x060*/     struct _KTHREAD* SourceThread;                                                
/*0x068*/     UINT64       Return;                                                          
          }KUMS_CONTEXT_HEADER, *PKUMS_CONTEXT_HEADER;                                      
                                                                                            
          typedef struct _XSTATE_FEATURE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      Offset;                                         
/*0x004*/     ULONG32      Size;                                           
          }XSTATE_FEATURE, *PXSTATE_FEATURE;                                  
                                                                           
          typedef struct _XSTATE_CONFIGURATION                   // 12 elements, 0x338 bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT64       EnabledFeatures;                                                           
/*0x008*/     UINT64       EnabledVolatileFeatures;                                                   
/*0x010*/     ULONG32      Size;                                                                      
              union                                              // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                       
/*0x014*/         ULONG32      ControlFlags;                                                          
                  struct                                         // 2 elements, 0x4 bytes (sizeof)    
                  {                                                                                   
/*0x014*/             ULONG32      OptimizedSave : 1;            // 0 BitPosition                     
/*0x014*/             ULONG32      CompactionEnabled : 1;        // 1 BitPosition                     
                  };                                                                                  
              };                                                                                      
/*0x018*/     struct _XSTATE_FEATURE Features[64];                                                    
/*0x218*/     UINT64       EnabledSupervisorFeatures;                                                 
/*0x220*/     UINT64       AlignedFeatures;                                                           
/*0x228*/     ULONG32      AllFeatureSize;                                                            
/*0x22C*/     ULONG32      AllFeatures[64];                                                           
/*0x32C*/     UINT8        _PADDING0_[0x4];                                                           
/*0x330*/     UINT64       EnabledUserVisibleSupervisorFeatures;                                      
          }XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;                                              
                                                                                                      
          typedef struct _KUSER_SHARED_DATA                                // 98 elements, 0x710 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     ULONG32      TickCountLowDeprecated;                                                              
/*0x004*/     ULONG32      TickCountMultiplier;                                                                 
/*0x008*/     struct _KSYSTEM_TIME InterruptTime;                          // 3 elements, 0xC bytes (sizeof)    
/*0x014*/     struct _KSYSTEM_TIME SystemTime;                             // 3 elements, 0xC bytes (sizeof)    
/*0x020*/     struct _KSYSTEM_TIME TimeZoneBias;                           // 3 elements, 0xC bytes (sizeof)    
/*0x02C*/     UINT16       ImageNumberLow;                                                                      
/*0x02E*/     UINT16       ImageNumberHigh;                                                                     
/*0x030*/     WCHAR        NtSystemRoot[260];                                                                   
/*0x238*/     ULONG32      MaxStackTraceDepth;                                                                  
/*0x23C*/     ULONG32      CryptoExponent;                                                                      
/*0x240*/     ULONG32      TimeZoneId;                                                                          
/*0x244*/     ULONG32      LargePageMinimum;                                                                    
/*0x248*/     ULONG32      AitSamplingValue;                                                                    
/*0x24C*/     ULONG32      AppCompatFlag;                                                                       
/*0x250*/     UINT64       RNGSeedVersion;                                                                      
/*0x258*/     ULONG32      GlobalValidationRunlevel;                                                            
/*0x25C*/     LONG32       TimeZoneBiasStamp;                                                                   
/*0x260*/     ULONG32      NtBuildNumber;                                                                       
/*0x264*/     enum _NT_PRODUCT_TYPE NtProductType;                                                              
/*0x268*/     UINT8        ProductTypeIsValid;                                                                  
/*0x269*/     UINT8        Reserved0[1];                                                                        
/*0x26A*/     UINT16       NativeProcessorArchitecture;                                                         
/*0x26C*/     ULONG32      NtMajorVersion;                                                                      
/*0x270*/     ULONG32      NtMinorVersion;                                                                      
/*0x274*/     UINT8        ProcessorFeatures[64];                                                               
/*0x2B4*/     ULONG32      Reserved1;                                                                           
/*0x2B8*/     ULONG32      Reserved3;                                                                           
/*0x2BC*/     ULONG32      TimeSlip;                                                                            
/*0x2C0*/     enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;                                      
/*0x2C4*/     ULONG32      BootId;                                                                              
/*0x2C8*/     union _LARGE_INTEGER SystemExpirationDate;                   // 4 elements, 0x8 bytes (sizeof)    
/*0x2D0*/     ULONG32      SuiteMask;                                                                           
/*0x2D4*/     UINT8        KdDebuggerEnabled;                                                                   
              union                                                        // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                 
/*0x2D5*/         UINT8        MitigationPolicies;                                                              
                  struct                                                   // 4 elements, 0x1 bytes (sizeof)    
                  {                                                                                             
/*0x2D5*/             UINT8        NXSupportPolicy : 2;                    // 0 BitPosition                     
/*0x2D5*/             UINT8        SEHValidationPolicy : 2;                // 2 BitPosition                     
/*0x2D5*/             UINT8        CurDirDevicesSkippedForDlls : 2;        // 4 BitPosition                     
/*0x2D5*/             UINT8        Reserved : 2;                           // 6 BitPosition                     
                  };                                                                                            
              };                                                                                                
/*0x2D6*/     UINT8        Reserved6[2];                                                                        
/*0x2D8*/     ULONG32      ActiveConsoleId;                                                                     
/*0x2DC*/     ULONG32      DismountCount;                                                                       
/*0x2E0*/     ULONG32      ComPlusPackage;                                                                      
/*0x2E4*/     ULONG32      LastSystemRITEventTickCount;                                                         
/*0x2E8*/     ULONG32      NumberOfPhysicalPages;                                                               
/*0x2EC*/     UINT8        SafeBootMode;                                                                        
/*0x2ED*/     UINT8        VirtualizationFlags;                                                                 
/*0x2EE*/     UINT8        Reserved12[2];                                                                       
              union                                                        // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                 
/*0x2F0*/         ULONG32      SharedDataFlags;                                                                 
                  struct                                                   // 12 elements, 0x4 bytes (sizeof)   
                  {                                                                                             
/*0x2F0*/             ULONG32      DbgErrorPortPresent : 1;                // 0 BitPosition                     
/*0x2F0*/             ULONG32      DbgElevationEnabled : 1;                // 1 BitPosition                     
/*0x2F0*/             ULONG32      DbgVirtEnabled : 1;                     // 2 BitPosition                     
/*0x2F0*/             ULONG32      DbgInstallerDetectEnabled : 1;          // 3 BitPosition                     
/*0x2F0*/             ULONG32      DbgLkgEnabled : 1;                      // 4 BitPosition                     
/*0x2F0*/             ULONG32      DbgDynProcessorEnabled : 1;             // 5 BitPosition                     
/*0x2F0*/             ULONG32      DbgConsoleBrokerEnabled : 1;            // 6 BitPosition                     
/*0x2F0*/             ULONG32      DbgSecureBootEnabled : 1;               // 7 BitPosition                     
/*0x2F0*/             ULONG32      DbgMultiSessionSku : 1;                 // 8 BitPosition                     
/*0x2F0*/             ULONG32      DbgMultiUsersInSessionSku : 1;          // 9 BitPosition                     
/*0x2F0*/             ULONG32      DbgStateSeparationEnabled : 1;          // 10 BitPosition                    
/*0x2F0*/             ULONG32      SpareBits : 21;                         // 11 BitPosition                    
                  };                                                                                            
              };                                                                                                
/*0x2F4*/     ULONG32      DataFlagsPad[1];                                                                     
/*0x2F8*/     UINT64       TestRetInstruction;                                                                  
/*0x300*/     INT64        QpcFrequency;                                                                        
/*0x308*/     ULONG32      SystemCall;                                                                          
/*0x30C*/     ULONG32      SystemCallPad0;                                                                      
/*0x310*/     UINT64       SystemCallPad[2];                                                                    
              union                                                        // 3 elements, 0xC bytes (sizeof)    
              {                                                                                                 
/*0x320*/         struct _KSYSTEM_TIME TickCount;                          // 3 elements, 0xC bytes (sizeof)    
/*0x320*/         UINT64       TickCountQuad;                                                                   
/*0x320*/         ULONG32      ReservedTickCountOverlay[3];                                                     
              };                                                                                                
/*0x32C*/     ULONG32      TickCountPad[1];                                                                     
/*0x330*/     ULONG32      Cookie;                                                                              
/*0x334*/     ULONG32      CookiePad[1];                                                                        
/*0x338*/     INT64        ConsoleSessionForegroundProcessId;                                                   
/*0x340*/     UINT64       TimeUpdateLock;                                                                      
/*0x348*/     UINT64       BaselineSystemTimeQpc;                                                               
/*0x350*/     UINT64       BaselineInterruptTimeQpc;                                                            
/*0x358*/     UINT64       QpcSystemTimeIncrement;                                                              
/*0x360*/     UINT64       QpcInterruptTimeIncrement;                                                           
/*0x368*/     UINT8        QpcSystemTimeIncrementShift;                                                         
/*0x369*/     UINT8        QpcInterruptTimeIncrementShift;                                                      
/*0x36A*/     UINT16       UnparkedProcessorCount;                                                              
/*0x36C*/     ULONG32      EnclaveFeatureMask[4];                                                               
/*0x37C*/     ULONG32      TelemetryCoverageRound;                                                              
/*0x380*/     UINT16       UserModeGlobalLogger[16];                                                            
/*0x3A0*/     ULONG32      ImageFileExecutionOptions;                                                           
/*0x3A4*/     ULONG32      LangGenerationCount;                                                                 
/*0x3A8*/     UINT64       Reserved4;                                                                           
/*0x3B0*/     UINT64       InterruptTimeBias;                                                                   
/*0x3B8*/     UINT64       QpcBias;                                                                             
/*0x3C0*/     ULONG32      ActiveProcessorCount;                                                                
/*0x3C4*/     UINT8        ActiveGroupCount;                                                                    
/*0x3C5*/     UINT8        Reserved9;                                                                           
              union                                                        // 2 elements, 0x2 bytes (sizeof)    
              {                                                                                                 
/*0x3C6*/         UINT16       QpcData;                                                                         
                  struct                                                   // 2 elements, 0x2 bytes (sizeof)    
                  {                                                                                             
/*0x3C6*/             UINT8        QpcBypassEnabled;                                                            
/*0x3C7*/             UINT8        QpcShift;                                                                    
                  };                                                                                            
              };                                                                                                
/*0x3C8*/     union _LARGE_INTEGER TimeZoneBiasEffectiveStart;             // 4 elements, 0x8 bytes (sizeof)    
/*0x3D0*/     union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;               // 4 elements, 0x8 bytes (sizeof)    
/*0x3D8*/     struct _XSTATE_CONFIGURATION XState;                         // 12 elements, 0x338 bytes (sizeof) 
          }KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;                                                              
                                                                                                                
          typedef struct _KWAIT_CHAIN_ENTRY // 3 elements, 0x30 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _LIST_ENTRY ListEntry; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _KTHREAD* Thread;                                         
/*0x018*/     struct _KEVENT Event;         // 1 elements, 0x18 bytes (sizeof) 
          }KWAIT_CHAIN_ENTRY, *PKWAIT_CHAIN_ENTRY;                                   
                                                                               
          typedef struct _LDR_DATA_TABLE_ENTRY                         // 59 elements, 0x120 bytes (sizeof) 
          {                                                                                                 
/*0x000*/     struct _LIST_ENTRY InLoadOrderLinks;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _LIST_ENTRY InMemoryOrderLinks;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY InInitializationOrderLinks;           // 2 elements, 0x10 bytes (sizeof)   
/*0x030*/     VOID*        DllBase;                                                                         
/*0x038*/     VOID*        EntryPoint;                                                                      
/*0x040*/     ULONG32      SizeOfImage;                                                                     
/*0x044*/     UINT8        _PADDING0_[0x4];                                                                 
/*0x048*/     struct _UNICODE_STRING FullDllName;                      // 3 elements, 0x10 bytes (sizeof)   
/*0x058*/     struct _UNICODE_STRING BaseDllName;                      // 3 elements, 0x10 bytes (sizeof)   
              union                                                    // 3 elements, 0x4 bytes (sizeof)    
              {                                                                                             
/*0x068*/         UINT8        FlagGroup[4];                                                                
/*0x068*/         ULONG32      Flags;                                                                       
                  struct                                               // 28 elements, 0x4 bytes (sizeof)   
                  {                                                                                         
/*0x068*/             ULONG32      PackagedBinary : 1;                 // 0 BitPosition                     
/*0x068*/             ULONG32      MarkedForRemoval : 1;               // 1 BitPosition                     
/*0x068*/             ULONG32      ImageDll : 1;                       // 2 BitPosition                     
/*0x068*/             ULONG32      LoadNotificationsSent : 1;          // 3 BitPosition                     
/*0x068*/             ULONG32      TelemetryEntryProcessed : 1;        // 4 BitPosition                     
/*0x068*/             ULONG32      ProcessStaticImport : 1;            // 5 BitPosition                     
/*0x068*/             ULONG32      InLegacyLists : 1;                  // 6 BitPosition                     
/*0x068*/             ULONG32      InIndexes : 1;                      // 7 BitPosition                     
/*0x068*/             ULONG32      ShimDll : 1;                        // 8 BitPosition                     
/*0x068*/             ULONG32      InExceptionTable : 1;               // 9 BitPosition                     
/*0x068*/             ULONG32      ReservedFlags1 : 2;                 // 10 BitPosition                    
/*0x068*/             ULONG32      LoadInProgress : 1;                 // 12 BitPosition                    
/*0x068*/             ULONG32      LoadConfigProcessed : 1;            // 13 BitPosition                    
/*0x068*/             ULONG32      EntryProcessed : 1;                 // 14 BitPosition                    
/*0x068*/             ULONG32      ProtectDelayLoad : 1;               // 15 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags3 : 2;                 // 16 BitPosition                    
/*0x068*/             ULONG32      DontCallForThreads : 1;             // 18 BitPosition                    
/*0x068*/             ULONG32      ProcessAttachCalled : 1;            // 19 BitPosition                    
/*0x068*/             ULONG32      ProcessAttachFailed : 1;            // 20 BitPosition                    
/*0x068*/             ULONG32      CorDeferredValidate : 1;            // 21 BitPosition                    
/*0x068*/             ULONG32      CorImage : 1;                       // 22 BitPosition                    
/*0x068*/             ULONG32      DontRelocate : 1;                   // 23 BitPosition                    
/*0x068*/             ULONG32      CorILOnly : 1;                      // 24 BitPosition                    
/*0x068*/             ULONG32      ChpeImage : 1;                      // 25 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags5 : 2;                 // 26 BitPosition                    
/*0x068*/             ULONG32      Redirected : 1;                     // 28 BitPosition                    
/*0x068*/             ULONG32      ReservedFlags6 : 2;                 // 29 BitPosition                    
/*0x068*/             ULONG32      CompatDatabaseProcessed : 1;        // 31 BitPosition                    
                  };                                                                                        
              };                                                                                            
/*0x06C*/     UINT16       ObsoleteLoadCount;                                                               
/*0x06E*/     UINT16       TlsIndex;                                                                        
/*0x070*/     struct _LIST_ENTRY HashLinks;                            // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     ULONG32      TimeDateStamp;                                                                   
/*0x084*/     UINT8        _PADDING1_[0x4];                                                                 
/*0x088*/     struct _ACTIVATION_CONTEXT* EntryPointActivationContext;                                      
/*0x090*/     VOID*        Lock;                                                                            
/*0x098*/     struct _LDR_DDAG_NODE* DdagNode;                                                              
/*0x0A0*/     struct _LIST_ENTRY NodeModuleLink;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _LDRP_LOAD_CONTEXT* LoadContext;                                                       
/*0x0B8*/     VOID*        ParentDllBase;                                                                   
/*0x0C0*/     VOID*        SwitchBackContext;                                                               
/*0x0C8*/     struct _RTL_BALANCED_NODE BaseAddressIndexNode;          // 6 elements, 0x18 bytes (sizeof)   
/*0x0E0*/     struct _RTL_BALANCED_NODE MappingInfoIndexNode;          // 6 elements, 0x18 bytes (sizeof)   
/*0x0F8*/     UINT64       OriginalBase;                                                                    
/*0x100*/     union _LARGE_INTEGER LoadTime;                           // 4 elements, 0x8 bytes (sizeof)    
/*0x108*/     ULONG32      BaseNameHashValue;                                                               
/*0x10C*/     enum _LDR_DLL_LOAD_REASON LoadReason;                                                         
/*0x110*/     ULONG32      ImplicitPathOptions;                                                             
/*0x114*/     ULONG32      ReferenceCount;                                                                  
/*0x118*/     ULONG32      DependentLoadFlags;                                                              
/*0x11C*/     UINT8        SigningLevel;                                                                    
/*0x11D*/     UINT8        _PADDING2_[0x3];                                                                 
          }LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;                                                    
                                                                                                            
          typedef struct _LDRP_CSLIST          // 1 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _SINGLE_LIST_ENTRY* Tail;                                   
          }LDRP_CSLIST, *PLDRP_CSLIST;                                           
                                                                                 
          typedef struct _LDR_DDAG_NODE                       // 10 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _LIST_ENTRY Modules;                     // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;                                     
/*0x018*/     ULONG32      LoadCount;                                                             
/*0x01C*/     ULONG32      LoadWhileUnloadingCount;                                               
/*0x020*/     ULONG32      LowestLink;                                                            
/*0x024*/     UINT8        _PADDING0_[0x4];                                                       
/*0x028*/     struct _LDRP_CSLIST Dependencies;               // 1 elements, 0x8 bytes (sizeof)   
/*0x030*/     struct _LDRP_CSLIST IncomingDependencies;       // 1 elements, 0x8 bytes (sizeof)   
/*0x038*/     enum _LDR_DDAG_STATE State;                                                         
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                       
/*0x040*/     struct _SINGLE_LIST_ENTRY CondenseLink;         // 1 elements, 0x8 bytes (sizeof)   
/*0x048*/     ULONG32      PreorderNumber;                                                        
/*0x04C*/     UINT8        _PADDING2_[0x4];                                                       
          }LDR_DDAG_NODE, *PLDR_DDAG_NODE;                                                        
                                                                                                  
          typedef struct _LDR_SERVICE_TAG_RECORD    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _LDR_SERVICE_TAG_RECORD* Next;                                    
/*0x008*/     ULONG32      ServiceTag;                                                 
/*0x00C*/     UINT8        _PADDING0_[0x4];                                            
          }LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD;                                   
                                                                                       
typedef struct _LDRP_LOAD_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}LDRP_LOAD_CONTEXT, *PLDRP_LOAD_CONTEXT;                                  
                                                                    
          typedef struct _LEAP_SECOND_DATA  // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT8        Enabled;                                            
/*0x001*/     UINT8        _PADDING0_[0x3];                                    
/*0x004*/     ULONG32      Count;                                              
/*0x008*/     union _LARGE_INTEGER Data[1];                                    
          }LEAP_SECOND_DATA, *PLEAP_SECOND_DATA;                                   
                                                                               
          typedef struct _LEARNING_MODE_DATA      // 3 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Settings;                                                
/*0x004*/     UINT8        Enabled;                                                 
/*0x005*/     UINT8        PermissiveModeEnabled;                                   
/*0x006*/     UINT8        _PADDING0_[0x2];                                         
          }LEARNING_MODE_DATA, *PLEARNING_MODE_DATA;                                  
                                                                                    
          typedef struct _LOADER_BUGCHECK_PARAMETERS // 5 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      BugcheckCode;                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     UINT64       BugcheckParameter1;                                          
/*0x010*/     UINT64       BugcheckParameter2;                                          
/*0x018*/     UINT64       BugcheckParameter3;                                          
/*0x020*/     UINT64       BugcheckParameter4;                                          
          }LOADER_BUGCHECK_PARAMETERS, *PLOADER_BUGCHECK_PARAMETERS;                                   
                                                                                        
          typedef struct _LOADER_HIVE_RECOVERY_INFO    // 8 elements, 0x14 bytes (sizeof) 
          {                                                                               
              struct                                   // 4 elements, 0x4 bytes (sizeof)  
              {                                                                           
/*0x000*/         ULONG32      Recovered : 1;          // 0 BitPosition                   
/*0x000*/         ULONG32      LegacyRecovery : 1;     // 1 BitPosition                   
/*0x000*/         ULONG32      SoftRebootConflict : 1; // 2 BitPosition                   
/*0x000*/         ULONG32      MostRecentLog : 3;      // 3 BitPosition                   
              };                                                                          
/*0x004*/     ULONG32      Spare : 27;                 // 0 BitPosition                   
/*0x008*/     ULONG32      LogNextSequence;                                               
/*0x00C*/     ULONG32      LogMinimumSequence;                                            
/*0x010*/     ULONG32      LogCurrentOffset;                                              
          }LOADER_HIVE_RECOVERY_INFO, *PLOADER_HIVE_RECOVERY_INFO;                                   
                                                                                          
          typedef struct _LOADER_PARAMETER_BLOCK                             // 32 elements, 0x160 bytes (sizeof) 
          {                                                                                                       
/*0x000*/     ULONG32      OsMajorVersion;                                                                        
/*0x004*/     ULONG32      OsMinorVersion;                                                                        
/*0x008*/     ULONG32      Size;                                                                                  
/*0x00C*/     ULONG32      OsLoaderSecurityVersion;                                                               
/*0x010*/     struct _LIST_ENTRY LoadOrderListHead;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     struct _LIST_ENTRY MemoryDescriptorListHead;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x030*/     struct _LIST_ENTRY BootDriverListHead;                         // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     struct _LIST_ENTRY EarlyLaunchListHead;                        // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/     struct _LIST_ENTRY CoreDriverListHead;                         // 2 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _LIST_ENTRY CoreExtensionsDriverListHead;               // 2 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _LIST_ENTRY TpmCoreDriverListHead;                      // 2 elements, 0x10 bytes (sizeof)   
/*0x080*/     UINT64       KernelStack;                                                                           
/*0x088*/     UINT64       Prcb;                                                                                  
/*0x090*/     UINT64       Process;                                                                               
/*0x098*/     UINT64       Thread;                                                                                
/*0x0A0*/     ULONG32      KernelStackSize;                                                                       
/*0x0A4*/     ULONG32      RegistryLength;                                                                        
/*0x0A8*/     VOID*        RegistryBase;                                                                          
/*0x0B0*/     struct _CONFIGURATION_COMPONENT_DATA* ConfigurationRoot;                                            
/*0x0B8*/     CHAR*        ArcBootDeviceName;                                                                     
/*0x0C0*/     CHAR*        ArcHalDeviceName;                                                                      
/*0x0C8*/     CHAR*        NtBootPathName;                                                                        
/*0x0D0*/     CHAR*        NtHalPathName;                                                                         
/*0x0D8*/     CHAR*        LoadOptions;                                                                           
/*0x0E0*/     struct _NLS_DATA_BLOCK* NlsData;                                                                    
/*0x0E8*/     struct _ARC_DISK_INFORMATION* ArcDiskInformation;                                                   
/*0x0F0*/     struct _LOADER_PARAMETER_EXTENSION* Extension;                                                      
              union                                                          // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                                   
/*0x0F8*/         struct _I386_LOADER_BLOCK I386;                            // 3 elements, 0x10 bytes (sizeof)   
/*0x0F8*/         struct _ARM_LOADER_BLOCK Arm;                              // 1 elements, 0x4 bytes (sizeof)    
              }u;                                                                                                 
/*0x108*/     struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation; // 5 elements, 0x40 bytes (sizeof)   
/*0x148*/     CHAR*        OsBootstatPathName;                                                                    
/*0x150*/     CHAR*        ArcOSDataDeviceName;                                                                   
/*0x158*/     CHAR*        ArcWindowsSysPartName;                                                                 
          }LOADER_PARAMETER_BLOCK, *PLOADER_PARAMETER_BLOCK;                                                      
                                                                                                                  
          typedef struct _LOADER_PARAMETER_CI_EXTENSION           // 21 elements, 0x50 bytes (sizeof) 
          {                                                                                           
/*0x000*/     ULONG32      CodeIntegrityOptions;                                                      
              struct                                              // 4 elements, 0x4 bytes (sizeof)   
              {                                                                                       
/*0x004*/         ULONG32      UpgradeInProgress : 1;             // 0 BitPosition                    
/*0x004*/         ULONG32      IsWinPE : 1;                       // 1 BitPosition                    
/*0x004*/         ULONG32      CustomKernelSignersAllowed : 1;    // 2 BitPosition                    
/*0x004*/         ULONG32      Reserved : 29;                     // 3 BitPosition                    
              };                                                                                      
/*0x008*/     union _LARGE_INTEGER WhqlEnforcementDate;           // 4 elements, 0x8 bytes (sizeof)   
/*0x010*/     ULONG32      RevocationListOffset;                                                      
/*0x014*/     ULONG32      RevocationListSize;                                                        
/*0x018*/     ULONG32      CodeIntegrityPolicyOffset;                                                 
/*0x01C*/     ULONG32      CodeIntegrityPolicySize;                                                   
/*0x020*/     ULONG32      CodeIntegrityPolicyHashOffset;                                             
/*0x024*/     ULONG32      CodeIntegrityPolicyHashSize;                                               
/*0x028*/     ULONG32      CodeIntegrityPolicyOriginalHashOffset;                                     
/*0x02C*/     ULONG32      CodeIntegrityPolicyOriginalHashSize;                                       
/*0x030*/     LONG32       WeakCryptoPolicyLoadStatus;                                                
/*0x034*/     ULONG32      WeakCryptoPolicyOffset;                                                    
/*0x038*/     ULONG32      WeakCryptoPolicySize;                                                      
/*0x03C*/     ULONG32      SecureBootPolicyOffset;                                                    
/*0x040*/     ULONG32      SecureBootPolicySize;                                                      
/*0x044*/     ULONG32      Reserved2;                                                                 
/*0x048*/     UINT8        SerializedData[1];                                                         
/*0x049*/     UINT8        _PADDING0_[0x7];                                                           
          }LOADER_PARAMETER_CI_EXTENSION, *PLOADER_PARAMETER_CI_EXTENSION;                                    
                                                                                                      
          typedef struct _PROFILE_PARAMETER_BLOCK // 6 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT16       Status;                                                   
/*0x002*/     UINT16       Reserved;                                                 
/*0x004*/     UINT16       DockingState;                                             
/*0x006*/     UINT16       Capabilities;                                             
/*0x008*/     ULONG32      DockID;                                                   
/*0x00C*/     ULONG32      SerialNumber;                                             
          }PROFILE_PARAMETER_BLOCK, *PPROFILE_PARAMETER_BLOCK;                                   
                                                                                     
          typedef struct _LOADER_PERFORMANCE_DATA // 9 elements, 0x48 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       StartTime;                                                
/*0x008*/     UINT64       EndTime;                                                  
/*0x010*/     UINT64       PreloadEndTime;                                           
/*0x018*/     UINT64       TcbLoaderStartTime;                                       
/*0x020*/     UINT64       LoadHypervisorTime;                                       
/*0x028*/     UINT64       LaunchHypervisorTime;                                     
/*0x030*/     UINT64       LoadVsmTime;                                              
/*0x038*/     UINT64       LaunchVsmTime;                                            
/*0x040*/     UINT64       LoadDriversTime;                                          
          }LOADER_PERFORMANCE_DATA, *PLOADER_PERFORMANCE_DATA;                                   
                                                                                     
          typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION     // 9 elements, 0x40 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      InitialHypervisorCrashdumpAreaPageCount;                                    
/*0x004*/     ULONG32      HypervisorCrashdumpAreaPageCount;                                           
/*0x008*/     UINT64       InitialHypervisorCrashdumpAreaSpa;                                          
/*0x010*/     UINT64       HypervisorCrashdumpAreaSpa;                                                 
/*0x018*/     UINT64       HypervisorLaunchStatus;                                                     
/*0x020*/     UINT64       HypervisorLaunchStatusArg1;                                                 
/*0x028*/     UINT64       HypervisorLaunchStatusArg2;                                                 
/*0x030*/     UINT64       HypervisorLaunchStatusArg3;                                                 
/*0x038*/     UINT64       HypervisorLaunchStatusArg4;                                                 
          }LOADER_PARAMETER_HYPERVISOR_EXTENSION, *PLOADER_PARAMETER_HYPERVISOR_EXTENSION;                                   
                                                                                                       
          typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                           
/*0x000*/     ULONG32      Version;                                                                   
/*0x004*/     ULONG32      AbnormalResetOccurred;                                                     
/*0x008*/     ULONG32      OfflineMemoryDumpCapable;                                                  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                           
/*0x010*/     union _LARGE_INTEGER ResetDataAddress;               // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     ULONG32      ResetDataSize;                                                             
/*0x01C*/     UINT8        _PADDING1_[0x4];                                                           
          }OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2, *POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;                                   
                                                                                                      
          typedef struct _LOADER_RESET_REASON          // 3 elements, 0x30 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        Supplied;                                                      
/*0x001*/     UINT8        _PADDING0_[0x7];                                               
              union                                    // 3 elements, 0x8 bytes (sizeof)  
              {                                                                           
                  struct                               // 3 elements, 0x8 bytes (sizeof)  
                  {                                                                       
/*0x008*/             UINT8        Pch;                                                   
/*0x009*/             UINT8        EmbeddedController;                                    
/*0x00A*/             UINT8        Reserved[6];                                           
                  }Component;                                                             
/*0x008*/         UINT64       AsULONG64;                                                 
/*0x008*/         UINT8        AsBytes[8];                                                
              }Basic;                                                                     
/*0x010*/     ULONG32      AdditionalInfo[8];                                             
          }LOADER_RESET_REASON, *PLOADER_RESET_REASON;                                    
                                                                                          
          typedef struct _LOADER_PARAMETER_EXTENSION                                               // 97 elements, 0xD60 bytes (sizeof) 
          {                                                                                                                             
/*0x000*/     ULONG32      Size;                                                                                                        
/*0x004*/     struct _PROFILE_PARAMETER_BLOCK Profile;                                             // 6 elements, 0x10 bytes (sizeof)   
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                                             
/*0x018*/     VOID*        EmInfFileImage;                                                                                              
/*0x020*/     ULONG32      EmInfFileSize;                                                                                               
/*0x024*/     UINT8        _PADDING1_[0x4];                                                                                             
/*0x028*/     VOID*        TriageDumpBlock;                                                                                             
/*0x030*/     struct _HEADLESS_LOADER_BLOCK* HeadlessLoaderBlock;                                                                       
/*0x038*/     struct _SMBIOS3_TABLE_HEADER* SMBiosEPSHeader;                                                                            
/*0x040*/     VOID*        DrvDBImage;                                                                                                  
/*0x048*/     ULONG32      DrvDBSize;                                                                                                   
/*0x04C*/     UINT8        _PADDING2_[0x4];                                                                                             
/*0x050*/     struct _NETWORK_LOADER_BLOCK* NetworkLoaderBlock;                                                                         
/*0x058*/     struct _LIST_ENTRY FirmwareDescriptorListHead;                                       // 2 elements, 0x10 bytes (sizeof)   
/*0x068*/     VOID*        AcpiTable;                                                                                                   
/*0x070*/     ULONG32      AcpiTableSize;                                                                                               
              struct                                                                               // 20 elements, 0x4 bytes (sizeof)   
              {                                                                                                                         
/*0x074*/         ULONG32      LastBootSucceeded : 1;                                              // 0 BitPosition                     
/*0x074*/         ULONG32      LastBootShutdown : 1;                                               // 1 BitPosition                     
/*0x074*/         ULONG32      IoPortAccessSupported : 1;                                          // 2 BitPosition                     
/*0x074*/         ULONG32      BootDebuggerActive : 1;                                             // 3 BitPosition                     
/*0x074*/         ULONG32      StrongCodeGuarantees : 1;                                           // 4 BitPosition                     
/*0x074*/         ULONG32      HardStrongCodeGuarantees : 1;                                       // 5 BitPosition                     
/*0x074*/         ULONG32      SidSharingDisabled : 1;                                             // 6 BitPosition                     
/*0x074*/         ULONG32      TpmInitialized : 1;                                                 // 7 BitPosition                     
/*0x074*/         ULONG32      VsmConfigured : 1;                                                  // 8 BitPosition                     
/*0x074*/         ULONG32      IumEnabled : 1;                                                     // 9 BitPosition                     
/*0x074*/         ULONG32      IsSmbboot : 1;                                                      // 10 BitPosition                    
/*0x074*/         ULONG32      BootLogEnabled : 1;                                                 // 11 BitPosition                    
/*0x074*/         ULONG32      DriverVerifierEnabled : 1;                                          // 12 BitPosition                    
/*0x074*/         ULONG32      Unused : 8;                                                         // 13 BitPosition                    
/*0x074*/         ULONG32      FeatureSimulations : 6;                                             // 21 BitPosition                    
/*0x074*/         ULONG32      MicrocodeSelfHosting : 1;                                           // 27 BitPosition                    
/*0x074*/         ULONG32      XhciLegacyHandoffSkip : 1;                                          // 28 BitPosition                    
/*0x074*/         ULONG32      DisableInsiderOptInHVCI : 1;                                        // 29 BitPosition                    
/*0x074*/         ULONG32      MicrocodeMinVerSupported : 1;                                       // 30 BitPosition                    
/*0x074*/         ULONG32      GpuIommuEnabled : 1;                                                // 31 BitPosition                    
              };                                                                                                                        
/*0x078*/     struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;                               // 9 elements, 0x48 bytes (sizeof)   
/*0x0C0*/     struct _LIST_ENTRY BootApplicationPersistentData;                                    // 2 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     VOID*        WmdTestResult;                                                                                               
/*0x0D8*/     struct _GUID BootIdentifier;                                                         // 4 elements, 0x10 bytes (sizeof)   
/*0x0E8*/     ULONG32      ResumePages;                                                                                                 
/*0x0EC*/     UINT8        _PADDING3_[0x4];                                                                                             
/*0x0F0*/     VOID*        DumpHeader;                                                                                                  
/*0x0F8*/     VOID*        BgContext;                                                                                                   
/*0x100*/     VOID*        NumaLocalityInfo;                                                                                            
/*0x108*/     VOID*        NumaGroupAssignment;                                                                                         
/*0x110*/     struct _LIST_ENTRY AttachedHives;                                                    // 2 elements, 0x10 bytes (sizeof)   
/*0x120*/     ULONG32      MemoryCachingRequirementsCount;                                                                              
/*0x124*/     UINT8        _PADDING4_[0x4];                                                                                             
/*0x128*/     VOID*        MemoryCachingRequirements;                                                                                   
/*0x130*/     struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;                                   // 5 elements, 0x868 bytes (sizeof)  
/*0x998*/     UINT64       ProcessorCounterFrequency;                                                                                   
/*0x9A0*/     struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;                   // 9 elements, 0x40 bytes (sizeof)   
/*0x9E0*/     struct _GUID HardwareConfigurationId;                                                // 4 elements, 0x10 bytes (sizeof)   
/*0x9F0*/     struct _LIST_ENTRY HalExtensionModuleList;                                           // 2 elements, 0x10 bytes (sizeof)   
/*0xA00*/     union _LARGE_INTEGER SystemTime;                                                     // 4 elements, 0x8 bytes (sizeof)    
/*0xA08*/     UINT64       TimeStampAtSystemTimeRead;                                                                                   
              union                                                                                // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                                                         
/*0xA10*/         UINT64       BootFlags;                                                                                               
                  struct                                                                           // 4 elements, 0x8 bytes (sizeof)    
                  {                                                                                                                     
/*0xA10*/             UINT64       DbgMenuOsSelection : 1;                                         // 0 BitPosition                     
/*0xA10*/             UINT64       DbgHiberBoot : 1;                                               // 1 BitPosition                     
/*0xA10*/             UINT64       DbgSoftRestart : 1;                                             // 2 BitPosition                     
/*0xA10*/             UINT64       DbgMeasuredLaunch : 1;                                          // 3 BitPosition                     
                  };                                                                                                                    
              };                                                                                                                        
              union                                                                                // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                                                         
/*0xA18*/         UINT64       InternalBootFlags;                                                                                       
                  struct                                                                           // 3 elements, 0x8 bytes (sizeof)    
                  {                                                                                                                     
/*0xA18*/             UINT64       DbgUtcBootTime : 1;                                             // 0 BitPosition                     
/*0xA18*/             UINT64       DbgRtcBootTime : 1;                                             // 1 BitPosition                     
/*0xA18*/             UINT64       DbgNoLegacyServices : 1;                                        // 2 BitPosition                     
                  };                                                                                                                    
              };                                                                                                                        
/*0xA20*/     VOID*        WfsFPData;                                                                                                   
/*0xA28*/     ULONG32      WfsFPDataSize;                                                                                               
/*0xA2C*/     UINT8        _PADDING5_[0x4];                                                                                             
/*0xA30*/     struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;                               // 5 elements, 0x28 bytes (sizeof)   
/*0xA58*/     VOID*        ApiSetSchema;                                                                                                
/*0xA60*/     ULONG32      ApiSetSchemaSize;                                                                                            
/*0xA64*/     UINT8        _PADDING6_[0x4];                                                                                             
/*0xA68*/     struct _LIST_ENTRY ApiSetSchemaExtensions;                                           // 2 elements, 0x10 bytes (sizeof)   
/*0xA78*/     struct _UNICODE_STRING AcpiBiosVersion;                                              // 3 elements, 0x10 bytes (sizeof)   
/*0xA88*/     struct _UNICODE_STRING SmbiosVersion;                                                // 3 elements, 0x10 bytes (sizeof)   
/*0xA98*/     struct _UNICODE_STRING EfiVersion;                                                   // 3 elements, 0x10 bytes (sizeof)   
/*0xAA8*/     struct _DEBUG_DEVICE_DESCRIPTOR* KdDebugDevice;                                                                           
/*0xAB0*/     struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable; // 5 elements, 0x20 bytes (sizeof)   
/*0xAD0*/     struct _UNICODE_STRING ManufacturingProfile;                                         // 3 elements, 0x10 bytes (sizeof)   
/*0xAE0*/     VOID*        BbtBuffer;                                                                                                   
/*0xAE8*/     UINT64       XsaveAllowedFeatures;                                                                                        
/*0xAF0*/     ULONG32      XsaveFlags;                                                                                                  
/*0xAF4*/     UINT8        _PADDING7_[0x4];                                                                                             
/*0xAF8*/     VOID*        BootOptions;                                                                                                 
/*0xB00*/     ULONG32      IumEnablement;                                                                                               
/*0xB04*/     ULONG32      IumPolicy;                                                                                                   
/*0xB08*/     LONG32       IumStatus;                                                                                                   
/*0xB0C*/     ULONG32      BootId;                                                                                                      
/*0xB10*/     struct _LOADER_PARAMETER_CI_EXTENSION* CodeIntegrityData;                                                                 
/*0xB18*/     ULONG32      CodeIntegrityDataSize;                                                                                       
/*0xB1C*/     struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;                            // 8 elements, 0x14 bytes (sizeof)   
/*0xB30*/     ULONG32      SoftRestartCount;                                                                                            
/*0xB34*/     UINT8        _PADDING8_[0x4];                                                                                             
/*0xB38*/     INT64        SoftRestartTime;                                                                                             
/*0xB40*/     VOID*        HypercallCodeVa;                                                                                             
/*0xB48*/     VOID*        HalVirtualAddress;                                                                                           
/*0xB50*/     UINT64       HalNumberOfBytes;                                                                                            
/*0xB58*/     struct _LEAP_SECOND_DATA* LeapSecondData;                                                                                 
/*0xB60*/     ULONG32      MajorRelease;                                                                                                
/*0xB64*/     ULONG32      Reserved1;                                                                                                   
/*0xB68*/     CHAR         NtBuildLab[224];                                                                                             
/*0xC48*/     CHAR         NtBuildLabEx[224];                                                                                           
/*0xD28*/     struct _LOADER_RESET_REASON ResetReason;                                             // 3 elements, 0x30 bytes (sizeof)   
/*0xD58*/     ULONG32      MaxPciBusNumber;                                                                                             
/*0xD5C*/     ULONG32      FeatureSettings;                                                                                             
          }LOADER_PARAMETER_EXTENSION, *PLOADER_PARAMETER_EXTENSION;                                                                    
                                                                                                                                        
          typedef struct _LOCK_HEADER                   // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _RTL_AVL_TREE LockTree;            // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _RTL_AVL_TREE LockMdlSwitchedTree; // 1 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT64       Count;                                                          
/*0x018*/     UINT64       Lock;                                                           
/*0x020*/     ULONG32      Valid;                                                          
/*0x024*/     UINT8        _PADDING0_[0x4];                                                
          }LOCK_HEADER, *PLOCK_HEADER;                                                     
                                                                                           
          typedef struct _LOCK_TRACKER                   // 11 elements, 0x90 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _RTL_BALANCED_NODE LockTrackerNode; // 6 elements, 0x18 bytes (sizeof)  
/*0x018*/     struct _MDL* Mdl;                                                              
/*0x020*/     VOID*        StartVa;                                                          
/*0x028*/     UINT64       Count;                                                            
/*0x030*/     ULONG32      Offset;                                                           
/*0x034*/     ULONG32      Length;                                                           
/*0x038*/     ULONG32      Who;                                                              
/*0x03C*/     ULONG32      Hash;                                                             
/*0x040*/     UINT64       Page;                                                             
/*0x048*/     VOID*        StackTrace[8];                                                    
/*0x088*/     struct _EPROCESS* Process;                                                     
          }LOCK_TRACKER, *PLOCK_TRACKER;                                                     
                                                                                             
          typedef struct _LOG_HANDLE_CONTEXT                                        // 12 elements, 0x98 bytes (sizeof) 
          {                                                                                                             
/*0x000*/     VOID*        LogHandle;                                                                                   
/*0x008*/     FUNCT_00EF_2D94_FlushToLsnRoutine* FlushToLsnRoutine;                                                     
/*0x010*/     FUNCT_00EF_2D98_QueryLogHandleInfoRoutine* QueryLogHandleInfoRoutine;                                     
/*0x018*/     struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;                    // 3 elements, 0x18 bytes (sizeof)  
/*0x030*/     struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;                    // 7 elements, 0x38 bytes (sizeof)  
/*0x068*/     ULONG32      AdditionalPagesToWrite;                                                                      
/*0x06C*/     ULONG32      CcLWScanDPThreshold;                                                                         
/*0x070*/     union _LARGE_INTEGER LargestLsnForCurrentLWScan;                      // 4 elements, 0x8 bytes (sizeof)   
/*0x078*/     struct _FILE_OBJECT* RelatedFileObject;                                                                   
/*0x080*/     UINT64       LargestLsnFileObjectKey;                                                                     
/*0x088*/     union _LARGE_INTEGER LastLWTimeStamp;                                 // 4 elements, 0x8 bytes (sizeof)   
/*0x090*/     ULONG32      Flags;                                                                                       
/*0x094*/     UINT8        _PADDING0_[0x4];                                                                             
          }LOG_HANDLE_CONTEXT, *PLOG_HANDLE_CONTEXT;                                                                    
                                                                                                                        
          typedef struct _LOGGED_STREAM_CALLBACK_V1                 // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                            
/*0x000*/     VOID*        LogHandle;                                                                  
/*0x008*/     FUNCT_00EF_2D94_FlushToLsnRoutine* FlushToLsnRoutine;                                    
          }LOGGED_STREAM_CALLBACK_V1, *PLOGGED_STREAM_CALLBACK_V1;                                     
                                                                                                       
          typedef struct _LOGGED_STREAM_CALLBACK_V2         // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _LOG_HANDLE_CONTEXT* LogHandleContext;                                   
          }LOGGED_STREAM_CALLBACK_V2, *PLOGGED_STREAM_CALLBACK_V2;                                  
                                                                                              
          typedef struct _LOOKASIDE_LIST_EX     // 1 elements, 0x60 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _GENERAL_LOOKASIDE_POOL L; // 22 elements, 0x60 bytes (sizeof) 
          }LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX;                                    
                                                                                    
          typedef struct _LPCP_MESSAGE                     // 7 elements, 0x50 bytes (sizeof) 
          {                                                                                   
              union                                        // 2 elements, 0x10 bytes (sizeof) 
              {                                                                               
/*0x000*/         struct _LIST_ENTRY Entry;                // 2 elements, 0x10 bytes (sizeof) 
                  struct                                   // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                           
/*0x000*/             struct _SINGLE_LIST_ENTRY FreeEntry; // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/             ULONG32      Reserved0;                                                 
/*0x00C*/             UINT8        _PADDING0_[0x4];                                           
                  };                                                                          
              };                                                                              
/*0x010*/     VOID*        SenderPort;                                                        
/*0x018*/     struct _ETHREAD* RepliedToThread;                                               
/*0x020*/     VOID*        PortContext;                                                       
/*0x028*/     struct _PORT_MESSAGE Request;                // 7 elements, 0x28 bytes (sizeof) 
          }LPCP_MESSAGE, *PLPCP_MESSAGE;                                                      
                                                                                              
          typedef struct _LPCP_NONPAGED_PORT_QUEUE   // 2 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _KSEMAPHORE Semaphore;          // 2 elements, 0x20 bytes (sizeof) 
/*0x020*/     struct _LPCP_PORT_OBJECT* BackPointer;                                    
          }LPCP_NONPAGED_PORT_QUEUE, *PLPCP_NONPAGED_PORT_QUEUE;                                   
                                                                                        
          typedef struct _LPCP_PORT_QUEUE                          // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;                                    
/*0x008*/     struct _KSEMAPHORE* Semaphore;                                                          
/*0x010*/     struct _LIST_ENTRY ReceiveHead;                      // 2 elements, 0x10 bytes (sizeof) 
          }LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE;                                                        
                                                                                                      
          typedef struct _LPCP_PORT_OBJECT                     // 18 elements, 0x100 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _LPCP_PORT_OBJECT* ConnectionPort;                                             
/*0x008*/     struct _LPCP_PORT_OBJECT* ConnectedPort;                                              
/*0x010*/     struct _LPCP_PORT_QUEUE MsgQueue;                // 3 elements, 0x20 bytes (sizeof)   
/*0x030*/     struct _CLIENT_ID Creator;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     VOID*        ClientSectionBase;                                                       
/*0x048*/     VOID*        ServerSectionBase;                                                       
/*0x050*/     VOID*        PortContext;                                                             
/*0x058*/     struct _ETHREAD* ClientThread;                                                        
/*0x060*/     struct _SECURITY_QUALITY_OF_SERVICE SecurityQos; // 4 elements, 0xC bytes (sizeof)    
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                         
/*0x070*/     struct _SECURITY_CLIENT_CONTEXT StaticSecurity;  // 6 elements, 0x48 bytes (sizeof)   
/*0x0B8*/     struct _LIST_ENTRY LpcReplyChainHead;            // 2 elements, 0x10 bytes (sizeof)   
/*0x0C8*/     struct _LIST_ENTRY LpcDataInfoChainHead;         // 2 elements, 0x10 bytes (sizeof)   
              union                                            // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                     
/*0x0D8*/         struct _EPROCESS* ServerProcess;                                                  
/*0x0D8*/         struct _EPROCESS* MappingProcess;                                                 
              };                                                                                    
/*0x0E0*/     UINT16       MaxMessageLength;                                                        
/*0x0E2*/     UINT16       MaxConnectionInfoLength;                                                 
/*0x0E4*/     ULONG32      Flags;                                                                   
/*0x0E8*/     struct _KEVENT WaitEvent;                        // 1 elements, 0x18 bytes (sizeof)   
          }LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT;                                                    
                                                                                                    
          typedef struct _MAILSLOT_CREATE_PARAMETERS // 4 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      MailslotQuota;                                               
/*0x004*/     ULONG32      MaximumMessageSize;                                          
/*0x008*/     union _LARGE_INTEGER ReadTimeout;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT8        TimeoutSpecified;                                            
/*0x011*/     UINT8        _PADDING0_[0x7];                                             
          }MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS;                                   
                                                                                        
          typedef struct _MAP_REGISTER_ENTRY // 2 elements, 0x10 bytes (sizeof) 
          {                                                                     
/*0x000*/     VOID*        MapRegister;                                         
/*0x008*/     UINT8        WriteToDevice;                                       
/*0x009*/     UINT8        _PADDING0_[0x7];                                     
          }MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY;                                   
                                                                                
          typedef struct _SEGMENT_FLAGS                        // 16 elements, 0x4 bytes (sizeof) 
          {                                                                                       
              union                                            // 2 elements, 0x2 bytes (sizeof)  
              {                                                                                   
                  struct                                       // 6 elements, 0x2 bytes (sizeof)  
                  {                                                                               
/*0x000*/             UINT16       TotalNumberOfPtes4132 : 10; // 0 BitPosition                   
/*0x000*/             UINT16       Spare0 : 2;                 // 10 BitPosition                  
/*0x000*/             UINT16       LargePages : 1;             // 12 BitPosition                  
/*0x000*/             UINT16       DebugSymbolsLoaded : 1;     // 13 BitPosition                  
/*0x000*/             UINT16       WriteCombined : 1;          // 14 BitPosition                  
/*0x000*/             UINT16       NoCache : 1;                // 15 BitPosition                  
                  };                                                                              
/*0x000*/         UINT16       Short0;                                                            
              };                                                                                  
              union                                            // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                   
                  struct                                       // 4 elements, 0x1 bytes (sizeof)  
                  {                                                                               
/*0x002*/             UINT8        Unused : 1;                 // 0 BitPosition                   
/*0x002*/             UINT8        DefaultProtectionMask : 5;  // 1 BitPosition                   
/*0x002*/             UINT8        Binary32 : 1;               // 6 BitPosition                   
/*0x002*/             UINT8        ContainsDebug : 1;          // 7 BitPosition                   
                  };                                                                              
/*0x002*/         UINT8        UChar1;                                                            
              };                                                                                  
              union                                            // 2 elements, 0x1 bytes (sizeof)  
              {                                                                                   
                  struct                                       // 3 elements, 0x1 bytes (sizeof)  
                  {                                                                               
/*0x003*/             UINT8        ForceCollision : 1;         // 0 BitPosition                   
/*0x003*/             UINT8        ImageSigningType : 3;       // 1 BitPosition                   
/*0x003*/             UINT8        ImageSigningLevel : 4;      // 4 BitPosition                   
                  };                                                                              
/*0x003*/         UINT8        UChar2;                                                            
              };                                                                                  
          }SEGMENT_FLAGS, *PSEGMENT_FLAGS;                                                        
                                                                                                  
          typedef struct _MAPPED_FILE_SEGMENT        // 8 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _CONTROL_AREA* ControlArea;                                        
/*0x008*/     ULONG32      TotalNumberOfPtes;                                           
/*0x00C*/     struct _SEGMENT_FLAGS SegmentFlags;    // 16 elements, 0x4 bytes (sizeof) 
/*0x010*/     UINT64       NumberOfCommittedPages;                                      
/*0x018*/     UINT64       SizeOfSegment;                                               
              union                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x020*/         struct _MMEXTEND_INFO* ExtendInfo;                                    
/*0x020*/         VOID*        BasedAddress;                                            
              };                                                                        
/*0x028*/     struct _EX_PUSH_LOCK SegmentLock;      // 7 elements, 0x8 bytes (sizeof)  
          }MAPPED_FILE_SEGMENT, *PMAPPED_FILE_SEGMENT;                                   
                                                                                        
          typedef struct _MBCB                      // 11 elements, 0xC0 bytes (sizeof) 
          {                                                                             
/*0x000*/     INT16        NodeTypeCode;                                                
/*0x002*/     INT16        NodeIsInZone;                                                
/*0x004*/     ULONG32      PagesToWrite;                                                
/*0x008*/     ULONG32      DirtyPages;                                                  
/*0x00C*/     ULONG32      Reserved;                                                    
/*0x010*/     struct _LIST_ENTRY BitmapRanges;      // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     INT64        ResumeWritePage;                                             
/*0x028*/     INT64        MostRecentlyDirtiedPage;                                     
/*0x030*/     struct _BITMAP_RANGE BitmapRange1;    // 6 elements, 0x30 bytes (sizeof)  
/*0x060*/     struct _BITMAP_RANGE BitmapRange2;    // 6 elements, 0x30 bytes (sizeof)  
/*0x090*/     struct _BITMAP_RANGE BitmapRange3;    // 6 elements, 0x30 bytes (sizeof)  
          }MBCB, *PMBCB;                                                                
                                                                                        
          typedef struct _MCGEN_TRACE_CONTEXT  // 12 elements, 0x48 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       RegistrationHandle;                                     
/*0x008*/     UINT64       Logger;                                                 
/*0x010*/     UINT64       MatchAnyKeyword;                                        
/*0x018*/     UINT64       MatchAllKeyword;                                        
/*0x020*/     ULONG32      Flags;                                                  
/*0x024*/     ULONG32      IsEnabled;                                              
/*0x028*/     UINT8        Level;                                                  
/*0x029*/     UINT8        Reserve;                                                
/*0x02A*/     UINT16       EnableBitsCount;                                        
/*0x02C*/     UINT8        _PADDING0_[0x4];                                        
/*0x030*/     ULONG32*     EnableBitMask;                                          
/*0x038*/     UINT64*      EnableKeyWords;                                         
/*0x040*/     UINT8*       EnableLevel;                                            
          }MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;                                    
                                                                                   
          typedef struct _MCUPDATE_INFO      // 4 elements, 0x30 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _LIST_ENTRY List;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Status;                                              
/*0x014*/     UINT8        _PADDING0_[0x4];                                     
/*0x018*/     UINT64       Id;                                                  
/*0x020*/     UINT64       VendorScratch[2];                                    
          }MCUPDATE_INFO, *PMCUPDATE_INFO;                                      
                                                                                
          typedef struct _MDL                         // 10 elements, 0x30 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _MDL* Next;                                                          
/*0x008*/     INT16        Size;                                                          
/*0x00A*/     INT16        MdlFlags;                                                      
/*0x00C*/     UINT16       AllocationProcessorNumber;                                     
/*0x00E*/     UINT16       Reserved;                                                      
/*0x010*/     struct _EPROCESS* Process;                                                  
/*0x018*/     VOID*        MappedSystemVa;                                                
/*0x020*/     VOID*        StartVa;                                                       
/*0x028*/     ULONG32      ByteCount;                                                     
/*0x02C*/     ULONG32      ByteOffset;                                                    
          }MDL, *PMDL;                                                                    
                                                                                          
          typedef struct _MEMORY_ALLOCATION_DESCRIPTOR // 4 elements, 0x28 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY ListEntry;            // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     enum _TYPE_OF_MEMORY MemoryType;                                            
/*0x014*/     UINT8        _PADDING0_[0x4];                                               
/*0x018*/     UINT64       BasePage;                                                      
/*0x020*/     UINT64       PageCount;                                                     
          }MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR;                                   
                                                                                          
          typedef struct _MI_ACCESS_LOG_STATE                  // 5 elements, 0x80 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _MM_PAGE_ACCESS_INFO_HEADER* CcAccessLog;                                    
/*0x008*/     struct _WORK_QUEUE_ITEM DisableAccessLogging;    // 3 elements, 0x20 bytes (sizeof) 
/*0x028*/     ULONG32      Enabled;                                                               
/*0x02C*/     ULONG32      MinLoggingPriority;                                                    
/*0x030*/     UINT8        _PADDING0_[0x10];                                                      
/*0x040*/     UINT64       AccessLoggingLock;                                                     
/*0x048*/     UINT8        _PADDING1_[0x38];                                                      
          }MI_ACCESS_LOG_STATE, *PMI_ACCESS_LOG_STATE;                                            
                                                                                                  
          typedef struct _MI_ACCESS_VIOLATION_RANGE // 3 elements, 0x28 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _RTL_BALANCED_NODE Node;       // 6 elements, 0x18 bytes (sizeof) 
/*0x018*/     VOID*        Va;                                                         
/*0x020*/     VOID*        EndVaInclusive;                                             
          }MI_ACCESS_VIOLATION_RANGE, *PMI_ACCESS_VIOLATION_RANGE;                                   
                                                                                       
          typedef struct _MI_ACTIVE_PFN                        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                      
              union                                            // 3 elements, 0x8 bytes (sizeof) 
              {                                                                                  
                  struct                                       // 2 elements, 0x8 bytes (sizeof) 
                  {                                                                              
/*0x000*/             UINT64       Tradable : 1;               // 0 BitPosition                  
/*0x000*/             UINT64       NonPagedBuddy : 43;         // 1 BitPosition                  
                  }Leaf;                                                                         
                  struct                                       // 5 elements, 0x8 bytes (sizeof) 
                  {                                                                              
/*0x000*/             UINT64       Tradable : 1;               // 0 BitPosition                  
/*0x000*/             UINT64       WsleAge : 3;                // 1 BitPosition                  
/*0x000*/             UINT64       OldestWsleLeafEntries : 10; // 4 BitPosition                  
/*0x000*/             UINT64       OldestWsleLeafAge : 3;      // 14 BitPosition                 
/*0x000*/             UINT64       NonPagedBuddy : 43;         // 17 BitPosition                 
                  }PageTable;                                                                    
/*0x000*/         UINT64       EntireActiveField;                                                
              };                                                                                 
          }MI_ACTIVE_PFN, *PMI_ACTIVE_PFN;                                                       
                                                                                                 
          typedef struct _MI_ALIGNED_SLIST   // 1 elements, 0x40 bytes (sizeof) 
          {                                                                     
/*0x000*/     union _SLIST_HEADER SList;     // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT8        _PADDING0_[0x30];                                    
          }MI_ALIGNED_SLIST, *PMI_ALIGNED_SLIST;                                   
                                                                                
          typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES // 2 elements, 0x20 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _KEVENT Event;                     // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     ULONG32      EventSets;                                                      
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                
          }MI_AVAILABLE_PAGE_WAIT_STATES, *PMI_AVAILABLE_PAGE_WAIT_STATES;                                   
                                                                                           
          typedef struct _MI_BAD_MEMORY_EVENT_ENTRY // 5 elements, 0x38 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      BugCheckCode;                                               
/*0x004*/     LONG32       Active;                                                     
/*0x008*/     ULONG32      Data;                                                       
/*0x00C*/     UINT8        _PADDING0_[0x4];                                            
/*0x010*/     union _LARGE_INTEGER PhysicalAddress; // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     struct _WORK_QUEUE_ITEM WorkItem;     // 3 elements, 0x20 bytes (sizeof) 
          }MI_BAD_MEMORY_EVENT_ENTRY, *PMI_BAD_MEMORY_EVENT_ENTRY;                                   
                                                                                       
          typedef struct _MI_CACHED_PTE             // 3 elements, 0x8 bytes (sizeof) 
          {                                                                           
              union                                 // 2 elements, 0x8 bytes (sizeof) 
              {                                                                       
                  struct                            // 2 elements, 0x8 bytes (sizeof) 
                  {                                                                   
/*0x000*/             ULONG32      GlobalTimeStamp;                                   
/*0x004*/             ULONG32      PteIndex;                                          
                  };                                                                  
/*0x000*/         INT64        Long;                                                  
              };                                                                      
          }MI_CACHED_PTE, *PMI_CACHED_PTE;                                            
                                                                                      
          typedef struct _MI_CACHED_PTES     // 2 elements, 0x48 bytes (sizeof) 
          {                                                                     
/*0x000*/     struct _MI_CACHED_PTE Bins[8];                                    
/*0x040*/     LONG32       CachedPteCount;                                      
/*0x044*/     UINT8        _PADDING0_[0x4];                                     
          }MI_CACHED_PTES, *PMI_CACHED_PTES;                                    
                                                                                
          typedef struct _MI_CLONE_BLOCK_FLAGS     // 2 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       ActualCloneCommit : 59; // 0 BitPosition                  
/*0x000*/     UINT64       CloneProtection : 5;    // 59 BitPosition                 
          }MI_CLONE_BLOCK_FLAGS, *PMI_CLONE_BLOCK_FLAGS;                                  
                                                                                     
          typedef struct _MI_COMBINE_PAGE_LISTHEAD // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _RTL_AVL_TREE Table;          // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     LONG32       Lock;                                                      
/*0x00C*/     UINT8        _PADDING0_[0x4];                                           
          }MI_COMBINE_PAGE_LISTHEAD, *PMI_COMBINE_PAGE_LISTHEAD;                                   
                                                                                      
          typedef struct _MI_COMBINE_STATE           // 4 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     LONG32       ActiveSpinLock;                                              
/*0x004*/     ULONG32      CombiningThreadCount;                                        
/*0x008*/     struct _RTL_AVL_TREE ActiveThreadTree; // 1 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT64       ZeroPageHashValue;                                           
          }MI_COMBINE_STATE, *PMI_COMBINE_STATE;                                        
                                                                                        
          typedef struct _MI_COMBINE_WORKITEM   // 2 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     VOID*        NextEntry;                                              
/*0x008*/     struct _WORK_QUEUE_ITEM WorkItem; // 3 elements, 0x20 bytes (sizeof) 
          }MI_COMBINE_WORKITEM, *PMI_COMBINE_WORKITEM;                                   
                                                                                   
          typedef struct _MMPTE_HARDWARE            // 18 elements, 0x8 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Valid : 1;               // 0 BitPosition                   
/*0x000*/     UINT64       Dirty1 : 1;              // 1 BitPosition                   
/*0x000*/     UINT64       Owner : 1;               // 2 BitPosition                   
/*0x000*/     UINT64       WriteThrough : 1;        // 3 BitPosition                   
/*0x000*/     UINT64       CacheDisable : 1;        // 4 BitPosition                   
/*0x000*/     UINT64       Accessed : 1;            // 5 BitPosition                   
/*0x000*/     UINT64       Dirty : 1;               // 6 BitPosition                   
/*0x000*/     UINT64       LargePage : 1;           // 7 BitPosition                   
/*0x000*/     UINT64       Global : 1;              // 8 BitPosition                   
/*0x000*/     UINT64       CopyOnWrite : 1;         // 9 BitPosition                   
/*0x000*/     UINT64       Unused : 1;              // 10 BitPosition                  
/*0x000*/     UINT64       Write : 1;               // 11 BitPosition                  
/*0x000*/     UINT64       PageFrameNumber : 36;    // 12 BitPosition                  
/*0x000*/     UINT64       ReservedForHardware : 4; // 48 BitPosition                  
/*0x000*/     UINT64       ReservedForSoftware : 4; // 52 BitPosition                  
/*0x000*/     UINT64       WsleAge : 4;             // 56 BitPosition                  
/*0x000*/     UINT64       WsleProtection : 3;      // 60 BitPosition                  
/*0x000*/     UINT64       NoExecute : 1;           // 63 BitPosition                  
          }MMPTE_HARDWARE, *PMMPTE_HARDWARE;                                           
                                                                                       
          typedef struct _MMPTE_PROTOTYPE            // 10 elements, 0x8 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Valid : 1;                // 0 BitPosition                   
/*0x000*/     UINT64       DemandFillProto : 1;      // 1 BitPosition                   
/*0x000*/     UINT64       HiberVerifyConverted : 1; // 2 BitPosition                   
/*0x000*/     UINT64       ReadOnly : 1;             // 3 BitPosition                   
/*0x000*/     UINT64       SwizzleBit : 1;           // 4 BitPosition                   
/*0x000*/     UINT64       Protection : 5;           // 5 BitPosition                   
/*0x000*/     UINT64       Prototype : 1;            // 10 BitPosition                  
/*0x000*/     UINT64       Combined : 1;             // 11 BitPosition                  
/*0x000*/     UINT64       Unused1 : 4;              // 12 BitPosition                  
/*0x000*/     INT64        ProtoAddress : 48;        // 16 BitPosition                  
          }MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE;                                          
                                                                                        
          typedef struct _MMPTE_SOFTWARE              // 13 elements, 0x8 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       Valid : 1;                 // 0 BitPosition                   
/*0x000*/     UINT64       PageFileReserved : 1;      // 1 BitPosition                   
/*0x000*/     UINT64       PageFileAllocated : 1;     // 2 BitPosition                   
/*0x000*/     UINT64       ColdPage : 1;              // 3 BitPosition                   
/*0x000*/     UINT64       SwizzleBit : 1;            // 4 BitPosition                   
/*0x000*/     UINT64       Protection : 5;            // 5 BitPosition                   
/*0x000*/     UINT64       Prototype : 1;             // 10 BitPosition                  
/*0x000*/     UINT64       Transition : 1;            // 11 BitPosition                  
/*0x000*/     UINT64       PageFileLow : 4;           // 12 BitPosition                  
/*0x000*/     UINT64       UsedPageTableEntries : 10; // 16 BitPosition                  
/*0x000*/     UINT64       ShadowStack : 1;           // 26 BitPosition                  
/*0x000*/     UINT64       Unused : 5;                // 27 BitPosition                  
/*0x000*/     UINT64       PageFileHigh : 32;         // 32 BitPosition                  
          }MMPTE_SOFTWARE, *PMMPTE_SOFTWARE;                                             
                                                                                         
          typedef struct _MMPTE_TIMESTAMP        // 9 elements, 0x8 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       MustBeZero : 1;       // 0 BitPosition                  
/*0x000*/     UINT64       Unused : 3;           // 1 BitPosition                  
/*0x000*/     UINT64       SwizzleBit : 1;       // 4 BitPosition                  
/*0x000*/     UINT64       Protection : 5;       // 5 BitPosition                  
/*0x000*/     UINT64       Prototype : 1;        // 10 BitPosition                 
/*0x000*/     UINT64       Transition : 1;       // 11 BitPosition                 
/*0x000*/     UINT64       PageFileLow : 4;      // 12 BitPosition                 
/*0x000*/     UINT64       Reserved : 16;        // 16 BitPosition                 
/*0x000*/     UINT64       GlobalTimeStamp : 32; // 32 BitPosition                 
          }MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP;                                     
                                                                                   
          typedef struct _MMPTE_TRANSITION       // 10 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Valid : 1;            // 0 BitPosition                   
/*0x000*/     UINT64       Write : 1;            // 1 BitPosition                   
/*0x000*/     UINT64       Spare : 1;            // 2 BitPosition                   
/*0x000*/     UINT64       IoTracker : 1;        // 3 BitPosition                   
/*0x000*/     UINT64       SwizzleBit : 1;       // 4 BitPosition                   
/*0x000*/     UINT64       Protection : 5;       // 5 BitPosition                   
/*0x000*/     UINT64       Prototype : 1;        // 10 BitPosition                  
/*0x000*/     UINT64       Transition : 1;       // 11 BitPosition                  
/*0x000*/     UINT64       PageFrameNumber : 36; // 12 BitPosition                  
/*0x000*/     UINT64       Unused : 16;          // 48 BitPosition                  
          }MMPTE_TRANSITION, *PMMPTE_TRANSITION;                                    
                                                                                    
          typedef struct _MMPTE_SUBSECTION         // 9 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Valid : 1;              // 0 BitPosition                  
/*0x000*/     UINT64       Unused0 : 3;            // 1 BitPosition                  
/*0x000*/     UINT64       SwizzleBit : 1;         // 4 BitPosition                  
/*0x000*/     UINT64       Protection : 5;         // 5 BitPosition                  
/*0x000*/     UINT64       Prototype : 1;          // 10 BitPosition                 
/*0x000*/     UINT64       ColdPage : 1;           // 11 BitPosition                 
/*0x000*/     UINT64       Unused1 : 3;            // 12 BitPosition                 
/*0x000*/     UINT64       ExecutePrivilege : 1;   // 15 BitPosition                 
/*0x000*/     INT64        SubsectionAddress : 48; // 16 BitPosition                 
          }MMPTE_SUBSECTION, *PMMPTE_SUBSECTION;                                     
                                                                                     
          typedef struct _MMPTE_LIST       // 9 elements, 0x8 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       Valid : 1;      // 0 BitPosition                  
/*0x000*/     UINT64       OneEntry : 1;   // 1 BitPosition                  
/*0x000*/     UINT64       filler0 : 2;    // 2 BitPosition                  
/*0x000*/     UINT64       SwizzleBit : 1; // 4 BitPosition                  
/*0x000*/     UINT64       Protection : 5; // 5 BitPosition                  
/*0x000*/     UINT64       Prototype : 1;  // 10 BitPosition                 
/*0x000*/     UINT64       Transition : 1; // 11 BitPosition                 
/*0x000*/     UINT64       filler1 : 16;   // 12 BitPosition                 
/*0x000*/     UINT64       NextEntry : 36; // 28 BitPosition                 
          }MMPTE_LIST, *PMMPTE_LIST;                                         
                                                                             
          typedef struct _MMPTE                      // 1 elements, 0x8 bytes (sizeof)  
          {                                                                             
              union                                  // 9 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x000*/         UINT64       Long;                                                    
/*0x000*/         UINT64       VolatileLong;                                            
/*0x000*/         struct _MMPTE_HARDWARE Hard;       // 18 elements, 0x8 bytes (sizeof) 
/*0x000*/         struct _MMPTE_PROTOTYPE Proto;     // 10 elements, 0x8 bytes (sizeof) 
/*0x000*/         struct _MMPTE_SOFTWARE Soft;       // 13 elements, 0x8 bytes (sizeof) 
/*0x000*/         struct _MMPTE_TIMESTAMP TimeStamp; // 9 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _MMPTE_TRANSITION Trans;    // 10 elements, 0x8 bytes (sizeof) 
/*0x000*/         struct _MMPTE_SUBSECTION Subsect;  // 9 elements, 0x8 bytes (sizeof)  
/*0x000*/         struct _MMPTE_LIST List;           // 9 elements, 0x8 bytes (sizeof)  
              }u;                                                                       
          }MMPTE, *PMMPTE;                                                              
                                                                                        
          typedef struct _MI_COMMON_PAGE_STATE // 15 elements, 0xA8 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _MMPFN* PageOfOnesPfn;                                        
/*0x008*/     UINT64       PageOfOnes;                                             
/*0x010*/     struct _MMPFN* DummyPagePfn;                                         
/*0x018*/     UINT64       DummyPage;                                              
/*0x020*/     UINT64       PageOfZeroes;                                           
/*0x028*/     VOID*        ZeroMapping;                                            
/*0x030*/     VOID*        OnesMapping;                                            
/*0x038*/     UINT64       ZeroCrc;                                                
/*0x040*/     UINT64       OnesCrc;                                                
/*0x048*/     UINT64       BitmapGapFrames[4];                                     
/*0x068*/     UINT64       PfnGapFrames[4];                                        
/*0x088*/     UINT64       PageTableOfZeroes;                                      
/*0x090*/     struct _MMPTE PdeOfZeroes;       // 1 elements, 0x8 bytes (sizeof)   
/*0x098*/     UINT64       PageTableOfOnes;                                        
/*0x0A0*/     struct _MMPTE PdeOfOnes;         // 1 elements, 0x8 bytes (sizeof)   
          }MI_COMMON_PAGE_STATE, *PMI_COMMON_PAGE_STATE;                                    
                                                                                   
          typedef struct _MI_CONTROL_AREA_WAIT_BLOCK    // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;                                    
/*0x008*/     ULONG32      WaitReason;                                                     
/*0x00C*/     ULONG32      WaitResponse;                                                   
/*0x010*/     struct _KGATE Gate;                       // 1 elements, 0x18 bytes (sizeof) 
          }MI_CONTROL_AREA_WAIT_BLOCK, *PMI_CONTROL_AREA_WAIT_BLOCK;                                   
                                                                                           
          typedef struct _MI_CROSS_PARTITION_CHARGES // 4 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       CurrentCharges;                                              
/*0x008*/     UINT64       ChargeFailures;                                              
/*0x010*/     UINT64       ChargePeak;                                                  
/*0x018*/     UINT64       ChargeMinimum;                                               
          }MI_CROSS_PARTITION_CHARGES, *PMI_CROSS_PARTITION_CHARGES;                                   
                                                                                        
          typedef struct _MI_DEBUGGER_STATE // 6 elements, 0x118 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT8        TransientWrite;                                      
/*0x001*/     UINT8        CodePageEdited;                                      
/*0x002*/     UINT8        _PADDING0_[0x6];                                     
/*0x008*/     struct _MMPTE* DebugPte;                                          
/*0x010*/     ULONG32      PoisonedTb;                                          
/*0x014*/     LONG32       InDebugger;                                          
/*0x018*/     VOID*        Pfns[32];                                            
          }MI_DEBUGGER_STATE, *PMI_DEBUGGER_STATE;                                    
                                                                                
          typedef struct _MI_DECAY_TIMER_LINKAGE  // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Spare0 : 1;            // 0 BitPosition                  
/*0x000*/     UINT64       PreviousDecayPfn : 31; // 1 BitPosition                  
/*0x000*/     UINT64       Spare1 : 1;            // 32 BitPosition                 
/*0x000*/     UINT64       NextDecayPfn : 31;     // 33 BitPosition                 
          }MI_DECAY_TIMER_LINKAGE, *PMI_DECAY_TIMER_LINKAGE;                                  
                                                                                    
          typedef struct _MI_DECAY_TIMER_LINK        // 1 elements, 0x8 bytes (sizeof) 
          {                                                                            
              union                                  // 2 elements, 0x8 bytes (sizeof) 
              {                                                                        
/*0x000*/         UINT64       Long;                                                   
/*0x000*/         struct _MI_DECAY_TIMER_LINKAGE e1; // 4 elements, 0x8 bytes (sizeof) 
              }u1;                                                                     
          }MI_DECAY_TIMER_LINK, *PMI_DECAY_TIMER_LINK;                                  
                                                                                       
          typedef struct _MI_DRIVER_VA    // 5 elements, 0x28 bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _MI_DRIVER_VA* Next;                                    
/*0x008*/     struct _MMPTE* PointerPte;                                     
/*0x010*/     struct _RTL_BITMAP BitMap;  // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     ULONG32      Hint;                                             
/*0x024*/     ULONG32      Flags;                                            
          }MI_DRIVER_VA, *PMI_DRIVER_VA;                                     
                                                                             
          typedef struct _RTL_BITMAP_EX  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       SizeOfBitMap;                                    
/*0x008*/     UINT64*      Buffer;                                          
          }RTL_BITMAP_EX, *PRTL_BITMAP_EX;                                   
                                                                            
          typedef struct _MI_DYNAMIC_BITMAP // 8 elements, 0x48 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _RTL_BITMAP_EX Bitmap; // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       MaximumSize;                                        
/*0x018*/     UINT64       Hint;                                               
/*0x020*/     VOID*        BaseVa;                                             
/*0x028*/     UINT64       SizeTopDown;                                        
/*0x030*/     UINT64       HintTopDown;                                        
/*0x038*/     VOID*        BaseVaTopDown;                                      
/*0x040*/     UINT64       SpinLock;                                           
          }MI_DYNAMIC_BITMAP, *PMI_DYNAMIC_BITMAP;                                   
                                                                               
          typedef struct _MI_PROBE_RAISE_TRACKER           // 17 elements, 0x44 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      UserRangeInKernel;                                                  
/*0x004*/     ULONG32      FaultFailed;                                                        
/*0x008*/     ULONG32      WriteFaultFailed;                                                   
/*0x00C*/     ULONG32      LargePageFailed;                                                    
/*0x010*/     ULONG32      UserAccessToKernelPte;                                              
/*0x014*/     ULONG32      BadPageLocation;                                                    
/*0x018*/     ULONG32      InsufficientCharge;                                                 
/*0x01C*/     ULONG32      PageTableCharge;                                                    
/*0x020*/     ULONG32      NoPhysicalMapping;                                                  
/*0x024*/     ULONG32      NoIoReference;                                                      
/*0x028*/     ULONG32      ProbeFailed;                                                        
/*0x02C*/     ULONG32      PteIsZero;                                                          
/*0x030*/     ULONG32      StrongCodeWrite;                                                    
/*0x034*/     ULONG32      ReducedCloneCommitChargeFailed;                                     
/*0x038*/     ULONG32      CopyOnWriteAtDispatchNoPages;                                       
/*0x03C*/     ULONG32      NoPageTablesAllowed;                                                
/*0x040*/     ULONG32      EnclavePageFailed;                                                  
          }MI_PROBE_RAISE_TRACKER, *PMI_PROBE_RAISE_TRACKER;                                    
                                                                                               
          typedef struct _MI_FORCED_COMMITS // 2 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      Regular;                                           
/*0x004*/     ULONG32      Wrap;                                              
          }MI_FORCED_COMMITS, *PMI_FORCED_COMMITS;                                  
                                                                              
          typedef struct _MI_RESAVAIL_FAILURES // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Wrap;                                                 
/*0x004*/     ULONG32      NoCharge;                                             
          }MI_RESAVAIL_FAILURES, *PMI_RESAVAIL_FAILURES;                                  
                                                                                 
          typedef struct _MI_ERROR_STATE                             // 19 elements, 0xC8 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry; // 5 elements, 0x38 bytes (sizeof)  
/*0x038*/     UINT64       PageOfInterest;                                                               
/*0x040*/     struct _MI_PROBE_RAISE_TRACKER ProbeRaises;            // 17 elements, 0x44 bytes (sizeof) 
/*0x084*/     struct _MI_FORCED_COMMITS ForcedCommits;               // 2 elements, 0x8 bytes (sizeof)   
/*0x08C*/     ULONG32      WsleFailures[1];                                                              
/*0x090*/     ULONG32      PageHashErrors;                                                               
/*0x094*/     ULONG32      CheckZeroCount;                                                               
/*0x098*/     LONG32       ZeroedPageSingleBitErrorsDetected;                                            
/*0x09C*/     LONG32       BadPagesDetected;                                                             
/*0x0A0*/     LONG32       ScrubPasses;                                                                  
/*0x0A4*/     LONG32       ScrubBadPagesFound;                                                           
/*0x0A8*/     ULONG32      UserViewFailures;                                                             
/*0x0AC*/     ULONG32      UserViewCollisionFailures;                                                    
/*0x0B0*/     ULONG32      UserAllocateFailures;                                                         
/*0x0B4*/     ULONG32      UserAllocateCollisionFailures;                                                
/*0x0B8*/     struct _MI_RESAVAIL_FAILURES ResavailFailures;         // 2 elements, 0x8 bytes (sizeof)   
/*0x0C0*/     UINT8        PendingBadPages;                                                              
/*0x0C1*/     UINT8        InitFailure;                                                                  
/*0x0C2*/     UINT8        StopBadMaps;                                                                  
/*0x0C3*/     UINT8        _PADDING0_[0x5];                                                              
          }MI_ERROR_STATE, *PMI_ERROR_STATE;                                                             
                                                                                                         
          typedef struct _MI_EXTRA_IMAGE_INFORMATION // 3 elements, 0xC bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      SizeOfHeaders;                                              
/*0x004*/     ULONG32      SizeOfImage;                                                
/*0x008*/     ULONG32      TimeDateStamp;                                              
          }MI_EXTRA_IMAGE_INFORMATION, *PMI_EXTRA_IMAGE_INFORMATION;                                  
                                                                                       
          typedef union _MI_FLAGS                                // 26 elements, 0x4 bytes (sizeof) 
          {                                                                                         
/*0x000*/     LONG32       EntireFlags;                                                             
              struct                                             // 25 elements, 0x4 bytes (sizeof) 
              {                                                                                     
/*0x000*/         ULONG32      VerifierEnabled : 1;              // 0 BitPosition                   
/*0x000*/         ULONG32      KernelVerifierEnabled : 1;        // 1 BitPosition                   
/*0x000*/         ULONG32      LargePageKernel : 1;              // 2 BitPosition                   
/*0x000*/         ULONG32      StopOn4d : 1;                     // 3 BitPosition                   
/*0x000*/         ULONG32      InitializationPhase : 2;          // 4 BitPosition                   
/*0x000*/         ULONG32      PageKernelStacks : 1;             // 6 BitPosition                   
/*0x000*/         ULONG32      CheckZeroPages : 1;               // 7 BitPosition                   
/*0x000*/         ULONG32      ProcessorPrewalks : 1;            // 8 BitPosition                   
/*0x000*/         ULONG32      ProcessorPostwalks : 1;           // 9 BitPosition                   
/*0x000*/         ULONG32      CoverageBuild : 1;                // 10 BitPosition                  
/*0x000*/         ULONG32      AccessBitReplacementDisabled : 1; // 11 BitPosition                  
/*0x000*/         ULONG32      CheckExecute : 1;                 // 12 BitPosition                  
/*0x000*/         ULONG32      ProtectedPagesEnabled : 1;        // 13 BitPosition                  
/*0x000*/         ULONG32      SecureRelocations : 1;            // 14 BitPosition                  
/*0x000*/         ULONG32      StrongPageIdentity : 1;           // 15 BitPosition                  
/*0x000*/         ULONG32      StrongCodeGuarantees : 1;         // 16 BitPosition                  
/*0x000*/         ULONG32      HardCodeGuarantees : 1;           // 17 BitPosition                  
/*0x000*/         ULONG32      ExecutePagePrivilegeRequired : 1; // 18 BitPosition                  
/*0x000*/         ULONG32      SecureKernelCfgEnabled : 1;       // 19 BitPosition                  
/*0x000*/         ULONG32      FullHvci : 1;                     // 20 BitPosition                  
/*0x000*/         ULONG32      BootDebuggerActive : 1;           // 21 BitPosition                  
/*0x000*/         ULONG32      ExceptionHandlingReady : 1;       // 22 BitPosition                  
/*0x000*/         ULONG32      ShadowStacksSupported : 1;        // 23 BitPosition                  
/*0x000*/         ULONG32      AccessBitFenceRequired : 1;       // 24 BitPosition                  
/*0x000*/         ULONG32      PfnDatabaseExists : 1;            // 25 BitPosition                  
              };                                                                                    
          }MI_FLAGS, *PMI_FLAGS;                                                                    
                                                                                                    
          typedef struct _MI_FREE_LARGE_PAGE_LIST // 2 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY ListHead;        // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       EntryCount;                                               
          }MI_FREE_LARGE_PAGE_LIST, *PMI_FREE_LARGE_PAGE_LIST;                                   
                                                                                     
          typedef struct _MI_FREE_LARGE_PAGES                             // 3 elements, 0x110 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     UINT64       LargePageFreeCount[2];                                                             
/*0x010*/     UINT64       LargePagesCount[4][2][2];                                                          
/*0x090*/     struct _MI_FREE_LARGE_PAGE_LIST* LargePageEntries[4][2][2];                                     
          }MI_FREE_LARGE_PAGES, *PMI_FREE_LARGE_PAGES;                                                        
                                                                                                              
          typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS    // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              union                                         // 2 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      EntireFlags;                                                   
                  struct                                    // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                           
/*0x000*/             ULONG32      StoreFault : 1;          // 0 BitPosition                  
/*0x000*/             ULONG32      LowResourceFailure : 1;  // 1 BitPosition                  
/*0x000*/             ULONG32      Spare : 14;              // 2 BitPosition                  
/*0x000*/             ULONG32      RemainingPageCount : 16; // 16 BitPosition                 
                  };                                                                          
              };                                                                              
          }MI_STORE_INPAGE_COMPLETE_FLAGS, *PMI_STORE_INPAGE_COMPLETE_FLAGS;                                  
                                                                                              
          typedef struct _MI_HARD_FAULT_STATE                    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _MMPFN* SwapPfn;                                                               
/*0x008*/     struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags; // 5 elements, 0x4 bytes (sizeof)  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                         
          }MI_HARD_FAULT_STATE, *PMI_HARD_FAULT_STATE;                                              
                                                                                                    
          typedef struct _MI_ZERO_COST_COUNTS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT64       NativeSum;                                            
/*0x008*/     UINT64       CachedSum;                                            
          }MI_ZERO_COST_COUNTS, *PMI_ZERO_COST_COUNTS;                                   
                                                                                 
          typedef struct _MI_HARDWARE_STATE                               // 32 elements, 0x180 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     ULONG32      NodeMask;                                                                           
/*0x004*/     ULONG32      NumaLastRangeIndex;                                                                 
/*0x008*/     UINT8        NumaTableCaptured;                                                                  
/*0x009*/     UINT8        NodeShift;                                                                          
/*0x00A*/     UINT8        ChannelShift;                                                                       
/*0x00B*/     UINT8        _PADDING0_[0x5];                                                                    
/*0x010*/     WCHAR*       NodeGraph;                                                                          
/*0x018*/     struct _MI_SYSTEM_NODE_INFORMATION* SystemNodeInformation;                                       
/*0x020*/     struct _HAL_NODE_RANGE* NumaMemoryRanges;                                                        
/*0x028*/     struct _HAL_CHANNEL_MEMORY_RANGES* ChannelMemoryRanges;                                          
/*0x030*/     ULONG32      SecondLevelCacheSize;                                                               
/*0x034*/     ULONG32      FirstLevelCacheSize;                                                                
/*0x038*/     ULONG32      PhysicalAddressBits;                                                                
/*0x03C*/     UINT8        ProcessorCachesFlushedOnPowerLoss;                                                  
/*0x03D*/     UINT8        _PADDING1_[0x3];                                                                    
/*0x040*/     UINT64       TotalPagesAllowed;                                                                  
/*0x048*/     ULONG32      SecondaryColorMask;                                                                 
/*0x04C*/     ULONG32      SecondaryColors;                                                                    
/*0x050*/     ULONG32      FlushTbForAttributeChange;                                                          
/*0x054*/     ULONG32      FlushCacheForAttributeChange;                                                       
/*0x058*/     ULONG32      FlushCacheForPageAttributeChange;                                                   
/*0x05C*/     ULONG32      CacheFlushPromoteThreshold;                                                         
/*0x060*/     UINT8        _PADDING2_[0x20];                                                                   
/*0x080*/     UINT64       InvalidPteMask;                                                                     
/*0x088*/     UINT8        _PADDING3_[0x38];                                                                   
/*0x0C0*/     ULONG32      LargePageColors[3];                                                                 
/*0x0CC*/     UINT8        _PADDING4_[0x4];                                                                    
/*0x0D0*/     UINT64       FlushTbThreshold;                                                                   
/*0x0D8*/     enum _MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];                                      
/*0x118*/     UINT8        AttributeChangeRequiresReZero;                                                      
/*0x119*/     UINT8        _PADDING5_[0x7];                                                                    
/*0x120*/     struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2];                                                   
/*0x140*/     UINT64       VsmKernelPageCount;                                                                 
/*0x148*/     struct _RTL_AVL_TREE EnclaveRegions;                        // 1 elements, 0x8 bytes (sizeof)    
/*0x150*/     VOID*        EnclaveMetadataPage;                                                                
/*0x158*/     struct _RTL_BITMAP* EnclaveMetadataBitMap;                                                       
/*0x160*/     struct _EX_PUSH_LOCK EnclaveMetadataEntryLock;              // 7 elements, 0x8 bytes (sizeof)    
/*0x168*/     LONG32       EnclaveMetadataPageLock;                                                            
/*0x16C*/     UINT8        _PADDING6_[0x14];                                                                   
          }MI_HARDWARE_STATE, *PMI_HARDWARE_STATE;                                                             
                                                                                                               
          typedef struct _MI_HUGE_SYSTEM_VIEW_HEAD // 3 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _RTL_AVL_TREE ViewRoot;       // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     ULONG32      ViewCount;                                                 
/*0x00C*/     LONG32       Lock;                                                      
          }MI_HUGE_SYSTEM_VIEW_HEAD, *PMI_HUGE_SYSTEM_VIEW_HEAD;                                   
                                                                                      
               typedef struct _MI_HYPER_SPACE                         // 3 elements, 0x10804000 bytes (sizeof) 
               {                                                                                               
/*0x000*/          UINT8        VadBitmap[268435456];                                                          
/*0x10000000*/     UINT8        PageDirectoryCommitmentBitmap[16384];                                          
/*0x10004000*/     UINT8        PageTableCommitmentBitmap[8388608];                                            
               }MI_HYPER_SPACE, *PMI_HYPER_SPACE;                                                              
                                                                                                               
          typedef struct _MI_PROTOTYPE_PTES_NODE       // 2 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _RTL_BALANCED_NODE Node;          // 6 elements, 0x18 bytes (sizeof) 
              union                                    // 2 elements, 0x8 bytes (sizeof)  
              {                                                                           
                  struct                               // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT64       AllocationType : 3; // 0 BitPosition                   
/*0x018*/             UINT64       Inserted : 1;       // 3 BitPosition                   
                  }e1;                                                                    
                  struct                               // 1 elements, 0x8 bytes (sizeof)  
                  {                                                                       
/*0x018*/             UINT64       PrototypePtesFlags;                                    
                  }e2;                                                                    
              }u1;                                                                        
          }MI_PROTOTYPE_PTES_NODE, *PMI_PROTOTYPE_PTES_NODE;                                   
                                                                                          
          typedef struct _MI_IMAGE_SECURITY_REFERENCE         // 4 elements, 0x38 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _MI_PROTOTYPE_PTES_NODE ProtosNode;      // 2 elements, 0x20 bytes (sizeof) 
/*0x020*/     VOID*        DynamicRelocations;                                                   
/*0x028*/     struct _IMAGE_SECURITY_CONTEXT SecurityContext; // 5 elements, 0x8 bytes (sizeof)  
/*0x030*/     UINT64       StrongImageReference;                                                 
          }MI_IMAGE_SECURITY_REFERENCE, *PMI_IMAGE_SECURITY_REFERENCE;                                   
                                                                                                 
          typedef struct _MI_IO_CACHE_STATS              // 8 elements, 0x28 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT64       UnusedBlocks;                                                    
/*0x008*/     ULONG32      ActiveCacheMatch;                                                
/*0x00C*/     ULONG32      ActiveCacheOverride;                                             
/*0x010*/     ULONG32      UnmappedCacheFlush;                                              
/*0x014*/     ULONG32      UnmappedCacheMatch;                                              
/*0x018*/     ULONG32      UnmappedCacheConflict;                                           
/*0x01C*/     ULONG32      PermanentIoAttributeConflict;                                    
/*0x020*/     ULONG32      PermanentIoNodeConflict;                                         
/*0x024*/     UINT8        _PADDING0_[0x4];                                                 
          }MI_IO_CACHE_STATS, *PMI_IO_CACHE_STATS;                                          
                                                                                            
          typedef struct _MI_IO_PAGE_STATE            // 6 elements, 0x68 bytes (sizeof) 
          {                                                                              
/*0x000*/     LONG32       IoPfnLock;                                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                              
/*0x008*/     struct _RTL_AVL_TREE IoPfnRoot[3];                                         
/*0x020*/     struct _LIST_ENTRY UnusedCachedMaps;    // 2 elements, 0x10 bytes (sizeof) 
/*0x030*/     ULONG32      OldestCacheFlushTimeStamp;                                    
/*0x034*/     UINT8        _PADDING1_[0x4];                                              
/*0x038*/     struct _MI_IO_CACHE_STATS IoCacheStats; // 8 elements, 0x28 bytes (sizeof) 
/*0x060*/     struct _RTL_AVL_TREE InvariantIoSpace;  // 1 elements, 0x8 bytes (sizeof)  
          }MI_IO_PAGE_STATE, *PMI_IO_PAGE_STATE;                                         
                                                                                         
          typedef struct _MI_LARGE_PAGE_CANDIDATES // 4 elements, 0x208 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT16       Hand;                                                       
/*0x002*/     UINT16       ActiveEntryCount;                                           
/*0x004*/     UINT8        Overflowed;                                                 
/*0x005*/     UINT8        _PADDING0_[0x3];                                            
/*0x008*/     UINT64       PageFrames[64];                                             
          }MI_LARGE_PAGE_CANDIDATES, *PMI_LARGE_PAGE_CANDIDATES;                                    
                                                                                       
          typedef struct _MI_LARGEPAGE_IMAGE_INFO // 3 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        LargeImageBias;                                           
/*0x001*/     UINT8        Spare[3];                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                          
/*0x008*/     UINT64       ActualImageViewSize;                                      
          }MI_LARGEPAGE_IMAGE_INFO, *PMI_LARGEPAGE_IMAGE_INFO;                                   
                                                                                     
          typedef struct _MI_LDW_WORK_CONTEXT   // 5 elements, 0x38 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _WORK_QUEUE_ITEM WorkItem; // 3 elements, 0x20 bytes (sizeof) 
/*0x020*/     struct _FILE_OBJECT* FileObject;                                     
/*0x028*/     LONG32       ErrorStatus;                                            
/*0x02C*/     LONG32       Active;                                                 
/*0x030*/     UINT8        FreeWhenDone;                                           
/*0x031*/     UINT8        _PADDING0_[0x7];                                        
          }MI_LDW_WORK_CONTEXT, *PMI_LDW_WORK_CONTEXT;                                   
                                                                                   
          typedef union _MI_RESERVATION_CLUSTER_INFO // 3 elements, 0x4 bytes (sizeof) 
          {                                                                            
              struct                                 // 2 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      ClusterSize : 10;     // 0 BitPosition                  
/*0x000*/         ULONG32      SequenceNumber : 22;  // 10 BitPosition                 
              };                                                                       
/*0x000*/     LONG32       EntireInfo;                                                 
          }MI_RESERVATION_CLUSTER_INFO, *PMI_RESERVATION_CLUSTER_INFO;                                  
                                                                                       
          typedef struct _MI_MODWRITE_DATA                               // 13 elements, 0x40 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     INT64        PagesLoad;                                                                        
/*0x008*/     UINT64       PagesAverage;                                                                     
/*0x010*/     UINT64       AverageAvailablePages;                                                            
/*0x018*/     UINT64       PagesWritten;                                                                     
/*0x020*/     ULONG32      WritesIssued;                                                                     
/*0x024*/     ULONG32      IgnoredReservationsCount;                                                         
/*0x028*/     ULONG32      FreedReservationsCount;                                                           
/*0x02C*/     ULONG32      WriteBurstCount;                                                                  
/*0x030*/     UINT64       IgnoreReservationsStartTime;                                                      
/*0x038*/     union _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo; // 3 elements, 0x4 bytes (sizeof)   
              struct                                                     // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                              
/*0x03C*/         UINT16       IgnoreReservations : 1;                   // 0 BitPosition                    
/*0x03C*/         UINT16       Spare : 15;                               // 1 BitPosition                    
              };                                                                                             
/*0x03E*/     UINT16       Spare1;                                                                           
          }MI_MODWRITE_DATA, *PMI_MODWRITE_DATA;                                                             
                                                                                                             
          typedef struct _MI_REBUILD_LARGE_PAGE_TIMER // 5 elements, 0x28 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _WORK_QUEUE_ITEM WorkItem;       // 3 elements, 0x20 bytes (sizeof) 
/*0x020*/     UINT8        SecondsLeft;                                                  
/*0x021*/     UINT8        RebuildActive;                                                
/*0x022*/     UINT8        NextPassDelta;                                                
/*0x023*/     UINT8        LargeSubPagesActive;                                          
/*0x024*/     UINT8        _PADDING0_[0x4];                                              
          }MI_REBUILD_LARGE_PAGE_TIMER, *PMI_REBUILD_LARGE_PAGE_TIMER;                                   
                                                                                         
          typedef struct _MMPFNLIST_SHORT // 3 elements, 0x18 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT64       Total;                                            
/*0x008*/     UINT64       Flink;                                            
/*0x010*/     UINT64       Blink;                                            
          }MMPFNLIST_SHORT, *PMMPFNLIST_SHORT;                                   
                                                                             
          typedef struct _MI_PAGE_COLORS // 1 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      PageSize[4];                                     
          }MI_PAGE_COLORS, *PMI_PAGE_COLORS;                                   
                                                                            
          typedef struct _MI_NODE_INFORMATION                            // 21 elements, 0x7C0 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     struct _MI_FREE_LARGE_PAGES FreeLargePages[3];                                                  
/*0x330*/     struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer; // 5 elements, 0x28 bytes (sizeof)   
/*0x358*/     struct _MMPFNLIST_SHORT StandbyPageList[8][4];                                                  
/*0x658*/     UINT8        _PADDING0_[0x28];                                                                  
/*0x680*/     struct _RTL_BITMAP FreePageListHeadsBitmap[2];                                                  
/*0x6A0*/     ULONG32      FreePageListHeadsBitmapBuffer[16];                                                 
/*0x6E0*/     UINT64       FreeCount[2];                                                                      
/*0x6F0*/     UINT64       TotalPages[4];                                                                     
/*0x710*/     UINT64       TotalPagesEntireNode;                                                              
/*0x718*/     ULONG32      MmShiftedColor;                                                                    
/*0x71C*/     ULONG32      Color;                                                                             
/*0x720*/     UINT64       ChannelFreeCount[2][4];                                                            
              struct                                                     // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                               
/*0x760*/         ULONG32      ChannelsHotCold : 1;                      // 0 BitPosition                     
/*0x760*/         ULONG32      Spare : 31;                               // 1 BitPosition                     
              }Flags;                                                                                         
/*0x768*/     struct _EX_PUSH_LOCK NodeLock;                             // 7 elements, 0x8 bytes (sizeof)    
/*0x770*/     UINT64       ZeroThreadHugeMapLock;                                                             
/*0x778*/     UINT8        LargeListMoveInProgress;                                                           
/*0x779*/     UINT8        ChannelStatus;                                                                     
/*0x77A*/     UINT8        ChannelOrdering[4];                                                                
/*0x77E*/     UINT8        LockedChannelOrdering[4];                                                          
/*0x782*/     UINT8        PowerAttribute[4];                                                                 
/*0x786*/     UINT8        _PADDING1_[0x2];                                                                   
/*0x788*/     UINT64       LargePageLock;                                                                     
/*0x790*/     struct _MI_PAGE_COLORS PageColorTable;                     // 1 elements, 0x10 bytes (sizeof)   
/*0x7A0*/     UINT8        _PADDING2_[0x20];                                                                  
          }MI_NODE_INFORMATION, *PMI_NODE_INFORMATION;                                                        
                                                                                                              
          typedef struct _MI_PAGE_COMBINE_STATISTICS        // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                    
/*0x000*/     UINT64       PagesScannedActive;                                                 
/*0x008*/     UINT64       PagesScannedStandby;                                                
/*0x010*/     UINT64       PagesCombined;                                                      
/*0x018*/     ULONG32      CombineScanCount;                                                   
/*0x01C*/     LONG32       CombinedBlocksInUse;                                                
/*0x020*/     LONG32       SumCombinedBlocksReferenceCount;                                    
/*0x024*/     UINT8        _PADDING0_[0x4];                                                    
          }MI_PAGE_COMBINE_STATISTICS, *PMI_PAGE_COMBINE_STATISTICS;                                   
                                                                                               
          typedef struct _MI_PAGE_COMBINING_SUPPORT                      // 8 elements, 0x188 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     struct _MI_PARTITION* Partition;                                                               
/*0x008*/     struct _LIST_ENTRY ArbitraryPfnMapList;                    // 2 elements, 0x10 bytes (sizeof)  
/*0x018*/     struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;           // 2 elements, 0x28 bytes (sizeof)  
/*0x040*/     ULONG32      CombiningThreadCount;                                                             
/*0x044*/     UINT8        _PADDING0_[0x4];                                                                  
/*0x048*/     struct _LIST_ENTRY CombinePageFreeList;                    // 2 elements, 0x10 bytes (sizeof)  
/*0x058*/     UINT64       CombineFreeListLock;                                                              
/*0x060*/     struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];                                     
/*0x160*/     struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;       // 6 elements, 0x28 bytes (sizeof)  
          }MI_PAGE_COMBINING_SUPPORT, *PMI_PAGE_COMBINING_SUPPORT;                                           
                                                                                                             
          typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY   // 5 elements, 0x38 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x18 bytes (sizeof) 
              {                                                                                
/*0x000*/         struct _RTL_BALANCED_NODE LengthTreeNode; // 6 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _LIST_ENTRY FreeListEntry;         // 2 elements, 0x10 bytes (sizeof) 
              };                                                                               
/*0x018*/     struct _RTL_BALANCED_NODE LocationTreeNode;   // 6 elements, 0x18 bytes (sizeof) 
/*0x030*/     ULONG32      StartingIndex;                                                      
/*0x034*/     ULONG32      Length;                                                             
          }MI_PAGEFILE_BITMAPS_CACHE_ENTRY, *PMI_PAGEFILE_BITMAPS_CACHE_ENTRY;                                   
                                                                                               
          typedef struct _MI_PAGEFILE_TRACES                   // 12 elements, 0x78 bytes (sizeof) 
          {                                                                                        
/*0x000*/     LONG32       Status;                                                                 
/*0x004*/     UINT16       PartitionId;                                                            
/*0x006*/     UINT8        Priority;                                                               
/*0x007*/     UINT8        IrpPriority;                                                            
/*0x008*/     UINT8        ReservationWrite;                                                       
/*0x009*/     UINT8        _PADDING0_[0x7];                                                        
/*0x010*/     union _LARGE_INTEGER CurrentTime;                // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     UINT64       AvailablePages;                                                         
/*0x020*/     UINT64       ModifiedPagesTotal;                                                     
/*0x028*/     UINT64       ModifiedPagefilePages;                                                  
/*0x030*/     UINT64       ModifiedNoWritePages;                                                   
/*0x038*/     UINT64       ModifiedPagefileNoReservationPages;                                     
              struct                                           // 2 elements, 0x38 bytes (sizeof)  
              {                                                                                    
/*0x040*/         struct _MDL  Mdl;                            // 10 elements, 0x30 bytes (sizeof) 
/*0x070*/         UINT64       Page[1];                                                            
              }MdlHack;                                                                            
          }MI_PAGEFILE_TRACES, *PMI_PAGEFILE_TRACES;                                               
                                                                                                   
          typedef struct _MI_PAGELIST_STATE              // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                 
/*0x000*/     LONG32       ActiveSpinLock;                                                  
/*0x004*/     UINT8        _PADDING0_[0x4];                                                 
/*0x008*/     struct _RTL_AVL_TREE ActiveThreadTree;     // 1 elements, 0x8 bytes (sizeof)  
/*0x010*/     LONG32       ActiveZeroSpinLock;                                              
/*0x014*/     UINT8        _PADDING1_[0x4];                                                 
/*0x018*/     struct _RTL_AVL_TREE ActiveZeroThreadTree; // 1 elements, 0x8 bytes (sizeof)  
/*0x020*/     ULONG32      NumberOfLargePageListHeads;                                      
/*0x024*/     UINT8        _PADDING2_[0x4];                                                 
          }MI_PAGELIST_STATE, *PMI_PAGELIST_STATE;                                          
                                                                                            
          typedef struct _MI_PAGING_FILE_SPACE_BITMAPS          // 5 elements, 0x28 bytes (sizeof) 
          {                                                                                        
              union                                             // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                    
/*0x000*/         ULONG32      RefCount;                                                           
/*0x000*/         struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;                                    
              };                                                                                   
/*0x008*/     struct _RTL_BITMAP AllocationBitmap;              // 2 elements, 0x10 bytes (sizeof) 
              union                                             // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                    
/*0x018*/         struct _RTL_BITMAP ReservationBitmap;         // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/         struct _RTL_BITMAP EvictedBitmap;             // 2 elements, 0x10 bytes (sizeof) 
              };                                                                                   
          }MI_PAGING_FILE_SPACE_BITMAPS, *PMI_PAGING_FILE_SPACE_BITMAPS;                                   
                                                                                                   
          typedef struct _MI_PAGING_IO_STATE                 // 9 elements, 0x50 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _RTL_AVL_TREE PageFileHead;             // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     LONG32       PageFileHeadSpinLock;                                                
/*0x00C*/     LONG32       PrefetchSeekThreshold;                                               
/*0x010*/     union _SLIST_HEADER InPageSupportSListHead[2];                                    
/*0x030*/     UINT8        InPageSupportSListMinimum[2];                                        
/*0x032*/     UINT8        _PADDING0_[0x2];                                                     
/*0x034*/     ULONG32      InPageSinglePages;                                                   
/*0x038*/     LONG32       DelayPageFaults;                                                     
/*0x03C*/     ULONG32      FileCompressionBoundary;                                             
/*0x040*/     UINT8        MdlsAdjusted;                                                        
/*0x041*/     UINT8        _PADDING1_[0xF];                                                     
          }MI_PAGING_IO_STATE, *PMI_PAGING_IO_STATE;                                            
                                                                                                
          typedef struct _MI_PARTITION_FLAGS              // 6 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      BeingDeleted : 1;              // 0 BitPosition                  
/*0x000*/     ULONG32      PageListsInitialized : 1;      // 1 BitPosition                  
/*0x000*/     ULONG32      StoreReservedPagesCharged : 1; // 2 BitPosition                  
/*0x000*/     ULONG32      UseSlabAllocators : 1;         // 3 BitPosition                  
/*0x000*/     ULONG32      PureHoldingPartition : 1;      // 4 BitPosition                  
/*0x000*/     ULONG32      ZeroPagesOptional : 1;         // 5 BitPosition                  
          }MI_PARTITION_FLAGS, *PMI_PARTITION_FLAGS;                                        
                                                                                            
          typedef struct _MI_PARTITION_CORE                       // 25 elements, 0x1A8 bytes (sizeof) 
          {                                                                                            
/*0x000*/     UINT16       PartitionId;                                                                
/*0x002*/     UINT8        _PADDING0_[0x2];                                                            
              union                                               // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                        
/*0x004*/         ULONG32      LongFlags;                                                              
/*0x004*/         struct _MI_PARTITION_FLAGS Flags;               // 6 elements, 0x4 bytes (sizeof)    
              }u;                                                                                      
/*0x008*/     ULONG32      Signature;                                                                  
/*0x00C*/     UINT8        MemoryConfigurationChanged;                                                 
/*0x00D*/     UINT8        _PADDING1_[0x3];                                                            
/*0x010*/     struct _MI_NODE_INFORMATION* NodeInformation;                                            
/*0x018*/     struct _RTL_AVL_TREE PageRoot;                      // 1 elements, 0x8 bytes (sizeof)    
/*0x020*/     struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;                                      
/*0x028*/     UINT64       MemoryBlockReferences;                                                      
/*0x030*/     struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;           // 3 elements, 0x20 bytes (sizeof)   
/*0x050*/     UINT64       PfnUnmapCount;                                                              
/*0x058*/     VOID*        PfnUnmapWaitList;                                                           
/*0x060*/     struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;                                          
/*0x068*/     struct _KEVENT ExitEvent;                           // 1 elements, 0x18 bytes (sizeof)   
/*0x080*/     VOID*        SystemThreadHandles[5];                                                     
/*0x0A8*/     struct _EPARTITION* PartitionObject;                                                     
/*0x0B0*/     struct _EX_PUSH_LOCK PartitionSystemThreadsLock;    // 7 elements, 0x8 bytes (sizeof)    
/*0x0B8*/     struct _EX_PUSH_LOCK DynamicMemoryPushLock;         // 7 elements, 0x8 bytes (sizeof)    
/*0x0C0*/     LONG32       DynamicMemoryLock;                                                          
/*0x0C4*/     UINT8        PfnUnmapActive;                                                             
/*0x0C5*/     UINT8        _PADDING2_[0x3];                                                            
/*0x0C8*/     struct _KEVENT TemporaryMemoryEvent;                // 1 elements, 0x18 bytes (sizeof)   
/*0x0E0*/     VOID*        RootDirectory;                                                              
/*0x0E8*/     VOID*        KernelObjectsDirectory;                                                     
/*0x0F0*/     struct _KEVENT* MemoryEvents[11];                                                        
/*0x148*/     VOID*        MemoryEventHandles[11];                                                     
/*0x1A0*/     UINT64       NonChargedSecurePages;                                                      
          }MI_PARTITION_CORE, *PMI_PARTITION_CORE;                                                     
                                                                                                       
          typedef struct _MMPAGE_FILE_EXPANSION_FLAGS     // 9 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT8        PageFileNumber : 8;            // 0 BitPosition                  
/*0x001*/     UINT8        Spare1 : 8;                    // 0 BitPosition                  
/*0x002*/     UINT8        Spare2 : 8;                    // 0 BitPosition                  
              struct                                      // 6 elements, 0x1 bytes (sizeof) 
              {                                                                             
/*0x003*/         UINT8        IgnoreCurrentCommit : 1;   // 0 BitPosition                  
/*0x003*/         UINT8        IncreaseMinimumSize : 1;   // 1 BitPosition                  
/*0x003*/         UINT8        AttemptForCantExtend : 1;  // 2 BitPosition                  
/*0x003*/         UINT8        UnusedSegmentDeletion : 1; // 3 BitPosition                  
/*0x003*/         UINT8        PageFileContract : 1;      // 4 BitPosition                  
/*0x003*/         UINT8        Spare3 : 3;                // 5 BitPosition                  
              };                                                                            
          }MMPAGE_FILE_EXPANSION_FLAGS, *PMMPAGE_FILE_EXPANSION_FLAGS;                                  
                                                                                            
          typedef struct _MMPAGE_FILE_EXPANSION              // 9 elements, 0x58 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _SEGMENT* Segment;                                                         
/*0x008*/     struct _LIST_ENTRY DereferenceList;            // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _MI_PARTITION* Partition;                                                  
/*0x020*/     UINT64       RequestedExpansionSize;                                              
/*0x028*/     UINT64       ActualExpansion;                                                     
/*0x030*/     struct _KEVENT Event;                          // 1 elements, 0x18 bytes (sizeof) 
/*0x048*/     LONG32       InProgress;                                                          
              union                                          // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                 
/*0x04C*/         ULONG32      LongFlags;                                                       
/*0x04C*/         struct _MMPAGE_FILE_EXPANSION_FLAGS Flags; // 9 elements, 0x4 bytes (sizeof)  
              }u1;                                                                              
/*0x050*/     VOID**       ActiveEntry;                                                         
          }MMPAGE_FILE_EXPANSION, *PMMPAGE_FILE_EXPANSION;                                      
                                                                                                
          typedef struct _MMMOD_WRITER_LISTHEAD // 3 elements, 0x28 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _LIST_ENTRY ListHead;      // 2 elements, 0x10 bytes (sizeof) 
              union                             // 2 elements, 0x18 bytes (sizeof) 
              {                                                                    
/*0x010*/         struct _KGATE Gate;           // 1 elements, 0x18 bytes (sizeof) 
/*0x010*/         struct _KEVENT Event;         // 1 elements, 0x18 bytes (sizeof) 
              };                                                                   
          }MMMOD_WRITER_LISTHEAD, *PMMMOD_WRITER_LISTHEAD;                                   
                                                                                   
          typedef struct _MI_RESTRICTED_MODWRITES // 3 elements, 0x3 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT8        MaximumClusterPages;                                     
/*0x001*/     UINT8        ReducedClusterWrites;                                    
/*0x002*/     UINT8        ImposeDelay;                                             
          }MI_RESTRICTED_MODWRITES, *PMI_RESTRICTED_MODWRITES;                                  
                                                                                    
          typedef struct _MI_PARTITION_MODWRITES                      // 42 elements, 0x2C0 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;     // 9 elements, 0x58 bytes (sizeof)   
/*0x058*/     struct _MMPAGE_FILE_EXPANSION PageFileContract;         // 9 elements, 0x58 bytes (sizeof)   
/*0x0B0*/     UINT64       NumberOfMappedMdls;                                                             
/*0x0B8*/     LONG32       NumberOfMappedMdlsInUse;                                                        
/*0x0BC*/     ULONG32      NumberOfMappedMdlsInUsePeak;                                                    
/*0x0C0*/     struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;         // 3 elements, 0x28 bytes (sizeof)   
/*0x0E8*/     UINT8        NeedMappedMdl;                                                                  
/*0x0E9*/     UINT8        NeedPageFileMdl;                                                                
/*0x0EA*/     UINT8        ModwriterActive;                                                                
/*0x0EB*/     UINT8        TransitionInserted;                                                             
/*0x0EC*/     LONG32       LastModifiedWriteError;                                                         
/*0x0F0*/     LONG32       LastMappedWriteError;                                                           
/*0x0F4*/     ULONG32      MappedFileWriteSucceeded;                                                       
/*0x0F8*/     ULONG32      MappedWriteBurstCount;                                                          
/*0x0FC*/     ULONG32      LowPriorityModWritesOutstanding;                                                
/*0x100*/     struct _KEVENT BoostModWriteIoPriorityEvent;            // 1 elements, 0x18 bytes (sizeof)   
/*0x118*/     LONG32       ModifiedWriterThreadPriority;                                                   
/*0x11C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x120*/     UINT64       ModifiedPagesLowPriorityGoal;                                                   
/*0x128*/     struct _KEVENT ModifiedPageWriterEvent;                 // 1 elements, 0x18 bytes (sizeof)   
/*0x140*/     struct _KEVENT ModifiedWriterExitedEvent;               // 1 elements, 0x18 bytes (sizeof)   
/*0x158*/     LONG32       WriteAllPagefilePages;                                                          
/*0x15C*/     LONG32       WriteAllMappedPages;                                                            
/*0x160*/     struct _KEVENT MappedPageWriterEvent;                   // 1 elements, 0x18 bytes (sizeof)   
/*0x178*/     struct _MI_MODWRITE_DATA ModWriteData;                  // 13 elements, 0x40 bytes (sizeof)  
/*0x1B8*/     struct _KEVENT RescanPageFilesEvent;                    // 1 elements, 0x18 bytes (sizeof)   
/*0x1D0*/     struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;         // 3 elements, 0x28 bytes (sizeof)   
/*0x1F8*/     struct _ETHREAD* ModifiedPageWriterThread;                                                   
/*0x200*/     struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;       // 2 elements, 0x8 bytes (sizeof)    
/*0x208*/     struct _WORK_QUEUE_ITEM PagefileScanWorkItem;           // 3 elements, 0x20 bytes (sizeof)   
/*0x228*/     ULONG32      PagefileScanCount;                                                              
/*0x22C*/     LONG32       ClusterRestrictionLock;                                                         
/*0x230*/     struct _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];                                      
/*0x236*/     UINT8        _PADDING1_[0x2];                                                                
/*0x238*/     struct _KEVENT NotifyStoreMemoryConditions;             // 1 elements, 0x18 bytes (sizeof)   
/*0x250*/     UINT8        DelayMappedWrite;                                                               
/*0x251*/     UINT8        _PADDING2_[0x3];                                                                
/*0x254*/     ULONG32      PagefileReservationsEnabled;                                                    
/*0x258*/     struct _EX_PUSH_LOCK PageFileCreationLock;              // 7 elements, 0x8 bytes (sizeof)    
/*0x260*/     struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;           // 3 elements, 0x20 bytes (sizeof)   
/*0x280*/     UINT64       LastTrimPagefileTime;                                                           
/*0x288*/     struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem; // 3 elements, 0x20 bytes (sizeof)   
/*0x2A8*/     LONG32       WsSwapPageFileContractionInProgress;                                            
/*0x2AC*/     UINT8        _PADDING3_[0x4];                                                                
/*0x2B0*/     struct _EX_PUSH_LOCK WorkingSetSwapLock;                // 7 elements, 0x8 bytes (sizeof)    
/*0x2B8*/     LONG32       WorkingSetInswapLock;                                                           
/*0x2BC*/     UINT8        _PADDING4_[0x4];                                                                
          }MI_PARTITION_MODWRITES, *PMI_PARTITION_MODWRITES;                                               
                                                                                                           
          typedef struct _MI_PARTITION_STORES                // 16 elements, 0x90 bytes (sizeof) 
          {                                                                                      
              union                                          // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                  
                  struct                                     // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                              
/*0x000*/             LONG32       FlushCompleting : 1;      // 0 BitPosition                    
/*0x000*/             LONG32       FlushInProgress : 31;     // 1 BitPosition                    
                  };                                                                             
/*0x000*/         LONG32       Long;                                                             
              }WriteAllStoreHintedPages;                                                         
/*0x004*/     ULONG32      VirtualPageFileNumber;                                                
/*0x008*/     ULONG32      Registered;                                                           
/*0x00C*/     ULONG32      ReadClusterSizeMax;                                                   
/*0x010*/     ULONG32      EvictFlushRequestCount;                                               
/*0x014*/     ULONG32      ModifiedWriteDisableCount;                                            
/*0x018*/     ULONG32      WriteIssueFailures;                                                   
/*0x01C*/     ULONG32      WritesOutstanding;                                                    
/*0x020*/     LONG32       EvictFlushLock;                                                       
/*0x024*/     UINT8        _PADDING0_[0x4];                                                      
/*0x028*/     struct _ETHREAD* EvictionThread;                                                   
/*0x030*/     struct _KEVENT EvictEvent;                     // 1 elements, 0x18 bytes (sizeof)  
/*0x048*/     UINT8        _PADDING1_[0x8];                                                      
/*0x050*/     union _SLIST_HEADER WriteSupportSListHead;     // 3 elements, 0x10 bytes (sizeof)  
/*0x060*/     struct _KEVENT EvictFlushCompleteEvent;        // 1 elements, 0x18 bytes (sizeof)  
/*0x078*/     struct _RTL_BITMAP* ModifiedWriteFailedBitmap;                                     
/*0x080*/     struct _EPROCESS* StoreProcess;                                                    
/*0x088*/     ULONG32      DeleteStoredPages;                                                    
/*0x08C*/     UINT8        _PADDING2_[0x4];                                                      
          }MI_PARTITION_STORES, *PMI_PARTITION_STORES;                                           
                                                                                                 
          typedef struct _MMDEREFERENCE_SEGMENT_HEADER        // 4 elements, 0x50 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _KSEMAPHORE Semaphore;                   // 2 elements, 0x20 bytes (sizeof) 
/*0x020*/     struct _LIST_ENTRY ControlAreaDeleteListHead;   // 2 elements, 0x10 bytes (sizeof) 
/*0x030*/     struct _LIST_ENTRY UnusedSegmentDeleteListHead; // 2 elements, 0x10 bytes (sizeof) 
/*0x040*/     struct _LIST_ENTRY PagefileExtensionListHead;   // 2 elements, 0x10 bytes (sizeof) 
          }MMDEREFERENCE_SEGMENT_HEADER, *PMMDEREFERENCE_SEGMENT_HEADER;                                   
                                                                                                 
          typedef struct _MI_PTE_CHAIN_HEAD // 3 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _MMPTE Flink;          // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _MMPTE Blink;          // 1 elements, 0x8 bytes (sizeof)  
/*0x010*/     struct _MMPTE* PteBase;                                          
          }MI_PTE_CHAIN_HEAD, *PMI_PTE_CHAIN_HEAD;                                   
                                                                               
          typedef struct _MI_PARTITION_SEGMENTS                              // 33 elements, 0x340 bytes (sizeof) 
          {                                                                                                       
/*0x000*/     LONG32       SegmentListLock;                                                                       
/*0x004*/     ULONG32      DeleteOnCloseCount;                                                                    
/*0x008*/     INT64        FsControlAreaCount;                                                                    
/*0x010*/     INT64        PfControlAreaCount;                                                                    
/*0x018*/     INT64        CloneHeaderCount;                                                                      
/*0x020*/     struct _KEVENT DeleteSubsectionCleanup;                        // 1 elements, 0x18 bytes (sizeof)   
/*0x038*/     struct _KEVENT UnusedSegmentCleanup;                           // 1 elements, 0x18 bytes (sizeof)   
/*0x050*/     UINT64       SubsectionDeletePtes;                                                                  
/*0x058*/     struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;            // 9 elements, 0x58 bytes (sizeof)   
/*0x0B0*/     struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader; // 4 elements, 0x50 bytes (sizeof)   
/*0x100*/     struct _LIST_ENTRY DeleteOnCloseList;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x110*/     struct _KTIMER DeleteOnCloseTimer;                             // 6 elements, 0x40 bytes (sizeof)   
/*0x150*/     UINT8        DeleteOnCloseTimerActive;                                                              
/*0x151*/     UINT8        SegmentDereferenceThreadExists;                                                        
/*0x152*/     UINT8        _PADDING0_[0x6];                                                                       
/*0x158*/     VOID*        SegmentDereferenceActiveControlArea;                                                   
/*0x160*/     UINT64       UnusedSegmentPagedPool;                                                                
/*0x168*/     struct _LIST_ENTRY UnusedSegmentList;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x178*/     struct _LIST_ENTRY UnusedSubsectionList;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x188*/     struct _LIST_ENTRY DeleteSubsectionList;                       // 2 elements, 0x10 bytes (sizeof)   
/*0x198*/     struct _KEVENT ControlAreaDeleteEvent;                         // 1 elements, 0x18 bytes (sizeof)   
/*0x1B0*/     struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;               // 1 elements, 0x8 bytes (sizeof)    
/*0x1B8*/     struct _MI_PTE_CHAIN_HEAD FreeSystemCache;                     // 3 elements, 0x18 bytes (sizeof)   
/*0x1D0*/     struct _KEVENT CloneDereferenceEvent;                          // 1 elements, 0x18 bytes (sizeof)   
/*0x1E8*/     UINT8        _PADDING1_[0x8];                                                                       
/*0x1F0*/     union _SLIST_HEADER CloneProtosSListHead;                      // 3 elements, 0x10 bytes (sizeof)   
/*0x200*/     struct _EX_PUSH_LOCK SystemCacheInitLock;                      // 7 elements, 0x8 bytes (sizeof)    
/*0x208*/     ULONG32      PagefileExtensionWaiters;                                                              
/*0x20C*/     ULONG32      PagefileExtensionRequests;                                                             
/*0x210*/     struct _KEVENT PagefileExtensionWaitEvent;                     // 1 elements, 0x18 bytes (sizeof)   
/*0x228*/     struct _MI_CROSS_PARTITION_CHARGES SharedCharges[7];                                                
/*0x308*/     struct _KEVENT* SharedChargesDrainEvent;                                                            
/*0x310*/     struct _KEVENT* ControlAreasDrainEvent;                                                             
/*0x318*/     struct _KEVENT* CloneHeaderDrainEvent;                                                              
/*0x320*/     struct _EX_RUNDOWN_REF_CACHE_AWARE* ProbeRundownReference;                                          
/*0x328*/     UINT8        _PADDING2_[0x18];                                                                      
          }MI_PARTITION_SEGMENTS, *PMI_PARTITION_SEGMENTS;                                                        
                                                                                                                  
          typedef struct _MMPFNLIST         // 5 elements, 0x28 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Total;                                              
/*0x008*/     enum _MMLISTS ListName;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
/*0x010*/     UINT64       Flink;                                              
/*0x018*/     UINT64       Blink;                                              
/*0x020*/     UINT64       Lock;                                               
          }MMPFNLIST, *PMMPFNLIST;                                             
                                                                               
          typedef struct _MI_SLAB_ALLOCATOR_CONTEXT           // 9 elements, 0x48 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _RTL_RB_TREE AllocationsTree;            // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     LONG32       Lock;                                                                 
/*0x014*/     UINT8        _PADDING0_[0x4];                                                      
/*0x018*/     struct _MI_SLAB_ALLOCATOR_ENTRY* SlabEntryHint;                                    
/*0x020*/     UINT64       FreePageCount;                                                        
/*0x028*/     UINT64       SlabEntryCount;                                                       
/*0x030*/     enum _MI_SLAB_ALLOCATOR_PROTECTION Protection;                                     
              union                                           // 3 elements, 0x4 bytes (sizeof)  
              {                                                                                  
                  struct                                      // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                              
/*0x034*/             ULONG32      EntryBecameEmpty : 1;      // 0 BitPosition                   
/*0x034*/             ULONG32      Spare : 31;                // 1 BitPosition                   
                  };                                                                             
/*0x034*/         ULONG32      AllFlags;                                                         
              }Flags;                                                                            
/*0x038*/     UINT64       LastReplenishTime;                                                    
/*0x040*/     UINT64       LastFailureTime;                                                      
          }MI_SLAB_ALLOCATOR_CONTEXT, *PMI_SLAB_ALLOCATOR_CONTEXT;                                   
                                                                                                 
           typedef struct _MI_PARTITION_PAGE_LISTS                               // 37 elements, 0x10C0 bytes (sizeof) 
           {                                                                                                           
/*0x000*/      struct _MMPFNLIST* FreePagesByColor[2];                                                                 
/*0x010*/      UINT8        _PADDING0_[0x30];                                                                          
/*0x040*/      struct _MMPFNLIST ZeroedPageListHead;                             // 5 elements, 0x28 bytes (sizeof)    
/*0x068*/      UINT8        _PADDING1_[0x18];                                                                          
/*0x080*/      struct _MMPFNLIST FreePageListHead;                               // 5 elements, 0x28 bytes (sizeof)    
/*0x0A8*/      UINT8        _PADDING2_[0x18];                                                                          
/*0x0C0*/      struct _MMPFNLIST StandbyPageListHead;                            // 5 elements, 0x28 bytes (sizeof)    
/*0x0E8*/      UINT8        _PADDING3_[0x18];                                                                          
/*0x100*/      struct _MMPFNLIST StandbyPageListByPriority[8];                                                         
/*0x240*/      struct _MMPFNLIST ModifiedPageListNoReservation;                  // 5 elements, 0x28 bytes (sizeof)    
/*0x268*/      UINT8        _PADDING4_[0x18];                                                                          
/*0x280*/      struct _MMPFNLIST ModifiedPageListByReservation[16];                                                    
/*0x500*/      struct _MMPFNLIST MappedPageListHead[16];                                                               
/*0x780*/      struct _MMPFNLIST BadPageListHead;                                // 5 elements, 0x28 bytes (sizeof)    
/*0x7A8*/      UINT8        _PADDING5_[0x18];                                                                          
/*0x7C0*/      struct _MMPFNLIST EnclavePageListHead;                            // 5 elements, 0x28 bytes (sizeof)    
/*0x7E8*/      union _SLIST_HEADER* FreePageSlist[2];                                                                  
/*0x7F8*/      struct _MMPFNLIST* PageLocationList[8];                                                                 
/*0x838*/      ULONG32      StandbyRepurposedByPriority[8];                                                            
/*0x858*/      UINT8        _PADDING6_[0x28];                                                                          
/*0x880*/      UINT64       TransitionSharedPages;                                                                     
/*0x888*/      UINT64       TransitionSharedPagesPeak[6];                                                              
/*0x8B8*/      struct _KEVENT MappedPageListHeadEvent[16];                                                             
/*0xA38*/      struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];                                                  
/*0xA58*/      ULONG32      DecayHand;                                                                                 
/*0xA5C*/      UINT8        StandbyListDiscard;                                                                        
/*0xA5D*/      UINT8        FreeListDiscard;                                                                           
/*0xA5E*/      UINT8        PfnBitMapsReady;                                                                           
/*0xA5F*/      UINT8        _PADDING7_[0x1];                                                                           
/*0xA60*/      UINT64       LastDecayHandUpdateTime;                                                                   
/*0xA68*/      struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;                 // 5 elements, 0x38 bytes (sizeof)    
/*0xAA0*/      UINT8        _PADDING8_[0x20];                                                                          
/*0xAC0*/      UINT64       AvailableEventsLock;                                                                       
/*0xAC8*/      struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];                                       
/*0xB28*/      VOID*        MirrorListLocks;                                                                           
/*0xB30*/      UINT8        _PADDING9_[0x10];                                                                          
/*0xB40*/      UINT64       TransitionPrivatePages;                                                                    
/*0xB48*/      struct _RTL_BITMAP_EX LargePfnBitMap[2];                                                                
/*0xB68*/      struct _MI_FREE_LARGE_PAGE_LIST* LargePageListHeads;                                                    
/*0xB70*/      struct _MI_LARGE_PAGE_CANDIDATES LargePageCandidates[2];                                                
/*0xF80*/      struct _WORK_QUEUE_ITEM RebuildLargePageWorkItem;                 // 3 elements, 0x20 bytes (sizeof)    
/*0xFA0*/      UINT8        RebuildLargePageActive;                                                                    
/*0xFA1*/      UINT8        _PADDING10_[0x3];                                                                          
/*0xFA4*/      LONG32       LargePageRebuildLock;                                                                      
/*0xFA8*/      UINT64       LowMemoryThreshold;                                                                        
/*0xFB0*/      UINT64       HighMemoryThreshold;                                                                       
/*0xFB8*/      struct _MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[3];                                                      
/*0x1090*/     struct _RTL_BITMAP_EX SlabPfnBitMap;                              // 2 elements, 0x10 bytes (sizeof)    
/*0x10A0*/     UINT8        _PADDING11_[0x20];                                                                         
           }MI_PARTITION_PAGE_LISTS, *PMI_PARTITION_PAGE_LISTS;                                                        
                                                                                                                       
          typedef struct _MI_PARTITION_COMMIT       // 8 elements, 0x80 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       PeakCommitment;                                             
/*0x008*/     UINT64       TotalCommitLimitMaximum;                                    
/*0x010*/     LONG32       Popups[2];                                                  
/*0x018*/     UINT64       LowCommitThreshold;                                         
/*0x020*/     UINT64       HighCommitThreshold;                                        
/*0x028*/     UINT64       EventLock;                                                  
/*0x030*/     UINT64       SystemCommitReserve;                                        
/*0x038*/     UINT8        _PADDING0_[0x8];                                            
/*0x040*/     UINT64       OverCommit;                                                 
/*0x048*/     UINT8        _PADDING1_[0x38];                                           
          }MI_PARTITION_COMMIT, *PMI_PARTITION_COMMIT;                                   
                                                                                       
          typedef struct _MI_PARTITION_ZEROING                   // 8 elements, 0x68 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _KEVENT PageEvent;                          // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     UINT8        ThreadActive;                                                            
/*0x019*/     UINT8        ThreadPriorityStatic;                                                    
/*0x01A*/     UINT8        _PADDING0_[0x2];                                                         
/*0x01C*/     LONG32       ZeroFreePageSlistMinimum;                                                
/*0x020*/     struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem; // 3 elements, 0x20 bytes (sizeof) 
/*0x040*/     LONG32       ThreadCount;                                                             
/*0x044*/     UINT8        _PADDING1_[0x4];                                                         
/*0x048*/     struct _KGATE Gate;                                // 1 elements, 0x18 bytes (sizeof) 
/*0x060*/     struct _MI_ZERO_THREAD_CONTEXT* ThreadContext;                                        
          }MI_PARTITION_ZEROING, *PMI_PARTITION_ZEROING;                                            
                                                                                                    
          typedef struct _MMWORKING_SET_EXPANSION_HEAD // 1 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY ListHead;             // 2 elements, 0x10 bytes (sizeof) 
          }MMWORKING_SET_EXPANSION_HEAD, *PMMWORKING_SET_EXPANSION_HEAD;                                   
                                                                                          
          typedef struct _MMWSL_INSTANCE                // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _MMPTE* NextPteToTrim;                                                
/*0x008*/     struct _MMPTE* NextPteToAge;                                                 
/*0x010*/     struct _MMPTE* NextPteToAccessClear;                                         
/*0x018*/     ULONG32      LastAccessClearingRemainder;                                    
/*0x01C*/     ULONG32      LastAgingRemainder;                                             
/*0x020*/     UINT64       LockedEntries;                                                  
          }MMWSL_INSTANCE, *PMMWSL_INSTANCE;                                               
                                                                                           
           typedef struct _MI_VISIBLE_PARTITION                    // 22 elements, 0x1200 bytes (sizeof) 
           {                                                                                             
/*0x000*/      UINT64       LowestPhysicalPage;                                                          
/*0x008*/      UINT64       HighestPhysicalPage;                                                         
/*0x010*/      UINT64       NumberOfPhysicalPages;                                                       
/*0x018*/      ULONG32      NumberOfPagingFiles;                                                         
/*0x01C*/      UINT8        SystemCacheInitialized;                                                      
/*0x01D*/      UINT8        _PADDING0_[0x3];                                                             
/*0x020*/      struct _MMPAGING_FILE* PagingFile[16];                                                    
/*0x0A0*/      UINT8        _PADDING1_[0x20];                                                            
/*0x0C0*/      UINT64       AvailablePages;                                                              
/*0x0C8*/      UINT8        _PADDING2_[0x38];                                                            
/*0x100*/      UINT64       ResidentAvailablePages;                                                      
/*0x108*/      UINT8        _PADDING3_[0x38];                                                            
/*0x140*/      struct _MMSUPPORT_INSTANCE PartitionWs[1];                                                
/*0x200*/      struct _MMWSL_INSTANCE PartitionWorkingSetLists[1];                                       
/*0x228*/      UINT64       TotalCommittedPages;                                                         
/*0x230*/      UINT8        _PADDING4_[0x10];                                                            
/*0x240*/      struct _MMPFNLIST ModifiedPageListHead;             // 5 elements, 0x28 bytes (sizeof)    
/*0x268*/      UINT8        _PADDING5_[0x18];                                                            
/*0x280*/      struct _MMPFNLIST ModifiedNoWritePageListHead;      // 5 elements, 0x28 bytes (sizeof)    
/*0x2A8*/      UINT64       TotalCommitLimit;                                                            
/*0x2B0*/      UINT64       TotalPagesForPagingFile;                                                     
/*0x2B8*/      UINT64       VadPhysicalPages;                                                            
/*0x2C0*/      UINT64       ProcessLockedFilePages;                                                      
/*0x2C8*/      UINT64       SharedCommit;                                                                
/*0x2D0*/      UINT64       SlabAllocatorPages;                                                          
/*0x2D8*/      ULONG32      ChargeCommitmentFailures[4];                                                 
/*0x2E8*/      LONG32       PageFileTraceIndex;                                                          
/*0x2EC*/      UINT8        _PADDING6_[0x4];                                                             
/*0x2F0*/      struct _MI_PAGEFILE_TRACES PageFileTraces[32];                                            
/*0x11F0*/     UINT8        _PADDING7_[0x10];                                                            
           }MI_VISIBLE_PARTITION, *PMI_VISIBLE_PARTITION;                                                
                                                                                                         
           typedef struct _MI_PARTITION                                      // 11 elements, 0x2DC0 bytes (sizeof) 
           {                                                                                                       
/*0x000*/      struct _MI_PARTITION_CORE Core;                               // 25 elements, 0x1A8 bytes (sizeof)  
/*0x1A8*/      struct _MI_PARTITION_MODWRITES Modwriter;                     // 42 elements, 0x2C0 bytes (sizeof)  
/*0x468*/      UINT8        _PADDING0_[0x8];                                                                       
/*0x470*/      struct _MI_PARTITION_STORES Store;                            // 16 elements, 0x90 bytes (sizeof)   
/*0x500*/      struct _MI_PARTITION_SEGMENTS Segments;                       // 33 elements, 0x340 bytes (sizeof)  
/*0x840*/      struct _MI_PARTITION_PAGE_LISTS PageLists;                    // 37 elements, 0x10C0 bytes (sizeof) 
/*0x1900*/     struct _MI_PARTITION_COMMIT Commit;                           // 8 elements, 0x80 bytes (sizeof)    
/*0x1980*/     struct _MI_PARTITION_ZEROING Zeroing;                         // 8 elements, 0x68 bytes (sizeof)    
/*0x19E8*/     struct _MI_PAGE_COMBINING_SUPPORT PageCombine;                // 8 elements, 0x188 bytes (sizeof)   
/*0x1B70*/     VOID*        WorkingSetControl;                                                                     
/*0x1B78*/     struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead; // 1 elements, 0x10 bytes (sizeof)    
/*0x1B88*/     UINT8        _PADDING1_[0x38];                                                                      
/*0x1BC0*/     struct _MI_VISIBLE_PARTITION Vp;                              // 22 elements, 0x1200 bytes (sizeof) 
           }MI_PARTITION, *PMI_PARTITION;                                                                          
                                                                                                                   
          typedef struct _MI_PARTITION_STATE                  // 11 elements, 0x60 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       PartitionLock;                                                         
/*0x008*/     struct _EX_PUSH_LOCK PartitionIdLock;           // 7 elements, 0x8 bytes (sizeof)   
/*0x010*/     UINT64       InitialPartitionIdBits;                                                
/*0x018*/     struct _LIST_ENTRY PartitionList;               // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _RTL_BITMAP* PartitionIdBitmap;                                              
/*0x030*/     struct _RTL_BITMAP InitialPartitionIdBitmap;    // 2 elements, 0x10 bytes (sizeof)  
/*0x040*/     struct _MI_PARTITION* TempPartitionPointers[1];                                     
/*0x048*/     struct _MI_PARTITION** Partition;                                                   
/*0x050*/     UINT64       TotalPagesInChildPartitions;                                           
/*0x058*/     ULONG32      CrossPartitionDenials;                                                 
/*0x05C*/     UINT8        MultiplePartitionsExist;                                               
/*0x05D*/     UINT8        _PADDING0_[0x3];                                                       
          }MI_PARTITION_STATE, *PMI_PARTITION_STATE;                                              
                                                                                                  
          typedef struct _MI_PER_SESSION_PROTOS               // 9 elements, 0x58 bytes (sizeof) 
          {                                                                                      
              union                                           // 3 elements, 0x18 bytes (sizeof) 
              {                                                                                  
/*0x000*/         struct _RTL_BALANCED_NODE SessionProtoNode; // 6 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _SINGLE_LIST_ENTRY FreeList;         // 1 elements, 0x8 bytes (sizeof)  
/*0x000*/         VOID*        DriverAddress;                                                    
              };                                                                                 
/*0x018*/     struct _MI_PROTOTYPE_PTES_NODE ProtosNode;      // 2 elements, 0x20 bytes (sizeof) 
/*0x038*/     UINT64       NumberOfPtes;                                                         
              union                                           // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                  
/*0x040*/         ULONG32      SessionId;                                                        
/*0x040*/         struct _SUBSECTION* Subsection;                                                
              };                                                                                 
/*0x048*/     struct _MMPTE* SubsectionBase;                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                  
/*0x050*/         ULONG32      ReferenceCount;                                                   
/*0x050*/         ULONG32      NumberOfPtesToFree;                                               
              }u2;                                                                               
          }MI_PER_SESSION_PROTOS, *PMI_PER_SESSION_PROTOS;                                       
                                                                                                 
          typedef struct _MI_POOL_FAILURE_REASONS        // 11 elements, 0x2C bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      NonPagedNoPtes;                                                   
/*0x004*/     ULONG32      PriorityTooLow;                                                   
/*0x008*/     ULONG32      NonPagedNoPagesAvailable;                                         
/*0x00C*/     ULONG32      PagedNoPtes;                                                      
/*0x010*/     ULONG32      SessionPagedNoPtes;                                               
/*0x014*/     ULONG32      PagedNoPagesAvailable;                                            
/*0x018*/     ULONG32      SessionPagedNoPagesAvailable;                                     
/*0x01C*/     ULONG32      PagedNoCommit;                                                    
/*0x020*/     ULONG32      SessionPagedNoCommit;                                             
/*0x024*/     ULONG32      NonPagedNoResidentAvailable;                                      
/*0x028*/     ULONG32      NonPagedNoCommit;                                                 
          }MI_POOL_FAILURE_REASONS, *PMI_POOL_FAILURE_REASONS;                                    
                                                                                             
          typedef struct _MI_POOL_STATE                                        // 22 elements, 0x148 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     UINT64       MaximumNonPagedPoolThreshold;                                                            
/*0x008*/     ULONG32      NonPagedPoolSListMaximum[3];                                                             
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                         
/*0x018*/     UINT64       AllocatedNonPagedPool;                                                                   
/*0x020*/     struct _SINGLE_LIST_ENTRY BadPoolHead;                           // 1 elements, 0x8 bytes (sizeof)    
/*0x028*/     ULONG32      HighEventSets;                                                                           
/*0x02C*/     UINT8        HighEventSetsValid;                                                                      
/*0x02D*/     UINT8        _PADDING1_[0x3];                                                                         
/*0x030*/     ULONG32      PoolFailures[3][3];                                                                      
/*0x054*/     struct _MI_POOL_FAILURE_REASONS PoolFailureReasons;              // 11 elements, 0x2C bytes (sizeof)  
/*0x080*/     UINT64       LowPagedPoolThreshold;                                                                   
/*0x088*/     UINT64       HighPagedPoolThreshold;                                                                  
/*0x090*/     ULONG32      PagedPoolSListMaximum;                                                                   
/*0x094*/     ULONG32      PreemptiveTrims[4];                                                                      
/*0x0A4*/     UINT8        _PADDING2_[0x4];                                                                         
/*0x0A8*/     UINT64       SpecialPagesInUsePeak;                                                                   
/*0x0B0*/     ULONG32      SpecialPoolRejected[6];                                                                  
/*0x0C8*/     UINT64       SpecialPagesNonPaged;                                                                    
/*0x0D0*/     LONG32       SpecialPoolPdes;                                                                         
/*0x0D4*/     ULONG32      SessionSpecialPoolPdesMax;                                                               
/*0x0D8*/     LONG32       PermittedFaultsLock;                                                                     
/*0x0DC*/     UINT8        _PADDING3_[0x4];                                                                         
/*0x0E0*/     struct _RTL_AVL_TREE PermittedFaultsTree;                        // 1 elements, 0x8 bytes (sizeof)    
/*0x0E8*/     struct _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];                                      
/*0x138*/     UINT64       TotalPagedPoolQuota;                                                                     
/*0x140*/     UINT64       TotalNonPagedPoolQuota;                                                                  
          }MI_POOL_STATE, *PMI_POOL_STATE;                                                                          
                                                                                                                    
          typedef struct _MI_PROCESS_STATE                 // 8 elements, 0x48 bytes (sizeof) 
          {                                                                                   
/*0x000*/     VOID*        SystemDllBase;                                                     
/*0x008*/     ULONG32      ColorSeed;                                                         
/*0x00C*/     LONG32       RotatingUniprocessorNumber;                                        
/*0x010*/     union _LARGE_INTEGER CriticalSectionTimeout; // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     struct _LIST_ENTRY ProcessList;              // 2 elements, 0x10 bytes (sizeof) 
/*0x028*/     struct _MMPTE* SharedUserDataPte[2];                                            
/*0x038*/     VOID*        HypervisorSharedVa;                                                
/*0x040*/     UINT64       VadSecureCookie;                                                   
          }MI_PROCESS_STATE, *PMI_PROCESS_STATE;                                              
                                                                                              
          typedef struct _MI_RESUME_WORKITEM      // 2 elements, 0x38 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _KEVENT ResumeCompleteEvent; // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     struct _WORK_QUEUE_ITEM WorkItem;   // 3 elements, 0x20 bytes (sizeof) 
          }MI_RESUME_WORKITEM, *PMI_RESUME_WORKITEM;                                   
                                                                                     
          typedef struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES // 4 elements, 0x10 bytes (sizeof) 
          {                                                                                  
              struct                                      // 3 elements, 0x8 bytes (sizeof)  
              {                                                                              
/*0x000*/         UINT64       NumberOfPtes : 6;          // 0 BitPosition                   
/*0x000*/         UINT64       PartitionId : 10;          // 6 BitPosition                   
/*0x000*/         UINT64       Spare : 2;                 // 16 BitPosition                  
              };                                                                             
/*0x008*/     UINT64       SectionOffset : 48;            // 0 BitPosition                   
          }MI_SYSTEM_CACHE_VIEW_ATTRIBUTES, *PMI_SYSTEM_CACHE_VIEW_ATTRIBUTES;                                   
                                                                                             
          typedef struct _MI_REVERSE_VIEW_MAP                                    // 9 elements, 0x30 bytes (sizeof) 
          {                                                                                                         
/*0x000*/     struct _LIST_ENTRY ViewLinks;                                      // 2 elements, 0x10 bytes (sizeof) 
              union                                                              // 4 elements, 0x8 bytes (sizeof)  
              {                                                                                                     
/*0x010*/         VOID*        SystemCacheVa;                                                                       
/*0x010*/         VOID*        SessionViewVa;                                                                       
/*0x010*/         struct _EPROCESS* VadsProcess;                                                                    
/*0x010*/         UINT64       Type : 2;                                         // 0 BitPosition                   
              };                                                                                                    
              union                                                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                                     
/*0x018*/         struct _SUBSECTION* Subsection;                                                                   
/*0x018*/         UINT64       SubsectionType : 1;                               // 0 BitPosition                   
              };                                                                                                    
              union                                                              // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                                     
/*0x020*/         struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes; // 4 elements, 0x10 bytes (sizeof) 
/*0x020*/         UINT64       SectionOffset;                                                                       
              };                                                                                                    
          }MI_REVERSE_VIEW_MAP, *PMI_REVERSE_VIEW_MAP;                                                              
                                                                                                                    
          typedef struct _SECTION_IMAGE_INFORMATION               // 26 elements, 0x40 bytes (sizeof) 
          {                                                                                           
/*0x000*/     VOID*        TransferAddress;                                                           
/*0x008*/     ULONG32      ZeroBits;                                                                  
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                           
/*0x010*/     UINT64       MaximumStackSize;                                                          
/*0x018*/     UINT64       CommittedStackSize;                                                        
/*0x020*/     ULONG32      SubSystemType;                                                             
              union                                               // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                       
                  struct                                          // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                   
/*0x024*/             UINT16       SubSystemMinorVersion;                                             
/*0x026*/             UINT16       SubSystemMajorVersion;                                             
                  };                                                                                  
/*0x024*/         ULONG32      SubSystemVersion;                                                      
              };                                                                                      
              union                                               // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                       
                  struct                                          // 2 elements, 0x4 bytes (sizeof)   
                  {                                                                                   
/*0x028*/             UINT16       MajorOperatingSystemVersion;                                       
/*0x02A*/             UINT16       MinorOperatingSystemVersion;                                       
                  };                                                                                  
/*0x028*/         ULONG32      OperatingSystemVersion;                                                
              };                                                                                      
/*0x02C*/     UINT16       ImageCharacteristics;                                                      
/*0x02E*/     UINT16       DllCharacteristics;                                                        
/*0x030*/     UINT16       Machine;                                                                   
/*0x032*/     UINT8        ImageContainsCode;                                                         
              union                                               // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                       
/*0x033*/         UINT8        ImageFlags;                                                            
                  struct                                          // 7 elements, 0x1 bytes (sizeof)   
                  {                                                                                   
/*0x033*/             UINT8        ComPlusNativeReady : 1;        // 0 BitPosition                    
/*0x033*/             UINT8        ComPlusILOnly : 1;             // 1 BitPosition                    
/*0x033*/             UINT8        ImageDynamicallyRelocated : 1; // 2 BitPosition                    
/*0x033*/             UINT8        ImageMappedFlat : 1;           // 3 BitPosition                    
/*0x033*/             UINT8        BaseBelow4gb : 1;              // 4 BitPosition                    
/*0x033*/             UINT8        ComPlusPrefer32bit : 1;        // 5 BitPosition                    
/*0x033*/             UINT8        Reserved : 2;                  // 6 BitPosition                    
                  };                                                                                  
              };                                                                                      
/*0x034*/     ULONG32      LoaderFlags;                                                               
/*0x038*/     ULONG32      ImageFileSize;                                                             
/*0x03C*/     ULONG32      CheckSum;                                                                  
          }SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;                                    
                                                                                                      
          typedef struct _MI_SECTION_IMAGE_INFORMATION                     // 2 elements, 0x50 bytes (sizeof)  
          {                                                                                                    
/*0x000*/     struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;  // 26 elements, 0x40 bytes (sizeof) 
/*0x040*/     struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation; // 3 elements, 0xC bytes (sizeof)   
/*0x04C*/     UINT8        _PADDING0_[0x4];                                                                    
          }MI_SECTION_IMAGE_INFORMATION, *PMI_SECTION_IMAGE_INFORMATION;                                       
                                                                                                               
          typedef struct _MMSUBSECTION_FLAGS            // 8 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 3 elements, 0x2 bytes (sizeof) 
              {                                                                           
/*0x000*/         UINT16       SubsectionAccessed : 1;  // 0 BitPosition                  
/*0x000*/         UINT16       Protection : 5;          // 1 BitPosition                  
/*0x000*/         UINT16       StartingSector4132 : 10; // 6 BitPosition                  
              };                                                                          
              struct                                    // 5 elements, 0x2 bytes (sizeof) 
              {                                                                           
/*0x002*/         UINT16       SubsectionStatic : 1;    // 0 BitPosition                  
/*0x002*/         UINT16       GlobalMemory : 1;        // 1 BitPosition                  
/*0x002*/         UINT16       Spare : 1;               // 2 BitPosition                  
/*0x002*/         UINT16       OnDereferenceList : 1;   // 3 BitPosition                  
/*0x002*/         UINT16       SectorEndOffset : 12;    // 4 BitPosition                  
              };                                                                          
          }MMSUBSECTION_FLAGS, *PMMSUBSECTION_FLAGS;                                      
                                                                                          
          typedef struct _MI_SUBSECTION_ENTRY1            // 2 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      CrossPartitionReferences : 30; // 0 BitPosition                  
/*0x000*/     ULONG32      SubsectionMappedLarge : 2;     // 30 BitPosition                 
          }MI_SUBSECTION_ENTRY1, *PMI_SUBSECTION_ENTRY1;                                    
                                                                                            
          typedef struct _SUBSECTION                                    // 14 elements, 0x38 bytes (sizeof) 
          {                                                                                                 
/*0x000*/     struct _CONTROL_AREA* ControlArea;                                                            
/*0x008*/     struct _MMPTE* SubsectionBase;                                                                
/*0x010*/     struct _SUBSECTION* NextSubsection;                                                           
              union                                                     // 3 elements, 0x8 bytes (sizeof)   
              {                                                                                             
/*0x018*/         struct _RTL_AVL_TREE GlobalPerSessionHead;            // 1 elements, 0x8 bytes (sizeof)   
/*0x018*/         struct _MI_CONTROL_AREA_WAIT_BLOCK* CreationWaitList;                                     
/*0x018*/         struct _MI_PER_SESSION_PROTOS* SessionDriverProtos;                                       
              };                                                                                            
              union                                                     // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                             
/*0x020*/         ULONG32      LongFlags;                                                                   
/*0x020*/         struct _MMSUBSECTION_FLAGS SubsectionFlags;           // 8 elements, 0x4 bytes (sizeof)   
              }u;                                                                                           
/*0x024*/     ULONG32      StartingSector;                                                                  
/*0x028*/     ULONG32      NumberOfFullSectors;                                                             
/*0x02C*/     ULONG32      PtesInSubsection;                                                                
              union                                                     // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                             
/*0x030*/         struct _MI_SUBSECTION_ENTRY1 e1;                      // 2 elements, 0x4 bytes (sizeof)   
/*0x030*/         ULONG32      EntireField;                                                                 
              }u1;                                                                                          
              struct                                                    // 3 elements, 0x4 bytes (sizeof)   
              {                                                                                             
/*0x034*/         ULONG32      UnusedPtes : 30;                         // 0 BitPosition                    
/*0x034*/         ULONG32      ExtentQueryNeeded : 1;                   // 30 BitPosition                   
/*0x034*/         ULONG32      DirtyPages : 1;                          // 31 BitPosition                   
              };                                                                                            
          }SUBSECTION, *PSUBSECTION;                                                                        
                                                                                                            
          typedef struct _MSUBSECTION                    // 7 elements, 0x90 bytes (sizeof)  
          {                                                                                  
/*0x000*/     struct _SUBSECTION Core;                   // 14 elements, 0x38 bytes (sizeof) 
/*0x038*/     struct _RTL_BALANCED_NODE SubsectionNode;  // 6 elements, 0x18 bytes (sizeof)  
/*0x050*/     struct _LIST_ENTRY DereferenceList;        // 2 elements, 0x10 bytes (sizeof)  
/*0x060*/     UINT64       NumberOfMappedViews;                                              
/*0x068*/     ULONG32      NumberOfPfnReferences;                                            
/*0x06C*/     ULONG32      LargeViews;                                                       
/*0x070*/     struct _MI_PROTOTYPE_PTES_NODE ProtosNode; // 2 elements, 0x20 bytes (sizeof)  
          }MSUBSECTION, *PMSUBSECTION;                                                       
                                                                                             
          typedef struct _RTL_RETPOLINE_ROUTINES // 4 elements, 0x4C bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      SwitchtableJump[16];                                     
/*0x040*/     ULONG32      CfgIndirectRax;                                          
/*0x044*/     ULONG32      NonCfgIndirectRax;                                       
/*0x048*/     ULONG32      ImportR10;                                               
          }RTL_RETPOLINE_ROUTINES, *PRTL_RETPOLINE_ROUTINES;                                   
                                                                                    
          typedef struct _MI_SECTION_STATE                      // 47 elements, 0x340 bytes (sizeof) 
          {                                                                                          
/*0x000*/     LONG32       SectionObjectPointersLock;                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                                          
/*0x008*/     struct _RTL_AVL_TREE SectionBasedRoot;            // 1 elements, 0x8 bytes (sizeof)    
/*0x010*/     struct _EX_PUSH_LOCK SectionBasedLock;            // 7 elements, 0x8 bytes (sizeof)    
/*0x018*/     UINT64       UnusedSegmentPagedPool;                                                   
/*0x020*/     ULONG32      DataSectionProtectionMask;                                                
/*0x024*/     UINT8        _PADDING1_[0x4];                                                          
/*0x028*/     VOID*        HighSectionBase;                                                          
/*0x030*/     struct _MSUBSECTION PhysicalSubsection;           // 7 elements, 0x90 bytes (sizeof)   
/*0x0C0*/     struct _CONTROL_AREA PhysicalControlArea;         // 17 elements, 0x80 bytes (sizeof)  
/*0x140*/     struct _MMPFNLIST PurgingExtentPages;             // 5 elements, 0x28 bytes (sizeof)   
/*0x168*/     struct _MMPFN* DanglingExtentPages;                                                    
/*0x170*/     struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;  // 3 elements, 0x20 bytes (sizeof)   
/*0x190*/     struct _KEVENT DanglingExtentsDeletionComplete;   // 1 elements, 0x18 bytes (sizeof)   
/*0x1A8*/     UINT8        DanglingExtentsWorkerActive;                                              
/*0x1A9*/     UINT8        PurgingExtentsNeedWatchdog;                                               
/*0x1AA*/     UINT8        _PADDING2_[0x6];                                                          
/*0x1B0*/     struct _RTL_AVL_TREE PrototypePtesTree;           // 1 elements, 0x8 bytes (sizeof)    
/*0x1B8*/     LONG32       PrototypePtesTreeSpinLock;                                                
/*0x1BC*/     ULONG32      ImageBias;                                                                
/*0x1C0*/     struct _EX_PUSH_LOCK RelocateBitmapsLock;         // 7 elements, 0x8 bytes (sizeof)    
/*0x1C8*/     struct _RTL_BITMAP ImageBitMap;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x1D8*/     ULONG32      ImageBias64Low;                                                           
/*0x1DC*/     ULONG32      ImageBias64High;                                                          
/*0x1E0*/     struct _RTL_BITMAP ImageBitMap64Low;              // 2 elements, 0x10 bytes (sizeof)   
/*0x1F0*/     struct _RTL_BITMAP ImageBitMap64High;             // 2 elements, 0x10 bytes (sizeof)   
/*0x200*/     struct _RTL_BITMAP ImageBitMapWow64Dll;           // 2 elements, 0x10 bytes (sizeof)   
/*0x210*/     VOID*        ApiSetSection;                                                            
/*0x218*/     VOID*        ApiSetSchema;                                                             
/*0x220*/     UINT64       ApiSetSchemaSize;                                                         
/*0x228*/     ULONG32      LostDataFiles;                                                            
/*0x22C*/     ULONG32      LostDataPages;                                                            
/*0x230*/     ULONG32      ImageFailureReason;                                                       
/*0x234*/     UINT8        _PADDING3_[0x4];                                                          
/*0x238*/     struct _SECTION* CfgBitMapSection32;                                                   
/*0x240*/     struct _CONTROL_AREA* CfgBitMapControlArea32;                                          
/*0x248*/     struct _SECTION* CfgBitMapSection64;                                                   
/*0x250*/     struct _CONTROL_AREA* CfgBitMapControlArea64;                                          
/*0x258*/     struct _RTL_BITMAP_EX KernelCfgBitMap;            // 2 elements, 0x10 bytes (sizeof)   
/*0x268*/     struct _EX_PUSH_LOCK KernelCfgBitMapLock;         // 7 elements, 0x8 bytes (sizeof)    
/*0x270*/     ULONG32      ImageCfgFailure;                                                          
/*0x274*/     UINT8        _PADDING4_[0x4];                                                          
/*0x278*/     struct _MDL* RetpolineStubMdl;                                                         
/*0x280*/     VOID*        RetpolineStubStart;                                                       
/*0x288*/     struct _RTL_BITMAP_EX KernelRetpolineBitMap;      // 2 elements, 0x10 bytes (sizeof)   
/*0x298*/     struct _RTL_RETPOLINE_ROUTINES RetpolineRoutines; // 4 elements, 0x4C bytes (sizeof)   
/*0x2E4*/     UINT8        _PADDING5_[0x4];                                                          
/*0x2E8*/     struct _MMPTE* RetpolineRevertPte;                                                     
/*0x2F0*/     ULONG32      RetpolineStubPages;                                                       
/*0x2F4*/     ULONG32      ImageBreakpointEnabled;                                                   
/*0x2F8*/     ULONG32      ImageBreakpointChecksum;                                                  
/*0x2FC*/     ULONG32      ImageBreakpointSize;                                                      
/*0x300*/     LONG32       ImageValidationFailed;                                                    
/*0x304*/     UINT8        _PADDING6_[0x3C];                                                         
          }MI_SECTION_STATE, *PMI_SECTION_STATE;                                                     
                                                                                                     
          typedef struct _MI_SESSION_DRIVER_UNLOAD                 // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                          
              union                                                // 2 elements, 0x8 bytes (sizeof) 
              {                                                                                      
/*0x000*/         FUNCT_00EF_0EF6_DriverUnload_Function* Function;                                   
/*0x000*/         UINT64       FunctionValue;                                                        
              };                                                                                     
          }MI_SESSION_DRIVER_UNLOAD, *PMI_SESSION_DRIVER_UNLOAD;                                     
                                                                                                     
          typedef struct _MMSESSION                             // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _EX_PUSH_LOCK SystemSpaceViewLock;         // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _EX_PUSH_LOCK* SystemSpaceViewLockPointer;                                    
/*0x010*/     struct _RTL_AVL_TREE ViewRoot;                    // 1 elements, 0x8 bytes (sizeof)  
/*0x018*/     ULONG32      ViewCount;                                                              
/*0x01C*/     ULONG32      BitmapFailures;                                                         
          }MMSESSION, *PMMSESSION;                                                                 
                                                                                                   
           typedef struct _MI_SESSION_STATE                             // 16 elements, 0x1088 bytes (sizeof) 
           {                                                                                                  
/*0x000*/      struct _MMSESSION SystemSession;                         // 5 elements, 0x20 bytes (sizeof)    
/*0x020*/      ULONG32      DetachTimeStamp;                                                                  
/*0x024*/      UINT8        CodePageEdited;                                                                   
/*0x025*/      UINT8        _PADDING0_[0x3];                                                                  
/*0x028*/      ULONG32*     DynamicPoolBitBuffer;                                                             
/*0x030*/      UINT64*      DynamicVaBitBuffer;                                                               
/*0x038*/      UINT64       DynamicVaBitBufferPages;                                                          
/*0x040*/      VOID*        DynamicVaStart;                                                                   
/*0x048*/      VOID*        ImageVaStart;                                                                     
/*0x050*/      struct _MI_HUGE_SYSTEM_VIEW_HEAD SystemViewBuckets[256];                                       
/*0x1050*/     ULONG32*     DynamicPtesBitBuffer;                                                             
/*0x1058*/     struct _EX_PUSH_LOCK IdLock;                             // 7 elements, 0x8 bytes (sizeof)     
/*0x1060*/     struct _EPROCESS* LeaderProcess;                                                               
/*0x1068*/     struct _EX_PUSH_LOCK InitializeLock;                     // 7 elements, 0x8 bytes (sizeof)     
/*0x1070*/     struct _MMWSL_INSTANCE* WorkingSetList;                                                        
/*0x1078*/     VOID*        SessionBase;                                                                      
/*0x1080*/     VOID*        SessionCore;                                                                      
           }MI_SESSION_STATE, *PMI_SESSION_STATE;                                                             
                                                                                                              
          typedef struct _MI_SHUTDOWN_STATE           // 10 elements, 0x78 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        CrashDumpInitialized;                                          
/*0x001*/     UINT8        ConnectedStandbyActive;                                        
/*0x002*/     UINT8        ZeroPageFileAtShutdown;                                        
/*0x003*/     UINT8        _PADDING0_[0x1];                                               
/*0x004*/     ULONG32      SystemShutdown;                                                
/*0x008*/     LONG32       ShutdownFlushInProgress;                                       
/*0x00C*/     ULONG32      MirroringActive;                                               
/*0x010*/     struct _MI_RESUME_WORKITEM ResumeItem;  // 2 elements, 0x38 bytes (sizeof)  
/*0x048*/     struct _ETHREAD* MirrorHoldsPfn;                                            
/*0x050*/     struct _RTL_BITMAP_EX MirrorBitMaps[2];                                     
/*0x070*/     struct _MMPTE* CrashDumpPte;                                                
          }MI_SHUTDOWN_STATE, *PMI_SHUTDOWN_STATE;                                        
                                                                                          
typedef struct _MI_SLAB_ALLOCATOR_ENTRY // 0 elements, 0x0 bytes (sizeof) 
{                                                                         
}MI_SLAB_ALLOCATOR_ENTRY, *PMI_SLAB_ALLOCATOR_ENTRY;                                  
                                                                          
          typedef struct _MI_SPECIAL_POOL         // 4 elements, 0x40 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT64       Lock;                                                     
/*0x008*/     struct _MI_PTE_CHAIN_HEAD Paged;    // 3 elements, 0x18 bytes (sizeof) 
/*0x020*/     struct _MI_PTE_CHAIN_HEAD NonPaged; // 3 elements, 0x18 bytes (sizeof) 
/*0x038*/     UINT64       PagesInUse;                                               
          }MI_SPECIAL_POOL, *PMI_SPECIAL_POOL;                                       
                                                                                     
          typedef struct _MI_STANDBY_STATE                         // 6 elements, 0x90 bytes (sizeof)  
          {                                                                                            
/*0x000*/     UINT64       FirstDecayPage;                                                             
/*0x008*/     UINT8        _PADDING0_[0x8];                                                            
/*0x010*/     union _SLIST_HEADER PfnDecayFreeSList;               // 3 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;                                     
/*0x028*/     struct _KDPC AllocatePfnRepurposeDpc;                // 11 elements, 0x40 bytes (sizeof) 
/*0x068*/     UINT8        _PADDING1_[0x8];                                                            
/*0x070*/     union _SLIST_HEADER PageHeatListSlist;               // 3 elements, 0x10 bytes (sizeof)  
/*0x080*/     LONG32       PageHeatListDisableAllocation;                                              
/*0x084*/     UINT8        _PADDING2_[0xC];                                                            
          }MI_STANDBY_STATE, *PMI_STANDBY_STATE;                                                       
                                                                                                       
          typedef struct _MI_SUB64K_FREE_RANGES  // 7 elements, 0x38 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _RTL_BITMAP_EX BitMap;      // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _LIST_ENTRY ListEntry;      // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     struct _MMVAD_SHORT* Vad;                                             
/*0x028*/     ULONG32      SetBits;                                                 
/*0x02C*/     ULONG32      FullSetBits;                                             
              struct                             // 2 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x030*/         ULONG32      SubListIndex : 2; // 0 BitPosition                   
/*0x030*/         ULONG32      Hint : 30;        // 2 BitPosition                   
              };                                                                    
          }MI_SUB64K_FREE_RANGES, *PMI_SUB64K_FREE_RANGES;                                   
                                                                                    
          typedef struct _MM_SYSTEM_PAGE_COUNTS    // 4 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      SystemCodePage;                                            
/*0x004*/     ULONG32      SystemDriverPage;                                          
/*0x008*/     LONG32       TotalSystemCodePages;                                      
/*0x00C*/     LONG32       TotalSystemDriverPages;                                    
          }MM_SYSTEM_PAGE_COUNTS, *PMM_SYSTEM_PAGE_COUNTS;                                   
                                                                                      
          typedef struct _MI_SYSTEM_IMAGE_STATE             // 15 elements, 0xC0 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _LIST_ENTRY FixupList;                 // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _KMUTANT LoadLock;                     // 5 elements, 0x38 bytes (sizeof)  
/*0x048*/     LONG32       FixupLock;                                                           
/*0x04C*/     UINT8        FirstLoadEver;                                                       
/*0x04D*/     UINT8        LargePageAll;                                                        
/*0x04E*/     UINT8        _PADDING0_[0x2];                                                     
/*0x050*/     UINT64       LastPage;                                                            
/*0x058*/     struct _LIST_ENTRY LargePageList;             // 2 elements, 0x10 bytes (sizeof)  
/*0x068*/     struct _LIST_ENTRY StrongCodeLoadFailureList; // 2 elements, 0x10 bytes (sizeof)  
/*0x078*/     struct _KLDR_DATA_TABLE_ENTRY* BeingDeleted;                                      
/*0x080*/     struct _EX_PUSH_LOCK MappingRangesPushLock;   // 7 elements, 0x8 bytes (sizeof)   
/*0x088*/     struct _MI_DRIVER_VA* MappingRanges[2];                                           
/*0x098*/     UINT64       PageCount;                                                           
/*0x0A0*/     struct _MM_SYSTEM_PAGE_COUNTS PageCounts;     // 4 elements, 0x10 bytes (sizeof)  
/*0x0B0*/     struct _EX_PUSH_LOCK CollidedLock;            // 7 elements, 0x8 bytes (sizeof)   
/*0x0B8*/     struct _RTL_AVL_TREE ImageTree;               // 1 elements, 0x8 bytes (sizeof)   
          }MI_SYSTEM_IMAGE_STATE, *PMI_SYSTEM_IMAGE_STATE;                                      
                                                                                                
          typedef struct _MI_SYSTEM_VA_STATE                          // 22 elements, 0x500 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT64       SystemTablesLock;                                                               
/*0x008*/     UINT64       AvailableSystemCacheVa;                                                         
/*0x010*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks;    // 8 elements, 0x48 bytes (sizeof)   
/*0x058*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes;      // 8 elements, 0x48 bytes (sizeof)   
/*0x0A0*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapDriverImages[2];                                      
/*0x130*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool;       // 8 elements, 0x48 bytes (sizeof)   
/*0x178*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapSpecialPool[2];                                       
/*0x208*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache;     // 8 elements, 0x48 bytes (sizeof)   
/*0x250*/     VOID*        HalPrivateVaStart;                                                              
/*0x258*/     UINT64       HalPrivateVaSize;                                                               
/*0x260*/     ULONG32      SystemVaAssignment[8];                                                          
/*0x280*/     ULONG32      SystemVaAssignmentHint;                                                         
/*0x284*/     ULONG32      TopLevelPteLockBits[32];                                                        
/*0x304*/     LONG32       DeleteKvaLock;                                                                  
/*0x308*/     struct _MI_WSLE* WsleArrays[8];                                                              
/*0x348*/     struct _MI_HYPER_SPACE* PagableHyperSpace;                                                   
/*0x350*/     VOID*        HyperSpaceEnd;                                                                  
/*0x358*/     struct _KEVENT FreeSystemCacheVa;                       // 1 elements, 0x18 bytes (sizeof)   
/*0x370*/     UINT64       SystemVaLock;                                                                   
/*0x378*/     UINT64       SystemCacheViewLock;                                                            
/*0x380*/     struct _MMWSL_INSTANCE SystemWorkingSetList[8];                                              
/*0x4C0*/     UINT64       SelfmapLock[4];                                                                 
/*0x4E0*/     UINT8        _PADDING0_[0x20];                                                               
          }MI_SYSTEM_VA_STATE, *PMI_SYSTEM_VA_STATE;                                                       
                                                                                                           
          typedef struct _NPAGED_LOOKASIDE_LIST // 1 elements, 0x80 bytes (sizeof)  
          {                                                                         
/*0x000*/     struct _GENERAL_LOOKASIDE L;      // 22 elements, 0x80 bytes (sizeof) 
          }NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;                                    
                                                                                    
          typedef struct _MI_SYSTEM_PTE_TYPE            // 13 elements, 0x60 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _RTL_BITMAP_EX Bitmap;             // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _MMPTE* BasePte;                                                       
/*0x018*/     ULONG32      Flags;                                                           
/*0x01C*/     enum _MI_SYSTEM_VA_TYPE VaType;                                               
/*0x020*/     ULONG32*     FailureCount;                                                    
/*0x028*/     ULONG32      PteFailures;                                                     
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                 
              union                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                             
/*0x030*/         UINT64       SpinLock;                                                    
/*0x030*/         struct _EX_PUSH_LOCK* GlobalPushLock;                                     
              };                                                                            
/*0x038*/     UINT64       TotalSystemPtes;                                                 
/*0x040*/     UINT64       Hint;                                                            
/*0x048*/     UINT64       LowestBitEverAllocated;                                          
/*0x050*/     struct _MI_CACHED_PTES* CachedPtes;                                           
/*0x058*/     UINT64       TotalFreeSystemPtes;                                             
          }MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE;                                        
                                                                                            
          typedef struct _MI_ULTRA_VA_CONTEXT  // 6 elements, 0x40 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       Lock;                                                  
/*0x008*/     VOID*        ZeroMapping;                                           
/*0x010*/     UINT64       AllocationHintBit;                                     
/*0x018*/     struct _RTL_BITMAP_EX Bitmap[2];                                    
/*0x038*/     LONG32       ConcurrencyMaximum;                                    
/*0x03C*/     LONG32       ConcurrencyCount;                                      
          }MI_ULTRA_VA_CONTEXT, *PMI_ULTRA_VA_CONTEXT;                                   
                                                                                  
          typedef struct _MI_SYSTEM_PTE_STATE                    // 20 elements, 0x200 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside; // 1 elements, 0x80 bytes (sizeof)   
/*0x080*/     union _SLIST_HEADER DeadPteTrackerSListHead;       // 3 elements, 0x10 bytes (sizeof)   
/*0x090*/     UINT64       PteTrackerLock;                                                            
/*0x098*/     struct _RTL_BITMAP_EX PteTrackingBitmap;           // 2 elements, 0x10 bytes (sizeof)   
/*0x0A8*/     struct _MI_CACHED_PTES* CachedPteHeads;                                                 
/*0x0B0*/     struct _MI_CACHED_PTES* CachedKernelStackPteHeads;                                      
/*0x0B8*/     struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;      // 13 elements, 0x60 bytes (sizeof)  
/*0x118*/     struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;     // 13 elements, 0x60 bytes (sizeof)  
/*0x178*/     ULONG32      StackGrowthFailures;                                                       
/*0x17C*/     UINT8        KernelStackPages;                                                          
/*0x17D*/     UINT8        TrackPtesAborted;                                                          
/*0x17E*/     UINT8        AdjustCounter;                                                             
/*0x17F*/     UINT8        _PADDING0_[0x1];                                                           
/*0x180*/     LONG32       ReservedMappingLock;                                                       
/*0x184*/     UINT8        _PADDING1_[0x4];                                                           
/*0x188*/     struct _RTL_AVL_TREE ReservedMappingTree;          // 1 elements, 0x8 bytes (sizeof)    
/*0x190*/     struct _MMPFN* ReservedMappingPageTablePfns;                                            
/*0x198*/     struct _RTL_AVL_TREE OutswappedKernelStackRoot;    // 1 elements, 0x8 bytes (sizeof)    
/*0x1A0*/     LONG32       OutswappedKernelStackLock;                                                 
/*0x1A4*/     UINT8        _PADDING2_[0x4];                                                           
/*0x1A8*/     struct _MI_ULTRA_VA_CONTEXT UltraSpaceContext;     // 6 elements, 0x40 bytes (sizeof)   
/*0x1E8*/     ULONG32      NumberOfUltraMdlMaps;                                                      
/*0x1EC*/     UINT8        _PADDING3_[0x4];                                                           
/*0x1F0*/     struct _MI_ULTRA_MDL_NODE* UltraMdlNodeMappings;                                        
/*0x1F8*/     UINT8        _PADDING4_[0x8];                                                           
          }MI_SYSTEM_PTE_STATE, *PMI_SYSTEM_PTE_STATE;                                                
                                                                                                      
          typedef struct _MI_SYSTEM_TRIM_STATE        // 4 elements, 0x40 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       ExpansionLock;                                                
/*0x008*/     LONG32       TrimInProgressCount;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                              
/*0x010*/     struct _KEVENT PeriodicWorkingSetEvent; // 1 elements, 0x18 bytes (sizeof) 
/*0x028*/     ULONG32      TrimAllPageFaultCount[3];                                     
/*0x034*/     UINT8        _PADDING1_[0xC];                                              
          }MI_SYSTEM_TRIM_STATE, *PMI_SYSTEM_TRIM_STATE;                                   
                                                                                         
          typedef struct _MM_PAGED_POOL_INFO                // 6 elements, 0x38 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _EX_PUSH_LOCK Lock;                    // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _RTL_BITMAP_EX PagedPoolAllocationMap; // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _MMPTE* FirstPteForPagedPool;                                             
/*0x020*/     UINT64       MaximumSize;                                                        
/*0x028*/     UINT64       PagedPoolHint;                                                      
/*0x030*/     UINT64       AllocatedPagedPool;                                                 
          }MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO;                                           
                                                                                               
          typedef struct _MMSUPPORT_AGGREGATION // 4 elements, 0x20 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      PageFaultCount;                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                        
/*0x008*/     UINT64       WorkingSetSize;                                         
/*0x010*/     UINT64       WorkingSetLeafSize;                                     
/*0x018*/     UINT64       PeakWorkingSetSize;                                     
          }MMSUPPORT_AGGREGATION, *PMMSUPPORT_AGGREGATION;                                   
                                                                                   
          typedef struct _SYSPTES_HEADER        // 4 elements, 0x118 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _LIST_ENTRY ListHead[16];                                      
/*0x100*/     UINT64       Count;                                                   
/*0x108*/     UINT64       NumberOfEntries;                                         
/*0x110*/     UINT64       NumberOfEntriesPeak;                                     
          }SYSPTES_HEADER, *PSYSPTES_HEADER;                                        
                                                                                    
          typedef struct _MI_SYSTEM_VA_ASSIGNMENT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     VOID*        BaseAddress;                                              
/*0x008*/     UINT64       NumberOfBytes;                                            
          }MI_SYSTEM_VA_ASSIGNMENT, *PMI_SYSTEM_VA_ASSIGNMENT;                                   
                                                                                     
          typedef struct _MI_VISIBLE_STATE                         // 26 elements, 0xC40 bytes (sizeof) 
          {                                                                                             
/*0x000*/     struct _MI_SPECIAL_POOL SpecialPool;                 // 4 elements, 0x40 bytes (sizeof)   
/*0x040*/     struct _LIST_ENTRY SessionWsList;                    // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/     struct _RTL_BITMAP* SessionIdBitmap;                                                      
/*0x058*/     struct _MM_PAGED_POOL_INFO PagedPoolInfo;            // 6 elements, 0x38 bytes (sizeof)   
/*0x090*/     UINT64       MaximumNonPagedPoolInPages;                                                  
/*0x098*/     UINT64       SizeOfPagedPoolInPages;                                                      
/*0x0A0*/     struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;            // 13 elements, 0x60 bytes (sizeof)  
/*0x100*/     UINT64       NonPagedPoolCommit;                                                          
/*0x108*/     UINT64       SmallNonPagedPtesCommit;                                                     
/*0x110*/     UINT64       BootCommit;                                                                  
/*0x118*/     UINT64       MdlPagesAllocated;                                                           
/*0x120*/     UINT64       SystemPageTableCommit;                                                       
/*0x128*/     UINT64       SpecialPagesInUse;                                                           
/*0x130*/     UINT64       ProcessCommit;                                                               
/*0x138*/     LONG32       DriverCommit;                                                                
/*0x13C*/     UINT8        _PADDING0_[0x4];                                                             
/*0x140*/     UINT64       PfnDatabaseCommit;                                                           
/*0x148*/     UINT8        _PADDING1_[0x38];                                                            
/*0x180*/     struct _MMSUPPORT_FULL SystemWs[6];                                                       
/*0x7E0*/     UINT8        _PADDING2_[0x20];                                                            
/*0x800*/     struct _MMSUPPORT_SHARED SystemCacheShared;          // 11 elements, 0x50 bytes (sizeof)  
/*0x850*/     UINT8        _PADDING3_[0x30];                                                            
/*0x880*/     struct _MMSUPPORT_AGGREGATION AggregateSystemWs[1];                                       
/*0x8A0*/     ULONG32      MapCacheFailures;                                                            
/*0x8A4*/     UINT8        _PADDING4_[0x4];                                                             
/*0x8A8*/     UINT64       PagefileHashPages;                                                           
/*0x8B0*/     struct _SYSPTES_HEADER PteHeader;                    // 4 elements, 0x118 bytes (sizeof)  
/*0x9C8*/     struct _MI_SPECIAL_POOL* SessionSpecialPool;                                              
/*0x9D0*/     UINT64       SystemVaTypeCount[16];                                                       
/*0xA50*/     UINT8        SystemVaType[256];                                                           
/*0xB50*/     struct _MI_SYSTEM_VA_ASSIGNMENT SystemVaRegions[14];                                      
/*0xC30*/     UINT8        _PADDING5_[0x10];                                                            
          }MI_VISIBLE_STATE, *PMI_VISIBLE_STATE;                                                        
                                                                                                        
           typedef struct _MI_SYSTEM_INFORMATION           // 27 elements, 0x3180 bytes (sizeof) 
           {                                                                                     
/*0x000*/      struct _MI_POOL_STATE Pools;                // 22 elements, 0x148 bytes (sizeof)  
/*0x148*/      UINT8        _PADDING0_[0x38];                                                    
/*0x180*/      struct _MI_SECTION_STATE Sections;          // 47 elements, 0x340 bytes (sizeof)  
/*0x4C0*/      struct _MI_SYSTEM_IMAGE_STATE SystemImages; // 15 elements, 0xC0 bytes (sizeof)   
/*0x580*/      struct _MI_SESSION_STATE Sessions;          // 16 elements, 0x1088 bytes (sizeof) 
/*0x1608*/     struct _MI_PROCESS_STATE Processes;         // 8 elements, 0x48 bytes (sizeof)    
/*0x1650*/     UINT8        _PADDING1_[0x30];                                                    
/*0x1680*/     struct _MI_HARDWARE_STATE Hardware;         // 32 elements, 0x180 bytes (sizeof)  
/*0x1800*/     struct _MI_SYSTEM_VA_STATE SystemVa;        // 22 elements, 0x500 bytes (sizeof)  
/*0x1D00*/     struct _MI_COMBINE_STATE PageCombines;      // 4 elements, 0x18 bytes (sizeof)    
/*0x1D18*/     struct _MI_PAGELIST_STATE PageLists;        // 5 elements, 0x28 bytes (sizeof)    
/*0x1D40*/     struct _MI_PARTITION_STATE Partitions;      // 11 elements, 0x60 bytes (sizeof)   
/*0x1DA0*/     struct _MI_SHUTDOWN_STATE Shutdowns;        // 10 elements, 0x78 bytes (sizeof)   
/*0x1E18*/     struct _MI_ERROR_STATE Errors;              // 19 elements, 0xC8 bytes (sizeof)   
/*0x1EE0*/     UINT8        _PADDING2_[0x20];                                                    
/*0x1F00*/     struct _MI_ACCESS_LOG_STATE AccessLog;      // 5 elements, 0x80 bytes (sizeof)    
/*0x1F80*/     struct _MI_DEBUGGER_STATE Debugger;         // 6 elements, 0x118 bytes (sizeof)   
/*0x2098*/     UINT8        _PADDING3_[0x8];                                                     
/*0x20A0*/     struct _MI_STANDBY_STATE Standby;           // 6 elements, 0x90 bytes (sizeof)    
/*0x2130*/     UINT8        _PADDING4_[0x10];                                                    
/*0x2140*/     struct _MI_SYSTEM_PTE_STATE SystemPtes;     // 20 elements, 0x200 bytes (sizeof)  
/*0x2340*/     struct _MI_IO_PAGE_STATE IoPages;           // 6 elements, 0x68 bytes (sizeof)    
/*0x23A8*/     UINT8        _PADDING5_[0x8];                                                     
/*0x23B0*/     struct _MI_PAGING_IO_STATE PagingIo;        // 9 elements, 0x50 bytes (sizeof)    
/*0x2400*/     struct _MI_COMMON_PAGE_STATE CommonPages;   // 15 elements, 0xA8 bytes (sizeof)   
/*0x24A8*/     UINT8        _PADDING6_[0x18];                                                    
/*0x24C0*/     struct _MI_SYSTEM_TRIM_STATE Trims;         // 4 elements, 0x40 bytes (sizeof)    
/*0x2500*/     UINT64       Cookie;                                                              
/*0x2508*/     VOID**       BootRegistryRuns;                                                    
/*0x2510*/     LONG32       ZeroingDisabled;                                                     
/*0x2514*/     UINT8        FullyInitialized;                                                    
/*0x2515*/     UINT8        SafeBooted;                                                          
/*0x2516*/     UINT8        _PADDING7_[0x2];                                                     
/*0x2518*/     struct _TlgProvider_t* TraceLogging;                                              
/*0x2520*/     UINT8        _PADDING8_[0x20];                                                    
/*0x2540*/     struct _MI_VISIBLE_STATE Vs;                // 26 elements, 0xC40 bytes (sizeof)  
           }MI_SYSTEM_INFORMATION, *PMI_SYSTEM_INFORMATION;                                      
                                                                                                 
          typedef struct _MI_SYSTEM_NODE_INFORMATION               // 18 elements, 0x190 bytes (sizeof) 
          {                                                                                             
/*0x000*/     union _SLIST_HEADER PagedPoolSListHead;              // 3 elements, 0x10 bytes (sizeof)   
/*0x010*/     union _SLIST_HEADER NonPagedPoolSListHead[3];                                             
/*0x040*/     union _SLIST_HEADER NonPagedPoolSListHeadNx[3];                                           
/*0x070*/     struct _CACHED_KSTACK_LIST CachedKernelStacks[2];                                         
/*0x0B0*/     UINT64       NonPagedBitMapMaximum;                                                       
/*0x0B8*/     struct _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool; // 8 elements, 0x48 bytes (sizeof)   
/*0x100*/     UINT64       NonPagedPoolLowestPage;                                                      
/*0x108*/     UINT64       NonPagedPoolHighestPage;                                                     
/*0x110*/     UINT64       AllocatedNonPagedPool;                                                       
/*0x118*/     UINT64       PartialLargePoolRegions;                                                     
/*0x120*/     UINT64       PagesInPartialLargePoolRegions;                                              
/*0x128*/     UINT64       CachedNonPagedPoolCount;                                                     
/*0x130*/     UINT64       NonPagedPoolSpinLock;                                                        
/*0x138*/     struct _MMPFN* CachedNonPagedPool;                                                        
/*0x140*/     VOID*        NonPagedPoolFirstVa;                                                         
/*0x148*/     VOID*        NonPagedPoolLastVa;                                                          
/*0x150*/     struct _RTL_BITMAP_EX NonPagedBitMap[3];                                                  
/*0x180*/     UINT64       NonPagedHint[2];                                                             
          }MI_SYSTEM_NODE_INFORMATION, *PMI_SYSTEM_NODE_INFORMATION;                                     
                                                                                                        
          typedef struct _MI_TRIAGE_DUMP_DATA                 // 10 elements, 0x38 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       BadPageCount;                                                          
/*0x008*/     LONG32       BadPagesDetected;                                                      
/*0x00C*/     LONG32       ZeroedPageSingleBitErrorsDetected;                                     
/*0x010*/     LONG32       ScrubPasses;                                                           
/*0x014*/     LONG32       ScrubBadPagesFound;                                                    
/*0x018*/     ULONG32      PageHashErrors;                                                        
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                       
/*0x020*/     UINT64       FeatureBits;                                                           
/*0x028*/     ULONG32      TimeZoneId;                                                            
/*0x02C*/     union _MI_FLAGS Flags;                          // 26 elements, 0x4 bytes (sizeof)  
/*0x030*/     VOID*        VsmConnection;                                                         
          }MI_TRIAGE_DUMP_DATA, *PMI_TRIAGE_DUMP_DATA;                                            
                                                                                                  
          typedef struct _MI_ULTRA_MDL_NODE             // 1 elements, 0x200 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _MI_ALIGNED_SLIST UltraMdlMaps[8];                                     
          }MI_ULTRA_MDL_NODE, *PMI_ULTRA_MDL_NODE;                                          
                                                                                            
          typedef struct _MMSECURE_FLAGS            // 10 elements, 0x4 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      ReadOnly : 1;            // 0 BitPosition                   
/*0x000*/     ULONG32      ReadWrite : 1;           // 1 BitPosition                   
/*0x000*/     ULONG32      SecNoChange : 1;         // 2 BitPosition                   
/*0x000*/     ULONG32      NoDelete : 1;            // 3 BitPosition                   
/*0x000*/     ULONG32      RequiresPteReversal : 1; // 4 BitPosition                   
/*0x000*/     ULONG32      ExclusiveSecure : 1;     // 5 BitPosition                   
/*0x000*/     ULONG32      UserModeOnly : 1;        // 6 BitPosition                   
/*0x000*/     ULONG32      NoInherit : 1;           // 7 BitPosition                   
/*0x000*/     ULONG32      CheckVad : 1;            // 8 BitPosition                   
/*0x000*/     ULONG32      Spare : 3;               // 9 BitPosition                   
          }MMSECURE_FLAGS, *PMMSECURE_FLAGS;                                           
                                                                                       
          typedef struct _MMADDRESS_LIST        // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
              union                             // 3 elements, 0x8 bytes (sizeof)  
              {                                                                    
/*0x000*/         struct _MMSECURE_FLAGS Flags; // 10 elements, 0x4 bytes (sizeof) 
/*0x000*/         ULONG32      FlagsLong;                                          
/*0x000*/         VOID*        StartVa;                                            
              }u1;                                                                 
/*0x008*/     VOID*        EndVa;                                                  
          }MMADDRESS_LIST, *PMMADDRESS_LIST;                                       
                                                                                   
          typedef struct _MI_VAD_EVENT_BLOCK                 // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _MI_VAD_EVENT_BLOCK* Next;                                                  
              union                                          // 8 elements, 0x38 bytes (sizeof)  
              {                                                                                  
/*0x008*/         struct _KGATE Gate;                        // 1 elements, 0x18 bytes (sizeof)  
/*0x008*/         struct _MMADDRESS_LIST SecureInfo;         // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _RTL_BITMAP_EX BitMap;              // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _MMINPAGE_SUPPORT* InPageSupport;                                       
/*0x008*/         struct _MI_LARGEPAGE_IMAGE_INFO LargePage; // 3 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _ETHREAD* CreatingThread;                                               
/*0x008*/         struct _MI_SUB64K_FREE_RANGES PebTeb;      // 7 elements, 0x38 bytes (sizeof)  
/*0x008*/         struct _MMVAD_SHORT* PlaceholderVad;                                           
              };                                                                                 
/*0x040*/     ULONG32      WaitReason;                                                           
/*0x044*/     UINT8        _PADDING0_[0x4];                                                      
          }MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK;                                             
                                                                                                 
          typedef struct _MI_VAD_SEQUENTIAL_INFO // 2 elements, 0x8 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT64       Length : 12;          // 0 BitPosition                  
/*0x000*/     UINT64       Vpn : 52;             // 12 BitPosition                 
          }MI_VAD_SEQUENTIAL_INFO, *PMI_VAD_SEQUENTIAL_INFO;                                  
                                                                                   
          typedef struct _MI_VERIFIER_POOL_HEADER       // 1 elements, 0x8 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _VI_POOL_ENTRY* VerifierPoolEntry;                                   
          }MI_VERIFIER_POOL_HEADER, *PMI_VERIFIER_POOL_HEADER;                                  
                                                                                          
          typedef struct _MI_WSLE                  // 1 elements, 0x1 bytes (sizeof) 
          {                                                                          
              union                                // 2 elements, 0x1 bytes (sizeof) 
              {                                                                      
                  struct                           // 3 elements, 0x1 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT8        Age : 4;        // 0 BitPosition                  
/*0x000*/             UINT8        Protection : 3; // 4 BitPosition                  
/*0x000*/             UINT8        Reserved : 1;   // 7 BitPosition                  
                  }e1;                                                               
                  struct                           // 1 elements, 0x1 bytes (sizeof) 
                  {                                                                  
/*0x000*/             UINT8        EntireWsle;                                       
                  }e2;                                                               
              }u1;                                                                   
          }MI_WSLE, *PMI_WSLE;                                                       
                                                                                     
typedef struct _MI_ZERO_THREAD_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                        
}MI_ZERO_THREAD_CONTEXT, *PMI_ZERO_THREAD_CONTEXT;                                  
                                                                         
          typedef struct _MIPFNBLINK                            // 14 elements, 0x8 bytes (sizeof) 
          {                                                                                        
              union                                             // 4 elements, 0x8 bytes (sizeof)  
              {                                                                                    
                  struct                                        // 9 elements, 0x8 bytes (sizeof)  
                  {                                                                                
/*0x000*/             UINT64       Blink : 36;                  // 0 BitPosition                   
/*0x000*/             UINT64       NodeBlinkHigh : 20;          // 36 BitPosition                  
/*0x000*/             UINT64       TbFlushStamp : 4;            // 56 BitPosition                  
/*0x000*/             UINT64       Unused : 2;                  // 60 BitPosition                  
/*0x000*/             UINT64       PageBlinkDeleteBit : 1;      // 62 BitPosition                  
/*0x000*/             UINT64       PageBlinkLockBit : 1;        // 63 BitPosition                  
/*0x000*/             UINT64       ShareCount : 62;             // 0 BitPosition                   
/*0x000*/             UINT64       PageShareCountDeleteBit : 1; // 62 BitPosition                  
/*0x000*/             UINT64       PageShareCountLockBit : 1;   // 63 BitPosition                  
                  };                                                                               
/*0x000*/         UINT64       EntireField;                                                        
/*0x000*/         INT64        Lock;                                                               
                  struct                                        // 3 elements, 0x8 bytes (sizeof)  
                  {                                                                                
/*0x000*/             UINT64       LockNotUsed : 62;            // 0 BitPosition                   
/*0x000*/             UINT64       DeleteBit : 1;               // 62 BitPosition                  
/*0x000*/             UINT64       LockBit : 1;                 // 63 BitPosition                  
                  };                                                                               
              };                                                                                   
          }MIPFNBLINK, *PMIPFNBLINK;                                                               
                                                                                                   
          typedef struct _MM_DRIVER_VERIFIER_DATA              // 35 elements, 0xA8 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Level;                                                                  
/*0x004*/     ULONG32      RaiseIrqls;                                                             
/*0x008*/     ULONG32      AcquireSpinLocks;                                                       
/*0x00C*/     ULONG32      SynchronizeExecutions;                                                  
/*0x010*/     ULONG32      AllocationsAttempted;                                                   
/*0x014*/     ULONG32      AllocationsSucceeded;                                                   
/*0x018*/     ULONG32      AllocationsSucceededSpecialPool;                                        
/*0x01C*/     ULONG32      AllocationsWithNoTag;                                                   
/*0x020*/     ULONG32      TrimRequests;                                                           
/*0x024*/     ULONG32      Trims;                                                                  
/*0x028*/     ULONG32      AllocationsFailed;                                                      
/*0x02C*/     ULONG32      AllocationsFailedDeliberately;                                          
/*0x030*/     ULONG32      Loads;                                                                  
/*0x034*/     ULONG32      Unloads;                                                                
/*0x038*/     ULONG32      UnTrackedPool;                                                          
/*0x03C*/     ULONG32      UserTrims;                                                              
/*0x040*/     ULONG32      CurrentPagedPoolAllocations;                                            
/*0x044*/     ULONG32      CurrentNonPagedPoolAllocations;                                         
/*0x048*/     ULONG32      PeakPagedPoolAllocations;                                               
/*0x04C*/     ULONG32      PeakNonPagedPoolAllocations;                                            
/*0x050*/     UINT64       PagedBytes;                                                             
/*0x058*/     UINT64       NonPagedBytes;                                                          
/*0x060*/     UINT64       PeakPagedBytes;                                                         
/*0x068*/     UINT64       PeakNonPagedBytes;                                                      
/*0x070*/     ULONG32      BurstAllocationsFailedDeliberately;                                     
/*0x074*/     ULONG32      SessionTrims;                                                           
/*0x078*/     ULONG32      OptionChanges;                                                          
/*0x07C*/     ULONG32      VerifyMode;                                                             
/*0x080*/     struct _UNICODE_STRING PreviousBucketName;       // 3 elements, 0x10 bytes (sizeof)  
/*0x090*/     ULONG32      ExecutePoolTypes;                                                       
/*0x094*/     ULONG32      ExecutePageProtections;                                                 
/*0x098*/     ULONG32      ExecutePageMappings;                                                    
/*0x09C*/     ULONG32      ExecuteWriteSections;                                                   
/*0x0A0*/     ULONG32      SectionAlignmentFailures;                                               
/*0x0A4*/     ULONG32      IATInExecutableSection;                                                 
          }MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA;                                     
                                                                                                   
          typedef union _MM_PAGE_ACCESS_INFO_FLAGS   // 2 elements, 0x4 bytes (sizeof) 
          {                                                                            
              struct                                 // 4 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Image : 1;            // 10 BitPosition                 
/*0x000*/         ULONG32      Spare0 : 1;           // 11 BitPosition                 
              }File;                                                                   
              struct                                 // 3 elements, 0x4 bytes (sizeof) 
              {                                                                        
/*0x000*/         ULONG32      FilePointerIndex : 9; // 0 BitPosition                  
/*0x000*/         ULONG32      HardFault : 1;        // 9 BitPosition                  
/*0x000*/         ULONG32      Spare1 : 2;           // 10 BitPosition                 
              }Private;                                                                
          }MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS;                                  
                                                                                       
          typedef struct _MM_PAGE_ACCESS_INFO             // 4 elements, 0x8 bytes (sizeof) 
          {                                                                                 
              union                                       // 4 elements, 0x8 bytes (sizeof) 
              {                                                                             
/*0x000*/         union _MM_PAGE_ACCESS_INFO_FLAGS Flags; // 2 elements, 0x4 bytes (sizeof) 
/*0x000*/         UINT64       FileOffset;                                                  
/*0x000*/         VOID*        VirtualAddress;                                              
/*0x000*/         VOID*        PointerProtoPte;                                             
              };                                                                            
          }MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO;                                      
                                                                                            
          typedef struct _MM_PAGE_ACCESS_INFO_HEADER          // 14 elements, 0x48 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _SINGLE_LIST_ENTRY Link;                 // 1 elements, 0x8 bytes (sizeof)   
/*0x008*/     enum _MM_PAGE_ACCESS_TYPE Type;                                                     
              union                                           // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                   
/*0x00C*/         ULONG32      EmptySequenceNumber;                                               
/*0x00C*/         ULONG32      CurrentFileIndex;                                                  
              };                                                                                  
/*0x010*/     UINT64       CreateTime;                                                            
              union                                           // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                   
/*0x018*/         UINT64       EmptyTime;                                                         
/*0x018*/         struct _MM_PAGE_ACCESS_INFO* TempEntry;                                         
              };                                                                                  
              union                                           // 2 elements, 0x24 bytes (sizeof)  
              {                                                                                   
                  struct                                      // 5 elements, 0x24 bytes (sizeof)  
                  {                                                                               
/*0x020*/             struct _MM_PAGE_ACCESS_INFO* PageEntry;                                     
/*0x028*/             UINT64*      FileEntry;                                                     
/*0x030*/             UINT64*      FirstFileEntry;                                                
/*0x038*/             struct _EPROCESS* Process;                                                  
/*0x040*/             ULONG32      SessionId;                                                     
                  };                                                                              
                  struct                                      // 2 elements, 0x24 bytes (sizeof)  
                  {                                                                               
/*0x020*/             UINT64*      PageFrameEntry;                                                
/*0x028*/             UINT64*      LastPageFrameEntry;                                            
/*0x030*/             UINT8        _PADDING0_[0x14];                                              
                  };                                                                              
              };                                                                                  
          }MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER;                                    
                                                                                                  
          typedef struct _MM_SESSION_SPACE_FLAGS       // 11 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      Initialized : 1;            // 0 BitPosition                   
/*0x000*/     ULONG32      DeletePending : 1;          // 1 BitPosition                   
/*0x000*/     ULONG32      PoolInitialized : 1;        // 2 BitPosition                   
/*0x000*/     ULONG32      DynamicVaInitialized : 1;   // 3 BitPosition                   
/*0x000*/     ULONG32      WsInitialized : 1;          // 4 BitPosition                   
/*0x000*/     ULONG32      PoolDestroyed : 1;          // 5 BitPosition                   
/*0x000*/     ULONG32      ObjectInitialized : 1;      // 6 BitPosition                   
/*0x000*/     ULONG32      LeakedPoolDeliberately : 1; // 7 BitPosition                   
/*0x000*/     ULONG32      SessionHeapInitialized : 1; // 8 BitPosition                   
/*0x000*/     ULONG32      SessionHeapDestroyed : 1;   // 9 BitPosition                   
/*0x000*/     ULONG32      Filler : 22;                // 10 BitPosition                  
          }MM_SESSION_SPACE_FLAGS, *PMM_SESSION_SPACE_FLAGS;                                   
                                                                                          
          typedef struct _POOL_DESCRIPTOR              // 17 elements, 0x1140 bytes (sizeof) 
          {                                                                                  
/*0x000*/     enum _POOL_TYPE PoolType;                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                  
              union                                    // 2 elements, 0x38 bytes (sizeof)    
              {                                                                              
/*0x008*/         struct _FAST_MUTEX PagedLock;        // 5 elements, 0x38 bytes (sizeof)    
/*0x008*/         UINT64       NonPagedLock;                                                 
              };                                                                             
/*0x040*/     LONG32       RunningAllocs;                                                    
/*0x044*/     UINT8        _PADDING1_[0x4];                                                  
/*0x048*/     UINT64       PagesAllocated;                                                   
/*0x050*/     UINT64       BigPagesAllocated;                                                
/*0x058*/     UINT64       BytesAllocated;                                                   
/*0x060*/     UINT8        _PADDING2_[0x20];                                                 
/*0x080*/     LONG32       RunningDeallocs;                                                  
/*0x084*/     UINT8        _PADDING3_[0x4];                                                  
/*0x088*/     UINT64       PagesDeallocated;                                                 
/*0x090*/     UINT64       BigPagesDeallocated;                                              
/*0x098*/     UINT64       BytesDeallocated;                                                 
/*0x0A0*/     UINT8        _PADDING4_[0x20];                                                 
/*0x0C0*/     ULONG32      PoolIndex;                                                        
/*0x0C4*/     enum _POOL_TYPE PoolTypeCopy;                                                  
/*0x0C8*/     UINT8        _PADDING5_[0x38];                                                 
/*0x100*/     struct _SINGLE_LIST_ENTRY PendingFrees;  // 1 elements, 0x8 bytes (sizeof)     
/*0x108*/     LONG32       ThreadsProcessingDeferrals;                                       
/*0x10C*/     LONG32       PendingFreeDepth;                                                 
/*0x110*/     UINT8        _PADDING6_[0x30];                                                 
/*0x140*/     struct _LIST_ENTRY ListHeads[256];                                             
          }POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR;                                               
                                                                                             
           typedef struct _MM_SESSION_SPACE                      // 50 elements, 0x5000 bytes (sizeof) 
           {                                                                                           
/*0x000*/      LONG32       ReferenceCount;                                                            
               union                                             // 2 elements, 0x4 bytes (sizeof)     
               {                                                                                       
/*0x004*/          ULONG32      LongFlags;                                                             
/*0x004*/          struct _MM_SESSION_SPACE_FLAGS Flags;         // 11 elements, 0x4 bytes (sizeof)    
               }u;                                                                                     
/*0x008*/      ULONG32      SessionId;                                                                 
/*0x00C*/      LONG32       ProcessReferenceToSession;                                                 
/*0x010*/      struct _LIST_ENTRY ProcessList;                   // 2 elements, 0x10 bytes (sizeof)    
/*0x020*/      UINT64       SessionPageDirectoryIndex;                                                 
/*0x028*/      UINT64       NonPagablePages;                                                           
/*0x030*/      UINT64       CommittedPages;                                                            
/*0x038*/      VOID*        PagedPoolStart;                                                            
/*0x040*/      VOID*        PagedPoolEnd;                                                              
/*0x048*/      VOID*        SessionObject;                                                             
/*0x050*/      VOID*        SessionObjectHandle;                                                       
/*0x058*/      ULONG32      SessionPoolAllocationFailures[4];                                          
/*0x068*/      struct _RTL_AVL_TREE ImageTree;                   // 1 elements, 0x8 bytes (sizeof)     
/*0x070*/      ULONG32      LocaleId;                                                                  
/*0x074*/      ULONG32      AttachCount;                                                               
/*0x078*/      struct _KGATE AttachGate;                         // 1 elements, 0x18 bytes (sizeof)    
/*0x090*/      struct _LIST_ENTRY WsListEntry;                   // 2 elements, 0x10 bytes (sizeof)    
/*0x0A0*/      struct _MM_PAGED_POOL_INFO PagedPoolInfo;         // 6 elements, 0x38 bytes (sizeof)    
/*0x0D8*/      UINT8        _PADDING0_[0x28];                                                          
/*0x100*/      struct _GENERAL_LOOKASIDE Lookaside[21];                                                
/*0xB80*/      struct _MMSESSION Session;                        // 5 elements, 0x20 bytes (sizeof)    
/*0xBA0*/      UINT8        _PADDING1_[0x20];                                                          
/*0xBC0*/      struct _MMSUPPORT_FULL Vm;                        // 2 elements, 0x110 bytes (sizeof)   
/*0xCD0*/      UINT8        _PADDING2_[0x30];                                                          
/*0xD00*/      struct _MMWSL_INSTANCE WorkingSetList;            // 6 elements, 0x28 bytes (sizeof)    
/*0xD28*/      UINT8        _PADDING3_[0x18];                                                          
/*0xD40*/      struct _MMSUPPORT_AGGREGATION AggregateSessionWs; // 4 elements, 0x20 bytes (sizeof)    
/*0xD60*/      VOID*        HeapState;                                                                 
/*0xD68*/      UINT8        _PADDING4_[0x18];                                                          
/*0xD80*/      struct _POOL_DESCRIPTOR PagedPool;                // 17 elements, 0x1140 bytes (sizeof) 
/*0x1EC0*/     struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;    // 2 elements, 0x8 bytes (sizeof)     
/*0x1EC8*/     ULONG32      TopLevelPteLockBits[32];                                                   
/*0x1F48*/     struct _MMPTE PageDirectory;                      // 1 elements, 0x8 bytes (sizeof)     
/*0x1F50*/     struct _EX_PUSH_LOCK SessionVaLock;               // 7 elements, 0x8 bytes (sizeof)     
/*0x1F58*/     struct _RTL_BITMAP_EX DynamicVaBitMap;            // 2 elements, 0x10 bytes (sizeof)    
/*0x1F68*/     UINT64       DynamicVaHint;                                                             
/*0x1F70*/     struct _MI_SPECIAL_POOL SpecialPool;              // 4 elements, 0x40 bytes (sizeof)    
/*0x1FB0*/     struct _EX_PUSH_LOCK SessionPteLock;              // 7 elements, 0x8 bytes (sizeof)     
/*0x1FB8*/     LONG32       PoolBigEntriesInUse;                                                       
/*0x1FBC*/     ULONG32      PagedPoolPdeCount;                                                         
/*0x1FC0*/     ULONG32      SpecialPoolPdeCount;                                                       
/*0x1FC4*/     ULONG32      DynamicSessionPdeCount;                                                    
/*0x1FC8*/     struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;         // 13 elements, 0x60 bytes (sizeof)   
/*0x2028*/     VOID*        PoolTrackTableExpansion;                                                   
/*0x2030*/     UINT64       PoolTrackTableExpansionSize;                                               
/*0x2038*/     VOID*        PoolTrackBigPages;                                                         
/*0x2040*/     UINT64       PoolTrackBigPagesSize;                                                     
/*0x2048*/     struct _RTL_AVL_TREE PermittedFaultsTree;         // 1 elements, 0x8 bytes (sizeof)     
/*0x2050*/     enum _IO_SESSION_STATE IoState;                                                         
/*0x2054*/     ULONG32      IoStateSequence;                                                           
/*0x2058*/     struct _KEVENT IoNotificationEvent;               // 1 elements, 0x18 bytes (sizeof)    
/*0x2070*/     struct _EJOB* ServerSilo;                                                               
/*0x2078*/     UINT64       CreateTime;                                                                
/*0x2080*/     UINT8        _PADDING5_[0xF80];                                                         
/*0x3000*/     UINT8        PoolTags[8192];                                                            
           }MM_SESSION_SPACE, *PMM_SESSION_SPACE;                                                      
                                                                                                       
          typedef union _MM_STORE_KEY       // 3 elements, 0x8 bytes (sizeof) 
          {                                                                   
              struct                        // 2 elements, 0x8 bytes (sizeof) 
              {                                                               
/*0x000*/         UINT64       KeyLow : 60; // 0 BitPosition                  
/*0x000*/         UINT64       KeyHigh : 4; // 60 BitPosition                 
              };                                                              
/*0x000*/     UINT64       EntireKey;                                         
          }MM_STORE_KEY, *PMM_STORE_KEY;                                      
                                                                              
          typedef struct _MMCLONE_BLOCK              // 5 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _MMPTE ProtoPte;                // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       CrossPartitionReferences;                                    
              union                                  // 2 elements, 0x8 bytes (sizeof)  
              {                                                                         
/*0x010*/         UINT64       CloneCommitCount;                                        
/*0x010*/         struct _MI_CLONE_BLOCK_FLAGS u1;   // 2 elements, 0x8 bytes (sizeof)  
              };                                                                        
/*0x018*/     UINT64       CloneRefCount;                                               
          }MMCLONE_BLOCK, *PMMCLONE_BLOCK;                                              
                                                                                        
          typedef struct _MMCLONE_DESCRIPTOR             // 10 elements, 0x70 bytes (sizeof) 
          {                                                                                  
              union                                      // 2 elements, 0x18 bytes (sizeof)  
              {                                                                              
/*0x000*/         struct _RTL_BALANCED_NODE CloneNode;   // 6 elements, 0x18 bytes (sizeof)  
/*0x000*/         struct _MMCLONE_DESCRIPTOR* Next;                                          
              };                                                                             
/*0x018*/     struct _MMCLONE_BLOCK* StartingCloneBlock;                                     
/*0x020*/     struct _MMCLONE_BLOCK* EndingCloneBlock;                                       
/*0x028*/     UINT64       NumberOfPtes;                                                     
/*0x030*/     UINT64       NumberOfReferences;                                               
/*0x038*/     struct _MMCLONE_HEADER* CloneHeader;                                           
/*0x040*/     UINT64       NonPagedPoolQuotaCharge;                                          
/*0x048*/     UINT8        _PADDING0_[0x8];                                                  
/*0x050*/     struct _SLIST_ENTRY DeleteList;            // 1 elements, 0x10 bytes (sizeof)  
/*0x060*/     UINT64       NestingLevel;                                                     
/*0x068*/     UINT8        _PADDING1_[0x8];                                                  
          }MMCLONE_DESCRIPTOR, *PMMCLONE_DESCRIPTOR;                                         
                                                                                             
          typedef struct _MMCLONE_HEADER              // 4 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       NumberOfPtes;                                                 
/*0x008*/     UINT64       NumberOfProcessReferences;                                    
/*0x010*/     struct _MMCLONE_BLOCK* ClonePtes;                                          
/*0x018*/     struct _MI_PARTITION* Partition;                                           
          }MMCLONE_HEADER, *PMMCLONE_HEADER;                                             
                                                                                         
          typedef struct _MMEXTEND_INFO     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       CommittedSize;                                      
/*0x008*/     ULONG32      ReferenceCount;                                     
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
          }MMEXTEND_INFO, *PMMEXTEND_INFO;                                     
                                                                               
          typedef struct _MMINPAGE_FLAGS                // 22 elements, 0x4 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      GetExtents : 1;              // 0 BitPosition                   
/*0x000*/     ULONG32      PrefetchSystemVmType : 2;    // 1 BitPosition                   
/*0x000*/     ULONG32      VaPrefetchReadBlock : 1;     // 3 BitPosition                   
/*0x000*/     ULONG32      CollidedFlowThrough : 1;     // 4 BitPosition                   
/*0x000*/     ULONG32      ForceCollisions : 1;         // 5 BitPosition                   
/*0x000*/     ULONG32      InPageExpanded : 1;          // 6 BitPosition                   
/*0x000*/     ULONG32      IssuedAtLowPriority : 1;     // 7 BitPosition                   
/*0x000*/     ULONG32      FaultFromStore : 1;          // 8 BitPosition                   
/*0x000*/     ULONG32      PagePriority : 3;            // 9 BitPosition                   
/*0x000*/     ULONG32      ClusteredPagePriority : 3;   // 12 BitPosition                  
/*0x000*/     ULONG32      MakeClusterValid : 1;        // 15 BitPosition                  
/*0x000*/     ULONG32      PerformRelocations : 1;      // 16 BitPosition                  
/*0x000*/     ULONG32      ZeroLastPage : 1;            // 17 BitPosition                  
/*0x000*/     ULONG32      UserFault : 1;               // 18 BitPosition                  
/*0x000*/     ULONG32      StandbyProtectionNeeded : 1; // 19 BitPosition                  
/*0x000*/     ULONG32      PteChanged : 1;              // 20 BitPosition                  
/*0x000*/     ULONG32      PageFileFault : 1;           // 21 BitPosition                  
/*0x000*/     ULONG32      PageFilePageHashActive : 1;  // 22 BitPosition                  
/*0x000*/     ULONG32      CoalescedIo : 1;             // 23 BitPosition                  
/*0x000*/     ULONG32      VmLockNotNeeded : 1;         // 24 BitPosition                  
/*0x000*/     ULONG32      Spare0 : 1;                  // 25 BitPosition                  
/*0x000*/     ULONG32      Spare1 : 6;                  // 26 BitPosition                  
          }MMINPAGE_FLAGS, *PMMINPAGE_FLAGS;                                               
                                                                                           
          typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH       // 5 elements, 0x38 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT64       Page[1];                                                              
/*0x008*/     struct _MMINPAGE_SUPPORT* InitialInPageSupport;                                    
/*0x010*/     struct _MMPAGING_FILE* PagingFile;                                                 
/*0x018*/     UINT64       PageFileOffset;                                                       
/*0x020*/     struct _RTL_BALANCED_NODE Node;                 // 6 elements, 0x18 bytes (sizeof) 
          }MMINPAGE_SUPPORT_FLOW_THROUGH, *PMMINPAGE_SUPPORT_FLOW_THROUGH;                                   
                                                                                                 
          typedef struct _MMINPAGE_SUPPORT                           // 28 elements, 0x1C0 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _LIST_ENTRY ListEntry;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _LIST_ENTRY ListHead;                           // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     struct _KEVENT Event;                                  // 1 elements, 0x18 bytes (sizeof)   
/*0x038*/     struct _KEVENT CollidedEvent;                          // 1 elements, 0x18 bytes (sizeof)   
/*0x050*/     struct _IO_STATUS_BLOCK IoStatus;                      // 3 elements, 0x10 bytes (sizeof)   
/*0x060*/     union _LARGE_INTEGER ReadOffset;                       // 4 elements, 0x8 bytes (sizeof)    
              union                                                  // 2 elements, 0x30 bytes (sizeof)   
              {                                                                                           
/*0x068*/         struct _KAPC_STATE ApcState;                       // 9 elements, 0x30 bytes (sizeof)   
/*0x068*/         struct _MI_HARD_FAULT_STATE HardFaultState;        // 2 elements, 0x10 bytes (sizeof)   
              }u2;                                                                                        
/*0x098*/     struct _ETHREAD* Thread;                                                                    
/*0x0A0*/     struct _MMPFN* LockedProtoPfn;                                                              
/*0x0A8*/     struct _MMPTE PteContents;                             // 1 elements, 0x8 bytes (sizeof)    
/*0x0B0*/     LONG32       WaitCount;                                                                     
/*0x0B4*/     LONG32       InjectRetry;                                                                   
/*0x0B8*/     ULONG32      ByteCount;                                                                     
              union                                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                           
/*0x0BC*/         ULONG32      ImagePteOffset;                                                            
/*0x0BC*/         ULONG32      TossPage;                                                                  
              }u3;                                                                                        
              union                                                  // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                           
/*0x0C0*/         struct _MMINPAGE_FLAGS e1;                         // 22 elements, 0x4 bytes (sizeof)   
/*0x0C0*/         ULONG32      LongFlags;                                                                 
              }u1;                                                                                        
/*0x0C8*/     struct _FILE_OBJECT* FilePointer;                                                           
              union                                                  // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                           
/*0x0D0*/         struct _CONTROL_AREA* ControlArea;                                                      
/*0x0D0*/         struct _SUBSECTION* Subsection;                                                         
              };                                                                                          
/*0x0D8*/     VOID*        Autoboost;                                                                     
/*0x0E0*/     VOID*        FaultingAddress;                                                               
/*0x0E8*/     struct _MMPTE* PointerPte;                                                                  
/*0x0F0*/     struct _MMPTE* BasePte;                                                                     
/*0x0F8*/     struct _MMPFN* Pfn;                                                                         
/*0x100*/     struct _MDL* PrefetchMdl;                                                                   
/*0x108*/     INT64        ProbeCount;                                                                    
/*0x110*/     struct _MDL  Mdl;                                      // 10 elements, 0x30 bytes (sizeof)  
              union                                                  // 2 elements, 0x80 bytes (sizeof)   
              {                                                                                           
/*0x140*/         UINT64       Page[16];                                                                  
/*0x140*/         struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough; // 5 elements, 0x38 bytes (sizeof)   
              };                                                                                          
          }MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT;                                                          
                                                                                                          
          typedef struct _MODWRITER_FLAGS          // 4 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      KeepForever : 1;        // 0 BitPosition                  
/*0x000*/     ULONG32      Networked : 1;          // 1 BitPosition                  
/*0x000*/     ULONG32      IoPriority : 3;         // 2 BitPosition                  
/*0x000*/     ULONG32      ModifiedStoreWrite : 1; // 5 BitPosition                  
          }MODWRITER_FLAGS, *PMODWRITER_FLAGS;                                       
                                                                                     
          typedef struct _MMMOD_WRITER_MDL_ENTRY    // 18 elements, 0x108 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _LIST_ENTRY Links;             // 2 elements, 0x10 bytes (sizeof)   
              union                                 // 1 elements, 0x10 bytes (sizeof)   
              {                                                                          
/*0x010*/         struct _IO_STATUS_BLOCK IoStatus; // 3 elements, 0x10 bytes (sizeof)   
              }u;                                                                        
/*0x020*/     struct _IRP* Irp;                                                          
/*0x028*/     struct _MODWRITER_FLAGS u1;           // 4 elements, 0x4 bytes (sizeof)    
/*0x02C*/     ULONG32      StoreWriteRefCount;                                           
/*0x030*/     struct _KAPC StoreWriteCompletionApc; // 17 elements, 0x58 bytes (sizeof)  
/*0x088*/     ULONG32      ByteCount;                                                    
/*0x08C*/     ULONG32      ChargedPages;                                                 
/*0x090*/     struct _MMPAGING_FILE* PagingFile;                                         
/*0x098*/     struct _FILE_OBJECT* File;                                                 
/*0x0A0*/     struct _CONTROL_AREA* ControlArea;                                         
/*0x0A8*/     struct _ERESOURCE* FileResource;                                           
/*0x0B0*/     union _LARGE_INTEGER WriteOffset;     // 4 elements, 0x8 bytes (sizeof)    
/*0x0B8*/     union _LARGE_INTEGER IssueTime;       // 4 elements, 0x8 bytes (sizeof)    
/*0x0C0*/     struct _MI_PARTITION* Partition;                                           
/*0x0C8*/     struct _MDL* PointerMdl;                                                   
/*0x0D0*/     struct _MDL  Mdl;                     // 10 elements, 0x30 bytes (sizeof)  
/*0x100*/     UINT64       Page[1];                                                      
          }MMMOD_WRITER_MDL_ENTRY, *PMMMOD_WRITER_MDL_ENTRY;                                     
                                                                                         
          typedef struct _MMPAGING_FILE                                     // 46 elements, 0x120 bytes (sizeof) 
          {                                                                                                      
/*0x000*/     UINT64       Size;                                                                                 
/*0x008*/     UINT64       MaximumSize;                                                                          
/*0x010*/     UINT64       MinimumSize;                                                                          
/*0x018*/     UINT64       FreeSpace;                                                                            
/*0x020*/     UINT64       PeakUsage;                                                                            
/*0x028*/     UINT64       HighestPage;                                                                          
/*0x030*/     UINT64       FreeReservationSpace;                                                                 
/*0x038*/     struct _FILE_OBJECT* File;                                                                         
/*0x040*/     struct _MMMOD_WRITER_MDL_ENTRY* Entry[2];                                                          
/*0x050*/     union _SLIST_HEADER PfnsToFree;                               // 3 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _UNICODE_STRING PageFileName;                          // 3 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;                                                     
/*0x078*/     ULONG32      AllocationBitmapHint;                                                                 
/*0x07C*/     ULONG32      LargestAllocationCluster;                                                             
/*0x080*/     ULONG32      RefreshAllocationCluster;                                                             
/*0x084*/     ULONG32      LastRefreshAllocationCluster;                                                         
/*0x088*/     ULONG32      ReservedClusterSizeAggregate;                                                         
/*0x08C*/     ULONG32      MaximumRunLengthInBitmaps;                                                            
/*0x090*/     struct _RTL_RB_TREE BitmapsCacheLengthTree;                   // 3 elements, 0x10 bytes (sizeof)   
/*0x0A0*/     struct _RTL_RB_TREE BitmapsCacheLocationTree;                 // 3 elements, 0x10 bytes (sizeof)   
/*0x0B0*/     struct _LIST_ENTRY BitmapsCacheFreeList;                      // 2 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY* BitmapsCacheEntries;                                      
              union                                                         // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                                  
/*0x0C8*/         ULONG32      ToBeEvictedCount;                                                                 
/*0x0C8*/         ULONG32      HybridPriority;                                                                   
              };                                                                                                 
              struct                                                        // 9 elements, 0x2 bytes (sizeof)    
              {                                                                                                  
/*0x0CC*/         UINT16       PageFileNumber : 4;                          // 0 BitPosition                     
/*0x0CC*/         UINT16       WsSwapPagefile : 1;                          // 4 BitPosition                     
/*0x0CC*/         UINT16       NoReservations : 1;                          // 5 BitPosition                     
/*0x0CC*/         UINT16       VirtualStorePagefile : 1;                    // 6 BitPosition                     
/*0x0CC*/         UINT16       SwapSupported : 1;                           // 7 BitPosition                     
/*0x0CC*/         UINT16       NodeInserted : 1;                            // 8 BitPosition                     
/*0x0CC*/         UINT16       StackNotified : 1;                           // 9 BitPosition                     
/*0x0CC*/         UINT16       BackedBySCM : 1;                             // 10 BitPosition                    
/*0x0CC*/         UINT16       Spare0 : 4;                                  // 11 BitPosition                    
              };                                                                                                 
              struct                                                        // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                  
/*0x0CE*/         UINT8        AdriftMdls : 1;                              // 0 BitPosition                     
/*0x0CE*/         UINT8        Spare1 : 7;                                  // 1 BitPosition                     
              };                                                                                                 
              struct                                                        // 2 elements, 0x1 bytes (sizeof)    
              {                                                                                                  
/*0x0CF*/         UINT8        IgnoreReservations : 1;                      // 0 BitPosition                     
/*0x0CF*/         UINT8        Spare2 : 7;                                  // 1 BitPosition                     
              };                                                                                                 
/*0x0D0*/     ULONG32      PageHashPages;                                                                        
/*0x0D4*/     ULONG32      PageHashPagesPeak;                                                                    
/*0x0D8*/     ULONG32*     PageHash;                                                                             
/*0x0E0*/     VOID*        FileHandle;                                                                           
/*0x0E8*/     UINT64       Lock;                                                                                 
/*0x0F0*/     struct _ETHREAD* LockOwner;                                                                        
/*0x0F8*/     struct _RTL_AVL_TREE FlowThroughReadRoot;                     // 1 elements, 0x8 bytes (sizeof)    
/*0x100*/     struct _MI_PARTITION* Partition;                                                                   
/*0x108*/     struct _RTL_BALANCED_NODE FileObjectNode;                     // 6 elements, 0x18 bytes (sizeof)   
          }MMPAGING_FILE, *PMMPAGING_FILE;                                                                       
                                                                                                                 
          typedef struct _MMPFNENTRY1           // 5 elements, 0x1 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        PageLocation : 3;    // 0 BitPosition                  
/*0x000*/     UINT8        WriteInProgress : 1; // 3 BitPosition                  
/*0x000*/     UINT8        Modified : 1;        // 4 BitPosition                  
/*0x000*/     UINT8        ReadInProgress : 1;  // 5 BitPosition                  
/*0x000*/     UINT8        CacheAttribute : 2;  // 6 BitPosition                  
          }MMPFNENTRY1, *PMMPFNENTRY1;                                            
                                                                                  
          typedef struct _MMPFNENTRY3              // 6 elements, 0x1 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT8        Priority : 3;           // 0 BitPosition                  
/*0x000*/     UINT8        OnProtectedStandby : 1; // 3 BitPosition                  
/*0x000*/     UINT8        InPageError : 1;        // 4 BitPosition                  
/*0x000*/     UINT8        SystemChargedPage : 1;  // 5 BitPosition                  
/*0x000*/     UINT8        RemovalRequested : 1;   // 6 BitPosition                  
/*0x000*/     UINT8        ParityError : 1;        // 7 BitPosition                  
          }MMPFNENTRY3, *PMMPFNENTRY3;                                               
                                                                                     
          typedef struct _MMPFN                                   // 14 elements, 0x30 bytes (sizeof) 
          {                                                                                           
              union                                               // 3 elements, 0x18 bytes (sizeof)  
              {                                                                                       
/*0x000*/         struct _LIST_ENTRY ListEntry;                   // 2 elements, 0x10 bytes (sizeof)  
/*0x000*/         struct _RTL_BALANCED_NODE TreeNode;             // 6 elements, 0x18 bytes (sizeof)  
                  struct                                          // 3 elements, 0x18 bytes (sizeof)  
                  {                                                                                   
                      union                                       // 5 elements, 0x8 bytes (sizeof)   
                      {                                                                               
/*0x000*/                 struct _SINGLE_LIST_ENTRY NextSlistPfn; // 1 elements, 0x8 bytes (sizeof)   
/*0x000*/                 VOID*        Next;                                                          
                          struct                                  // 2 elements, 0x8 bytes (sizeof)   
                          {                                                                           
/*0x000*/                     UINT64       Flink : 36;            // 0 BitPosition                    
/*0x000*/                     UINT64       NodeFlinkHigh : 28;    // 36 BitPosition                   
                          };                                                                          
/*0x000*/                 struct _MI_ACTIVE_PFN Active;           // 3 elements, 0x8 bytes (sizeof)   
                      }u1;                                                                            
                      union                                       // 2 elements, 0x8 bytes (sizeof)   
                      {                                                                               
/*0x008*/                 struct _MMPTE* PteAddress;                                                  
/*0x008*/                 UINT64       PteLong;                                                       
                      };                                                                              
/*0x010*/             struct _MMPTE OriginalPte;                  // 1 elements, 0x8 bytes (sizeof)   
                  };                                                                                  
              };                                                                                      
/*0x018*/     struct _MIPFNBLINK u2;                              // 14 elements, 0x8 bytes (sizeof)  
              union                                               // 5 elements, 0x4 bytes (sizeof)   
              {                                                                                       
                  struct                                          // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                                   
/*0x020*/             UINT16       ReferenceCount;                                                    
/*0x022*/             struct _MMPFNENTRY1 e1;                     // 5 elements, 0x1 bytes (sizeof)   
/*0x023*/             struct _MMPFNENTRY3 e3;                     // 6 elements, 0x1 bytes (sizeof)   
                  };                                                                                  
                  struct                                          // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                                   
/*0x020*/             UINT16       ReferenceCount;                                                    
                  }e2;                                                                                
                  struct                                          // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                   
/*0x020*/             ULONG32      EntireField;                                                       
                  }e4;                                                                                
              }u3;                                                                                    
/*0x024*/     UINT16       NodeBlinkLow;                                                              
              struct                                              // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                       
/*0x026*/         UINT8        Unused : 4;                        // 0 BitPosition                    
/*0x026*/         UINT8        Unused2 : 4;                       // 4 BitPosition                    
              };                                                                                      
              union                                               // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                       
/*0x027*/         UINT8        ViewCount;                                                             
/*0x027*/         UINT8        NodeFlinkLow;                                                          
              };                                                                                      
              union                                               // 12 elements, 0x8 bytes (sizeof)  
              {                                                                                       
                  struct                                          // 11 elements, 0x8 bytes (sizeof)  
                  {                                                                                   
/*0x028*/             UINT64       PteFrame : 36;                 // 0 BitPosition                    
/*0x028*/             UINT64       Channel : 2;                   // 36 BitPosition                   
/*0x028*/             UINT64       Unused1 : 1;                   // 38 BitPosition                   
/*0x028*/             UINT64       Unused2 : 1;                   // 39 BitPosition                   
/*0x028*/             UINT64       Partition : 10;                // 40 BitPosition                   
/*0x028*/             UINT64       Spare : 2;                     // 50 BitPosition                   
/*0x028*/             UINT64       FileOnly : 1;                  // 52 BitPosition                   
/*0x028*/             UINT64       PfnExists : 1;                 // 53 BitPosition                   
/*0x028*/             UINT64       PageIdentity : 3;              // 54 BitPosition                   
/*0x028*/             UINT64       PrototypePte : 1;              // 57 BitPosition                   
/*0x028*/             UINT64       PageColor : 6;                 // 58 BitPosition                   
                  };                                                                                  
/*0x028*/         UINT64       EntireField;                                                           
              }u4;                                                                                    
          }MMPFN, *PMMPFN;                                                                            
                                                                                                      
          typedef struct _MMVAD_FLAGS            // 16 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      VadType : 3;          // 0 BitPosition                   
/*0x000*/     ULONG32      Protection : 5;       // 3 BitPosition                   
/*0x000*/     ULONG32      PreferredNode : 6;    // 8 BitPosition                   
/*0x000*/     ULONG32      PrivateMemory : 1;    // 14 BitPosition                  
/*0x000*/     ULONG32      PrivateFixup : 1;     // 15 BitPosition                  
/*0x000*/     ULONG32      Graphics : 1;         // 16 BitPosition                  
/*0x000*/     ULONG32      Enclave : 1;          // 17 BitPosition                  
/*0x000*/     ULONG32      PageSize64K : 1;      // 18 BitPosition                  
/*0x000*/     ULONG32      ShadowStack : 1;      // 19 BitPosition                  
/*0x000*/     ULONG32      Spare : 6;            // 20 BitPosition                  
/*0x000*/     ULONG32      HotPatchAllowed : 1;  // 26 BitPosition                  
/*0x000*/     ULONG32      NoChange : 1;         // 27 BitPosition                  
/*0x000*/     ULONG32      ManySubsections : 1;  // 28 BitPosition                  
/*0x000*/     ULONG32      DeleteInProgress : 1; // 29 BitPosition                  
/*0x000*/     ULONG32      LockContended : 1;    // 30 BitPosition                  
/*0x000*/     ULONG32      Lock : 1;             // 31 BitPosition                  
          }MMVAD_FLAGS, *PMMVAD_FLAGS;                                              
                                                                                    
          typedef struct _MMVAD_FLAGS1        // 2 elements, 0x4 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      CommitCharge : 31; // 0 BitPosition                  
/*0x000*/     ULONG32      MemCommit : 1;     // 31 BitPosition                 
          }MMVAD_FLAGS1, *PMMVAD_FLAGS1;                                        
                                                                                
          typedef struct _MMVAD_SHORT                // 14 elements, 0x40 bytes (sizeof) 
          {                                                                              
              union                                  // 2 elements, 0x18 bytes (sizeof)  
              {                                                                          
                  struct                             // 2 elements, 0x18 bytes (sizeof)  
                  {                                                                      
/*0x000*/             struct _MMVAD_SHORT* NextVad;                                      
/*0x008*/             VOID*        ExtraCreateInfo;                                      
/*0x010*/             UINT8        _PADDING0_[0x8];                                      
                  };                                                                     
/*0x000*/         struct _RTL_BALANCED_NODE VadNode; // 6 elements, 0x18 bytes (sizeof)  
              };                                                                         
/*0x018*/     ULONG32      StartingVpn;                                                  
/*0x01C*/     ULONG32      EndingVpn;                                                    
/*0x020*/     UINT8        StartingVpnHigh;                                              
/*0x021*/     UINT8        EndingVpnHigh;                                                
/*0x022*/     UINT8        CommitChargeHigh;                                             
/*0x023*/     UINT8        SpareNT64VadUChar;                                            
/*0x024*/     LONG32       ReferenceCount;                                               
/*0x028*/     struct _EX_PUSH_LOCK PushLock;         // 7 elements, 0x8 bytes (sizeof)   
              union                                  // 3 elements, 0x4 bytes (sizeof)   
              {                                                                          
/*0x030*/         ULONG32      LongFlags;                                                
/*0x030*/         struct _MMVAD_FLAGS VadFlags;      // 16 elements, 0x4 bytes (sizeof)  
/*0x030*/         ULONG32      VolatileVadLong;                                          
              }u;                                                                        
              union                                  // 2 elements, 0x4 bytes (sizeof)   
              {                                                                          
/*0x034*/         ULONG32      LongFlags1;                                               
/*0x034*/         struct _MMVAD_FLAGS1 VadFlags1;    // 2 elements, 0x4 bytes (sizeof)   
              }u1;                                                                       
/*0x038*/     struct _MI_VAD_EVENT_BLOCK* EventList;                                     
          }MMVAD_SHORT, *PMMVAD_SHORT;                                                   
                                                                                         
          typedef struct _MMVAD_FLAGS2             // 7 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      FileOffset : 24;        // 0 BitPosition                  
/*0x000*/     ULONG32      Large : 1;              // 24 BitPosition                 
/*0x000*/     ULONG32      TrimBehind : 1;         // 25 BitPosition                 
/*0x000*/     ULONG32      Inherit : 1;            // 26 BitPosition                 
/*0x000*/     ULONG32      NoValidationNeeded : 1; // 27 BitPosition                 
/*0x000*/     ULONG32      PrivateDemandZero : 1;  // 28 BitPosition                 
/*0x000*/     ULONG32      Spare : 3;              // 29 BitPosition                 
          }MMVAD_FLAGS2, *PMMVAD_FLAGS2;                                             
                                                                                     
          typedef struct _MMVAD                                // 9 elements, 0x88 bytes (sizeof)  
          {                                                                                        
/*0x000*/     struct _MMVAD_SHORT Core;                        // 14 elements, 0x40 bytes (sizeof) 
              union                                            // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                    
/*0x040*/         ULONG32      LongFlags2;                                                         
/*0x040*/         struct _MMVAD_FLAGS2 VadFlags2;              // 7 elements, 0x4 bytes (sizeof)   
              }u2;                                                                                 
/*0x048*/     struct _SUBSECTION* Subsection;                                                      
/*0x050*/     struct _MMPTE* FirstPrototypePte;                                                    
/*0x058*/     struct _MMPTE* LastContiguousPte;                                                    
/*0x060*/     struct _LIST_ENTRY ViewLinks;                    // 2 elements, 0x10 bytes (sizeof)  
/*0x070*/     struct _EPROCESS* VadsProcess;                                                       
              union                                            // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                    
/*0x078*/         struct _MI_VAD_SEQUENTIAL_INFO SequentialVa; // 2 elements, 0x8 bytes (sizeof)   
/*0x078*/         struct _MMEXTEND_INFO* ExtendedInfo;                                             
              }u4;                                                                                 
/*0x080*/     struct _FILE_OBJECT* FileObject;                                                     
          }MMVAD, *PMMVAD;                                                                         
                                                                                                   
          typedef struct _NAMED_PIPE_CREATE_PARAMETERS // 8 elements, 0x28 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      NamedPipeType;                                                 
/*0x004*/     ULONG32      ReadMode;                                                      
/*0x008*/     ULONG32      CompletionMode;                                                
/*0x00C*/     ULONG32      MaximumInstances;                                              
/*0x010*/     ULONG32      InboundQuota;                                                  
/*0x014*/     ULONG32      OutboundQuota;                                                 
/*0x018*/     union _LARGE_INTEGER DefaultTimeout;     // 4 elements, 0x8 bytes (sizeof)  
/*0x020*/     UINT8        TimeoutSpecified;                                              
/*0x021*/     UINT8        _PADDING0_[0x7];                                               
          }NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS;                                   
                                                                                          
          typedef struct _NETWORK_LOADER_BLOCK          // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT8*       DHCPServerACK;                                                  
/*0x008*/     ULONG32      DHCPServerACKLength;                                            
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                
/*0x010*/     UINT8*       BootServerReplyPacket;                                          
/*0x018*/     ULONG32      BootServerReplyPacketLength;                                    
/*0x01C*/     UINT8        _PADDING1_[0x4];                                                
          }NETWORK_LOADER_BLOCK, *PNETWORK_LOADER_BLOCK;                                   
                                                                                           
          typedef struct _NLS_DATA_BLOCK         // 3 elements, 0x18 bytes (sizeof) 
          {                                                                         
/*0x000*/     VOID*        AnsiCodePageData;                                        
/*0x008*/     VOID*        OemCodePageData;                                         
/*0x010*/     VOID*        UnicodeCaseTableData;                                    
          }NLS_DATA_BLOCK, *PNLS_DATA_BLOCK;                                        
                                                                                    
          typedef struct _NON_PAGED_DEBUG_INFO // 9 elements, 0x20 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT16       Signature;                                             
/*0x002*/     UINT16       Flags;                                                 
/*0x004*/     ULONG32      Size;                                                  
/*0x008*/     UINT16       Machine;                                               
/*0x00A*/     UINT16       Characteristics;                                       
/*0x00C*/     ULONG32      TimeDateStamp;                                         
/*0x010*/     ULONG32      CheckSum;                                              
/*0x014*/     ULONG32      SizeOfImage;                                           
/*0x018*/     UINT64       ImageBase;                                             
          }NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;                                   
                                                                                  
          typedef struct _NONOPAQUE_OPLOCK                 // 14 elements, 0xA0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _IRP* IrpExclusiveOplock;                                                 
/*0x008*/     struct _FILE_OBJECT* FileObject;                                                 
/*0x010*/     struct _EPROCESS* ExclusiveOplockOwner;                                          
/*0x018*/     struct _ETHREAD* ExclusiveOplockOwnerThread;                                     
/*0x020*/     UINT8        WaiterPriority;                                                     
/*0x021*/     UINT8        _PADDING0_[0x7];                                                    
/*0x028*/     struct _LIST_ENTRY IrpOplocksR;              // 2 elements, 0x10 bytes (sizeof)  
/*0x038*/     struct _LIST_ENTRY IrpOplocksRH;             // 2 elements, 0x10 bytes (sizeof)  
/*0x048*/     struct _LIST_ENTRY RHBreakQueue;             // 2 elements, 0x10 bytes (sizeof)  
/*0x058*/     struct _LIST_ENTRY WaitingIrps;              // 2 elements, 0x10 bytes (sizeof)  
/*0x068*/     struct _LIST_ENTRY DelayAckFileObjectQueue;  // 2 elements, 0x10 bytes (sizeof)  
/*0x078*/     struct _LIST_ENTRY AtomicQueue;              // 2 elements, 0x10 bytes (sizeof)  
/*0x088*/     struct _GUID* DeleterParentKey;                                                  
/*0x090*/     ULONG32      OplockState;                                                        
/*0x094*/     UINT8        _PADDING1_[0x4];                                                    
/*0x098*/     struct _FAST_MUTEX* FastMutex;                                                   
          }NONOPAQUE_OPLOCK, *PNONOPAQUE_OPLOCK;                                               
                                                                                               
          typedef struct _NT_TIB32               // 8 elements, 0x1C bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      ExceptionList;                                           
/*0x004*/     ULONG32      StackBase;                                               
/*0x008*/     ULONG32      StackLimit;                                              
/*0x00C*/     ULONG32      SubSystemTib;                                            
              union                              // 2 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x010*/         ULONG32      FiberData;                                           
/*0x010*/         ULONG32      Version;                                             
              };                                                                    
/*0x014*/     ULONG32      ArbitraryUserPointer;                                    
/*0x018*/     ULONG32      Self;                                                    
          }NT_TIB32, *PNT_TIB32;                                                    
                                                                                    
          typedef struct _NT_TIB64               // 8 elements, 0x38 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       ExceptionList;                                           
/*0x008*/     UINT64       StackBase;                                               
/*0x010*/     UINT64       StackLimit;                                              
/*0x018*/     UINT64       SubSystemTib;                                            
              union                              // 2 elements, 0x8 bytes (sizeof)  
              {                                                                     
/*0x020*/         UINT64       FiberData;                                           
/*0x020*/         ULONG32      Version;                                             
              };                                                                    
/*0x028*/     UINT64       ArbitraryUserPointer;                                    
/*0x030*/     UINT64       Self;                                                    
          }NT_TIB64, *PNT_TIB64;                                                    
                                                                                    
          typedef struct _OB_EXTENDED_PARSE_PARAMETERS // 3 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT16       Length;                                                        
/*0x002*/     UINT8        _PADDING0_[0x2];                                               
/*0x004*/     ULONG32      RestrictedAccessMask;                                          
/*0x008*/     struct _EJOB* Silo;                                                         
          }OB_EXTENDED_PARSE_PARAMETERS, *POB_EXTENDED_PARSE_PARAMETERS;                                   
                                                                                          
          typedef struct _OB_EXTENDED_USER_INFO // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     VOID*        Context1;                                               
/*0x008*/     VOID*        Context2;                                               
          }OB_EXTENDED_USER_INFO, *POB_EXTENDED_USER_INFO;                                   
                                                                                   
          typedef struct _OB_HANDLE_REVOCATION_BLOCK // 3 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY RevocationInfos;    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _EX_PUSH_LOCK Lock;             // 7 elements, 0x8 bytes (sizeof)  
/*0x018*/     struct _EX_RUNDOWN_REF Rundown;        // 2 elements, 0x8 bytes (sizeof)  
          }OB_HANDLE_REVOCATION_BLOCK, *POB_HANDLE_REVOCATION_BLOCK;                                   
                                                                                        
          typedef struct _OBJECT_ATTRIBUTES          // 6 elements, 0x30 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      Length;                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     VOID*        RootDirectory;                                               
/*0x010*/     struct _UNICODE_STRING* ObjectName;                                       
/*0x018*/     ULONG32      Attributes;                                                  
/*0x01C*/     UINT8        _PADDING1_[0x4];                                             
/*0x020*/     VOID*        SecurityDescriptor;                                          
/*0x028*/     VOID*        SecurityQualityOfService;                                    
          }OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;                                      
                                                                                        
          typedef struct _OBJECT_CREATE_INFORMATION                         // 9 elements, 0x40 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     ULONG32      Attributes;                                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                    
/*0x008*/     VOID*        RootDirectory;                                                                      
/*0x010*/     CHAR         ProbeMode;                                                                          
/*0x011*/     UINT8        _PADDING1_[0x3];                                                                    
/*0x014*/     ULONG32      PagedPoolCharge;                                                                    
/*0x018*/     ULONG32      NonPagedPoolCharge;                                                                 
/*0x01C*/     ULONG32      SecurityDescriptorCharge;                                                           
/*0x020*/     VOID*        SecurityDescriptor;                                                                 
/*0x028*/     struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;                                                
/*0x030*/     struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService; // 4 elements, 0xC bytes (sizeof)  
/*0x03C*/     UINT8        _PADDING2_[0x4];                                                                    
          }OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION;                                             
                                                                                                               
          typedef struct _OBJECT_DIRECTORY                     // 8 elements, 0x158 bytes (sizeof) 
          {                                                                                        
/*0x000*/     struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];                                     
/*0x128*/     struct _EX_PUSH_LOCK Lock;                       // 7 elements, 0x8 bytes (sizeof)   
/*0x130*/     struct _DEVICE_MAP* DeviceMap;                                                       
/*0x138*/     struct _OBJECT_DIRECTORY* ShadowDirectory;                                           
/*0x140*/     VOID*        NamespaceEntry;                                                         
/*0x148*/     VOID*        SessionObject;                                                          
/*0x150*/     ULONG32      Flags;                                                                  
/*0x154*/     ULONG32      SessionId;                                                              
          }OBJECT_DIRECTORY, *POBJECT_DIRECTORY;                                                   
                                                                                                   
          typedef struct _OBJECT_DIRECTORY_ENTRY         // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _OBJECT_DIRECTORY_ENTRY* ChainLink;                                    
/*0x008*/     VOID*        Object;                                                          
/*0x010*/     ULONG32      HashValue;                                                       
/*0x014*/     UINT8        _PADDING0_[0x4];                                                 
          }OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY;                                   
                                                                                            
          typedef struct _OBJECT_DUMP_CONTROL // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     VOID*        Stream;                                               
/*0x008*/     ULONG32      Detail;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                      
          }OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL;                                   
                                                                                 
          typedef struct _OBJECT_FOOTER                            // 2 elements, 0x30 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _HANDLE_REVOCATION_INFO HandleRevocationInfo; // 5 elements, 0x20 bytes (sizeof) 
/*0x020*/     struct _OB_EXTENDED_USER_INFO ExtendedUserInfo;      // 2 elements, 0x10 bytes (sizeof) 
          }OBJECT_FOOTER, *POBJECT_FOOTER;                                                            
                                                                                                      
          typedef struct _OBJECT_HANDLE_COUNT_ENTRY // 3 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _EPROCESS* Process;                                               
              struct                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                        
/*0x008*/         ULONG32      HandleCount : 24;    // 0 BitPosition                   
/*0x008*/         ULONG32      LockCount : 8;       // 24 BitPosition                  
              };                                                                       
          }OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY;                                   
                                                                                       
          typedef struct _OBJECT_HANDLE_COUNT_DATABASE                 // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      CountEntries;                                                                  
/*0x004*/     UINT8        _PADDING0_[0x4];                                                               
/*0x008*/     struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];                                    
          }OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE;                                   
                                                                                                          
          typedef struct _OBJECT_HANDLE_INFORMATION // 2 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      HandleAttributes;                                          
/*0x004*/     ULONG32      GrantedAccess;                                             
          }OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;                                  
                                                                                      
          typedef struct _OBJECT_HEADER_AUDIT_INFO // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     VOID*        SecurityDescriptor;                                        
/*0x008*/     UINT64       Reserved;                                                  
          }OBJECT_HEADER_AUDIT_INFO, *POBJECT_HEADER_AUDIT_INFO;                                   
                                                                                      
          typedef struct _OBJECT_HEADER_CREATOR_INFO // 5 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _LIST_ENTRY TypeList;           // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        CreatorUniqueProcess;                                        
/*0x018*/     UINT16       CreatorBackTraceIndex;                                       
/*0x01A*/     UINT16       Reserved1;                                                   
/*0x01C*/     ULONG32      Reserved2;                                                   
          }OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO;                                   
                                                                                        
          typedef struct _OBJECT_HEADER_EXTENDED_INFO // 2 elements, 0x10 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _OBJECT_FOOTER* Footer;                                             
/*0x008*/     UINT64       Reserved;                                                     
          }OBJECT_HEADER_EXTENDED_INFO, *POBJECT_HEADER_EXTENDED_INFO;                                   
                                                                                         
          typedef struct _OBJECT_HEADER_HANDLE_INFO                          // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                                     
              union                                                          // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                                 
/*0x000*/         struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;                                    
/*0x000*/         struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;             // 3 elements, 0x10 bytes (sizeof) 
              };                                                                                                
          }OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO;                                              
                                                                                                                
          typedef struct _OBJECT_HEADER_NAME_INFO  // 4 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _OBJECT_DIRECTORY* Directory;                                    
/*0x008*/     struct _UNICODE_STRING Name;         // 3 elements, 0x10 bytes (sizeof) 
/*0x018*/     LONG32       ReferenceCount;                                            
/*0x01C*/     ULONG32      Reserved;                                                  
          }OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO;                                   
                                                                                      
          typedef struct _OBJECT_HEADER_PADDING_INFO // 1 elements, 0x4 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      PaddingAmount;                                              
          }OBJECT_HEADER_PADDING_INFO, *POBJECT_HEADER_PADDING_INFO;                                  
                                                                                       
          typedef struct _OBJECT_HEADER_PROCESS_INFO // 2 elements, 0x10 bytes (sizeof) 
          {                                                                             
/*0x000*/     struct _EPROCESS* ExclusiveProcess;                                       
/*0x008*/     UINT64       Reserved;                                                    
          }OBJECT_HEADER_PROCESS_INFO, *POBJECT_HEADER_PROCESS_INFO;                                   
                                                                                        
          typedef struct _OBJECT_HEADER_QUOTA_INFO       // 6 elements, 0x20 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      PagedPoolCharge;                                                 
/*0x004*/     ULONG32      NonPagedPoolCharge;                                              
/*0x008*/     ULONG32      SecurityDescriptorCharge;                                        
/*0x00C*/     ULONG32      Reserved1;                                                       
/*0x010*/     VOID*        SecurityDescriptorQuotaBlock;                                    
/*0x018*/     UINT64       Reserved2;                                                       
          }OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO;                                   
                                                                                            
          typedef struct _OBJECT_NAME_INFORMATION // 1 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _UNICODE_STRING Name;        // 3 elements, 0x10 bytes (sizeof) 
          }OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;                                   
                                                                                     
          typedef struct _OBJECT_REF_STACK_INFO // 4 elements, 0xC bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      Sequence;                                              
/*0x004*/     UINT16       Index;                                                 
/*0x006*/     UINT16       NumTraces;                                             
/*0x008*/     ULONG32      Tag;                                                   
          }OBJECT_REF_STACK_INFO, *POBJECT_REF_STACK_INFO;                                  
                                                                                  
          typedef struct _OBJECT_REF_INFO                 // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _OBJECT_HEADER* ObjectHeader;                                           
/*0x008*/     VOID*        NextRef;                                                          
/*0x010*/     UINT8        ImageFileName[16];                                                
/*0x020*/     UINT16       NextPos;                                                          
/*0x022*/     UINT16       MaxStacks;                                                        
/*0x024*/     struct _OBJECT_REF_STACK_INFO StackInfo[0];                                    
/*0x024*/     UINT8        _PADDING0_[0x4];                                                  
          }OBJECT_REF_INFO, *POBJECT_REF_INFO;                                               
                                                                                             
          typedef struct _OBJECT_REF_TRACE // 1 elements, 0x80 bytes (sizeof) 
          {                                                                   
/*0x000*/     VOID*        StackTrace[16];                                    
          }OBJECT_REF_TRACE, *POBJECT_REF_TRACE;                                   
                                                                              
          typedef struct _OBJECT_SYMBOLIC_LINK            // 7 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     union _LARGE_INTEGER CreationTime;          // 4 elements, 0x8 bytes (sizeof)  
              union                                       // 2 elements, 0x10 bytes (sizeof) 
              {                                                                              
/*0x008*/         struct _UNICODE_STRING LinkTarget;      // 3 elements, 0x10 bytes (sizeof) 
                  struct                                  // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                          
/*0x008*/             FUNCT_00A0_46B2_Callback* Callback;                                    
/*0x010*/             VOID*        CallbackContext;                                          
                  };                                                                         
              };                                                                             
/*0x018*/     ULONG32      DosDeviceDriveIndex;                                              
/*0x01C*/     ULONG32      Flags;                                                            
/*0x020*/     ULONG32      AccessMask;                                                       
/*0x024*/     UINT8        _PADDING0_[0x4];                                                  
          }OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK;                                     
                                                                                             
          typedef struct _OBJECT_TYPE_INITIALIZER                                                                                                                                                                                                                                                                                // 32 elements, 0x78 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                          
/*0x000*/     UINT16       Length;                                                                                                                                                                                                                                                                                                                                   
              union                                                                                                                                                                                                                                                                                                              // 2 elements, 0x2 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                                      
/*0x002*/         UINT16       ObjectTypeFlags;                                                                                                                                                                                                                                                                                                                      
                  struct                                                                                                                                                                                                                                                                                                         // 2 elements, 0x2 bytes (sizeof)   
                  {                                                                                                                                                                                                                                                                                                                                                  
                      struct                                                                                                                                                                                                                                                                                                     // 8 elements, 0x1 bytes (sizeof)   
                      {                                                                                                                                                                                                                                                                                                                                              
/*0x002*/                 UINT8        CaseInsensitive : 1;                                                                                                                                                                                                                                                                      // 0 BitPosition                    
/*0x002*/                 UINT8        UnnamedObjectsOnly : 1;                                                                                                                                                                                                                                                                   // 1 BitPosition                    
/*0x002*/                 UINT8        UseDefaultObject : 1;                                                                                                                                                                                                                                                                     // 2 BitPosition                    
/*0x002*/                 UINT8        SecurityRequired : 1;                                                                                                                                                                                                                                                                     // 3 BitPosition                    
/*0x002*/                 UINT8        MaintainHandleCount : 1;                                                                                                                                                                                                                                                                  // 4 BitPosition                    
/*0x002*/                 UINT8        MaintainTypeList : 1;                                                                                                                                                                                                                                                                     // 5 BitPosition                    
/*0x002*/                 UINT8        SupportsObjectCallbacks : 1;                                                                                                                                                                                                                                                              // 6 BitPosition                    
/*0x002*/                 UINT8        CacheAligned : 1;                                                                                                                                                                                                                                                                         // 7 BitPosition                    
                      };                                                                                                                                                                                                                                                                                                                                             
                      struct                                                                                                                                                                                                                                                                                                     // 2 elements, 0x1 bytes (sizeof)   
                      {                                                                                                                                                                                                                                                                                                                                              
/*0x003*/                 UINT8        UseExtendedParameters : 1;                                                                                                                                                                                                                                                                // 0 BitPosition                    
/*0x003*/                 UINT8        Reserved : 7;                                                                                                                                                                                                                                                                             // 1 BitPosition                    
                      };                                                                                                                                                                                                                                                                                                                                             
                  };                                                                                                                                                                                                                                                                                                                                                 
              };                                                                                                                                                                                                                                                                                                                                                     
/*0x004*/     ULONG32      ObjectTypeCode;                                                                                                                                                                                                                                                                                                                           
/*0x008*/     ULONG32      InvalidAttributes;                                                                                                                                                                                                                                                                                                                        
/*0x00C*/     struct _GENERIC_MAPPING GenericMapping;                                                                                                                                                                                                                                                                            // 4 elements, 0x10 bytes (sizeof)  
/*0x01C*/     ULONG32      ValidAccessMask;                                                                                                                                                                                                                                                                                                                          
/*0x020*/     ULONG32      RetainAccess;                                                                                                                                                                                                                                                                                                                             
/*0x024*/     enum _POOL_TYPE PoolType;                                                                                                                                                                                                                                                                                                                              
/*0x028*/     ULONG32      DefaultPagedPoolCharge;                                                                                                                                                                                                                                                                                                                   
/*0x02C*/     ULONG32      DefaultNonPagedPoolCharge;                                                                                                                                                                                                                                                                                                                
/*0x030*/     FUNCT_00EF_1C99_DumpProcedure* DumpProcedure;                                                                                                                                                                                                                                                                                                          
/*0x038*/     FUNCT_00A0_1CA1_OpenProcedure* OpenProcedure;                                                                                                                                                                                                                                                                                                          
/*0x040*/     FUNCT_00EF_1CAF_CloseProcedure* CloseProcedure;                                                                                                                                                                                                                                                                                                        
/*0x048*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DeleteProcedure;                                     
              union                                                                                                                                                                                                                                                                                                              // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                                                                                                                                                                                                                                                                                      
/*0x050*/         FUNCT_00A0_1CB5_ParseProcedure* ParseProcedure;                                                                                                                                                                                                                                                                                                    
/*0x050*/         FUNCT_00A0_1CC1_ParseProcedureEx* ParseProcedureEx;                                                                                                                                                                                                                                                                                                
              };                                                                                                                                                                                                                                                                                                                                                     
/*0x058*/     FUNCT_00A0_1CD3_SecurityProcedure* SecurityProcedure;                                                                                                                                                                                                                                                                                                  
/*0x060*/     FUNCT_00A0_1CE4_QueryNameProcedure* QueryNameProcedure;                                                                                                                                                                                                                                                                                                
/*0x068*/     FUNCT_00A9_1CEC_OkayToCloseProcedure* OkayToCloseProcedure;                                                                                                                                                                                                                                                                                            
/*0x070*/     ULONG32      WaitObjectFlagMask;                                                                                                                                                                                                                                                                                                                       
/*0x074*/     UINT16       WaitObjectFlagOffset;                                                                                                                                                                                                                                                                                                                     
/*0x076*/     UINT16       WaitObjectPointerOffset;                                                                                                                                                                                                                                                                                                                  
          }OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER;                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                     
          typedef struct _OBJECT_TYPE                   // 12 elements, 0xD8 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY TypeList;              // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _UNICODE_STRING Name;              // 3 elements, 0x10 bytes (sizeof)  
/*0x020*/     VOID*        DefaultObject;                                                   
/*0x028*/     UINT8        Index;                                                           
/*0x029*/     UINT8        _PADDING0_[0x3];                                                 
/*0x02C*/     ULONG32      TotalNumberOfObjects;                                            
/*0x030*/     ULONG32      TotalNumberOfHandles;                                            
/*0x034*/     ULONG32      HighWaterNumberOfObjects;                                        
/*0x038*/     ULONG32      HighWaterNumberOfHandles;                                        
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                 
/*0x040*/     struct _OBJECT_TYPE_INITIALIZER TypeInfo; // 32 elements, 0x78 bytes (sizeof) 
/*0x0B8*/     struct _EX_PUSH_LOCK TypeLock;            // 7 elements, 0x8 bytes (sizeof)   
/*0x0C0*/     ULONG32      Key;                                                             
/*0x0C4*/     UINT8        _PADDING2_[0x4];                                                 
/*0x0C8*/     struct _LIST_ENTRY CallbackList;          // 2 elements, 0x10 bytes (sizeof)  
          }OBJECT_TYPE, *POBJECT_TYPE;                                                      
                                                                                            
          typedef struct _OBP_LOOKUP_CONTEXT              // 8 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _OBJECT_DIRECTORY* Directory;                                           
/*0x008*/     VOID*        Object;                                                           
/*0x010*/     struct _OBJECT_DIRECTORY_ENTRY** EntryLink;                                    
/*0x018*/     ULONG32      HashValue;                                                        
/*0x01C*/     UINT16       HashIndex;                                                        
/*0x01E*/     UINT8        DirectoryLocked;                                                  
/*0x01F*/     UINT8        LockedExclusive;                                                  
/*0x020*/     ULONG32      LockStateSignature;                                               
/*0x024*/     UINT8        _PADDING0_[0x4];                                                  
          }OBP_LOOKUP_CONTEXT, *POBP_LOOKUP_CONTEXT;                                         
                                                                                             
          typedef struct _OPEN_PACKET                                    // 33 elements, 0xD8 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     INT16        Type;                                                                             
/*0x002*/     INT16        Size;                                                                             
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                  
/*0x008*/     struct _FILE_OBJECT* FileObject;                                                               
/*0x010*/     LONG32       FinalStatus;                                                                      
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                  
/*0x018*/     UINT64       Information;                                                                      
/*0x020*/     ULONG32      ParseCheck;                                                                       
/*0x024*/     UINT8        _PADDING2_[0x4];                                                                  
              union                                                      // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                              
/*0x028*/         struct _FILE_OBJECT* RelatedFileObject;                                                    
/*0x028*/         struct _DEVICE_OBJECT* ReferencedDeviceObject;                                             
              };                                                                                             
/*0x030*/     struct _OBJECT_ATTRIBUTES* OriginalAttributes;                                                 
/*0x038*/     union _LARGE_INTEGER AllocationSize;                       // 4 elements, 0x8 bytes (sizeof)   
/*0x040*/     ULONG32      CreateOptions;                                                                    
/*0x044*/     UINT16       FileAttributes;                                                                   
/*0x046*/     UINT16       ShareAccess;                                                                      
/*0x048*/     VOID*        EaBuffer;                                                                         
/*0x050*/     ULONG32      EaLength;                                                                         
/*0x054*/     ULONG32      Options;                                                                          
/*0x058*/     ULONG32      Disposition;                                                                      
/*0x05C*/     UINT8        _PADDING3_[0x4];                                                                  
/*0x060*/     struct _FILE_BASIC_INFORMATION* BasicInformation;                                              
/*0x068*/     struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;                                     
/*0x070*/     VOID*        FileInformation;                                                                  
/*0x078*/     enum _CREATE_FILE_TYPE CreateFileType;                                                         
/*0x07C*/     UINT8        _PADDING4_[0x4];                                                                  
/*0x080*/     VOID*        MailslotOrPipeParameters;                                                         
/*0x088*/     UINT8        Override;                                                                         
/*0x089*/     UINT8        QueryOnly;                                                                        
/*0x08A*/     UINT8        DeleteOnly;                                                                       
/*0x08B*/     UINT8        FullAttributes;                                                                   
/*0x08C*/     UINT8        _PADDING5_[0x4];                                                                  
/*0x090*/     struct _DUMMY_FILE_OBJECT* LocalFileObject;                                                    
/*0x098*/     ULONG32      InternalFlags;                                                                    
/*0x09C*/     CHAR         AccessMode;                                                                       
/*0x09D*/     UINT8        _PADDING6_[0x3];                                                                  
/*0x0A0*/     struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;      // 5 elements, 0x28 bytes (sizeof)  
/*0x0C8*/     enum _FILE_INFORMATION_CLASS FileInformationClass;                                             
/*0x0CC*/     ULONG32      FileInformationLength;                                                            
/*0x0D0*/     UINT8        FilterQuery;                                                                      
/*0x0D1*/     UINT8        _PADDING7_[0x7];                                                                  
          }OPEN_PACKET, *POPEN_PACKET;                                                                       
                                                                                                             
          typedef struct _PAGED_LOOKASIDE_LIST // 1 elements, 0x80 bytes (sizeof)  
          {                                                                        
/*0x000*/     struct _GENERAL_LOOKASIDE L;     // 22 elements, 0x80 bytes (sizeof) 
          }PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;                                    
                                                                                   
typedef struct _PAGEFAULT_HISTORY // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}PAGEFAULT_HISTORY, *PPAGEFAULT_HISTORY;                                  
                                                                    
          typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK // 2 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _KEVENT DesiredReferenceNoEvent;     // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     LONG32       DesiredReferenceNo;                                               
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                  
          }PALPC_PORT_REFERENCE_WAIT_BLOCK, *PPALPC_PORT_REFERENCE_WAIT_BLOCK;                                   
                                                                                             
          typedef struct _PCI_BUSMASTER_DESCRIPTOR // 5 elements, 0xC bytes (sizeof) 
          {                                                                          
/*0x000*/     enum _PCI_BUSMASTER_RID_TYPE Type;                                     
/*0x004*/     ULONG32      Segment;                                                  
              union                                // 3 elements, 0x4 bytes (sizeof) 
              {                                                                      
                  struct                           // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x008*/             UINT8        Bus;                                              
/*0x009*/             UINT8        Device;                                           
/*0x00A*/             UINT8        Function;                                         
/*0x00B*/             UINT8        Reserved;                                         
                  }DeviceRid;                                                        
                  struct                           // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                  
/*0x008*/             UINT8        Bus;                                              
/*0x009*/             UINT8        Device;                                           
/*0x00A*/             UINT8        Function;                                         
/*0x00B*/             UINT8        Reserved;                                         
                  }BridgeRid;                                                        
                  struct                           // 2 elements, 0x2 bytes (sizeof) 
                  {                                                                  
/*0x008*/             UINT8        SecondaryBus;                                     
/*0x009*/             UINT8        SubordinateBus;                                   
                  }MultipleBridges;                                                  
              };                                                                     
          }PCI_BUSMASTER_DESCRIPTOR, *PPCI_BUSMASTER_DESCRIPTOR;                                  
                                                                                     
typedef struct _PCW_BUFFER // 0 elements, 0x0 bytes (sizeof) 
{                                                            
}PCW_BUFFER, *PPCW_BUFFER;                                   
                                                             
          typedef struct _PCW_COUNTER_INFORMATION   // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       CounterMask;                                                
/*0x008*/     struct _UNICODE_STRING* InstanceMask;                                    
          }PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION;                                   
                                                                                       
          typedef struct _PCW_MASK_INFORMATION      // 6 elements, 0x28 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       CounterMask;                                                
/*0x008*/     struct _UNICODE_STRING* InstanceMask;                                    
/*0x010*/     ULONG32      InstanceId;                                                 
/*0x014*/     UINT8        CollectMultiple;                                            
/*0x015*/     UINT8        _PADDING0_[0x3];                                            
/*0x018*/     struct _PCW_BUFFER* Buffer;                                              
/*0x020*/     struct _KEVENT* CancelEvent;                                             
          }PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION;                                   
                                                                                       
          typedef union _PCW_CALLBACK_INFORMATION              // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _PCW_COUNTER_INFORMATION AddCounter;      // 2 elements, 0x10 bytes (sizeof) 
/*0x000*/     struct _PCW_COUNTER_INFORMATION RemoveCounter;   // 2 elements, 0x10 bytes (sizeof) 
/*0x000*/     struct _PCW_MASK_INFORMATION EnumerateInstances; // 6 elements, 0x28 bytes (sizeof) 
/*0x000*/     struct _PCW_MASK_INFORMATION CollectData;        // 6 elements, 0x28 bytes (sizeof) 
          }PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION;                                   
                                                                                                  
          typedef struct _PCW_COUNTER_DESCRIPTOR // 4 elements, 0x8 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT16       Id;                                                     
/*0x002*/     UINT16       StructIndex;                                            
/*0x004*/     UINT16       Offset;                                                 
/*0x006*/     UINT16       Size;                                                   
          }PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR;                                  
                                                                                   
          typedef struct _PCW_DATA          // 2 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     VOID*        Data;                                               
/*0x008*/     ULONG32      Size;                                               
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
          }PCW_DATA, *PPCW_DATA;                                               
                                                                               
typedef struct _PCW_INSTANCE // 0 elements, 0x0 bytes (sizeof) 
{                                                              
}PCW_INSTANCE, *PPCW_INSTANCE;                                  
                                                               
          typedef struct _PCW_PROCESSOR_INFO       // 29 elements, 0xC0 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       IdleTime;                                                   
/*0x008*/     UINT64       AvailableTime;                                              
/*0x010*/     UINT64       UserTime;                                                   
/*0x018*/     UINT64       KernelTime;                                                 
/*0x020*/     ULONG32      Interrupts;                                                 
/*0x024*/     UINT8        _PADDING0_[0x4];                                            
/*0x028*/     UINT64       DpcTime;                                                    
/*0x030*/     UINT64       InterruptTime;                                              
/*0x038*/     ULONG32      ClockInterrupts;                                            
/*0x03C*/     ULONG32      DpcCount;                                                   
/*0x040*/     ULONG32      DpcRate;                                                    
/*0x044*/     UINT8        _PADDING1_[0x4];                                            
/*0x048*/     UINT64       C1Time;                                                     
/*0x050*/     UINT64       C2Time;                                                     
/*0x058*/     UINT64       C3Time;                                                     
/*0x060*/     UINT64       C1Transitions;                                              
/*0x068*/     UINT64       C2Transitions;                                              
/*0x070*/     UINT64       C3Transitions;                                              
/*0x078*/     UINT64       StallTime;                                                  
/*0x080*/     ULONG32      ParkingStatus;                                              
/*0x084*/     ULONG32      CurrentFrequency;                                           
/*0x088*/     ULONG32      PercentMaxFrequency;                                        
/*0x08C*/     ULONG32      StateFlags;                                                 
/*0x090*/     ULONG32      NominalThroughput;                                          
/*0x094*/     ULONG32      ActiveThroughput;                                           
/*0x098*/     UINT64       ScaledThroughput;                                           
/*0x0A0*/     UINT64       ScaledKernelThroughput;                                     
/*0x0A8*/     UINT64       AverageIdleTime;                                            
/*0x0B0*/     UINT64       IdleBreakEvents;                                            
/*0x0B8*/     ULONG32      PerformanceLimit;                                           
/*0x0BC*/     ULONG32      PerformanceLimitFlags;                                      
          }PCW_PROCESSOR_INFO, *PPCW_PROCESSOR_INFO;                                    
                                                                                       
typedef struct _PCW_REGISTRATION // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}PCW_REGISTRATION, *PPCW_REGISTRATION;                                  
                                                                   
          typedef struct _PCW_REGISTRATION_INFORMATION  // 6 elements, 0x30 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Version;                                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                
/*0x008*/     struct _UNICODE_STRING* Name;                                                
/*0x010*/     ULONG32      CounterCount;                                                   
/*0x014*/     UINT8        _PADDING1_[0x4];                                                
/*0x018*/     struct _PCW_COUNTER_DESCRIPTOR* Counters;                                    
/*0x020*/     FUNCT_00A0_2845_Callback* Callback;                                          
/*0x028*/     VOID*        CallbackContext;                                                
          }PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION;                                   
                                                                                           
          typedef struct _PEB                                                                                                                                                                                                                                                                                                                                                                                                              // 118 elements, 0x7C8 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x000*/     UINT8        InheritedAddressSpace;                                                                                                                                                                                                                                                                                                                                                                                                                                
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x002*/     UINT8        BeingDebugged;                                                                                                                                                                                                                                                                                                                                                                                                                                        
              union                                                                                                                                                                                                                                                                                                                                                                                                                        // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x003*/         UINT8        BitField;                                                                                                                                                                                                                                                                                                                                                                                                                                         
                  struct                                                                                                                                                                                                                                                                                                                                                                                                                   // 8 elements, 0x1 bytes (sizeof)     
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x003*/             UINT8        ImageUsesLargePages : 1;                                                                                                                                                                                                                                                                                                                                                                                // 0 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcess : 1;                                                                                                                                                                                                                                                                                                                                                                                 // 1 BitPosition                      
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;                                                                                                                                                                                                                                                                                                                                                                        // 2 BitPosition                      
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1;                                                                                                                                                                                                                                                                                                                                                                       // 3 BitPosition                      
/*0x003*/             UINT8        IsPackagedProcess : 1;                                                                                                                                                                                                                                                                                                                                                                                  // 4 BitPosition                      
/*0x003*/             UINT8        IsAppContainer : 1;                                                                                                                                                                                                                                                                                                                                                                                     // 5 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcessLight : 1;                                                                                                                                                                                                                                                                                                                                                                            // 6 BitPosition                      
/*0x003*/             UINT8        IsLongPathAwareProcess : 1;                                                                                                                                                                                                                                                                                                                                                                             // 7 BitPosition                      
                  };                                                                                                                                                                                                                                                                                                                                                                                                                                                             
              };                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x004*/     UINT8        Padding0[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x008*/     VOID*        Mutant;                                                                                                                                                                                                                                                                                                                                                                                                                                               
/*0x010*/     VOID*        ImageBaseAddress;                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x018*/     struct _PEB_LDR_DATA* Ldr;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x020*/     struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x028*/     VOID*        SubSystemData;                                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x030*/     VOID*        ProcessHeap;                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x038*/     struct _RTL_CRITICAL_SECTION* FastPebLock;                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x040*/     union _SLIST_HEADER* AtlThunkSListPtr;                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x048*/     VOID*        IFEOKey;                                                                                                                                                                                                                                                                                                                                                                                                                                              
              union                                                                                                                                                                                                                                                                                                                                                                                                                        // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x050*/         ULONG32      CrossProcessFlags;                                                                                                                                                                                                                                                                                                                                                                                                                                
                  struct                                                                                                                                                                                                                                                                                                                                                                                                                   // 9 elements, 0x4 bytes (sizeof)     
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x050*/             ULONG32      ProcessInJob : 1;                                                                                                                                                                                                                                                                                                                                                                                       // 0 BitPosition                      
/*0x050*/             ULONG32      ProcessInitializing : 1;                                                                                                                                                                                                                                                                                                                                                                                // 1 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingVEH : 1;                                                                                                                                                                                                                                                                                                                                                                                    // 2 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingVCH : 1;                                                                                                                                                                                                                                                                                                                                                                                    // 3 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingFTH : 1;                                                                                                                                                                                                                                                                                                                                                                                    // 4 BitPosition                      
/*0x050*/             ULONG32      ProcessPreviouslyThrottled : 1;                                                                                                                                                                                                                                                                                                                                                                         // 5 BitPosition                      
/*0x050*/             ULONG32      ProcessCurrentlyThrottled : 1;                                                                                                                                                                                                                                                                                                                                                                          // 6 BitPosition                      
/*0x050*/             ULONG32      ProcessImagesHotPatched : 1;                                                                                                                                                                                                                                                                                                                                                                            // 7 BitPosition                      
/*0x050*/             ULONG32      ReservedBits0 : 24;                                                                                                                                                                                                                                                                                                                                                                                     // 8 BitPosition                      
                  };                                                                                                                                                                                                                                                                                                                                                                                                                                                             
              };                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x054*/     UINT8        Padding1[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
              union                                                                                                                                                                                                                                                                                                                                                                                                                        // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x058*/         VOID*        KernelCallbackTable;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x058*/         VOID*        UserSharedInfoPtr;                                                                                                                                                                                                                                                                                                                                                                                                                                
              };                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x060*/     ULONG32      SystemReserved;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x064*/     ULONG32      AtlThunkSListPtr32;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x068*/     VOID*        ApiSetMap;                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x070*/     ULONG32      TlsExpansionCounter;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x074*/     UINT8        Padding2[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x078*/     VOID*        TlsBitmap;                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x080*/     ULONG32      TlsBitmapBits[2];                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x088*/     VOID*        ReadOnlySharedMemoryBase;                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x090*/     VOID*        SharedData;                                                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x098*/     VOID**       ReadOnlyStaticServerData;                                                                                                                                                                                                                                                                                                                                                                                                                             
/*0x0A0*/     VOID*        AnsiCodePageData;                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x0A8*/     VOID*        OemCodePageData;                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x0B0*/     VOID*        UnicodeCaseTableData;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x0B8*/     ULONG32      NumberOfProcessors;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x0BC*/     ULONG32      NtGlobalFlag;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x0C0*/     union _LARGE_INTEGER CriticalSectionTimeout;                                                                                                                                                                                                                                                                                                                                                                                 // 4 elements, 0x8 bytes (sizeof)     
/*0x0C8*/     UINT64       HeapSegmentReserve;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x0D0*/     UINT64       HeapSegmentCommit;                                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x0D8*/     UINT64       HeapDeCommitTotalFreeThreshold;                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x0E0*/     UINT64       HeapDeCommitFreeBlockThreshold;                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x0E8*/     ULONG32      NumberOfHeaps;                                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x0EC*/     ULONG32      MaximumNumberOfHeaps;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x0F0*/     VOID**       ProcessHeaps;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x0F8*/     VOID*        GdiSharedHandleTable;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x100*/     VOID*        ProcessStarterHelper;                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x108*/     ULONG32      GdiDCAttributeList;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x10C*/     UINT8        Padding3[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x110*/     struct _RTL_CRITICAL_SECTION* LoaderLock;                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x118*/     ULONG32      OSMajorVersion;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x11C*/     ULONG32      OSMinorVersion;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x120*/     UINT16       OSBuildNumber;                                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x122*/     UINT16       OSCSDVersion;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x124*/     ULONG32      OSPlatformId;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x128*/     ULONG32      ImageSubsystem;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x12C*/     ULONG32      ImageSubsystemMajorVersion;                                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x130*/     ULONG32      ImageSubsystemMinorVersion;                                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x134*/     UINT8        Padding4[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x138*/     UINT64       ActiveProcessAffinityMask;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x140*/     ULONG32      GdiHandleBuffer[60];                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x230*/     FUNCT_00EF_02EA_PostProcessInitRoutine_HalHaltSystem_KdCheckPowerButton_HalResumeProcessorFromIdle_HalSaveAndDisableHvEnlightenment_HalRestoreHvEnlightenment_HalPciMarkHiberPhase_HalClockTimerInitialize_HalClockTimerStop_HalTimerWatchdogStart_HalTimerWatchdogResetCountdown_HalTimerWatchdogStop_HalAcpiLateRestore_HalInitPlatformDebugTriggers_EndOfInterrupt_DispatchAddress_FinishRoutine* PostProcessInitRoutine;                                       
/*0x238*/     VOID*        TlsExpansionBitmap;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x240*/     ULONG32      TlsExpansionBitmapBits[32];                                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x2C0*/     ULONG32      SessionId;                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x2C4*/     UINT8        Padding5[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x2C8*/     union _ULARGE_INTEGER AppCompatFlags;                                                                                                                                                                                                                                                                                                                                                                                        // 4 elements, 0x8 bytes (sizeof)     
/*0x2D0*/     union _ULARGE_INTEGER AppCompatFlagsUser;                                                                                                                                                                                                                                                                                                                                                                                    // 4 elements, 0x8 bytes (sizeof)     
/*0x2D8*/     VOID*        pShimData;                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x2E0*/     VOID*        AppCompatInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                        
/*0x2E8*/     struct _UNICODE_STRING CSDVersion;                                                                                                                                                                                                                                                                                                                                                                                           // 3 elements, 0x10 bytes (sizeof)    
/*0x2F8*/     struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x300*/     struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;                                                                                                                                                                                                                                                                                                                                                                                                           
/*0x308*/     struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;                                                                                                                                                                                                                                                                                                                                                                                               
/*0x310*/     struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x318*/     UINT64       MinimumStackCommit;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x320*/     struct _FLS_CALLBACK_INFO* FlsCallback;                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x328*/     struct _LIST_ENTRY FlsListHead;                                                                                                                                                                                                                                                                                                                                                                                              // 2 elements, 0x10 bytes (sizeof)    
/*0x338*/     VOID*        FlsBitmap;                                                                                                                                                                                                                                                                                                                                                                                                                                            
/*0x340*/     ULONG32      FlsBitmapBits[4];                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x350*/     ULONG32      FlsHighIndex;                                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x354*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*0x358*/     VOID*        WerRegistrationData;                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x360*/     VOID*        WerShipAssertPtr;                                                                                                                                                                                                                                                                                                                                                                                                                                     
/*0x368*/     VOID*        pUnused;                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x370*/     VOID*        pImageHeaderHash;                                                                                                                                                                                                                                                                                                                                                                                                                                     
              union                                                                                                                                                                                                                                                                                                                                                                                                                        // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x378*/         ULONG32      TracingFlags;                                                                                                                                                                                                                                                                                                                                                                                                                                     
                  struct                                                                                                                                                                                                                                                                                                                                                                                                                   // 4 elements, 0x4 bytes (sizeof)     
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x378*/             ULONG32      HeapTracingEnabled : 1;                                                                                                                                                                                                                                                                                                                                                                                 // 0 BitPosition                      
/*0x378*/             ULONG32      CritSecTracingEnabled : 1;                                                                                                                                                                                                                                                                                                                                                                              // 1 BitPosition                      
/*0x378*/             ULONG32      LibLoaderTracingEnabled : 1;                                                                                                                                                                                                                                                                                                                                                                            // 2 BitPosition                      
/*0x378*/             ULONG32      SpareTracingBits : 29;                                                                                                                                                                                                                                                                                                                                                                                  // 3 BitPosition                      
                  };                                                                                                                                                                                                                                                                                                                                                                                                                                                             
              };                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x37C*/     UINT8        Padding6[4];                                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x380*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                                                                                                                                                                                                                                                                                                                                                                                                    
/*0x388*/     UINT64       TppWorkerpListLock;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x390*/     struct _LIST_ENTRY TppWorkerpList;                                                                                                                                                                                                                                                                                                                                                                                           // 2 elements, 0x10 bytes (sizeof)    
/*0x3A0*/     VOID*        WaitOnAddressHashTable[128];                                                                                                                                                                                                                                                                                                                                                                                                                          
/*0x7A0*/     VOID*        TelemetryCoverageHeader;                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x7A8*/     ULONG32      CloudFileFlags;                                                                                                                                                                                                                                                                                                                                                                                                                                       
/*0x7AC*/     ULONG32      CloudFileDiagFlags;                                                                                                                                                                                                                                                                                                                                                                                                                                   
/*0x7B0*/     CHAR         PlaceholderCompatibilityMode;                                                                                                                                                                                                                                                                                                                                                                                                                         
/*0x7B1*/     CHAR         PlaceholderCompatibilityModeReserved[7];                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x7B8*/     struct _LEAP_SECOND_DATA* LeapSecondData;                                                                                                                                                                                                                                                                                                                                                                                                                          
              union                                                                                                                                                                                                                                                                                                                                                                                                                        // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
/*0x7C0*/         ULONG32      LeapSecondFlags;                                                                                                                                                                                                                                                                                                                                                                                                                                  
                  struct                                                                                                                                                                                                                                                                                                                                                                                                                   // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                                                                                                                                                                                                                                                                                                                                                                                              
/*0x7C0*/             ULONG32      SixtySecondEnabled : 1;                                                                                                                                                                                                                                                                                                                                                                                 // 0 BitPosition                      
/*0x7C0*/             ULONG32      Reserved : 31;                                                                                                                                                                                                                                                                                                                                                                                          // 1 BitPosition                      
                  };                                                                                                                                                                                                                                                                                                                                                                                                                                                             
              };                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
/*0x7C4*/     ULONG32      NtGlobalFlag2;                                                                                                                                                                                                                                                                                                                                                                                                                                        
          }PEB, *PPEB;                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
          typedef struct _PEB_LDR_DATA                            // 9 elements, 0x58 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      Length;                                                                   
/*0x004*/     UINT8        Initialized;                                                              
/*0x005*/     UINT8        _PADDING0_[0x3];                                                          
/*0x008*/     VOID*        SsHandle;                                                                 
/*0x010*/     struct _LIST_ENTRY InLoadOrderModuleList;           // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     struct _LIST_ENTRY InMemoryOrderModuleList;         // 2 elements, 0x10 bytes (sizeof) 
/*0x030*/     struct _LIST_ENTRY InInitializationOrderModuleList; // 2 elements, 0x10 bytes (sizeof) 
/*0x040*/     VOID*        EntryInProgress;                                                          
/*0x048*/     UINT8        ShutdownInProgress;                                                       
/*0x049*/     UINT8        _PADDING1_[0x7];                                                          
/*0x050*/     VOID*        ShutdownThreadId;                                                         
          }PEB_LDR_DATA, *PPEB_LDR_DATA;                                                             
                                                                                                     
          typedef struct _STRING32        // 3 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT16       Length;                                          
/*0x002*/     UINT16       MaximumLength;                                   
/*0x004*/     ULONG32      Buffer;                                          
          }STRING32, *PSTRING32;                                            
                                                                            
          typedef struct _PEB32                                      // 111 elements, 0x480 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT8        InheritedAddressSpace;                                                          
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                       
/*0x002*/     UINT8        BeingDebugged;                                                                  
              union                                                  // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                            
/*0x003*/         UINT8        BitField;                                                                   
                  struct                                             // 8 elements, 0x1 bytes (sizeof)     
                  {                                                                                        
/*0x003*/             UINT8        ImageUsesLargePages : 1;          // 0 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcess : 1;           // 1 BitPosition                      
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;  // 2 BitPosition                      
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1; // 3 BitPosition                      
/*0x003*/             UINT8        IsPackagedProcess : 1;            // 4 BitPosition                      
/*0x003*/             UINT8        IsAppContainer : 1;               // 5 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcessLight : 1;      // 6 BitPosition                      
/*0x003*/             UINT8        IsLongPathAwareProcess : 1;       // 7 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x004*/     ULONG32      Mutant;                                                                         
/*0x008*/     ULONG32      ImageBaseAddress;                                                               
/*0x00C*/     ULONG32      Ldr;                                                                            
/*0x010*/     ULONG32      ProcessParameters;                                                              
/*0x014*/     ULONG32      SubSystemData;                                                                  
/*0x018*/     ULONG32      ProcessHeap;                                                                    
/*0x01C*/     ULONG32      FastPebLock;                                                                    
/*0x020*/     ULONG32      AtlThunkSListPtr;                                                               
/*0x024*/     ULONG32      IFEOKey;                                                                        
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x028*/         ULONG32      CrossProcessFlags;                                                          
                  struct                                             // 9 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x028*/             ULONG32      ProcessInJob : 1;                 // 0 BitPosition                      
/*0x028*/             ULONG32      ProcessInitializing : 1;          // 1 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingVEH : 1;              // 2 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingVCH : 1;              // 3 BitPosition                      
/*0x028*/             ULONG32      ProcessUsingFTH : 1;              // 4 BitPosition                      
/*0x028*/             ULONG32      ProcessPreviouslyThrottled : 1;   // 5 BitPosition                      
/*0x028*/             ULONG32      ProcessCurrentlyThrottled : 1;    // 6 BitPosition                      
/*0x028*/             ULONG32      ProcessImagesHotPatched : 1;      // 7 BitPosition                      
/*0x028*/             ULONG32      ReservedBits0 : 24;               // 8 BitPosition                      
                  };                                                                                       
              };                                                                                           
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x02C*/         ULONG32      KernelCallbackTable;                                                        
/*0x02C*/         ULONG32      UserSharedInfoPtr;                                                          
              };                                                                                           
/*0x030*/     ULONG32      SystemReserved;                                                                 
/*0x034*/     ULONG32      AtlThunkSListPtr32;                                                             
/*0x038*/     ULONG32      ApiSetMap;                                                                      
/*0x03C*/     ULONG32      TlsExpansionCounter;                                                            
/*0x040*/     ULONG32      TlsBitmap;                                                                      
/*0x044*/     ULONG32      TlsBitmapBits[2];                                                               
/*0x04C*/     ULONG32      ReadOnlySharedMemoryBase;                                                       
/*0x050*/     ULONG32      SharedData;                                                                     
/*0x054*/     ULONG32      ReadOnlyStaticServerData;                                                       
/*0x058*/     ULONG32      AnsiCodePageData;                                                               
/*0x05C*/     ULONG32      OemCodePageData;                                                                
/*0x060*/     ULONG32      UnicodeCaseTableData;                                                           
/*0x064*/     ULONG32      NumberOfProcessors;                                                             
/*0x068*/     ULONG32      NtGlobalFlag;                                                                   
/*0x06C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x070*/     union _LARGE_INTEGER CriticalSectionTimeout;           // 4 elements, 0x8 bytes (sizeof)     
/*0x078*/     ULONG32      HeapSegmentReserve;                                                             
/*0x07C*/     ULONG32      HeapSegmentCommit;                                                              
/*0x080*/     ULONG32      HeapDeCommitTotalFreeThreshold;                                                 
/*0x084*/     ULONG32      HeapDeCommitFreeBlockThreshold;                                                 
/*0x088*/     ULONG32      NumberOfHeaps;                                                                  
/*0x08C*/     ULONG32      MaximumNumberOfHeaps;                                                           
/*0x090*/     ULONG32      ProcessHeaps;                                                                   
/*0x094*/     ULONG32      GdiSharedHandleTable;                                                           
/*0x098*/     ULONG32      ProcessStarterHelper;                                                           
/*0x09C*/     ULONG32      GdiDCAttributeList;                                                             
/*0x0A0*/     ULONG32      LoaderLock;                                                                     
/*0x0A4*/     ULONG32      OSMajorVersion;                                                                 
/*0x0A8*/     ULONG32      OSMinorVersion;                                                                 
/*0x0AC*/     UINT16       OSBuildNumber;                                                                  
/*0x0AE*/     UINT16       OSCSDVersion;                                                                   
/*0x0B0*/     ULONG32      OSPlatformId;                                                                   
/*0x0B4*/     ULONG32      ImageSubsystem;                                                                 
/*0x0B8*/     ULONG32      ImageSubsystemMajorVersion;                                                     
/*0x0BC*/     ULONG32      ImageSubsystemMinorVersion;                                                     
/*0x0C0*/     ULONG32      ActiveProcessAffinityMask;                                                      
/*0x0C4*/     ULONG32      GdiHandleBuffer[34];                                                            
/*0x14C*/     ULONG32      PostProcessInitRoutine;                                                         
/*0x150*/     ULONG32      TlsExpansionBitmap;                                                             
/*0x154*/     ULONG32      TlsExpansionBitmapBits[32];                                                     
/*0x1D4*/     ULONG32      SessionId;                                                                      
/*0x1D8*/     union _ULARGE_INTEGER AppCompatFlags;                  // 4 elements, 0x8 bytes (sizeof)     
/*0x1E0*/     union _ULARGE_INTEGER AppCompatFlagsUser;              // 4 elements, 0x8 bytes (sizeof)     
/*0x1E8*/     ULONG32      pShimData;                                                                      
/*0x1EC*/     ULONG32      AppCompatInfo;                                                                  
/*0x1F0*/     struct _STRING32 CSDVersion;                           // 3 elements, 0x8 bytes (sizeof)     
/*0x1F8*/     ULONG32      ActivationContextData;                                                          
/*0x1FC*/     ULONG32      ProcessAssemblyStorageMap;                                                      
/*0x200*/     ULONG32      SystemDefaultActivationContextData;                                             
/*0x204*/     ULONG32      SystemAssemblyStorageMap;                                                       
/*0x208*/     ULONG32      MinimumStackCommit;                                                             
/*0x20C*/     ULONG32      FlsCallback;                                                                    
/*0x210*/     struct _LIST_ENTRY32 FlsListHead;                      // 2 elements, 0x8 bytes (sizeof)     
/*0x218*/     ULONG32      FlsBitmap;                                                                      
/*0x21C*/     ULONG32      FlsBitmapBits[4];                                                               
/*0x22C*/     ULONG32      FlsHighIndex;                                                                   
/*0x230*/     ULONG32      WerRegistrationData;                                                            
/*0x234*/     ULONG32      WerShipAssertPtr;                                                               
/*0x238*/     ULONG32      pUnused;                                                                        
/*0x23C*/     ULONG32      pImageHeaderHash;                                                               
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x240*/         ULONG32      TracingFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x240*/             ULONG32      HeapTracingEnabled : 1;           // 0 BitPosition                      
/*0x240*/             ULONG32      CritSecTracingEnabled : 1;        // 1 BitPosition                      
/*0x240*/             ULONG32      LibLoaderTracingEnabled : 1;      // 2 BitPosition                      
/*0x240*/             ULONG32      SpareTracingBits : 29;            // 3 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x248*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                              
/*0x250*/     ULONG32      TppWorkerpListLock;                                                             
/*0x254*/     struct _LIST_ENTRY32 TppWorkerpList;                   // 2 elements, 0x8 bytes (sizeof)     
/*0x25C*/     ULONG32      WaitOnAddressHashTable[128];                                                    
/*0x45C*/     ULONG32      TelemetryCoverageHeader;                                                        
/*0x460*/     ULONG32      CloudFileFlags;                                                                 
/*0x464*/     ULONG32      CloudFileDiagFlags;                                                             
/*0x468*/     CHAR         PlaceholderCompatibilityMode;                                                   
/*0x469*/     CHAR         PlaceholderCompatibilityModeReserved[7];                                        
/*0x470*/     ULONG32      LeapSecondData;                                                                 
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x474*/         ULONG32      LeapSecondFlags;                                                            
                  struct                                             // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x474*/             ULONG32      SixtySecondEnabled : 1;           // 0 BitPosition                      
/*0x474*/             ULONG32      Reserved : 31;                    // 1 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x478*/     ULONG32      NtGlobalFlag2;                                                                  
/*0x47C*/     UINT8        _PADDING1_[0x4];                                                                
          }PEB32, *PPEB32;                                                                                 
                                                                                                           
          typedef struct _STRING64          // 3 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT16       Length;                                             
/*0x002*/     UINT16       MaximumLength;                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       Buffer;                                             
          }STRING64, *PSTRING64;                                               
                                                                               
          typedef struct _PEB64                                      // 118 elements, 0x7C8 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT8        InheritedAddressSpace;                                                          
/*0x001*/     UINT8        ReadImageFileExecOptions;                                                       
/*0x002*/     UINT8        BeingDebugged;                                                                  
              union                                                  // 2 elements, 0x1 bytes (sizeof)     
              {                                                                                            
/*0x003*/         UINT8        BitField;                                                                   
                  struct                                             // 8 elements, 0x1 bytes (sizeof)     
                  {                                                                                        
/*0x003*/             UINT8        ImageUsesLargePages : 1;          // 0 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcess : 1;           // 1 BitPosition                      
/*0x003*/             UINT8        IsImageDynamicallyRelocated : 1;  // 2 BitPosition                      
/*0x003*/             UINT8        SkipPatchingUser32Forwarders : 1; // 3 BitPosition                      
/*0x003*/             UINT8        IsPackagedProcess : 1;            // 4 BitPosition                      
/*0x003*/             UINT8        IsAppContainer : 1;               // 5 BitPosition                      
/*0x003*/             UINT8        IsProtectedProcessLight : 1;      // 6 BitPosition                      
/*0x003*/             UINT8        IsLongPathAwareProcess : 1;       // 7 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x004*/     UINT8        Padding0[4];                                                                    
/*0x008*/     UINT64       Mutant;                                                                         
/*0x010*/     UINT64       ImageBaseAddress;                                                               
/*0x018*/     UINT64       Ldr;                                                                            
/*0x020*/     UINT64       ProcessParameters;                                                              
/*0x028*/     UINT64       SubSystemData;                                                                  
/*0x030*/     UINT64       ProcessHeap;                                                                    
/*0x038*/     UINT64       FastPebLock;                                                                    
/*0x040*/     UINT64       AtlThunkSListPtr;                                                               
/*0x048*/     UINT64       IFEOKey;                                                                        
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x050*/         ULONG32      CrossProcessFlags;                                                          
                  struct                                             // 9 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x050*/             ULONG32      ProcessInJob : 1;                 // 0 BitPosition                      
/*0x050*/             ULONG32      ProcessInitializing : 1;          // 1 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingVEH : 1;              // 2 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingVCH : 1;              // 3 BitPosition                      
/*0x050*/             ULONG32      ProcessUsingFTH : 1;              // 4 BitPosition                      
/*0x050*/             ULONG32      ProcessPreviouslyThrottled : 1;   // 5 BitPosition                      
/*0x050*/             ULONG32      ProcessCurrentlyThrottled : 1;    // 6 BitPosition                      
/*0x050*/             ULONG32      ProcessImagesHotPatched : 1;      // 7 BitPosition                      
/*0x050*/             ULONG32      ReservedBits0 : 24;               // 8 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x054*/     UINT8        Padding1[4];                                                                    
              union                                                  // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                            
/*0x058*/         UINT64       KernelCallbackTable;                                                        
/*0x058*/         UINT64       UserSharedInfoPtr;                                                          
              };                                                                                           
/*0x060*/     ULONG32      SystemReserved;                                                                 
/*0x064*/     ULONG32      AtlThunkSListPtr32;                                                             
/*0x068*/     UINT64       ApiSetMap;                                                                      
/*0x070*/     ULONG32      TlsExpansionCounter;                                                            
/*0x074*/     UINT8        Padding2[4];                                                                    
/*0x078*/     UINT64       TlsBitmap;                                                                      
/*0x080*/     ULONG32      TlsBitmapBits[2];                                                               
/*0x088*/     UINT64       ReadOnlySharedMemoryBase;                                                       
/*0x090*/     UINT64       SharedData;                                                                     
/*0x098*/     UINT64       ReadOnlyStaticServerData;                                                       
/*0x0A0*/     UINT64       AnsiCodePageData;                                                               
/*0x0A8*/     UINT64       OemCodePageData;                                                                
/*0x0B0*/     UINT64       UnicodeCaseTableData;                                                           
/*0x0B8*/     ULONG32      NumberOfProcessors;                                                             
/*0x0BC*/     ULONG32      NtGlobalFlag;                                                                   
/*0x0C0*/     union _LARGE_INTEGER CriticalSectionTimeout;           // 4 elements, 0x8 bytes (sizeof)     
/*0x0C8*/     UINT64       HeapSegmentReserve;                                                             
/*0x0D0*/     UINT64       HeapSegmentCommit;                                                              
/*0x0D8*/     UINT64       HeapDeCommitTotalFreeThreshold;                                                 
/*0x0E0*/     UINT64       HeapDeCommitFreeBlockThreshold;                                                 
/*0x0E8*/     ULONG32      NumberOfHeaps;                                                                  
/*0x0EC*/     ULONG32      MaximumNumberOfHeaps;                                                           
/*0x0F0*/     UINT64       ProcessHeaps;                                                                   
/*0x0F8*/     UINT64       GdiSharedHandleTable;                                                           
/*0x100*/     UINT64       ProcessStarterHelper;                                                           
/*0x108*/     ULONG32      GdiDCAttributeList;                                                             
/*0x10C*/     UINT8        Padding3[4];                                                                    
/*0x110*/     UINT64       LoaderLock;                                                                     
/*0x118*/     ULONG32      OSMajorVersion;                                                                 
/*0x11C*/     ULONG32      OSMinorVersion;                                                                 
/*0x120*/     UINT16       OSBuildNumber;                                                                  
/*0x122*/     UINT16       OSCSDVersion;                                                                   
/*0x124*/     ULONG32      OSPlatformId;                                                                   
/*0x128*/     ULONG32      ImageSubsystem;                                                                 
/*0x12C*/     ULONG32      ImageSubsystemMajorVersion;                                                     
/*0x130*/     ULONG32      ImageSubsystemMinorVersion;                                                     
/*0x134*/     UINT8        Padding4[4];                                                                    
/*0x138*/     UINT64       ActiveProcessAffinityMask;                                                      
/*0x140*/     ULONG32      GdiHandleBuffer[60];                                                            
/*0x230*/     UINT64       PostProcessInitRoutine;                                                         
/*0x238*/     UINT64       TlsExpansionBitmap;                                                             
/*0x240*/     ULONG32      TlsExpansionBitmapBits[32];                                                     
/*0x2C0*/     ULONG32      SessionId;                                                                      
/*0x2C4*/     UINT8        Padding5[4];                                                                    
/*0x2C8*/     union _ULARGE_INTEGER AppCompatFlags;                  // 4 elements, 0x8 bytes (sizeof)     
/*0x2D0*/     union _ULARGE_INTEGER AppCompatFlagsUser;              // 4 elements, 0x8 bytes (sizeof)     
/*0x2D8*/     UINT64       pShimData;                                                                      
/*0x2E0*/     UINT64       AppCompatInfo;                                                                  
/*0x2E8*/     struct _STRING64 CSDVersion;                           // 3 elements, 0x10 bytes (sizeof)    
/*0x2F8*/     UINT64       ActivationContextData;                                                          
/*0x300*/     UINT64       ProcessAssemblyStorageMap;                                                      
/*0x308*/     UINT64       SystemDefaultActivationContextData;                                             
/*0x310*/     UINT64       SystemAssemblyStorageMap;                                                       
/*0x318*/     UINT64       MinimumStackCommit;                                                             
/*0x320*/     UINT64       FlsCallback;                                                                    
/*0x328*/     struct _LIST_ENTRY64 FlsListHead;                      // 2 elements, 0x10 bytes (sizeof)    
/*0x338*/     UINT64       FlsBitmap;                                                                      
/*0x340*/     ULONG32      FlsBitmapBits[4];                                                               
/*0x350*/     ULONG32      FlsHighIndex;                                                                   
/*0x354*/     UINT8        _PADDING0_[0x4];                                                                
/*0x358*/     UINT64       WerRegistrationData;                                                            
/*0x360*/     UINT64       WerShipAssertPtr;                                                               
/*0x368*/     UINT64       pUnused;                                                                        
/*0x370*/     UINT64       pImageHeaderHash;                                                               
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x378*/         ULONG32      TracingFlags;                                                               
                  struct                                             // 4 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x378*/             ULONG32      HeapTracingEnabled : 1;           // 0 BitPosition                      
/*0x378*/             ULONG32      CritSecTracingEnabled : 1;        // 1 BitPosition                      
/*0x378*/             ULONG32      LibLoaderTracingEnabled : 1;      // 2 BitPosition                      
/*0x378*/             ULONG32      SpareTracingBits : 29;            // 3 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x37C*/     UINT8        Padding6[4];                                                                    
/*0x380*/     UINT64       CsrServerReadOnlySharedMemoryBase;                                              
/*0x388*/     UINT64       TppWorkerpListLock;                                                             
/*0x390*/     struct _LIST_ENTRY64 TppWorkerpList;                   // 2 elements, 0x10 bytes (sizeof)    
/*0x3A0*/     UINT64       WaitOnAddressHashTable[128];                                                    
/*0x7A0*/     UINT64       TelemetryCoverageHeader;                                                        
/*0x7A8*/     ULONG32      CloudFileFlags;                                                                 
/*0x7AC*/     ULONG32      CloudFileDiagFlags;                                                             
/*0x7B0*/     CHAR         PlaceholderCompatibilityMode;                                                   
/*0x7B1*/     CHAR         PlaceholderCompatibilityModeReserved[7];                                        
/*0x7B8*/     UINT64       LeapSecondData;                                                                 
              union                                                  // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                            
/*0x7C0*/         ULONG32      LeapSecondFlags;                                                            
                  struct                                             // 2 elements, 0x4 bytes (sizeof)     
                  {                                                                                        
/*0x7C0*/             ULONG32      SixtySecondEnabled : 1;           // 0 BitPosition                      
/*0x7C0*/             ULONG32      Reserved : 31;                    // 1 BitPosition                      
                  };                                                                                       
              };                                                                                           
/*0x7C4*/     ULONG32      NtGlobalFlag2;                                                                  
          }PEB64, *PPEB64;                                                                                 
                                                                                                           
          typedef struct _PEBS_DS_SAVE_AREA        // 12 elements, 0x60 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       BtsBufferBase;                                              
/*0x008*/     UINT64       BtsIndex;                                                   
/*0x010*/     UINT64       BtsAbsoluteMaximum;                                         
/*0x018*/     UINT64       BtsInterruptThreshold;                                      
/*0x020*/     UINT64       PebsBufferBase;                                             
/*0x028*/     UINT64       PebsIndex;                                                  
/*0x030*/     UINT64       PebsAbsoluteMaximum;                                        
/*0x038*/     UINT64       PebsInterruptThreshold;                                     
/*0x040*/     UINT64       PebsCounterReset0;                                          
/*0x048*/     UINT64       PebsCounterReset1;                                          
/*0x050*/     UINT64       PebsCounterReset2;                                          
/*0x058*/     UINT64       PebsCounterReset3;                                          
          }PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA;                                     
                                                                                       
          typedef struct _PENDING_RELATIONS_LIST_ENTRY     // 14 elements, 0x70 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY Link;                     // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _WORK_QUEUE_ITEM WorkItem;            // 3 elements, 0x20 bytes (sizeof)  
/*0x030*/     struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;                                     
/*0x038*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x040*/     struct _RELATION_LIST* RelationsList;                                            
/*0x048*/     struct _IRP* EjectIrp;                                                           
/*0x050*/     enum _IRPLOCK Lock;                                                              
/*0x054*/     ULONG32      Problem;                                                            
/*0x058*/     UINT8        ProfileChangingEject;                                               
/*0x059*/     UINT8        DisplaySafeRemovalDialog;                                           
/*0x05A*/     UINT8        _PADDING0_[0x2];                                                    
/*0x05C*/     enum _SYSTEM_POWER_STATE LightestSleepState;                                     
/*0x060*/     struct _DOCK_INTERFACE* DockInterface;                                           
/*0x068*/     UINT8        DequeuePending;                                                     
/*0x069*/     UINT8        _PADDING1_[0x3];                                                    
/*0x06C*/     enum _PNP_DEVICE_DELETE_TYPE DeleteType;                                         
          }PENDING_RELATIONS_LIST_ENTRY, *PPENDING_RELATIONS_LIST_ENTRY;                                    
                                                                                               
          typedef union _PEP_ACPI_RESOURCE_FLAGS   // 8 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      AsULong;                                                  
              struct                               // 7 elements, 0x4 bytes (sizeof) 
              {                                                                      
/*0x000*/         ULONG32      Shared : 1;         // 0 BitPosition                  
/*0x000*/         ULONG32      Wake : 1;           // 1 BitPosition                  
/*0x000*/         ULONG32      ResourceUsage : 1;  // 2 BitPosition                  
/*0x000*/         ULONG32      SlaveMode : 1;      // 3 BitPosition                  
/*0x000*/         ULONG32      AddressingMode : 1; // 4 BitPosition                  
/*0x000*/         ULONG32      SharedMode : 1;     // 5 BitPosition                  
/*0x000*/         ULONG32      Reserved : 26;      // 6 BitPosition                  
              };                                                                     
          }PEP_ACPI_RESOURCE_FLAGS, *PPEP_ACPI_RESOURCE_FLAGS;                                  
                                                                                     
          typedef struct _PEP_ACPI_EXTENDED_ADDRESS   // 14 elements, 0x48 bytes (sizeof) 
          {                                                                               
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                          
/*0x004*/     union _PEP_ACPI_RESOURCE_FLAGS Flags;   // 8 elements, 0x4 bytes (sizeof)   
/*0x008*/     UINT8        ResourceFlags;                                                 
/*0x009*/     UINT8        GeneralFlags;                                                  
/*0x00A*/     UINT8        TypeSpecificFlags;                                             
/*0x00B*/     UINT8        RevisionId;                                                    
/*0x00C*/     UINT8        Reserved;                                                      
/*0x00D*/     UINT8        _PADDING0_[0x3];                                               
/*0x010*/     UINT64       Granularity;                                                   
/*0x018*/     UINT64       MinimumAddress;                                                
/*0x020*/     UINT64       MaximumAddress;                                                
/*0x028*/     UINT64       TranslationAddress;                                            
/*0x030*/     UINT64       AddressLength;                                                 
/*0x038*/     UINT64       TypeAttribute;                                                 
/*0x040*/     struct _UNICODE_STRING* DescriptorName;                                     
          }PEP_ACPI_EXTENDED_ADDRESS, *PPEP_ACPI_EXTENDED_ADDRESS;                                    
                                                                                          
          typedef struct _PEP_ACPI_GPIO_RESOURCE                   // 14 elements, 0x48 bytes (sizeof) 
          {                                                                                            
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                                       
/*0x004*/     union _PEP_ACPI_RESOURCE_FLAGS Flags;                // 8 elements, 0x4 bytes (sizeof)   
/*0x008*/     enum _KINTERRUPT_MODE InterruptType;                                                     
/*0x00C*/     enum _KINTERRUPT_POLARITY InterruptPolarity;                                             
/*0x010*/     enum _GPIO_PIN_CONFIG_TYPE PinConfig;                                                    
/*0x014*/     enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;                                     
/*0x018*/     UINT16       DriveStrength;                                                              
/*0x01A*/     UINT16       DebounceTimeout;                                                            
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                            
/*0x020*/     WCHAR*       PinTable;                                                                   
/*0x028*/     UINT16       PinCount;                                                                   
/*0x02A*/     UINT8        ResourceSourceIndex;                                                        
/*0x02B*/     UINT8        _PADDING1_[0x5];                                                            
/*0x030*/     struct _UNICODE_STRING* ResourceSourceName;                                              
/*0x038*/     UINT8*       VendorData;                                                                 
/*0x040*/     UINT16       VendorDataLength;                                                           
/*0x042*/     UINT8        _PADDING2_[0x6];                                                            
          }PEP_ACPI_GPIO_RESOURCE, *PPEP_ACPI_GPIO_RESOURCE;                                           
                                                                                                       
          typedef struct _PEP_ACPI_INTERRUPT_RESOURCE      // 6 elements, 0x20 bytes (sizeof) 
          {                                                                                   
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                              
/*0x004*/     enum _KINTERRUPT_MODE InterruptType;                                            
/*0x008*/     enum _KINTERRUPT_POLARITY InterruptPolarity;                                    
/*0x00C*/     union _PEP_ACPI_RESOURCE_FLAGS Flags;        // 8 elements, 0x4 bytes (sizeof)  
/*0x010*/     UINT8        Count;                                                             
/*0x011*/     UINT8        _PADDING0_[0x7];                                                   
/*0x018*/     ULONG32*     Pins;                                                              
          }PEP_ACPI_INTERRUPT_RESOURCE, *PPEP_ACPI_INTERRUPT_RESOURCE;                                   
                                                                                              
          typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE // 6 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                         
/*0x004*/     UINT8        Information;                                                  
/*0x005*/     UINT8        _PADDING0_[0x3];                                              
/*0x008*/     union _LARGE_INTEGER MinimumAddress;    // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/     union _LARGE_INTEGER MaximumAddress;    // 4 elements, 0x8 bytes (sizeof)  
/*0x018*/     ULONG32      Alignment;                                                    
/*0x01C*/     ULONG32      Length;                                                       
          }PEP_ACPI_IO_MEMORY_RESOURCE, *PPEP_ACPI_IO_MEMORY_RESOURCE;                                   
                                                                                         
          typedef struct _PEP_ACPI_SPB_RESOURCE           // 7 elements, 0x28 bytes (sizeof) 
          {                                                                                  
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                             
/*0x004*/     union _PEP_ACPI_RESOURCE_FLAGS Flags;       // 8 elements, 0x4 bytes (sizeof)  
/*0x008*/     UINT16       TypeSpecificFlags;                                                
/*0x00A*/     UINT8        ResourceSourceIndex;                                              
/*0x00B*/     UINT8        _PADDING0_[0x5];                                                  
/*0x010*/     struct _UNICODE_STRING* ResourceSourceName;                                    
/*0x018*/     CHAR*        VendorData;                                                       
/*0x020*/     UINT16       VendorDataLength;                                                 
/*0x022*/     UINT8        _PADDING1_[0x6];                                                  
          }PEP_ACPI_SPB_RESOURCE, *PPEP_ACPI_SPB_RESOURCE;                                   
                                                                                             
          typedef struct _PEP_ACPI_SPB_I2C_RESOURCE    // 3 elements, 0x30 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // 7 elements, 0x28 bytes (sizeof) 
/*0x028*/     ULONG32      ConnectionSpeed;                                               
/*0x02C*/     UINT16       SlaveAddress;                                                  
/*0x02E*/     UINT8        _PADDING0_[0x2];                                               
          }PEP_ACPI_SPB_I2C_RESOURCE, *PPEP_ACPI_SPB_I2C_RESOURCE;                                   
                                                                                          
          typedef struct _PEP_ACPI_SPB_SPI_RESOURCE    // 6 elements, 0x38 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // 7 elements, 0x28 bytes (sizeof) 
/*0x028*/     ULONG32      ConnectionSpeed;                                               
/*0x02C*/     UINT8        DataBitLength;                                                 
/*0x02D*/     UINT8        Phase;                                                         
/*0x02E*/     UINT8        Polarity;                                                      
/*0x02F*/     UINT8        _PADDING0_[0x1];                                               
/*0x030*/     UINT16       DeviceSelection;                                               
/*0x032*/     UINT8        _PADDING1_[0x6];                                               
          }PEP_ACPI_SPB_SPI_RESOURCE, *PPEP_ACPI_SPB_SPI_RESOURCE;                                   
                                                                                          
          typedef struct _PEP_ACPI_SPB_UART_RESOURCE   // 6 elements, 0x38 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _PEP_ACPI_SPB_RESOURCE SpbCommon; // 7 elements, 0x28 bytes (sizeof) 
/*0x028*/     ULONG32      BaudRate;                                                      
/*0x02C*/     UINT16       RxBufferSize;                                                  
/*0x02E*/     UINT16       TxBufferSize;                                                  
/*0x030*/     UINT8        Parity;                                                        
/*0x031*/     UINT8        LinesInUse;                                                    
/*0x032*/     UINT8        _PADDING0_[0x6];                                               
          }PEP_ACPI_SPB_UART_RESOURCE, *PPEP_ACPI_SPB_UART_RESOURCE;                                   
                                                                                          
          typedef union _PEP_ACPI_RESOURCE                       // 8 elements, 0x48 bytes (sizeof)  
          {                                                                                          
/*0x000*/     enum _PEP_ACPI_RESOURCE_TYPE Type;                                                     
/*0x000*/     struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;      // 6 elements, 0x20 bytes (sizeof)  
/*0x000*/     struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;     // 6 elements, 0x20 bytes (sizeof)  
/*0x000*/     struct _PEP_ACPI_GPIO_RESOURCE Gpio;               // 14 elements, 0x48 bytes (sizeof) 
/*0x000*/     struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;          // 3 elements, 0x30 bytes (sizeof)  
/*0x000*/     struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;          // 6 elements, 0x38 bytes (sizeof)  
/*0x000*/     struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;        // 6 elements, 0x38 bytes (sizeof)  
/*0x000*/     struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress; // 14 elements, 0x48 bytes (sizeof) 
          }PEP_ACPI_RESOURCE, *PPEP_ACPI_RESOURCE;                                                   
                                                                                                     
          typedef struct _PEP_CRASHDUMP_INFORMATION // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _PEPHANDLE__* DeviceHandle;                                       
/*0x008*/     VOID*        DeviceContext;                                              
          }PEP_CRASHDUMP_INFORMATION, *PPEP_CRASHDUMP_INFORMATION;                                   
                                                                                       
          typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                                 
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                                             
/*0x008*/     ULONG32      CompletionFlags;                                                                 
/*0x00C*/     LONG32       MethodStatus;                                                                    
/*0x010*/     VOID*        CompletionContext;                                                               
/*0x018*/     UINT64       OutputArgumentSize;                                                              
/*0x020*/     struct _ACPI_METHOD_ARGUMENT_V1* OutputArguments;                                             
          }PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE, *PPEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;                                   
                                                                                                            
          typedef struct _PEP_WORK_ACPI_NOTIFY  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                    
/*0x008*/     ULONG32      NotifyCode;                                             
/*0x00C*/     UINT8        _PADDING0_[0x4];                                        
          }PEP_WORK_ACPI_NOTIFY, *PPEP_WORK_ACPI_NOTIFY;                                   
                                                                                   
          typedef struct _PEP_WORK_ACTIVE_COMPLETE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                       
/*0x008*/     ULONG32      Component;                                                 
/*0x00C*/     UINT8        _PADDING0_[0x4];                                           
          }PEP_WORK_ACTIVE_COMPLETE, *PPEP_WORK_ACTIVE_COMPLETE;                                   
                                                                                      
          typedef struct _PEP_WORK_COMPLETE_IDLE_STATE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                           
/*0x008*/     ULONG32      Component;                                                     
/*0x00C*/     UINT8        _PADDING0_[0x4];                                               
          }PEP_WORK_COMPLETE_IDLE_STATE, *PPEP_WORK_COMPLETE_IDLE_STATE;                                   
                                                                                          
          typedef struct _PEP_WORK_COMPLETE_PERF_STATE // 3 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                           
/*0x008*/     ULONG32      Component;                                                     
/*0x00C*/     UINT8        Succeeded;                                                     
/*0x00D*/     UINT8        _PADDING0_[0x3];                                               
          }PEP_WORK_COMPLETE_PERF_STATE, *PPEP_WORK_COMPLETE_PERF_STATE;                                   
                                                                                          
          typedef struct _PEP_WORK_DEVICE_IDLE  // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                    
/*0x008*/     UINT8        IgnoreIdleTimeout;                                      
/*0x009*/     UINT8        _PADDING0_[0x7];                                        
          }PEP_WORK_DEVICE_IDLE, *PPEP_WORK_DEVICE_IDLE;                                   
                                                                                   
          typedef struct _PEP_WORK_DEVICE_POWER // 2 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                    
/*0x008*/     UINT8        PowerRequired;                                          
/*0x009*/     UINT8        _PADDING0_[0x7];                                        
          }PEP_WORK_DEVICE_POWER, *PPEP_WORK_DEVICE_POWER;                                   
                                                                                   
          typedef struct _PEP_WORK_IDLE_STATE   // 3 elements, 0x10 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                    
/*0x008*/     ULONG32      Component;                                              
/*0x00C*/     ULONG32      State;                                                  
          }PEP_WORK_IDLE_STATE, *PPEP_WORK_IDLE_STATE;                                   
                                                                                   
          typedef struct _PEP_WORK_POWER_CONTROL // 7 elements, 0x38 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _POHANDLE__* DeviceHandle;                                     
/*0x008*/     struct _GUID* PowerControlCode;                                       
/*0x010*/     VOID*        RequestContext;                                          
/*0x018*/     VOID*        InBuffer;                                                
/*0x020*/     UINT64       InBufferSize;                                            
/*0x028*/     VOID*        OutBuffer;                                               
/*0x030*/     UINT64       OutBufferSize;                                           
          }PEP_WORK_POWER_CONTROL, *PPEP_WORK_POWER_CONTROL;                                   
                                                                                    
          typedef struct _PEP_WORK_INFORMATION                                                  // 10 elements, 0x40 bytes (sizeof) 
          {                                                                                                                         
/*0x000*/     enum _PEP_WORK_TYPE WorkType;                                                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                         
              union                                                                             // 9 elements, 0x38 bytes (sizeof)  
              {                                                                                                                     
/*0x008*/         struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;                              // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_IDLE_STATE IdleState;                                        // 3 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_DEVICE_POWER DevicePower;                                    // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_POWER_CONTROL PowerControl;                                  // 7 elements, 0x38 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_DEVICE_IDLE DeviceIdle;                                      // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;                       // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;                       // 3 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_ACPI_NOTIFY AcpiNotify;                                      // 2 elements, 0x10 bytes (sizeof)  
/*0x008*/         struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete; // 6 elements, 0x28 bytes (sizeof)  
              };                                                                                                                    
          }PEP_WORK_INFORMATION, *PPEP_WORK_INFORMATION;                                                                            
                                                                                                                                    
          typedef struct _PEPHANDLE__ // 1 elements, 0x4 bytes (sizeof) 
          {                                                             
/*0x000*/     INT32        unused;                                      
          }PEPHANDLE__, *PPEPHANDLE__;                                  
                                                                        
          typedef struct _PERF_CONTROL_STATE_SELECTION // 10 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       SelectedState;                                                  
/*0x008*/     ULONG32      SelectedPercent;                                                
/*0x00C*/     ULONG32      SelectedFrequency;                                              
/*0x010*/     ULONG32      MinPercent;                                                     
/*0x014*/     ULONG32      MaxPercent;                                                     
/*0x018*/     ULONG32      TolerancePercent;                                               
/*0x01C*/     ULONG32      EppPercent;                                                     
/*0x020*/     ULONG32      AutonomousActivityWindow;                                       
/*0x024*/     UINT8        Autonomous;                                                     
/*0x025*/     UINT8        InheritFromDomain;                                              
/*0x026*/     UINT8        _PADDING0_[0x2];                                                
          }PERF_CONTROL_STATE_SELECTION, *PPERF_CONTROL_STATE_SELECTION;                                    
                                                                                           
          typedef struct _PERFINFO_PPM_STATE_SELECTION // 3 elements, 0xC bytes (sizeof) 
          {                                                                              
/*0x000*/     ULONG32      SelectedState;                                                
/*0x004*/     ULONG32      VetoedStates;                                                 
/*0x008*/     ULONG32      VetoReason[1];                                                
          }PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION;                                  
                                                                                         
          typedef struct _PERIODIC_CAPTURE_STATE_GUIDS // 2 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT16       ProviderCount;                                                 
/*0x002*/     UINT8        _PADDING0_[0x6];                                               
/*0x008*/     struct _GUID* Providers;                                                    
          }PERIODIC_CAPTURE_STATE_GUIDS, *PPERIODIC_CAPTURE_STATE_GUIDS;                                   
                                                                                          
          typedef struct _PF_KERNEL_GLOBALS           // 8 elements, 0x60 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       AccessBufferAgeThreshold;                                     
/*0x008*/     struct _EX_RUNDOWN_REF AccessBufferRef; // 2 elements, 0x8 bytes (sizeof)  
/*0x010*/     struct _KEVENT AccessBufferExistsEvent; // 1 elements, 0x18 bytes (sizeof) 
/*0x028*/     ULONG32      AccessBufferMax;                                              
/*0x02C*/     UINT8        _PADDING0_[0x14];                                             
/*0x040*/     union _SLIST_HEADER AccessBufferList;   // 3 elements, 0x10 bytes (sizeof) 
/*0x050*/     LONG32       StreamSequenceNumber;                                         
/*0x054*/     ULONG32      Flags;                                                        
/*0x058*/     LONG32       ScenarioPrefetchCount;                                        
/*0x05C*/     UINT8        _PADDING1_[0x4];                                              
          }PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS;                                       
                                                                                         
          typedef struct _PHYSICAL_MEMORY_RUN // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT64       BasePage;                                             
/*0x008*/     UINT64       PageCount;                                            
          }PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN;                                   
                                                                                 
          typedef struct _PHYSICAL_MEMORY_DESCRIPTOR // 3 elements, 0x20 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      NumberOfRuns;                                                
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     UINT64       NumberOfPages;                                               
/*0x010*/     struct _PHYSICAL_MEMORY_RUN Run[1];                                       
          }PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR;                                   
                                                                                        
          typedef struct _PI_BUS_EXTENSION                // 17 elements, 0x70 bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      Flags;                                                             
/*0x004*/     UINT8        NumberCSNs;                                                        
/*0x005*/     UINT8        _PADDING0_[0x3];                                                   
/*0x008*/     UINT8*       ReadDataPort;                                                      
/*0x010*/     UINT8        DataPortMapped;                                                    
/*0x011*/     UINT8        _PADDING1_[0x7];                                                   
/*0x018*/     UINT8*       AddressPort;                                                       
/*0x020*/     UINT8        AddrPortMapped;                                                    
/*0x021*/     UINT8        _PADDING2_[0x7];                                                   
/*0x028*/     UINT8*       CommandPort;                                                       
/*0x030*/     UINT8        CmdPortMapped;                                                     
/*0x031*/     UINT8        _PADDING3_[0x3];                                                   
/*0x034*/     ULONG32      NextSlotNumber;                                                    
/*0x038*/     struct _SINGLE_LIST_ENTRY DeviceList;       // 1 elements, 0x8 bytes (sizeof)   
/*0x040*/     struct _SINGLE_LIST_ENTRY CardList;         // 1 elements, 0x8 bytes (sizeof)   
/*0x048*/     struct _DEVICE_OBJECT* PhysicalBusDevice;                                       
/*0x050*/     struct _DEVICE_OBJECT* FunctionalBusDevice;                                     
/*0x058*/     struct _DEVICE_OBJECT* AttachedDevice;                                          
/*0x060*/     ULONG32      BusNumber;                                                         
/*0x064*/     enum _SYSTEM_POWER_STATE SystemPowerState;                                      
/*0x068*/     enum _DEVICE_POWER_STATE DevicePowerState;                                      
/*0x06C*/     UINT8        _PADDING4_[0x4];                                                   
          }PI_BUS_EXTENSION, *PPI_BUS_EXTENSION;                                              
                                                                                              
          typedef struct _PI_RESOURCE_ARBITER_ENTRY        // 10 elements, 0x70 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY DeviceArbiterList;        // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     UINT8        ResourceType;                                                       
/*0x011*/     UINT8        _PADDING0_[0x7];                                                    
/*0x018*/     struct _ARBITER_INTERFACE* ArbiterInterface;                                     
/*0x020*/     struct _DEVICE_NODE* DeviceNode;                                                 
/*0x028*/     struct _LIST_ENTRY ResourceList;             // 2 elements, 0x10 bytes (sizeof)  
/*0x038*/     struct _LIST_ENTRY BestResourceList;         // 2 elements, 0x10 bytes (sizeof)  
/*0x048*/     struct _LIST_ENTRY BestConfig;               // 2 elements, 0x10 bytes (sizeof)  
/*0x058*/     struct _LIST_ENTRY ActiveArbiterList;        // 2 elements, 0x10 bytes (sizeof)  
/*0x068*/     UINT8        State;                                                              
/*0x069*/     UINT8        ResourcesChanged;                                                   
/*0x06A*/     UINT8        _PADDING1_[0x6];                                                    
          }PI_RESOURCE_ARBITER_ENTRY, *PPI_RESOURCE_ARBITER_ENTRY;                                    
                                                                                               
          typedef struct _PPM_SELECTION_STATISTICS            // 16 elements, 0x80 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT64       SelectedCount;                                                         
/*0x008*/     UINT64       VetoCount;                                                             
/*0x010*/     UINT64       PreVetoCount;                                                          
/*0x018*/     UINT64       WrongProcessorCount;                                                   
/*0x020*/     UINT64       LatencyCount;                                                          
/*0x028*/     UINT64       IdleDurationCount;                                                     
/*0x030*/     UINT64       DeviceDependencyCount;                                                 
/*0x038*/     UINT64       ProcessorDependencyCount;                                              
/*0x040*/     UINT64       PlatformOnlyCount;                                                     
/*0x048*/     UINT64       InterruptibleCount;                                                    
/*0x050*/     UINT64       LegacyOverrideCount;                                                   
/*0x058*/     UINT64       CstateCheckCount;                                                      
/*0x060*/     UINT64       NoCStateCount;                                                         
/*0x068*/     UINT64       CoordinatedDependencyCount;                                            
/*0x070*/     UINT64       NotClockOwnerCount;                                                    
/*0x078*/     struct _PPM_VETO_ACCOUNTING* PreVetoAccounting;                                     
          }PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS;                                    
                                                                                                  
          typedef struct _PROC_IDLE_STATE_BUCKET // 4 elements, 0x20 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       TotalTime;                                               
/*0x008*/     UINT64       MinTime;                                                 
/*0x010*/     UINT64       MaxTime;                                                 
/*0x018*/     ULONG32      Count;                                                   
/*0x01C*/     UINT8        _PADDING0_[0x4];                                         
          }PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET;                                   
                                                                                    
          typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING            // 9 elements, 0x3F0 bytes (sizeof) 
          {                                                                                             
/*0x000*/     ULONG32      CancelCount;                                                                 
/*0x004*/     ULONG32      FailureCount;                                                                
/*0x008*/     ULONG32      SuccessCount;                                                                
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                             
/*0x010*/     UINT64       MaxTime;                                                                     
/*0x018*/     UINT64       MinTime;                                                                     
/*0x020*/     UINT64       TotalTime;                                                                   
/*0x028*/     ULONG32      InvalidBucketIndex;                                                          
/*0x02C*/     UINT8        _PADDING1_[0x4];                                                             
/*0x030*/     struct _PPM_SELECTION_STATISTICS SelectionStatistics; // 16 elements, 0x80 bytes (sizeof) 
/*0x0B0*/     struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                                       
          }PLATFORM_IDLE_STATE_ACCOUNTING, *PPLATFORM_IDLE_STATE_ACCOUNTING;                                    
                                                                                                        
          typedef struct _PLATFORM_IDLE_ACCOUNTING             // 6 elements, 0x408 bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      ResetCount;                                                             
/*0x004*/     ULONG32      StateCount;                                                             
/*0x008*/     ULONG32      DeepSleepCount;                                                         
/*0x00C*/     enum _PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                            
/*0x010*/     UINT64       StartTime;                                                              
/*0x018*/     struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];                                     
          }PLATFORM_IDLE_ACCOUNTING, *PPLATFORM_IDLE_ACCOUNTING;                                    
                                                                                                   
          typedef struct _PLUGPLAY_EVENT_BLOCK                // 7 elements, 0x50 bytes (sizeof)  
          {                                                                                       
/*0x000*/     struct _GUID EventGuid;                         // 4 elements, 0x10 bytes (sizeof)  
/*0x010*/     enum _PLUGPLAY_EVENT_CATEGORY EventCategory;                                        
/*0x014*/     UINT8        _PADDING0_[0x4];                                                       
/*0x018*/     ULONG32*     Result;                                                                
/*0x020*/     ULONG32      Flags;                                                                 
/*0x024*/     ULONG32      TotalSize;                                                             
/*0x028*/     VOID*        DeviceObject;                                                          
              union                                           // 12 elements, 0x20 bytes (sizeof) 
              {                                                                                   
                  struct                                      // 2 elements, 0x14 bytes (sizeof)  
                  {                                                                               
/*0x030*/             struct _GUID ClassGuid;                 // 4 elements, 0x10 bytes (sizeof)  
/*0x040*/             WCHAR        SymbolicLinkName[1];                                           
/*0x042*/             UINT8        _PADDING1_[0x2];                                               
                  }DeviceClass;                                                                   
                  struct                                      // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                               
/*0x030*/             WCHAR        DeviceId[1];                                                   
                  }TargetDevice;                                                                  
                  struct                                      // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                               
/*0x030*/             WCHAR        DeviceId[1];                                                   
                  }InstallDevice;                                                                 
                  struct                                      // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x030*/             VOID*        NotificationStructure;                                         
/*0x038*/             WCHAR        DeviceId[1];                                                   
/*0x03A*/             UINT8        _PADDING1_[0x6];                                               
                  }CustomNotification;                                                            
                  struct                                      // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                               
/*0x030*/             VOID*        Notification;                                                  
                  }ProfileNotification;                                                           
                  struct                                      // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                               
/*0x030*/             ULONG32      NotificationCode;                                              
/*0x034*/             ULONG32      NotificationData;                                              
                  }PowerNotification;                                                             
                  struct                                      // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                               
/*0x030*/             enum _PNP_VETO_TYPE VetoType;                                               
/*0x034*/             WCHAR        DeviceIdVetoNameBuffer[1];                                     
/*0x036*/             UINT8        _PADDING1_[0x2];                                               
                  }VetoNotification;                                                              
                  struct                                      // 1 elements, 0x10 bytes (sizeof)  
                  {                                                                               
/*0x030*/             struct _GUID BlockedDriverGuid;         // 4 elements, 0x10 bytes (sizeof)  
                  }BlockedDriverNotification;                                                     
                  struct                                      // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                               
/*0x030*/             WCHAR        ParentId[1];                                                   
                  }InvalidIDNotification;                                                         
                  struct                                      // 5 elements, 0x20 bytes (sizeof)  
                  {                                                                               
/*0x030*/             struct _GUID PowerSettingGuid;          // 4 elements, 0x10 bytes (sizeof)  
/*0x040*/             ULONG32      Flags;                                                         
/*0x044*/             ULONG32      SessionId;                                                     
/*0x048*/             ULONG32      DataLength;                                                    
/*0x04C*/             UINT8        Data[1];                                                       
/*0x04D*/             UINT8        _PADDING1_[0x3];                                               
                  }PowerSettingNotification;                                                      
                  struct                                      // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                               
/*0x030*/             WCHAR        DeviceId[1];                                                   
                  }PropertyChangeNotification;                                                    
                  struct                                      // 1 elements, 0x2 bytes (sizeof)   
                  {                                                                               
/*0x030*/             WCHAR        DeviceId[1];                                                   
                  }DeviceInstanceNotification;                                                    
              }u;                                                                                 
          }PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK;                                          
                                                                                                  
          typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT // 3 elements, 0x10 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      IncludeFailedDevices;                                          
/*0x004*/     ULONG32      DeviceCount;                                                   
/*0x008*/     struct _DEVICE_OBJECT* DeviceList[1];                                       
          }PNP_ASSIGN_RESOURCES_CONTEXT, *PPNP_ASSIGN_RESOURCES_CONTEXT;                                   
                                                                                          
          typedef struct _PNP_DEVICE_ACTION_ENTRY          // 12 elements, 0x60 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY ListEntry;                // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x018*/     enum _PNP_DEVICE_ACTION_REQUEST RequestType;                                     
/*0x01C*/     UINT8        ReorderingBarrier;                                                  
/*0x01D*/     UINT8        _PADDING0_[0x3];                                                    
/*0x020*/     UINT64       RequestArgument;                                                    
/*0x028*/     struct _KEVENT* CompletionEvent;                                                 
/*0x030*/     LONG32*      CompletionStatus;                                                   
/*0x038*/     struct _GUID ActivityId;                     // 4 elements, 0x10 bytes (sizeof)  
/*0x048*/     LONG32       RefCount;                                                           
/*0x04C*/     UINT8        Dequeued;                                                           
/*0x04D*/     UINT8        _PADDING1_[0x3];                                                    
/*0x050*/     struct _EX_PUSH_LOCK CancelLock;             // 7 elements, 0x8 bytes (sizeof)   
/*0x058*/     UINT8        CancelRequested;                                                    
/*0x059*/     UINT8        _PADDING2_[0x7];                                                    
          }PNP_DEVICE_ACTION_ENTRY, *PPNP_DEVICE_ACTION_ENTRY;                                    
                                                                                               
          typedef struct _PNP_DEVICE_COMPLETION_QUEUE // 5 elements, 0x50 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _LIST_ENTRY DispatchedList;      // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      DispatchedCount;                                              
/*0x014*/     UINT8        _PADDING0_[0x4];                                              
/*0x018*/     struct _LIST_ENTRY CompletedList;       // 2 elements, 0x10 bytes (sizeof) 
/*0x028*/     struct _KSEMAPHORE CompletedSemaphore;  // 2 elements, 0x20 bytes (sizeof) 
/*0x048*/     UINT64       SpinLock;                                                     
          }PNP_DEVICE_COMPLETION_QUEUE, *PPNP_DEVICE_COMPLETION_QUEUE;                                   
                                                                                         
          typedef struct _PNP_DEVICE_COMPLETION_REQUEST                // 10 elements, 0x80 bytes (sizeof) 
          {                                                                                                
/*0x000*/     struct _LIST_ENTRY ListEntry;                            // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _DEVICE_NODE* DeviceNode;                                                             
/*0x018*/     VOID*        Context;                                                                        
/*0x020*/     enum _PNP_DEVNODE_STATE CompletionState;                                                     
/*0x024*/     ULONG32      IrpPended;                                                                      
/*0x028*/     LONG32       Status;                                                                         
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                                
/*0x030*/     VOID*        Information;                                                                    
/*0x038*/     LONG32       ReferenceCount;                                                                 
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                                
/*0x040*/     struct _FAST_MUTEX PnpDeviceCompletionQueueWatchdogLock; // 5 elements, 0x38 bytes (sizeof)  
/*0x078*/     struct _PNP_WATCHDOG* Watchdog;                                                              
          }PNP_DEVICE_COMPLETION_REQUEST, *PPNP_DEVICE_COMPLETION_REQUEST;                                    
                                                                                                           
          typedef struct _PNP_DEVICE_EVENT_ENTRY                                                                                                                                                                                                                                                                          // 15 elements, 0xC0 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                   
/*0x000*/     struct _LIST_ENTRY ListEntry;                                                                                                                                                                                                                                                                               // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     ULONG32      Argument;                                                                                                                                                                                                                                                                                                                          
/*0x014*/     LONG32       ArgumentStatus;                                                                                                                                                                                                                                                                                                                    
/*0x018*/     struct _KEVENT* CallerEvent;                                                                                                                                                                                                                                                                                                                    
/*0x020*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* Callback;                                     
/*0x028*/     VOID*        Context;                                                                                                                                                                                                                                                                                                                           
/*0x030*/     enum _PNP_VETO_TYPE* VetoType;                                                                                                                                                                                                                                                                                                                  
/*0x038*/     struct _UNICODE_STRING* VetoName;                                                                                                                                                                                                                                                                                                               
/*0x040*/     ULONG32      RefCount;                                                                                                                                                                                                                                                                                                                          
/*0x044*/     ULONG32      Lock;                                                                                                                                                                                                                                                                                                                              
/*0x048*/     UINT8        Cancel;                                                                                                                                                                                                                                                                                                                            
/*0x049*/     UINT8        _PADDING0_[0x7];                                                                                                                                                                                                                                                                                                                   
/*0x050*/     struct _PNP_DEVICE_EVENT_ENTRY* Parent;                                                                                                                                                                                                                                                                                                         
/*0x058*/     struct _GUID ActivityId;                                                                                                                                                                                                                                                                                    // 4 elements, 0x10 bytes (sizeof)  
/*0x068*/     struct _PNP_WATCHDOG* Watchdog;                                                                                                                                                                                                                                                                                                                 
/*0x070*/     struct _PLUGPLAY_EVENT_BLOCK Data;                                                                                                                                                                                                                                                                          // 7 elements, 0x50 bytes (sizeof)  
          }PNP_DEVICE_EVENT_ENTRY, *PPNP_DEVICE_EVENT_ENTRY;                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                                              
          typedef struct _PNP_DEVICE_EVENT_LIST // 4 elements, 0x88 bytes (sizeof) 
          {                                                                        
/*0x000*/     LONG32       Status;                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                        
/*0x008*/     struct _KMUTANT EventQueueMutex;  // 5 elements, 0x38 bytes (sizeof) 
/*0x040*/     struct _FAST_MUTEX Lock;          // 5 elements, 0x38 bytes (sizeof) 
/*0x078*/     struct _LIST_ENTRY List;          // 2 elements, 0x10 bytes (sizeof) 
          }PNP_DEVICE_EVENT_LIST, *PPNP_DEVICE_EVENT_LIST;                                   
                                                                                   
          typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT   // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        ResourceType;                                                           
/*0x001*/     UINT8        _PADDING0_[0x3];                                                        
/*0x004*/     ULONG32      AlternativeCount;                                                       
/*0x008*/     struct _IO_RESOURCE_DESCRIPTOR* ResourceRequests;                                    
/*0x010*/     VOID*        ArbiterInstance;                                                        
          }PNP_RESOURCE_CONFLICT_TRACE_CONTEXT, *PPNP_RESOURCE_CONFLICT_TRACE_CONTEXT;                                   
                                                                                                   
          typedef struct _PNP_REBALANCE_TRACE_CONTEXT                                    // 12 elements, 0x70 bytes (sizeof) 
          {                                                                                                                  
/*0x000*/     ULONG32      DeviceCount;                                                                                      
/*0x004*/     ULONG32      RebalancePhase;                                                                                   
/*0x008*/     enum _PNP_REBALANCE_REASON Reason[2];                                                                          
/*0x010*/     enum _PNP_REBALANCE_FAILURE Failure[2];                                                                        
/*0x018*/     struct _DEVICE_NODE* SubtreeRoot;                                                                              
/*0x020*/     UINT8        SubtreeIncludesRoot;                                                                              
/*0x021*/     UINT8        _PADDING0_[0x7];                                                                                  
/*0x028*/     struct _DEVICE_NODE* TriggerRoot;                                                                              
/*0x030*/     UINT8        RebalanceDueToDynamicPartitioning;                                                                
/*0x031*/     UINT8        _PADDING1_[0x7];                                                                                  
/*0x038*/     UINT64       BeginTime;                                                                                        
/*0x040*/     struct _DEVICE_NODE* VetoNode[2];                                                                              
/*0x050*/     enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2];                                     
/*0x058*/     struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;               // 4 elements, 0x18 bytes (sizeof)  
          }PNP_REBALANCE_TRACE_CONTEXT, *PPNP_REBALANCE_TRACE_CONTEXT;                                                       
                                                                                                                             
          typedef struct _PNP_REPLACE_PROCESSOR_LIST // 5 elements, 0x18 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64*      Affinity;                                                    
/*0x008*/     ULONG32      GroupCount;                                                  
/*0x00C*/     ULONG32      AllocatedCount;                                              
/*0x010*/     ULONG32      Count;                                                       
/*0x014*/     ULONG32      ApicIds[1];                                                  
          }PNP_REPLACE_PROCESSOR_LIST, *PPNP_REPLACE_PROCESSOR_LIST;                                   
                                                                                        
          typedef struct _PNP_RESOURCE_REQUEST                             // 10 elements, 0x40 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     struct _DEVICE_OBJECT* PhysicalDevice;                                                           
/*0x008*/     ULONG32      Flags;                                                                              
/*0x00C*/     enum _ARBITER_REQUEST_SOURCE AllocationType;                                                     
/*0x010*/     ULONG32      Priority;                                                                           
/*0x014*/     ULONG32      Position;                                                                           
/*0x018*/     struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;                                     
/*0x020*/     VOID*        ReqList;                                                                            
/*0x028*/     struct _CM_RESOURCE_LIST* ResourceAssignment;                                                    
/*0x030*/     struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;                                          
/*0x038*/     LONG32       Status;                                                                             
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                                    
          }PNP_RESOURCE_REQUEST, *PPNP_RESOURCE_REQUEST;                                                       
                                                                                                               
          typedef struct _PNP_WATCHDOG                     // 9 elements, 0xD8 bytes (sizeof)  
          {                                                                                    
/*0x000*/     UINT64       WatchdogStart;                                                      
/*0x008*/     struct _KTIMER WatchdogTimer;                // 6 elements, 0x40 bytes (sizeof)  
/*0x048*/     struct _KDPC WatchdogDpc;                    // 11 elements, 0x40 bytes (sizeof) 
/*0x088*/     UINT8        WatchdogEnabled;                                                    
/*0x089*/     UINT8        WatchdogSecondChance;                                               
/*0x08A*/     UINT8        _PADDING0_[0x6];                                                    
/*0x090*/     struct _KEVENT WatchdogComplete;             // 1 elements, 0x18 bytes (sizeof)  
/*0x0A8*/     struct _WORK_QUEUE_ITEM WatchdogWorkItem;    // 3 elements, 0x20 bytes (sizeof)  
/*0x0C8*/     enum _PNP_WATCHDOG_TYPE WatchdogContextType;                                     
/*0x0CC*/     UINT8        _PADDING1_[0x4];                                                    
/*0x0D0*/     VOID*        WatchdogContext;                                                    
          }PNP_WATCHDOG, *PPNP_WATCHDOG;                                                       
                                                                                               
          typedef struct _PO_NOTIFY_ORDER_LEVEL // 6 elements, 0x48 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      DeviceCount;                                            
/*0x004*/     ULONG32      ActiveCount;                                            
/*0x008*/     struct _LIST_ENTRY WaitSleep;     // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _LIST_ENTRY ReadySleep;    // 2 elements, 0x10 bytes (sizeof) 
/*0x028*/     struct _LIST_ENTRY ReadyS0;       // 2 elements, 0x10 bytes (sizeof) 
/*0x038*/     struct _LIST_ENTRY WaitS0;        // 2 elements, 0x10 bytes (sizeof) 
          }PO_NOTIFY_ORDER_LEVEL, *PPO_NOTIFY_ORDER_LEVEL;                                   
                                                                                   
          typedef struct _PO_DEVICE_NOTIFY_ORDER           // 4 elements, 0x180 bytes (sizeof) 
          {                                                                                    
/*0x000*/     UINT8        Locked;                                                             
/*0x001*/     UINT8        _PADDING0_[0x7];                                                    
/*0x008*/     struct _DEVICE_OBJECT** WarmEjectPdoPointer;                                     
/*0x010*/     struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];                                     
/*0x178*/     ULONG32      Flags;                                                              
/*0x17C*/     UINT8        _PADDING1_[0x4];                                                    
          }PO_DEVICE_NOTIFY_ORDER, *PPO_DEVICE_NOTIFY_ORDER;                                    
                                                                                               
          typedef struct _PO_DIAG_STACK_RECORD // 2 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      StackDepth;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     VOID*        Stack[1];                                              
          }PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD;                                   
                                                                                  
          typedef struct _PO_FX_COMPONENT_PERF_SET      // 6 elements, 0x30 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _UNICODE_STRING Name;              // 3 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Flags;                                                          
/*0x018*/     enum _PO_FX_PERF_STATE_UNIT Unit;                                            
/*0x01C*/     enum _PO_FX_PERF_STATE_TYPE Type;                                            
              union                                     // 2 elements, 0x10 bytes (sizeof) 
              {                                                                            
                  struct                                // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                        
/*0x020*/             ULONG32      Count;                                                  
/*0x024*/             UINT8        _PADDING0_[0x4];                                        
/*0x028*/             struct _PO_FX_PERF_STATE* States;                                    
                  }Discrete;                                                               
                  struct                                // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                        
/*0x020*/             UINT64       Minimum;                                                
/*0x028*/             UINT64       Maximum;                                                
                  }Range;                                                                  
              };                                                                           
          }PO_FX_COMPONENT_PERF_SET, *PPO_FX_COMPONENT_PERF_SET;                                   
                                                                                           
          typedef struct _PO_FX_PERF_STATE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Value;                                             
/*0x008*/     VOID*        Context;                                           
          }PO_FX_PERF_STATE, *PPO_FX_PERF_STATE;                                   
                                                                              
          typedef struct _PO_FX_PERF_STATE_CHANGE // 3 elements, 0x10 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      Set;                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                          
              union                               // 2 elements, 0x8 bytes (sizeof)  
              {                                                                      
/*0x008*/         ULONG32      StateIndex;                                           
/*0x008*/         UINT64       StateValue;                                           
              };                                                                     
          }PO_FX_PERF_STATE_CHANGE, *PPO_FX_PERF_STATE_CHANGE;                                   
                                                                                     
          typedef struct _PO_HIBER_PERF                           // 66 elements, 0x1F8 bytes (sizeof) 
          {                                                                                            
/*0x000*/     UINT64       HiberIoTicks;                                                               
/*0x008*/     UINT64       HiberIoCpuTicks;                                                            
/*0x010*/     UINT64       HiberInitTicks;                                                             
/*0x018*/     UINT64       HiberHiberFileTicks;                                                        
/*0x020*/     UINT64       HiberCompressTicks;                                                         
/*0x028*/     UINT64       HiberSharedBufferTicks;                                                     
/*0x030*/     UINT64       HiberChecksumTicks;                                                         
/*0x038*/     UINT64       HiberChecksumIoTicks;                                                       
/*0x040*/     union _LARGE_INTEGER TotalHibernateTime;            // 4 elements, 0x8 bytes (sizeof)    
/*0x048*/     union _LARGE_INTEGER HibernateCompleteTimestamp;    // 4 elements, 0x8 bytes (sizeof)    
/*0x050*/     ULONG32      POSTTime;                                                                   
/*0x054*/     ULONG32      ResumeBootMgrTime;                                                          
/*0x058*/     ULONG32      BootmgrUserInputTime;                                                       
/*0x05C*/     UINT8        _PADDING0_[0x4];                                                            
/*0x060*/     UINT64       ResumeAppTicks;                                                             
/*0x068*/     UINT64       ResumeAppStartTimestamp;                                                    
/*0x070*/     UINT64       ResumeLibraryInitTicks;                                                     
/*0x078*/     UINT64       ResumeInitTicks;                                                            
/*0x080*/     UINT64       ResumeRestoreImageStartTimestamp;                                           
/*0x088*/     UINT64       ResumeHiberFileTicks;                                                       
/*0x090*/     UINT64       ResumeIoTicks;                                                              
/*0x098*/     UINT64       ResumeDecompressTicks;                                                      
/*0x0A0*/     UINT64       ResumeAllocateTicks;                                                        
/*0x0A8*/     UINT64       ResumeUserInOutTicks;                                                       
/*0x0B0*/     UINT64       ResumeMapTicks;                                                             
/*0x0B8*/     UINT64       ResumeUnmapTicks;                                                           
/*0x0C0*/     UINT64       ResumeChecksumTicks;                                                        
/*0x0C8*/     UINT64       ResumeChecksumIoTicks;                                                      
/*0x0D0*/     UINT64       ResumeKernelSwitchTimestamp;                                                
/*0x0D8*/     UINT64       CyclesPerMs;                                                                
/*0x0E0*/     UINT64       WriteLogDataTimestamp;                                                      
/*0x0E8*/     UINT64       KernelReturnFromHandler;                                                    
/*0x0F0*/     UINT64       TimeStampCounterAtSwitchTime;                                               
/*0x0F8*/     UINT64       HalTscOffset;                                                               
/*0x100*/     UINT64       HvlTscOffset;                                                               
/*0x108*/     UINT64       SleeperThreadEnd;                                                           
/*0x110*/     UINT64       PostCmosUpdateTimestamp;                                                    
/*0x118*/     UINT64       KernelReturnSystemPowerStateTimestamp;                                      
/*0x120*/     UINT64       IoBoundedness;                                                              
/*0x128*/     UINT64       KernelDecompressTicks;                                                      
/*0x130*/     UINT64       KernelIoTicks;                                                              
/*0x138*/     UINT64       KernelCopyTicks;                                                            
/*0x140*/     UINT64       ReadCheckCount;                                                             
/*0x148*/     UINT64       KernelInitTicks;                                                            
/*0x150*/     UINT64       KernelResumeHiberFileTicks;                                                 
/*0x158*/     UINT64       KernelIoCpuTicks;                                                           
/*0x160*/     UINT64       KernelSharedBufferTicks;                                                    
/*0x168*/     UINT64       KernelAnimationTicks;                                                       
/*0x170*/     UINT64       KernelChecksumTicks;                                                        
/*0x178*/     UINT64       KernelChecksumIoTicks;                                                      
/*0x180*/     union _LARGE_INTEGER AnimationStart;                // 4 elements, 0x8 bytes (sizeof)    
/*0x188*/     union _LARGE_INTEGER AnimationStop;                 // 4 elements, 0x8 bytes (sizeof)    
/*0x190*/     ULONG32      DeviceResumeTime;                                                           
/*0x194*/     UINT8        _PADDING1_[0x4];                                                            
/*0x198*/     UINT64       SecurePagesProcessed;                                                       
/*0x1A0*/     UINT64       BootPagesProcessed;                                                         
/*0x1A8*/     UINT64       KernelPagesProcessed;                                                       
/*0x1B0*/     UINT64       BootBytesWritten;                                                           
/*0x1B8*/     UINT64       KernelBytesWritten;                                                         
/*0x1C0*/     UINT64       BootPagesWritten;                                                           
/*0x1C8*/     UINT64       KernelPagesWritten;                                                         
/*0x1D0*/     UINT64       BytesWritten;                                                               
/*0x1D8*/     ULONG32      PagesWritten;                                                               
/*0x1DC*/     ULONG32      FileRuns;                                                                   
/*0x1E0*/     ULONG32      NoMultiStageResumeReason;                                                   
/*0x1E4*/     ULONG32      MaxHuffRatio;                                                               
/*0x1E8*/     UINT64       AdjustedTotalResumeTime;                                                    
/*0x1F0*/     UINT64       ResumeCompleteTimestamp;                                                    
          }PO_HIBER_PERF, *PPO_HIBER_PERF;                                                             
                                                                                                       
          typedef struct _PO_MEMORY_IMAGE                      // 52 elements, 0x3E0 bytes (sizeof) 
          {                                                                                         
/*0x000*/     ULONG32      Signature;                                                               
/*0x004*/     ULONG32      ImageType;                                                               
/*0x008*/     ULONG32      CheckSum;                                                                
/*0x00C*/     ULONG32      LengthSelf;                                                              
/*0x010*/     UINT64       PageSelf;                                                                
/*0x018*/     ULONG32      PageSize;                                                                
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                         
/*0x020*/     union _LARGE_INTEGER SystemTime;                 // 4 elements, 0x8 bytes (sizeof)    
/*0x028*/     UINT64       InterruptTime;                                                           
/*0x030*/     UINT64       FeatureFlags;                                                            
/*0x038*/     UINT8        HiberFlags;                                                              
/*0x039*/     UINT8        spare[3];                                                                
/*0x03C*/     ULONG32      NoHiberPtes;                                                             
/*0x040*/     UINT64       HiberVa;                                                                 
/*0x048*/     ULONG32      NoFreePages;                                                             
/*0x04C*/     ULONG32      FreeMapCheck;                                                            
/*0x050*/     ULONG32      WakeCheck;                                                               
/*0x054*/     UINT8        _PADDING1_[0x4];                                                         
/*0x058*/     UINT64       NumPagesForLoader;                                                       
/*0x060*/     UINT64       FirstSecureRestorePage;                                                  
/*0x068*/     UINT64       FirstBootRestorePage;                                                    
/*0x070*/     UINT64       FirstKernelRestorePage;                                                  
/*0x078*/     UINT64       FirstChecksumRestorePage;                                                
/*0x080*/     UINT64       NoChecksumEntries;                                                       
/*0x088*/     struct _PO_HIBER_PERF PerfInfo;                  // 66 elements, 0x1F8 bytes (sizeof) 
/*0x280*/     ULONG32      FirmwareRuntimeInformationPages;                                         
/*0x284*/     UINT8        _PADDING2_[0x4];                                                         
/*0x288*/     UINT64       FirmwareRuntimeInformation[1];                                           
/*0x290*/     ULONG32      SpareUlong;                                                              
/*0x294*/     ULONG32      NoBootLoaderLogPages;                                                    
/*0x298*/     UINT64       BootLoaderLogPages[24];                                                  
/*0x358*/     ULONG32      NotUsed;                                                                 
/*0x35C*/     ULONG32      ResumeContextCheck;                                                      
/*0x360*/     ULONG32      ResumeContextPages;                                                      
/*0x364*/     UINT8        Hiberboot;                                                               
/*0x365*/     UINT8        SecureLaunched;                                                          
/*0x366*/     UINT8        SecureBoot;                                                              
/*0x367*/     UINT8        _PADDING3_[0x1];                                                         
/*0x368*/     UINT64       HvCr3;                                                                   
/*0x370*/     UINT64       HvEntryPoint;                                                            
/*0x378*/     UINT64       HvReservedTransitionAddress;                                             
/*0x380*/     UINT64       HvReservedTransitionAddressSize;                                         
/*0x388*/     UINT64       BootFlags;                                                               
/*0x390*/     UINT64       RestoreProcessorStateRoutine;                                            
/*0x398*/     UINT64       HighestPhysicalPage;                                                     
/*0x3A0*/     UINT64       BitlockerKeyPfns[4];                                                     
/*0x3C0*/     ULONG32      HardwareSignature;                                                       
/*0x3C4*/     UINT8        _PADDING4_[0x4];                                                         
/*0x3C8*/     union _LARGE_INTEGER SMBiosTablePhysicalAddress; // 4 elements, 0x8 bytes (sizeof)    
/*0x3D0*/     ULONG32      SMBiosTableLength;                                                       
/*0x3D4*/     UINT8        SMBiosMajorVersion;                                                      
/*0x3D5*/     UINT8        SMBiosMinorVersion;                                                      
/*0x3D6*/     UINT8        HiberResumeXhciHandoffSkip;                                              
/*0x3D7*/     UINT8        InitializeUSBCore;                                                       
/*0x3D8*/     UINT8        ValidUSBCoreId;                                                          
/*0x3D9*/     UINT8        USBCoreId;                                                               
/*0x3DA*/     UINT8        SkipMemoryMapValidation;                                                 
/*0x3DB*/     UINT8        _PADDING5_[0x5];                                                         
          }PO_MEMORY_IMAGE, *PPO_MEMORY_IMAGE;                                                      
                                                                                                    
typedef struct _PO_PROCESS_ENERGY_CONTEXT // 0 elements, 0x0 bytes (sizeof) 
{                                                                           
}PO_PROCESS_ENERGY_CONTEXT, *PPO_PROCESS_ENERGY_CONTEXT;                                  
                                                                            
          typedef struct _POHANDLE__ // 1 elements, 0x4 bytes (sizeof) 
          {                                                            
/*0x000*/     INT32        unused;                                     
          }POHANDLE__, *PPOHANDLE__;                                   
                                                                       
          typedef struct _POOL_HEADER                       // 9 elements, 0x10 bytes (sizeof) 
          {                                                                                    
              union                                         // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                
                  struct                                    // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                            
                      struct                                // 2 elements, 0x2 bytes (sizeof)  
                      {                                                                        
/*0x000*/                 UINT16       PreviousSize : 8;    // 0 BitPosition                   
/*0x000*/                 UINT16       PoolIndex : 8;       // 8 BitPosition                   
                      };                                                                       
                      struct                                // 2 elements, 0x2 bytes (sizeof)  
                      {                                                                        
/*0x002*/                 UINT16       BlockSize : 8;       // 0 BitPosition                   
/*0x002*/                 UINT16       PoolType : 8;        // 8 BitPosition                   
                      };                                                                       
                  };                                                                           
/*0x000*/         ULONG32      Ulong1;                                                         
              };                                                                               
/*0x004*/     ULONG32      PoolTag;                                                            
              union                                         // 2 elements, 0x8 bytes (sizeof)  
              {                                                                                
/*0x008*/         struct _EPROCESS* ProcessBilled;                                             
                  struct                                    // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                            
/*0x008*/             UINT16       AllocatorBackTraceIndex;                                    
/*0x00A*/             UINT16       PoolTagHash;                                                
/*0x00C*/             UINT8        _PADDING0_[0x4];                                            
                  };                                                                           
              };                                                                               
          }POOL_HEADER, *PPOOL_HEADER;                                                         
                                                                                               
          typedef struct _POOL_TRACKER_BIG_PAGES // 6 elements, 0x18 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       Va;                                                      
/*0x008*/     ULONG32      Key;                                                     
              struct                             // 3 elements, 0x4 bytes (sizeof)  
              {                                                                     
/*0x00C*/         ULONG32      Pattern : 8;      // 0 BitPosition                   
/*0x00C*/         ULONG32      PoolType : 12;    // 8 BitPosition                   
/*0x00C*/         ULONG32      SlushSize : 12;   // 20 BitPosition                  
              };                                                                    
/*0x010*/     UINT64       NumberOfBytes;                                           
          }POOL_TRACKER_BIG_PAGES, *PPOOL_TRACKER_BIG_PAGES;                                   
                                                                                    
          typedef struct _POOL_TRACKER_TABLE // 7 elements, 0x38 bytes (sizeof) 
          {                                                                     
/*0x000*/     LONG32       Key;                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                     
/*0x008*/     UINT64       NonPagedBytes;                                       
/*0x010*/     UINT64       NonPagedAllocs;                                      
/*0x018*/     UINT64       NonPagedFrees;                                       
/*0x020*/     UINT64       PagedBytes;                                          
/*0x028*/     UINT64       PagedAllocs;                                         
/*0x030*/     UINT64       PagedFrees;                                          
          }POOL_TRACKER_TABLE, *PPOOL_TRACKER_TABLE;                                   
                                                                                
          typedef struct _POP_ACTION_TRIGGER       // 5 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     enum _POWER_POLICY_DEVICE_TYPE Type;                                    
/*0x004*/     ULONG32      Flags;                                                     
/*0x008*/     struct _POP_TRIGGER_WAIT* Wait;                                         
              union                                // 2 elements, 0x8 bytes (sizeof)  
              {                                                                       
                  struct                           // 1 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x010*/             ULONG32      PercentLevel;                                      
                  }Battery;                                                           
                  struct                           // 1 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x010*/             ULONG32      Type;                                              
                  }Button;                                                            
              };                                                                      
          }POP_ACTION_TRIGGER, *PPOP_ACTION_TRIGGER;                                   
                                                                                      
          typedef struct _POP_RW_LOCK    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     struct _EX_PUSH_LOCK Lock; // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _KTHREAD* Thread;                                      
          }POP_RW_LOCK, *PPOP_RW_LOCK;                                      
                                                                            
          typedef struct _THERMAL_COOLING_INTERFACE                                                                                                                                                                                                                                                                                   // 8 elements, 0x38 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                              
/*0x000*/     UINT16       Size;                                                                                                                                                                                                                                                                                                                                         
/*0x002*/     UINT16       Version;                                                                                                                                                                                                                                                                                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                                                                                                                                                                                                                              
/*0x008*/     VOID*        Context;                                                                                                                                                                                                                                                                                                                                      
/*0x010*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceReference;                                      
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* InterfaceDereference;                                    
/*0x020*/     ULONG32      Flags;                                                                                                                                                                                                                                                                                                                                        
/*0x024*/     UINT8        _PADDING1_[0x4];                                                                                                                                                                                                                                                                                                                              
/*0x028*/     FUNCT_00EF_0F75_ActiveCooling* ActiveCooling;                                                                                                                                                                                                                                                                                                              
/*0x030*/     FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free* PassiveCooling;                                                                                                                                                                                                                                                              
          }THERMAL_COOLING_INTERFACE, *PTHERMAL_COOLING_INTERFACE;                                                                                                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                                                                                                                                         
          typedef struct _POP_COOLING_EXTENSION            // 12 elements, 0x90 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY Link;                     // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _LIST_ENTRY RequestListHead;          // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _POP_RW_LOCK Lock;                    // 2 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x038*/     VOID*        NotificationEntry;                                                  
/*0x040*/     UINT8        Enabled;                                                            
/*0x041*/     UINT8        ActiveEngaged;                                                      
/*0x042*/     UINT8        ThrottleLimit;                                                      
/*0x043*/     UINT8        UpdatingToCurrent;                                                  
/*0x044*/     UINT8        _PADDING0_[0x4];                                                    
/*0x048*/     struct _KEVENT* RemovalFlushEvent;                                               
/*0x050*/     struct _KEVENT* PnpFlushEvent;                                                   
/*0x058*/     struct _THERMAL_COOLING_INTERFACE Interface; // 8 elements, 0x38 bytes (sizeof)  
          }POP_COOLING_EXTENSION, *PPOP_COOLING_EXTENSION;                                     
                                                                                               
          typedef struct _POP_CURRENT_BROADCAST                 // 4 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        InProgress;                                                             
/*0x001*/     UINT8        _PADDING0_[0x3];                                                        
/*0x004*/     struct _SYSTEM_POWER_STATE_CONTEXT SystemContext; // 10 elements, 0x4 bytes (sizeof) 
/*0x008*/     enum _POWER_ACTION PowerAction;                                                      
/*0x00C*/     UINT8        _PADDING1_[0x4];                                                        
/*0x010*/     struct _POP_DEVICE_SYS_STATE* DeviceState;                                           
          }POP_CURRENT_BROADCAST, *PPOP_CURRENT_BROADCAST;                                         
                                                                                                   
          typedef struct _POP_DEVICE_SYS_STATE       // 16 elements, 0x1D8 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        IrpMinor;                                                      
/*0x001*/     UINT8        _PADDING0_[0x3];                                               
/*0x004*/     enum _SYSTEM_POWER_STATE SystemState;                                       
/*0x008*/     UINT64       SpinLock;                                                      
/*0x010*/     struct _KTHREAD* Thread;                                                    
/*0x018*/     struct _KEVENT* AbortEvent;                                                 
/*0x020*/     struct _KSEMAPHORE* ReadySemaphore;                                         
/*0x028*/     struct _KSEMAPHORE* FinishedSemaphore;                                      
/*0x030*/     struct _PO_DEVICE_NOTIFY_ORDER Order;  // 4 elements, 0x180 bytes (sizeof)  
/*0x1B0*/     struct _LIST_ENTRY Pending;            // 2 elements, 0x10 bytes (sizeof)   
/*0x1C0*/     LONG32       Status;                                                        
/*0x1C4*/     UINT8        _PADDING1_[0x4];                                               
/*0x1C8*/     struct _DEVICE_OBJECT* FailedDevice;                                        
/*0x1D0*/     UINT8        Waking;                                                        
/*0x1D1*/     UINT8        Cancelled;                                                     
/*0x1D2*/     UINT8        IgnoreErrors;                                                  
/*0x1D3*/     UINT8        IgnoreNotImplemented;                                          
/*0x1D4*/     UINT8        TimeRefreshLockAcquired;                                       
/*0x1D5*/     UINT8        _PADDING2_[0x3];                                               
          }POP_DEVICE_SYS_STATE, *PPOP_DEVICE_SYS_STATE;                                     
                                                                                          
          typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING // 4 elements, 0x60 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       Total;                                                          
/*0x008*/     UINT64       Unattributed;                                                   
/*0x010*/     UINT64       Buckets[5];                                                     
/*0x038*/     UINT64       PerBucket[5];                                                   
          }POP_FX_ACTIVE_TIME_ACCOUNTING, *PPOP_FX_ACTIVE_TIME_ACCOUNTING;                                   
                                                                                           
          typedef struct _POP_FX_ACCOUNTING                                         // 7 elements, 0xE0 bytes (sizeof) 
          {                                                                                                            
/*0x000*/     UINT64       Lock;                                                                                       
/*0x008*/     UINT8        Active;                                                                                     
/*0x009*/     UINT8        _PADDING0_[0x3];                                                                            
/*0x00C*/     ULONG32      DripsRequiredState;                                                                         
/*0x010*/     LONG32       Level;                                                                                      
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                            
/*0x018*/     INT64        ActiveStamp;                                                                                
/*0x020*/     struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;         // 4 elements, 0x60 bytes (sizeof) 
/*0x080*/     struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting; // 4 elements, 0x60 bytes (sizeof) 
          }POP_FX_ACCOUNTING, *PPOP_FX_ACCOUNTING;                                                                     
                                                                                                                       
          typedef struct _POP_FX_WORK_ORDER                               // 4 elements, 0x38 bytes (sizeof) 
          {                                                                                                  
/*0x000*/     struct _WORK_QUEUE_ITEM WorkItem;                           // 3 elements, 0x20 bytes (sizeof) 
/*0x020*/     LONG32       WorkCount;                                                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                                  
/*0x028*/     VOID*        Context;                                                                          
/*0x030*/     struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;                                    
          }POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER;                                                           
                                                                                                             
          typedef union _POP_FX_COMPONENT_FLAGS              // 8 elements, 0x8 bytes (sizeof) 
          {                                                                                    
              struct                                         // 2 elements, 0x8 bytes (sizeof) 
              {                                                                                
/*0x000*/         LONG32       Value;                                                          
/*0x004*/         LONG32       Value2;                                                         
              };                                                                               
              struct                                         // 1 elements, 0x8 bytes (sizeof) 
              {                                                                                
                  struct                                     // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x000*/             ULONG32      RefCount : 30;            // 0 BitPosition                  
/*0x000*/             ULONG32      Idling : 1;               // 30 BitPosition                 
/*0x000*/             ULONG32      Active : 1;               // 31 BitPosition                 
                  };                                                                           
                  struct                                     // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                            
/*0x004*/             ULONG32      CriticalIdleOverride : 1; // 0 BitPosition                  
/*0x004*/             ULONG32      ResidentOverride : 1;     // 1 BitPosition                  
/*0x004*/             ULONG32      Reserved : 30;            // 2 BitPosition                  
                  };                                                                           
              };                                                                               
          }POP_FX_COMPONENT_FLAGS, *PPOP_FX_COMPONENT_FLAGS;                                   
                                                                                               
          typedef struct _POP_FX_COMPONENT           // 22 elements, 0x1B0 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _GUID Id;                       // 4 elements, 0x10 bytes (sizeof)   
/*0x010*/     ULONG32      Index;                                                         
/*0x014*/     UINT8        _PADDING0_[0x4];                                               
/*0x018*/     struct _POP_FX_WORK_ORDER WorkOrder;   // 4 elements, 0x38 bytes (sizeof)   
/*0x050*/     struct _POP_FX_DEVICE* Device;                                              
/*0x058*/     union _POP_FX_COMPONENT_FLAGS Flags;   // 8 elements, 0x8 bytes (sizeof)    
/*0x060*/     LONG32       Resident;                                                      
/*0x064*/     UINT8        _PADDING1_[0x4];                                               
/*0x068*/     struct _KEVENT ActiveEvent;            // 1 elements, 0x18 bytes (sizeof)   
/*0x080*/     UINT64       IdleLock;                                                      
/*0x088*/     LONG32       IdleConditionComplete;                                         
/*0x08C*/     LONG32       IdleStateComplete;                                             
/*0x090*/     UINT64       IdleStamp;                                                     
/*0x098*/     ULONG32      CurrentIdleState;                                              
/*0x09C*/     ULONG32      IdleStateCount;                                                
/*0x0A0*/     struct _POP_FX_IDLE_STATE* IdleStates;                                      
/*0x0A8*/     ULONG32      DeepestWakeableIdleState;                                      
/*0x0AC*/     ULONG32      ProviderCount;                                                 
/*0x0B0*/     struct _POP_FX_PROVIDER* Providers;                                         
/*0x0B8*/     ULONG32      IdleProviderCount;                                             
/*0x0BC*/     ULONG32      DependentCount;                                                
/*0x0C0*/     struct _POP_FX_DEPENDENT* Dependents;                                       
/*0x0C8*/     struct _POP_FX_ACCOUNTING Accounting;  // 7 elements, 0xE0 bytes (sizeof)   
/*0x1A8*/     struct _POP_FX_PERF_INFO* Performance;                                      
          }POP_FX_COMPONENT, *PPOP_FX_COMPONENT;                                          
                                                                                          
          typedef struct _POP_FX_DEPENDENT // 2 elements, 0x8 bytes (sizeof) 
          {                                                                  
/*0x000*/     ULONG32      Index;                                            
/*0x004*/     ULONG32      ProviderIndex;                                    
          }POP_FX_DEPENDENT, *PPOP_FX_DEPENDENT;                                  
                                                                             
          typedef union _POP_FX_DEVICE_STATUS                    // 16 elements, 0x4 bytes (sizeof) 
          {                                                                                         
/*0x000*/     LONG32       Value;                                                                   
              struct                                             // 15 elements, 0x4 bytes (sizeof) 
              {                                                                                     
/*0x000*/         ULONG32      SystemTransition : 1;             // 0 BitPosition                   
/*0x000*/         ULONG32      PepD0Notify : 1;                  // 1 BitPosition                   
/*0x000*/         ULONG32      IdleTimerOn : 1;                  // 2 BitPosition                   
/*0x000*/         ULONG32      IgnoreIdleTimeout : 1;            // 3 BitPosition                   
/*0x000*/         ULONG32      IrpInUse : 1;                     // 4 BitPosition                   
/*0x000*/         ULONG32      IrpPending : 1;                   // 5 BitPosition                   
/*0x000*/         ULONG32      DPNRDeviceNotified : 1;           // 6 BitPosition                   
/*0x000*/         ULONG32      DPNRReceivedFromPep : 1;          // 7 BitPosition                   
/*0x000*/         ULONG32      IrpFirstPendingIndex : 1;         // 8 BitPosition                   
/*0x000*/         ULONG32      IrpLastPendingIndex : 1;          // 9 BitPosition                   
/*0x000*/         ULONG32      SIrpBlocked : 1;                  // 10 BitPosition                  
/*0x000*/         ULONG32      BlockFastResume : 1;              // 11 BitPosition                  
/*0x000*/         ULONG32      DirectedPoweredDown : 1;          // 12 BitPosition                  
/*0x000*/         ULONG32      DirectedTransitionInProgress : 1; // 13 BitPosition                  
/*0x000*/         ULONG32      Reserved : 18;                    // 14 BitPosition                  
              };                                                                                    
          }POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS;                                            
                                                                                                    
          typedef struct _POP_FX_DRIVER_CALLBACKS                                                                                                                                                                                                                                                                                       // 9 elements, 0x48 bytes (sizeof) 
          {                                                                                                                                                                                                                                                                                                                                                                
/*0x000*/     FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free* ComponentActive;                                                                                                                                                                                                                                                               
/*0x008*/     FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free* ComponentIdle;                                                                                                                                                                                                                                                                 
/*0x010*/     FUNCT_00EF_1A4B_ComponentIdleState* ComponentIdleState;                                                                                                                                                                                                                                                                                                      
/*0x018*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DevicePowerRequired;                                       
/*0x020*/     FUNCT_00EF_08F8_Free_InterfaceReference_InterfaceDereference_WorkerRoutine_Callback_DevicePowerRequired_DevicePowerNotRequired_DeleteCallback_DeleteProcedure_ReleaseFromLazyWrite_ReleaseFromReadAhead_CleanupProcedure_HalLocateHiberRanges_HalDpReplaceTarget_HalDpReplaceEnd_DisableCallback* DevicePowerNotRequired;                                    
/*0x028*/     FUNCT_00A0_1A4D_PowerControl* PowerControl;                                                                                                                                                                                                                                                                                                                  
/*0x030*/     FUNCT_00EF_1A56_ComponentCriticalTransition_KdUnmapVirtualAddress* ComponentCriticalTransition;                                                                                                                                                                                                                                                              
/*0x038*/     FUNCT_00EF_1A5B_DripsWatchdogCallback* DripsWatchdogCallback;                                                                                                                                                                                                                                                                                                
/*0x040*/     FUNCT_00EF_1A60_DirectedPowerTransitionCallback* DirectedPowerTransitionCallback;                                                                                                                                                                                                                                                                            
          }POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS;                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                           
          typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     struct _LIST_ENTRY Link;                  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      ComponentIndex;                                                 
/*0x014*/     UINT8        _PADDING0_[0x4];                                                
/*0x018*/     struct _DEVICE_NODE** ChildDevices;                                          
/*0x020*/     ULONG32      ChildDeviceCount;                                               
/*0x024*/     UINT8        _PADDING1_[0x4];                                                
          }POP_FX_DRIPS_WATCHDOG_CONTEXT, *PPOP_FX_DRIPS_WATCHDOG_CONTEXT;                                   
                                                                                           
          typedef struct _POP_FX_DEVICE                                                             // 46 elements, 0x3E0 bytes (sizeof) 
          {                                                                                                                              
/*0x000*/     struct _LIST_ENTRY Link;                                                              // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _IRP* Irp;                                                                                                          
/*0x018*/     struct _POP_IRP_DATA* IrpData;                                                                                             
/*0x020*/     union _POP_FX_DEVICE_STATUS Status;                                                   // 16 elements, 0x4 bytes (sizeof)   
/*0x024*/     LONG32       PowerReqCall;                                                                                                 
/*0x028*/     LONG32       PowerNotReqCall;                                                                                              
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                                                              
/*0x030*/     struct _DEVICE_NODE* DevNode;                                                                                              
/*0x038*/     struct _PEPHANDLE__* DpmContext;                                                                                           
/*0x040*/     struct _POP_FX_PLUGIN* Plugin;                                                                                             
/*0x048*/     struct _PEPHANDLE__* PluginHandle;                                                                                         
/*0x050*/     struct _POP_FX_PLUGIN* AcpiPlugin;                                                                                         
/*0x058*/     struct _PEPHANDLE__* AcpiPluginHandle;                                                                                     
/*0x060*/     struct _DEVICE_OBJECT* DeviceObject;                                                                                       
/*0x068*/     struct _DEVICE_OBJECT* TargetDevice;                                                                                       
/*0x070*/     struct _POP_FX_DRIVER_CALLBACKS Callbacks;                                            // 9 elements, 0x48 bytes (sizeof)   
/*0x0B8*/     VOID*        DriverContext;                                                                                                
/*0x0C0*/     struct _LIST_ENTRY AcpiLink;                                                          // 2 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     struct _UNICODE_STRING DeviceId;                                                      // 3 elements, 0x10 bytes (sizeof)   
/*0x0E0*/     struct _IO_REMOVE_LOCK RemoveLock;                                                    // 1 elements, 0x20 bytes (sizeof)   
/*0x100*/     struct _IO_REMOVE_LOCK AcpiRemoveLock;                                                // 1 elements, 0x20 bytes (sizeof)   
/*0x120*/     struct _POP_FX_WORK_ORDER WorkOrder;                                                  // 4 elements, 0x38 bytes (sizeof)   
/*0x158*/     UINT64       IdleLock;                                                                                                     
/*0x160*/     struct _KTIMER IdleTimer;                                                             // 6 elements, 0x40 bytes (sizeof)   
/*0x1A0*/     struct _KDPC IdleDpc;                                                                 // 11 elements, 0x40 bytes (sizeof)  
/*0x1E0*/     UINT64       IdleTimeout;                                                                                                  
/*0x1E8*/     UINT64       IdleStamp;                                                                                                    
/*0x1F0*/     struct _DEVICE_OBJECT* NextIrpDeviceObject[2];                                                                             
/*0x200*/     union _POWER_STATE NextIrpPowerState[2];                                                                                   
/*0x208*/     FUNCT_00EF_184D_NextIrpCallerCompletion_CallerCompletion* NextIrpCallerCompletion[2];                                      
/*0x218*/     VOID*        NextIrpCallerContext[2];                                                                                      
/*0x228*/     struct _KEVENT IrpCompleteEvent;                                                      // 1 elements, 0x18 bytes (sizeof)   
/*0x240*/     FUNCT_00A9_1A6F_PowerOnDumpDeviceCallback* PowerOnDumpDeviceCallback;                                                      
/*0x248*/     struct _POP_FX_ACCOUNTING Accounting;                                                 // 7 elements, 0xE0 bytes (sizeof)   
/*0x328*/     ULONG32      Flags;                                                                                                        
/*0x32C*/     ULONG32      ComponentCount;                                                                                               
/*0x330*/     struct _POP_FX_COMPONENT** Components;                                                                                     
/*0x338*/     ULONG32      LogEntries;                                                                                                   
/*0x33C*/     UINT8        _PADDING1_[0x4];                                                                                              
/*0x340*/     struct _POP_FX_LOG_ENTRY* Log;                                                                                             
/*0x348*/     LONG32       LogIndex;                                                                                                     
/*0x34C*/     UINT8        _PADDING2_[0x4];                                                                                              
/*0x350*/     struct _DRIVER_OBJECT* DripsWatchdogDriverObject;                                                                          
/*0x358*/     struct _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;                           // 4 elements, 0x28 bytes (sizeof)   
/*0x380*/     ULONG32      DirectedTimeout;                                                                                              
/*0x384*/     UINT8        _PADDING3_[0x4];                                                                                              
/*0x388*/     struct _POP_FX_WORK_ORDER DirectedWorkOrder;                                          // 4 elements, 0x38 bytes (sizeof)   
/*0x3C0*/     LONG32       DirectedTransitionCallCount;                                                                                  
/*0x3C4*/     UINT8        _PADDING4_[0x4];                                                                                              
/*0x3C8*/     VOID*        DirectedTransitionCompletionContext;                                                                          
/*0x3D0*/     struct _UNICODE_STRING FriendlyName;                                                  // 3 elements, 0x10 bytes (sizeof)   
          }POP_FX_DEVICE, *PPOP_FX_DEVICE;                                                                                               
                                                                                                                                         
          typedef struct _POP_FX_IDLE_STATE      // 3 elements, 0x18 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       TransitionLatency;                                       
/*0x008*/     UINT64       ResidencyRequirement;                                    
/*0x010*/     ULONG32      NominalPower;                                            
/*0x014*/     UINT8        _PADDING0_[0x4];                                         
          }POP_FX_IDLE_STATE, *PPOP_FX_IDLE_STATE;                                   
                                                                                    
          typedef struct _POP_FX_LOG_ENTRY // 7 elements, 0x18 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT64       Timestamp;                                         
/*0x008*/     UINT8        Operation;                                         
/*0x009*/     UINT8        Component;                                         
/*0x00A*/     UINT16       Processor;                                         
/*0x00C*/     UINT16       Process;                                           
/*0x00E*/     UINT16       Thread;                                            
/*0x010*/     UINT64       Information;                                       
          }POP_FX_LOG_ENTRY, *PPOP_FX_LOG_ENTRY;                                   
                                                                              
          typedef union _POP_FX_PERF_FLAGS              // 7 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     LONG32       Value;                                                         
              struct                                    // 6 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      Progress : 3;            // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved : 24;           // 3 BitPosition                  
/*0x000*/         ULONG32      Synchronicity : 2;       // 27 BitPosition                 
/*0x000*/         ULONG32      RequestPepCompleted : 1; // 29 BitPosition                 
/*0x000*/         ULONG32      RequestSucceeded : 1;    // 30 BitPosition                 
/*0x000*/         ULONG32      NestedCallback : 1;      // 31 BitPosition                 
              };                                                                          
          }POP_FX_PERF_FLAGS, *PPOP_FX_PERF_FLAGS;                                        
                                                                                          
          typedef struct _POP_FX_PERF_INFO                            // 14 elements, 0xA0 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _POP_FX_COMPONENT* Component;                                                        
/*0x008*/     struct _KEVENT CompletedEvent;                          // 1 elements, 0x18 bytes (sizeof)  
/*0x020*/     FUNCT_00EF_1AC3_ComponentPerfState* ComponentPerfState;                                     
/*0x028*/     union _POP_FX_PERF_FLAGS Flags;                         // 7 elements, 0x4 bytes (sizeof)   
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                               
/*0x030*/     struct _PO_FX_PERF_STATE_CHANGE* LastChange;                                                
/*0x038*/     ULONG32      LastChangeCount;                                                               
/*0x03C*/     UINT8        _PADDING1_[0x4];                                                               
/*0x040*/     UINT64       LastChangeStamp;                                                               
/*0x048*/     UINT8        LastChangeNominal;                                                             
/*0x049*/     UINT8        PepRegistered;                                                                 
/*0x04A*/     UINT8        QueryOnIdleStates;                                                             
/*0x04B*/     UINT8        _PADDING2_[0x5];                                                               
/*0x050*/     VOID*        RequestDriverContext;                                                          
/*0x058*/     struct _POP_FX_WORK_ORDER WorkOrder;                    // 4 elements, 0x38 bytes (sizeof)  
/*0x090*/     ULONG32      SetsCount;                                                                     
/*0x094*/     UINT8        _PADDING3_[0x4];                                                               
/*0x098*/     struct _POP_FX_PERF_SET* Sets;                                                              
          }POP_FX_PERF_INFO, *PPOP_FX_PERF_INFO;                                                          
                                                                                                          
          typedef struct _POP_FX_PERF_SET                // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _PO_FX_COMPONENT_PERF_SET* PerfSet;                                    
/*0x008*/     UINT64       CurrentPerf;                                                     
/*0x010*/     UINT64       CurrentPerfStamp;                                                
/*0x018*/     UINT8        CurrentPerfNominal;                                              
/*0x019*/     UINT8        _PADDING0_[0x7];                                                 
          }POP_FX_PERF_SET, *PPOP_FX_PERF_SET;                                              
                                                                                            
          typedef struct _POP_FX_PLUGIN                                                                  // 9 elements, 0xB8 bytes (sizeof) 
          {                                                                                                                                 
/*0x000*/     struct _LIST_ENTRY Link;                                                                   // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Version;                                                                                                         
/*0x014*/     UINT8        _PADDING0_[0x4];                                                                                                 
/*0x018*/     UINT64       Flags;                                                                                                           
/*0x020*/     struct _KQUEUE WorkQueue;                                                                  // 5 elements, 0x40 bytes (sizeof) 
/*0x060*/     FUNCT_00A9_18C8_AcceptDeviceNotification_AcceptAcpiNotification* AcceptDeviceNotification;                                    
/*0x068*/     FUNCT_00A9_18CC_AcceptProcessorNotification* AcceptProcessorNotification;                                                     
/*0x070*/     FUNCT_00A9_18C8_AcceptDeviceNotification_AcceptAcpiNotification* AcceptAcpiNotification;                                      
/*0x078*/     ULONG32      WorkOrderCount;                                                                                                  
/*0x07C*/     UINT8        _PADDING1_[0x4];                                                                                                 
/*0x080*/     struct _POP_FX_WORK_ORDER WorkOrders[1];                                                                                      
          }POP_FX_PLUGIN, *PPOP_FX_PLUGIN;                                                                                                  
                                                                                                                                            
          typedef struct _POP_FX_PROVIDER   // 2 elements, 0x8 bytes (sizeof) 
          {                                                                   
/*0x000*/     ULONG32      Index;                                             
/*0x004*/     UINT8        Activating;                                        
/*0x005*/     UINT8        _PADDING0_[0x3];                                   
          }POP_FX_PROVIDER, *PPOP_FX_PROVIDER;                                  
                                                                              
          typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO    // 7 elements, 0xB0 bytes (sizeof)  
          {                                                                                      
/*0x000*/     struct _LIST_ENTRY Link;                       // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _KTIMER Timer;                          // 6 elements, 0x40 bytes (sizeof)  
/*0x050*/     struct _KDPC Dpc;                              // 11 elements, 0x40 bytes (sizeof) 
/*0x090*/     struct _POP_FX_WORK_ORDER* WorkOrder;                                              
/*0x098*/     struct _PEP_WORK_INFORMATION* CurrentWorkInfo;                                     
/*0x0A0*/     UINT64       WatchdogStart;                                                        
/*0x0A8*/     struct _KTHREAD* WorkerThread;                                                     
          }POP_FX_WORK_ORDER_WATCHDOG_INFO, *PPOP_FX_WORK_ORDER_WATCHDOG_INFO;                                    
                                                                                                 
          typedef struct _POP_IO_INFO            // 14 elements, 0x70 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _MDL* DumpMdl;                                                  
/*0x008*/     enum _POP_IO_STATUS IoStatus;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                          
/*0x010*/     UINT64       IoStartCount;                                             
/*0x018*/     UINT64       IoBytesCompleted;                                         
/*0x020*/     UINT64       IoBytesInProgress;                                        
/*0x028*/     UINT64       RequestSize;                                              
/*0x030*/     union _LARGE_INTEGER IoLocation;   // 4 elements, 0x8 bytes (sizeof)   
/*0x038*/     UINT64       FileOffset;                                               
/*0x040*/     VOID*        Buffer;                                                   
/*0x048*/     UINT8        AsyncCapable;                                             
/*0x049*/     UINT8        _PADDING1_[0x7];                                          
/*0x050*/     UINT64       BytesToRead;                                              
/*0x058*/     ULONG32      Pages;                                                    
/*0x05C*/     UINT8        _PADDING2_[0x4];                                          
/*0x060*/     UINT64       HighestChecksumIndex;                                     
/*0x068*/     UINT16       PreviousChecksum;                                         
/*0x06A*/     UINT8        _PADDING3_[0x6];                                          
          }POP_IO_INFO, *PPOP_IO_INFO;                                               
                                                                                     
          typedef struct _POP_HIBER_CONTEXT                        // 54 elements, 0x1C8 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT8        Reset;                                                                       
/*0x001*/     UINT8        HiberFlags;                                                                  
/*0x002*/     UINT8        WroteHiberFile;                                                              
/*0x003*/     UINT8        KernelPhaseVerificationActive;                                               
/*0x004*/     UINT8        InitializationFinished;                                                      
/*0x005*/     UINT8        _PADDING0_[0x3];                                                             
/*0x008*/     LONG32       NextTableLockHeld;                                                           
/*0x00C*/     LONG32       BootPhaseFinishedBarrier;                                                    
/*0x010*/     LONG32       KernelResumeFinishedBarrier;                                                 
/*0x014*/     LONG32       HvCaptureReadyBarrier;                                                       
/*0x018*/     LONG32       HvCaptureCompletedBarrier;                                                   
/*0x01C*/     UINT8        MapFrozen;                                                                   
/*0x01D*/     UINT8        _PADDING1_[0x3];                                                             
              union                                                // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                         
/*0x020*/         struct _RTL_BITMAP DiscardMap;                   // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/         struct _RTL_BITMAP KernelPhaseMap;               // 2 elements, 0x10 bytes (sizeof)   
              };                                                                                        
/*0x030*/     struct _RTL_BITMAP BootPhaseMap;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x040*/     struct _LIST_ENTRY ClonedRanges;                     // 2 elements, 0x10 bytes (sizeof)   
/*0x050*/     ULONG32      ClonedRangeCount;                                                            
/*0x054*/     UINT8        _PADDING2_[0x4];                                                             
/*0x058*/     UINT64       ClonedPageCount;                                                             
/*0x060*/     struct _RTL_BITMAP* CurrentMap;                                                           
/*0x068*/     struct _LIST_ENTRY* NextCloneRange;                                                       
/*0x070*/     UINT64       NextPreserve;                                                                
/*0x078*/     struct _MDL* LoaderMdl;                                                                   
/*0x080*/     struct _MDL* AllocatedMdl;                                                                
/*0x088*/     UINT64       PagesOut;                                                                    
/*0x090*/     VOID*        IoPages;                                                                     
/*0x098*/     ULONG32      IoPagesCount;                                                                
/*0x09C*/     UINT8        _PADDING3_[0x4];                                                             
/*0x0A0*/     VOID*        CurrentMcb;                                                                  
/*0x0A8*/     struct _DUMP_STACK_CONTEXT* DumpStack;                                                    
/*0x0B0*/     struct _KPROCESSOR_STATE* WakeState;                                                      
/*0x0B8*/     ULONG32      IoProgress;                                                                  
/*0x0BC*/     LONG32       Status;                                                                      
/*0x0C0*/     ULONG32      GraphicsProc;                                                                
/*0x0C4*/     UINT8        _PADDING4_[0x4];                                                             
/*0x0C8*/     struct _PO_MEMORY_IMAGE* MemoryImage;                                                     
/*0x0D0*/     ULONG32*     PerformanceStats;                                                            
/*0x0D8*/     struct _MDL* BootLoaderLogMdl;                                                            
/*0x0E0*/     struct _MDL* FirmwareRuntimeInformationMdl;                                               
/*0x0E8*/     VOID*        FirmwareRuntimeInformationVa;                                                
/*0x0F0*/     VOID*        ResumeContext;                                                               
/*0x0F8*/     ULONG32      ResumeContextPages;                                                          
/*0x0FC*/     ULONG32      SecurePages;                                                                 
/*0x100*/     ULONG32      ProcessorCount;                                                              
/*0x104*/     UINT8        _PADDING5_[0x4];                                                             
/*0x108*/     struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;                                      
/*0x110*/     CHAR*        ProdConsBuffer;                                                              
/*0x118*/     ULONG32      ProdConsSize;                                                                
/*0x11C*/     ULONG32      MaxDataPages;                                                                
/*0x120*/     VOID*        ExtraBuffer;                                                                 
/*0x128*/     UINT64       ExtraBufferSize;                                                             
/*0x130*/     VOID*        ExtraMapVa;                                                                  
/*0x138*/     UINT64       BitlockerKeyPFN;                                                             
/*0x140*/     struct _POP_IO_INFO IoInfo;                          // 14 elements, 0x70 bytes (sizeof)  
/*0x1B0*/     WCHAR*       IoChecksums;                                                                 
/*0x1B8*/     UINT64       IoChecksumsSize;                                                             
/*0x1C0*/     ULONG32      HardwareConfigurationSignature;                                              
/*0x1C4*/     UINT8        IumEnabled;                                                                  
/*0x1C5*/     UINT8        SecureBoot;                                                                  
/*0x1C6*/     UINT8        _PADDING6_[0x2];                                                             
          }POP_HIBER_CONTEXT, *PPOP_HIBER_CONTEXT;                                                      
                                                                                                        
          typedef struct _POP_IRP_DATA                                                            // 18 elements, 0xF8 bytes (sizeof) 
          {                                                                                                                           
/*0x000*/     struct _LIST_ENTRY Link;                                                            // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _IRP* Irp;                                                                                                       
/*0x018*/     struct _DEVICE_OBJECT* Pdo;                                                                                             
/*0x020*/     struct _DEVICE_OBJECT* TargetDevice;                                                                                    
/*0x028*/     struct _DEVICE_OBJECT* CurrentDevice;                                                                                   
/*0x030*/     UINT64       WatchdogStart;                                                                                             
/*0x038*/     struct _KTIMER WatchdogTimer;                                                       // 6 elements, 0x40 bytes (sizeof)  
/*0x078*/     struct _KDPC WatchdogDpc;                                                           // 11 elements, 0x40 bytes (sizeof) 
/*0x0B8*/     UINT8        MinorFunction;                                                                                             
/*0x0B9*/     UINT8        _PADDING0_[0x3];                                                                                           
/*0x0BC*/     enum _POWER_STATE_TYPE PowerStateType;                                                                                  
/*0x0C0*/     union _POWER_STATE PowerState;                                                      // 2 elements, 0x4 bytes (sizeof)   
/*0x0C4*/     UINT8        WatchdogEnabled;                                                                                           
/*0x0C5*/     UINT8        _PADDING1_[0x3];                                                                                           
/*0x0C8*/     struct _POP_FX_DEVICE* FxDevice;                                                                                        
/*0x0D0*/     UINT8        SystemTransition;                                                                                          
/*0x0D1*/     UINT8        NotifyPEP;                                                                                                 
/*0x0D2*/     UINT8        _PADDING2_[0x2];                                                                                           
/*0x0D4*/     LONG32       IrpSequenceID;                                                                                             
              union                                                                               // 2 elements, 0x20 bytes (sizeof)  
              {                                                                                                                       
                  struct                                                                          // 4 elements, 0x20 bytes (sizeof)  
                  {                                                                                                                   
/*0x0D8*/             FUNCT_00EF_184D_NextIrpCallerCompletion_CallerCompletion* CallerCompletion;                                     
/*0x0E0*/             VOID*        CallerContext;                                                                                     
/*0x0E8*/             struct _DEVICE_OBJECT* CallerDevice;                                                                            
/*0x0F0*/             UINT8        SystemWake;                                                                                        
/*0x0F1*/             UINT8        _PADDING3_[0x7];                                                                                   
                  }Device;                                                                                                            
                  struct                                                                          // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                                                   
/*0x0D8*/             struct _PO_DEVICE_NOTIFY* NotifyDevice;                                                                         
/*0x0E0*/             UINT8        FxDeviceActivated;                                                                                 
/*0x0E1*/             UINT8        _PADDING3_[0x7];                                                                                   
                  }System;                                                                                                            
              };                                                                                                                      
          }POP_IRP_DATA, *PPOP_IRP_DATA;                                                                                              
                                                                                                                                      
          typedef struct _POP_IRP_WORKER_ENTRY // 5 elements, 0x30 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY Link;         // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _ETHREAD* Thread;                                            
/*0x018*/     struct _IRP* Irp;                                                   
/*0x020*/     struct _DEVICE_OBJECT* Device;                                      
/*0x028*/     UINT8        Static;                                                
/*0x029*/     UINT8        _PADDING0_[0x7];                                       
          }POP_IRP_WORKER_ENTRY, *PPOP_IRP_WORKER_ENTRY;                                   
                                                                                  
          typedef struct _POP_PER_PROCESSOR_CONTEXT    // 15 elements, 0x80 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT8*       UncompressedData;                                               
/*0x008*/     VOID*        MappingVa;                                                      
/*0x010*/     VOID*        XpressEncodeWorkspace;                                          
/*0x018*/     UINT8*       CompressedDataBuffer;                                           
/*0x020*/     UINT64       CopyTicks;                                                      
/*0x028*/     UINT64       CompressTicks;                                                  
/*0x030*/     UINT64       BytesCopied;                                                    
/*0x038*/     UINT64       PagesProcessed;                                                 
/*0x040*/     UINT64       DecompressTicks;                                                
/*0x048*/     UINT64       ResumeCopyTicks;                                                
/*0x050*/     UINT64       SharedBufferTicks;                                              
/*0x058*/     UINT64       DecompressTicksByMethod[2];                                     
/*0x068*/     UINT64       DecompressSizeByMethod[2];                                      
/*0x078*/     ULONG32      CompressCount;                                                  
/*0x07C*/     ULONG32      HuffCompressCount;                                              
          }POP_PER_PROCESSOR_CONTEXT, *PPOP_PER_PROCESSOR_CONTEXT;                                    
                                                                                           
          typedef struct _POP_POLICY_DEVICE              // 6 elements, 0x40 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY Link;                   // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     enum _POWER_POLICY_DEVICE_TYPE DeviceType;                                    
/*0x014*/     UINT8        _PADDING0_[0x4];                                                 
/*0x018*/     VOID*        Notification;                                                    
/*0x020*/     struct _UNICODE_STRING Name;               // 3 elements, 0x10 bytes (sizeof) 
/*0x030*/     struct _DEVICE_OBJECT* Device;                                                
/*0x038*/     struct _IRP* Irp;                                                             
          }POP_POLICY_DEVICE, *PPOP_POLICY_DEVICE;                                          
                                                                                            
          typedef struct __2019100516120A03368D749E1E8314414_WakeAlarm // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                               
/*0x000*/     UINT64       RequestedTime;                                                                 
/*0x008*/     UINT64       ProgrammedTime;                                                                
/*0x010*/     struct _DIAGNOSTIC_BUFFER* TimerInfo;                                                       
          }_2019100516120A03368D749E1E8314414_WakeAlarm, *P_2019100516120A03368D749E1E8314414_WakeAlarm;                                   
                                                                                                          
          typedef struct _SYSTEM_POWER_CAPABILITIES            // 33 elements, 0x4C bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        PowerButtonPresent;                                                     
/*0x001*/     UINT8        SleepButtonPresent;                                                     
/*0x002*/     UINT8        LidPresent;                                                             
/*0x003*/     UINT8        SystemS1;                                                               
/*0x004*/     UINT8        SystemS2;                                                               
/*0x005*/     UINT8        SystemS3;                                                               
/*0x006*/     UINT8        SystemS4;                                                               
/*0x007*/     UINT8        SystemS5;                                                               
/*0x008*/     UINT8        HiberFilePresent;                                                       
/*0x009*/     UINT8        FullWake;                                                               
/*0x00A*/     UINT8        VideoDimPresent;                                                        
/*0x00B*/     UINT8        ApmPresent;                                                             
/*0x00C*/     UINT8        UpsPresent;                                                             
/*0x00D*/     UINT8        ThermalControl;                                                         
/*0x00E*/     UINT8        ProcessorThrottle;                                                      
/*0x00F*/     UINT8        ProcessorMinThrottle;                                                   
/*0x010*/     UINT8        ProcessorMaxThrottle;                                                   
/*0x011*/     UINT8        FastSystemS4;                                                           
/*0x012*/     UINT8        Hiberboot;                                                              
/*0x013*/     UINT8        WakeAlarmPresent;                                                       
/*0x014*/     UINT8        AoAc;                                                                   
/*0x015*/     UINT8        DiskSpinDown;                                                           
/*0x016*/     UINT8        HiberFileType;                                                          
/*0x017*/     UINT8        AoAcConnectivitySupported;                                              
/*0x018*/     UINT8        spare3[6];                                                              
/*0x01E*/     UINT8        SystemBatteriesPresent;                                                 
/*0x01F*/     UINT8        BatteriesAreShortTerm;                                                  
/*0x020*/     struct _BATTERY_REPORTING_SCALE BatteryScale[3];                                     
/*0x038*/     enum _SYSTEM_POWER_STATE AcOnLineWake;                                               
/*0x03C*/     enum _SYSTEM_POWER_STATE SoftLidWake;                                                
/*0x040*/     enum _SYSTEM_POWER_STATE RtcWake;                                                    
/*0x044*/     enum _SYSTEM_POWER_STATE MinDeviceWakeState;                                         
/*0x048*/     enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;                                      
          }SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;                                    
                                                                                                   
          typedef struct _POP_POWER_ACTION                                       // 27 elements, 0x118 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     UINT8        Updates;                                                                                   
/*0x001*/     UINT8        State;                                                                                     
/*0x002*/     UINT8        Shutdown;                                                                                  
/*0x003*/     UINT8        _PADDING0_[0x1];                                                                           
/*0x004*/     enum _POWER_ACTION Action;                                                                              
/*0x008*/     enum _SYSTEM_POWER_STATE LightestState;                                                                 
/*0x00C*/     ULONG32      Flags;                                                                                     
/*0x010*/     LONG32       Status;                                                                                    
/*0x014*/     enum _POWER_POLICY_DEVICE_TYPE DeviceType;                                                              
/*0x018*/     ULONG32      DeviceTypeFlags;                                                                           
/*0x01C*/     UINT8        IrpMinor;                                                                                  
/*0x01D*/     UINT8        Waking;                                                                                    
/*0x01E*/     UINT8        _PADDING1_[0x2];                                                                           
/*0x020*/     enum _SYSTEM_POWER_STATE SystemState;                                                                   
/*0x024*/     enum _SYSTEM_POWER_STATE NextSystemState;                                                               
/*0x028*/     enum _SYSTEM_POWER_STATE EffectiveSystemState;                                                          
/*0x02C*/     enum _SYSTEM_POWER_STATE CurrentSystemState;                                                            
/*0x030*/     struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;                                                        
/*0x038*/     struct _POP_DEVICE_SYS_STATE* DevState;                                                                 
/*0x040*/     struct _POP_HIBER_CONTEXT* HiberContext;                                                                
/*0x048*/     UINT64       WakeTime;                                                                                  
/*0x050*/     UINT64       SleepTime;                                                                                 
/*0x058*/     UINT64       WakeFirstUnattendedTime;                                                                   
/*0x060*/     enum _SYSTEM_POWER_CONDITION WakeAlarmSignaled;                                                         
/*0x064*/     UINT8        _PADDING2_[0x4];                                                                           
/*0x068*/     struct __2019100516120A03368D749E1E8314414_WakeAlarm WakeAlarm[3];                                      
/*0x0B0*/     UINT8        WakeAlarmPaused;                                                                           
/*0x0B1*/     UINT8        _PADDING3_[0x7];                                                                           
/*0x0B8*/     UINT64       WakeAlarmLastTime;                                                                         
/*0x0C0*/     UINT64       DozeDeferralStartTime;                                                                     
/*0x0C8*/     struct _SYSTEM_POWER_CAPABILITIES FilteredCapabilities;            // 33 elements, 0x4C bytes (sizeof)  
/*0x114*/     UINT8        _PADDING4_[0x4];                                                                           
          }POP_POWER_ACTION, *PPOP_POWER_ACTION;                                                                      
                                                                                                                      
          typedef struct _POWER_ACTION_POLICY // 3 elements, 0xC bytes (sizeof) 
          {                                                                     
/*0x000*/     enum _POWER_ACTION Action;                                        
/*0x004*/     ULONG32      Flags;                                               
/*0x008*/     ULONG32      EventCode;                                           
          }POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;                                  
                                                                                
          typedef struct _SYSTEM_POWER_LEVEL           // 5 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        Enable;                                                        
/*0x001*/     UINT8        Spare[3];                                                      
/*0x004*/     ULONG32      BatteryLevel;                                                  
/*0x008*/     struct _POWER_ACTION_POLICY PowerPolicy; // 3 elements, 0xC bytes (sizeof)  
/*0x014*/     enum _SYSTEM_POWER_STATE MinSystemState;                                    
          }SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;                                      
                                                                                          
          typedef struct _SYSTEM_POWER_POLICY                // 28 elements, 0xE8 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Revision;                                                             
/*0x004*/     struct _POWER_ACTION_POLICY PowerButton;       // 3 elements, 0xC bytes (sizeof)   
/*0x010*/     struct _POWER_ACTION_POLICY SleepButton;       // 3 elements, 0xC bytes (sizeof)   
/*0x01C*/     struct _POWER_ACTION_POLICY LidClose;          // 3 elements, 0xC bytes (sizeof)   
/*0x028*/     enum _SYSTEM_POWER_STATE LidOpenWake;                                              
/*0x02C*/     ULONG32      Reserved;                                                             
/*0x030*/     struct _POWER_ACTION_POLICY Idle;              // 3 elements, 0xC bytes (sizeof)   
/*0x03C*/     ULONG32      IdleTimeout;                                                          
/*0x040*/     UINT8        IdleSensitivity;                                                      
/*0x041*/     UINT8        DynamicThrottle;                                                      
/*0x042*/     UINT8        Spare2[2];                                                            
/*0x044*/     enum _SYSTEM_POWER_STATE MinSleep;                                                 
/*0x048*/     enum _SYSTEM_POWER_STATE MaxSleep;                                                 
/*0x04C*/     enum _SYSTEM_POWER_STATE ReducedLatencySleep;                                      
/*0x050*/     ULONG32      WinLogonFlags;                                                        
/*0x054*/     ULONG32      Spare3;                                                               
/*0x058*/     ULONG32      DozeS4Timeout;                                                        
/*0x05C*/     ULONG32      BroadcastCapacityResolution;                                          
/*0x060*/     struct _SYSTEM_POWER_LEVEL DischargePolicy[4];                                     
/*0x0C0*/     ULONG32      VideoTimeout;                                                         
/*0x0C4*/     UINT8        VideoDimDisplay;                                                      
/*0x0C5*/     UINT8        _PADDING0_[0x3];                                                      
/*0x0C8*/     ULONG32      VideoReserved[3];                                                     
/*0x0D4*/     ULONG32      SpindownTimeout;                                                      
/*0x0D8*/     UINT8        OptimizeForPower;                                                     
/*0x0D9*/     UINT8        FanThrottleTolerance;                                                 
/*0x0DA*/     UINT8        ForcedThrottle;                                                       
/*0x0DB*/     UINT8        MinThrottle;                                                          
/*0x0DC*/     struct _POWER_ACTION_POLICY OverThrottled;     // 3 elements, 0xC bytes (sizeof)   
          }SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;                                           
                                                                                                 
          typedef struct _POP_POWER_SETTING_VALUES                // 32 elements, 0x148 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      StructureSize;                                                              
/*0x004*/     struct _SYSTEM_POWER_POLICY PopPolicy;              // 28 elements, 0xE8 bytes (sizeof)  
/*0x0EC*/     enum _SYSTEM_POWER_CONDITION CurrentAcDcPowerState;                                      
/*0x0F0*/     UINT8        AwayModeEnabled;                                                            
/*0x0F1*/     UINT8        AwayModeEngaged;                                                            
/*0x0F2*/     UINT8        AwayModePolicyAllowed;                                                      
/*0x0F3*/     UINT8        _PADDING0_[0x1];                                                            
/*0x0F4*/     LONG32       AwayModeIgnoreUserPresent;                                                  
/*0x0F8*/     LONG32       AwayModeIgnoreAction;                                                       
/*0x0FC*/     UINT8        DisableFastS4;                                                              
/*0x0FD*/     UINT8        DisableStandbyStates;                                                       
/*0x0FE*/     UINT8        _PADDING1_[0x2];                                                            
/*0x100*/     ULONG32      UnattendSleepTimeout;                                                       
/*0x104*/     ULONG32      DiskIgnoreTime;                                                             
/*0x108*/     ULONG32      DeviceIdlePolicy;                                                           
/*0x10C*/     ULONG32      VideoDimTimeout;                                                            
/*0x110*/     ULONG32      VideoNormalBrightness;                                                      
/*0x114*/     ULONG32      VideoDimBrightness;                                                         
/*0x118*/     ULONG32      AlsOffset;                                                                  
/*0x11C*/     ULONG32      AlsEnabled;                                                                 
/*0x120*/     ULONG32      EsBrightness;                                                               
/*0x124*/     UINT8        SwitchShutdownForced;                                                       
/*0x125*/     UINT8        _PADDING2_[0x3];                                                            
/*0x128*/     ULONG32      SystemCoolingPolicy;                                                        
/*0x12C*/     UINT8        MediaBufferingEngaged;                                                      
/*0x12D*/     UINT8        AudioActivity;                                                              
/*0x12E*/     UINT8        FullscreenVideoPlayback;                                                    
/*0x12F*/     UINT8        _PADDING3_[0x1];                                                            
/*0x130*/     ULONG32      EsBatteryThreshold;                                                         
/*0x134*/     UINT8        EsAggressive;                                                               
/*0x135*/     UINT8        EsUserAwaySetting;                                                          
/*0x136*/     UINT8        _PADDING4_[0x2];                                                            
/*0x138*/     ULONG32      ConnectivityInStandby;                                                      
/*0x13C*/     ULONG32      DisconnectedStandbyMode;                                                    
/*0x140*/     ULONG32      UserPresencePredictionEnabled;                                              
/*0x144*/     UINT8        AirplaneModeEnabled;                                                        
/*0x145*/     UINT8        BluetoothDeviceCharging;                                                    
/*0x146*/     UINT8        _PADDING5_[0x2];                                                            
          }POP_POWER_SETTING_VALUES, *PPOP_POWER_SETTING_VALUES;                                       
                                                                                                       
          typedef union _PPM_POLICY_SETTINGS_MASK                           // 54 elements, 0x8 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     UINT64       Value;                                                                              
              struct                                                        // 1 elements, 0x8 bytes (sizeof)  
              {                                                                                                
                  struct                                                    // 32 elements, 0x4 bytes (sizeof) 
                  {                                                                                            
/*0x000*/             ULONG32      PerfDecreaseTime : 1;                    // 0 BitPosition                   
/*0x000*/             ULONG32      PerfIncreaseTime : 1;                    // 1 BitPosition                   
/*0x000*/             ULONG32      PerfDecreasePolicy : 1;                  // 2 BitPosition                   
/*0x000*/             ULONG32      PerfIncreasePolicy : 1;                  // 3 BitPosition                   
/*0x000*/             ULONG32      PerfDecreaseThreshold : 1;               // 4 BitPosition                   
/*0x000*/             ULONG32      PerfIncreaseThreshold : 1;               // 5 BitPosition                   
/*0x000*/             ULONG32      PerfMinPolicy : 1;                       // 6 BitPosition                   
/*0x000*/             ULONG32      PerfMaxPolicy : 1;                       // 7 BitPosition                   
/*0x000*/             ULONG32      PerfTimeCheck : 1;                       // 8 BitPosition                   
/*0x000*/             ULONG32      PerfBoostPolicy : 1;                     // 9 BitPosition                   
/*0x000*/             ULONG32      PerfBoostMode : 1;                       // 10 BitPosition                  
/*0x000*/             ULONG32      AllowThrottling : 1;                     // 11 BitPosition                  
/*0x000*/             ULONG32      PerfHistoryCount : 1;                    // 12 BitPosition                  
/*0x000*/             ULONG32      ParkingPerfState : 1;                    // 13 BitPosition                  
/*0x000*/             ULONG32      LatencyHintPerf : 1;                     // 14 BitPosition                  
/*0x000*/             ULONG32      LatencyHintUnpark : 1;                   // 15 BitPosition                  
/*0x000*/             ULONG32      CoreParkingMinCores : 1;                 // 16 BitPosition                  
/*0x000*/             ULONG32      CoreParkingMaxCores : 1;                 // 17 BitPosition                  
/*0x000*/             ULONG32      CoreParkingDecreasePolicy : 1;           // 18 BitPosition                  
/*0x000*/             ULONG32      CoreParkingIncreasePolicy : 1;           // 19 BitPosition                  
/*0x000*/             ULONG32      CoreParkingDecreaseTime : 1;             // 20 BitPosition                  
/*0x000*/             ULONG32      CoreParkingIncreaseTime : 1;             // 21 BitPosition                  
/*0x000*/             ULONG32      CoreParkingOverUtilizationThreshold : 1; // 22 BitPosition                  
/*0x000*/             ULONG32      CoreParkingDistributeUtility : 1;        // 23 BitPosition                  
/*0x000*/             ULONG32      CoreParkingConcurrencyThreshold : 1;     // 24 BitPosition                  
/*0x000*/             ULONG32      CoreParkingHeadroomThreshold : 1;        // 25 BitPosition                  
/*0x000*/             ULONG32      CoreParkingDistributionThreshold : 1;    // 26 BitPosition                  
/*0x000*/             ULONG32      IdleAllowScaling : 1;                    // 27 BitPosition                  
/*0x000*/             ULONG32      IdleDisable : 1;                         // 28 BitPosition                  
/*0x000*/             ULONG32      IdleTimeCheck : 1;                       // 29 BitPosition                  
/*0x000*/             ULONG32      IdleDemoteThreshold : 1;                 // 30 BitPosition                  
/*0x000*/             ULONG32      IdlePromoteThreshold : 1;                // 31 BitPosition                  
                  };                                                                                           
                  struct                                                    // 21 elements, 0x4 bytes (sizeof) 
                  {                                                                                            
/*0x004*/             ULONG32      HeteroDecreaseTime : 1;                  // 0 BitPosition                   
/*0x004*/             ULONG32      HeteroIncreaseTime : 1;                  // 1 BitPosition                   
/*0x004*/             ULONG32      HeteroDecreaseThreshold : 1;             // 2 BitPosition                   
/*0x004*/             ULONG32      HeteroIncreaseThreshold : 1;             // 3 BitPosition                   
/*0x004*/             ULONG32      Class0FloorPerformance : 1;              // 4 BitPosition                   
/*0x004*/             ULONG32      Class1InitialPerformance : 1;            // 5 BitPosition                   
/*0x004*/             ULONG32      EnergyPerfPreference : 1;                // 6 BitPosition                   
/*0x004*/             ULONG32      AutonomousActivityWindow : 1;            // 7 BitPosition                   
/*0x004*/             ULONG32      AutonomousMode : 1;                      // 8 BitPosition                   
/*0x004*/             ULONG32      DutyCycling : 1;                         // 9 BitPosition                   
/*0x004*/             ULONG32      FrequencyCap : 1;                        // 10 BitPosition                  
/*0x004*/             ULONG32      ThreadPolicy : 1;                        // 11 BitPosition                  
/*0x004*/             ULONG32      ShortThreadPolicy : 1;                   // 12 BitPosition                  
/*0x004*/             ULONG32      IdleStateMax : 1;                        // 13 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessDisableThreshold : 1;      // 14 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessEnableThreshold : 1;       // 15 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessDisableTime : 1;           // 16 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessEnableTime : 1;            // 17 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessEppCeiling : 1;            // 18 BitPosition                  
/*0x004*/             ULONG32      ResponsivenessPerfFloor : 1;             // 19 BitPosition                  
/*0x004*/             ULONG32      Spare : 12;                              // 20 BitPosition                  
                  };                                                                                           
              };                                                                                               
          }PPM_POLICY_SETTINGS_MASK, *PPPM_POLICY_SETTINGS_MASK;                                               
                                                                                                               
          typedef struct _PPM_ENGINE_SETTINGS                     // 53 elements, 0xAA8 bytes (sizeof) 
          {                                                                                            
/*0x000*/     union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];                                      
/*0x010*/     UINT8        ThrottlingPolicy;                                                           
/*0x011*/     UINT8        _PADDING0_[0x3];                                                            
/*0x014*/     ULONG32      PerfTimeCheck;                                                              
/*0x018*/     UINT8        PerfHistoryCount[2];                                                        
/*0x01A*/     UINT8        PerfMinPolicy[2];                                                           
/*0x01C*/     UINT8        PerfMaxPolicy[2];                                                           
/*0x01E*/     UINT8        PerfDecreaseTime[2];                                                        
/*0x020*/     UINT8        PerfIncreaseTime[2];                                                        
/*0x022*/     UINT8        PerfDecreasePolicy[2];                                                      
/*0x024*/     UINT8        PerfIncreasePolicy[2];                                                      
/*0x026*/     UINT8        PerfDecreaseThreshold[2];                                                   
/*0x028*/     UINT8        PerfIncreaseThreshold[2];                                                   
/*0x02A*/     UINT8        _PADDING1_[0x2];                                                            
/*0x02C*/     ULONG32      PerfFrequencyCap[2];                                                        
/*0x034*/     ULONG32      PerfBoostPolicy;                                                            
/*0x038*/     ULONG32      PerfBoostMode;                                                              
/*0x03C*/     ULONG32      PerfReductionTolerance;                                                     
/*0x040*/     ULONG32      EnergyPerfPreference[2];                                                    
/*0x048*/     ULONG32      AutonomousActivityWindow;                                                   
/*0x04C*/     UINT8        AutonomousPreference;                                                       
/*0x04D*/     UINT8        LatencyHintPerf[2];                                                         
/*0x04F*/     UINT8        LatencyHintUnpark[2];                                                       
/*0x051*/     UINT8        _PADDING2_[0x3];                                                            
/*0x054*/     ULONG32      ResponsivenessDisableThreshold[2];                                          
/*0x05C*/     ULONG32      ResponsivenessEnableThreshold[2];                                           
/*0x064*/     UINT8        ResponsivenessDisableTime[2];                                               
/*0x066*/     UINT8        ResponsivenessEnableTime[2];                                                
/*0x068*/     ULONG32      ResponsivenessEppCeiling[2];                                                
/*0x070*/     ULONG32      ResponsivenessPerfFloor[2];                                                 
/*0x078*/     UINT8        DutyCycling;                                                                
/*0x079*/     UINT8        ParkingPerfState[2];                                                        
/*0x07B*/     UINT8        DistributeUtility;                                                          
/*0x07C*/     UINT8        CoreParkingOverUtilizationThreshold;                                        
/*0x07D*/     UINT8        CoreParkingConcurrencyThreshold;                                            
/*0x07E*/     UINT8        CoreParkingHeadroomThreshold;                                               
/*0x07F*/     UINT8        CoreParkingDistributionThreshold;                                           
/*0x080*/     UINT8        CoreParkingDecreasePolicy;                                                  
/*0x081*/     UINT8        CoreParkingIncreasePolicy;                                                  
/*0x082*/     UINT8        _PADDING3_[0x2];                                                            
/*0x084*/     ULONG32      CoreParkingDecreaseTime;                                                    
/*0x088*/     ULONG32      CoreParkingIncreaseTime;                                                    
/*0x08C*/     UINT8        CoreParkingMinCores[2];                                                     
/*0x08E*/     UINT8        CoreParkingMaxCores[2];                                                     
/*0x090*/     UINT8        AllowScaling;                                                               
/*0x091*/     UINT8        IdleDisabled;                                                               
/*0x092*/     UINT8        _PADDING4_[0x2];                                                            
/*0x094*/     ULONG32      IdleTimeCheck;                                                              
/*0x098*/     UINT8        IdleDemotePercent;                                                          
/*0x099*/     UINT8        IdlePromotePercent;                                                         
/*0x09A*/     UINT8        IdleStateMax;                                                               
/*0x09B*/     UINT8        HeteroDecreaseTime;                                                         
/*0x09C*/     UINT8        HeteroIncreaseTime;                                                         
/*0x09D*/     UINT8        HeteroDecreaseThreshold[1280];                                              
/*0x59D*/     UINT8        HeteroIncreaseThreshold[1280];                                              
/*0xA9D*/     UINT8        Class0FloorPerformance;                                                     
/*0xA9E*/     UINT8        Class1InitialPerformance;                                                   
/*0xA9F*/     UINT8        _PADDING5_[0x1];                                                            
/*0xAA0*/     enum _KHETERO_CPU_POLICY ThreadPolicies[2];                                              
          }PPM_ENGINE_SETTINGS, *PPPM_ENGINE_SETTINGS;                                                 
                                                                                                       
           typedef struct _POP_PPM_PROFILE              // 11 elements, 0x15A0 bytes (sizeof) 
           {                                                                                  
/*0x000*/      WCHAR*       Name;                                                             
/*0x008*/      UINT8        Id;                                                               
/*0x009*/      UINT8        _PADDING0_[0x3];                                                  
/*0x00C*/      struct _GUID Guid;                       // 4 elements, 0x10 bytes (sizeof)    
/*0x01C*/      ULONG32      Flags;                                                            
/*0x020*/      UINT8        Priority;                                                         
/*0x021*/      UINT8        _PADDING1_[0x7];                                                  
/*0x028*/      struct _PPM_ENGINE_SETTINGS Settings[2];                                       
/*0x1578*/     UINT64       StartTime;                                                        
/*0x1580*/     UINT64       Count;                                                            
/*0x1588*/     UINT64       MaxDuration;                                                      
/*0x1590*/     UINT64       MinDuration;                                                      
/*0x1598*/     UINT64       TotalDuration;                                                    
           }POP_PPM_PROFILE, *PPOP_PPM_PROFILE;                                               
                                                                                              
          typedef struct _POP_SHUTDOWN_BUG_CHECK   // 9 elements, 0x48 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _ETHREAD* InitiatingThread;                                      
/*0x008*/     struct _EPROCESS* InitiatingProcess;                                    
/*0x010*/     VOID*        ThreadId;                                                  
/*0x018*/     VOID*        ProcessId;                                                 
/*0x020*/     ULONG32      Code;                                                      
/*0x024*/     UINT8        _PADDING0_[0x4];                                           
/*0x028*/     UINT64       Parameter1;                                                
/*0x030*/     UINT64       Parameter2;                                                
/*0x038*/     UINT64       Parameter3;                                                
/*0x040*/     UINT64       Parameter4;                                                
          }POP_SHUTDOWN_BUG_CHECK, *PPOP_SHUTDOWN_BUG_CHECK;                                   
                                                                                      
          typedef struct _POP_THERMAL_TELEMETRY_TRACKER // 4 elements, 0x160 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT8        AccountingDisabled;                                              
/*0x001*/     UINT8        _PADDING0_[0x7];                                                 
/*0x008*/     UINT64       LastPassiveUpdateTime;                                           
/*0x010*/     UINT64       TotalPassiveTime[21];                                            
/*0x0B8*/     UINT64       PassiveTimeSnap[21];                                             
          }POP_THERMAL_TELEMETRY_TRACKER, *PPOP_THERMAL_TELEMETRY_TRACKER;                                    
                                                                                            
          typedef struct _THERMAL_INFORMATION_EX    // 14 elements, 0x5C bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      ThermalStamp;                                                
/*0x004*/     ULONG32      ThermalConstant1;                                            
/*0x008*/     ULONG32      ThermalConstant2;                                            
/*0x00C*/     ULONG32      SamplingPeriod;                                              
/*0x010*/     ULONG32      CurrentTemperature;                                          
/*0x014*/     ULONG32      PassiveTripPoint;                                            
/*0x018*/     ULONG32      ThermalStandbyTripPoint;                                     
/*0x01C*/     ULONG32      CriticalTripPoint;                                           
/*0x020*/     UINT8        ActiveTripPointCount;                                        
/*0x021*/     UINT8        _PADDING0_[0x3];                                             
/*0x024*/     ULONG32      ActiveTripPoint[10];                                         
/*0x04C*/     ULONG32      S4TransitionTripPoint;                                       
/*0x050*/     ULONG32      MinimumThrottle;                                             
/*0x054*/     ULONG32      OverThrottleThreshold;                                       
/*0x058*/     ULONG32      PollingPeriod;                                               
          }THERMAL_INFORMATION_EX, *PTHERMAL_INFORMATION_EX;                                    
                                                                                        
          typedef struct _THERMAL_POLICY      // 9 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     ULONG32      Version;                                              
/*0x004*/     UINT8        WaitForUpdate;                                        
/*0x005*/     UINT8        Hibernate;                                            
/*0x006*/     UINT8        Critical;                                             
/*0x007*/     UINT8        ThermalStandby;                                       
/*0x008*/     ULONG32      ActivationReasons;                                    
/*0x00C*/     ULONG32      PassiveLimit;                                         
/*0x010*/     ULONG32      ActiveLevel;                                          
/*0x014*/     UINT8        OverThrottled;                                        
/*0x015*/     UINT8        _PADDING0_[0x3];                                      
          }THERMAL_POLICY, *PTHERMAL_POLICY;                                     
                                                                                 
          typedef struct _POP_THERMAL_ZONE                            // 39 elements, 0x368 bytes (sizeof) 
          {                                                                                                
              union                                                   // 2 elements, 0x40 bytes (sizeof)   
              {                                                                                            
/*0x000*/         struct _POP_POLICY_DEVICE PolicyDevice;             // 6 elements, 0x40 bytes (sizeof)   
                  struct                                              // 6 elements, 0x40 bytes (sizeof)   
                  {                                                                                        
/*0x000*/             struct _LIST_ENTRY Link;                        // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/             enum _POWER_POLICY_DEVICE_TYPE DeviceType;                                           
/*0x014*/             UINT8        _PADDING0_[0x4];                                                        
/*0x018*/             VOID*        Notification;                                                           
/*0x020*/             struct _UNICODE_STRING Name;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x030*/             struct _DEVICE_OBJECT* Device;                                                       
/*0x038*/             struct _IRP* Irp;                                                                    
                  };                                                                                       
              };                                                                                           
/*0x040*/     UINT8        State;                                                                          
/*0x041*/     UINT8        Flags;                                                                          
/*0x042*/     UINT8        Removing;                                                                       
/*0x043*/     UINT8        Mode;                                                                           
/*0x044*/     UINT8        PendingMode;                                                                    
/*0x045*/     UINT8        ActivePoint;                                                                    
/*0x046*/     UINT8        PendingActivePoint;                                                             
/*0x047*/     UINT8        Critical;                                                                       
/*0x048*/     UINT8        ThermalStandby;                                                                 
/*0x049*/     UINT8        OverThrottled;                                                                  
/*0x04A*/     UINT8        _PADDING1_[0x2];                                                                
/*0x04C*/     LONG32       HighPrecisionThrottle;                                                          
/*0x050*/     LONG32       Throttle;                                                                       
/*0x054*/     LONG32       PendingThrottle;                                                                
/*0x058*/     ULONG32      ThrottleReasons;                                                                
/*0x05C*/     UINT8        _PADDING2_[0x4];                                                                
/*0x060*/     UINT64       LastPassiveTime;                                                                
/*0x068*/     ULONG32      SampleRate;                                                                     
/*0x06C*/     ULONG32      LastTemp;                                                                       
/*0x070*/     struct _THERMAL_INFORMATION_EX Info;                    // 14 elements, 0x5C bytes (sizeof)  
/*0x0CC*/     struct _THERMAL_POLICY Policy;                          // 9 elements, 0x18 bytes (sizeof)   
/*0x0E4*/     UINT8        PolicyDriver;                                                                   
/*0x0E5*/     UINT8        _PADDING3_[0x3];                                                                
/*0x0E8*/     ULONG32      PollingRate;                                                                    
/*0x0EC*/     UINT8        _PADDING4_[0x4];                                                                
/*0x0F0*/     UINT64       LastTemperatureTime;                                                            
/*0x0F8*/     UINT64       LastActiveStartTime;                                                            
/*0x100*/     UINT64       LastPassiveStartTime;                                                           
/*0x108*/     struct _WORK_QUEUE_ITEM WorkItem;                       // 3 elements, 0x20 bytes (sizeof)   
/*0x128*/     struct _KTIMER2 ZoneUpdateTimer;                        // 17 elements, 0x88 bytes (sizeof)  
/*0x1B0*/     struct _POP_RW_LOCK Lock;                               // 2 elements, 0x10 bytes (sizeof)   
/*0x1C0*/     struct _KEVENT ZoneStopped;                             // 1 elements, 0x18 bytes (sizeof)   
/*0x1D8*/     struct _KEVENT TemperatureUpdated;                      // 1 elements, 0x18 bytes (sizeof)   
/*0x1F0*/     ULONG32      InstanceId;                                                                     
/*0x1F4*/     UINT8        _PADDING5_[0x4];                                                                
/*0x1F8*/     struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker; // 4 elements, 0x160 bytes (sizeof)  
/*0x358*/     struct _UNICODE_STRING Description;                     // 3 elements, 0x10 bytes (sizeof)   
          }POP_THERMAL_ZONE, *PPOP_THERMAL_ZONE;                                                           
                                                                                                           
          typedef struct _POP_TRIGGER_WAIT         // 4 elements, 0x38 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _KEVENT Event;                // 1 elements, 0x18 bytes (sizeof) 
/*0x018*/     LONG32       Status;                                                    
/*0x01C*/     UINT8        _PADDING0_[0x4];                                           
/*0x020*/     struct _LIST_ENTRY Link;             // 2 elements, 0x10 bytes (sizeof) 
/*0x030*/     struct _POP_ACTION_TRIGGER* Trigger;                                    
          }POP_TRIGGER_WAIT, *PPOP_TRIGGER_WAIT;                                      
                                                                                      
          typedef struct _PORT_MESSAGE32           // 7 elements, 0x18 bytes (sizeof) 
          {                                                                           
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x000*/             INT16        DataLength;                                        
/*0x002*/             INT16        TotalLength;                                       
                  }s1;                                                                
/*0x000*/         ULONG32      Length;                                                
              }u1;                                                                    
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
                  struct                           // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                   
/*0x004*/             INT16        Type;                                              
/*0x006*/             INT16        DataInfoOffset;                                    
                  }s2;                                                                
/*0x004*/         ULONG32      ZeroInit;                                              
              }u2;                                                                    
              union                                // 2 elements, 0x8 bytes (sizeof)  
              {                                                                       
/*0x008*/         struct _CLIENT_ID32 ClientId;    // 2 elements, 0x8 bytes (sizeof)  
/*0x008*/         FLOAT64      DoNotUseThisField;                                     
              };                                                                      
/*0x010*/     ULONG32      MessageId;                                                 
              union                                // 2 elements, 0x4 bytes (sizeof)  
              {                                                                       
/*0x014*/         ULONG32      ClientViewSize;                                        
/*0x014*/         ULONG32      CallbackId;                                            
              };                                                                      
          }PORT_MESSAGE32, *PPORT_MESSAGE32;                                          
                                                                                      
          typedef struct _POWER_SEQUENCE // 3 elements, 0xC bytes (sizeof) 
          {                                                                
/*0x000*/     ULONG32      SequenceD1;                                     
/*0x004*/     ULONG32      SequenceD2;                                     
/*0x008*/     ULONG32      SequenceD3;                                     
          }POWER_SEQUENCE, *PPOWER_SEQUENCE;                                  
                                                                           
          typedef struct _PPM_CONCURRENCY_ACCOUNTING // 6 elements, 0x28 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Lock;                                                        
/*0x008*/     ULONG32      Processors;                                                  
/*0x00C*/     ULONG32      ActiveProcessors;                                            
/*0x010*/     UINT64       LastUpdateTime;                                              
/*0x018*/     UINT64       TotalTime;                                                   
/*0x020*/     UINT64       AccumulatedTime[1];                                          
          }PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING;                                   
                                                                                        
          typedef struct _PPM_COORDINATED_SELECTION // 4 elements, 0x18 bytes (sizeof) 
          {                                                                            
/*0x000*/     ULONG32      MaximumStates;                                              
/*0x004*/     ULONG32      SelectedStates;                                             
/*0x008*/     ULONG32      DefaultSelection;                                           
/*0x00C*/     UINT8        _PADDING0_[0x4];                                            
/*0x010*/     ULONG32*     Selection;                                                  
          }PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION;                                   
                                                                                       
          typedef union _PPM_COORDINATED_SYNCHRONIZATION // 6 elements, 0x4 bytes (sizeof) 
          {                                                                                
/*0x000*/     LONG32       AsLong;                                                         
              struct                                     // 5 elements, 0x4 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      EnterProcessor : 12;      // 0 BitPosition                  
/*0x000*/         ULONG32      ExitProcessor : 12;       // 12 BitPosition                 
/*0x000*/         ULONG32      Transition : 2;           // 24 BitPosition                 
/*0x000*/         ULONG32      Entered : 1;              // 26 BitPosition                 
/*0x000*/         ULONG32      EntryPriority : 5;        // 27 BitPosition                 
              };                                                                           
          }PPM_COORDINATED_SYNCHRONIZATION, *PPPM_COORDINATED_SYNCHRONIZATION;                                  
                                                                                           
          typedef struct _PPM_VETO_ACCOUNTING               // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                    
/*0x000*/     LONG32       VetoPresent;                                                        
/*0x004*/     UINT8        _PADDING0_[0x4];                                                    
/*0x008*/     struct _LIST_ENTRY VetoListHead;              // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     UINT8        CsAccountingBlocks;                                                 
/*0x019*/     UINT8        BlocksDrips;                                                        
/*0x01A*/     UINT8        _PADDING1_[0x2];                                                    
/*0x01C*/     ULONG32      PreallocatedVetoCount;                                              
/*0x020*/     struct _PPM_VETO_ENTRY* PreallocatedVetoList;                                    
          }PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING;                                         
                                                                                               
          typedef struct _PPM_IDLE_STATE                  // 15 elements, 0xF8 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _KAFFINITY_EX DomainMembers;         // 4 elements, 0xA8 bytes (sizeof)  
/*0x0A8*/     struct _UNICODE_STRING Name;                // 3 elements, 0x10 bytes (sizeof)  
/*0x0B8*/     ULONG32      Latency;                                                           
/*0x0BC*/     ULONG32      BreakEvenDuration;                                                 
/*0x0C0*/     ULONG32      Power;                                                             
/*0x0C4*/     ULONG32      StateFlags;                                                        
/*0x0C8*/     struct _PPM_VETO_ACCOUNTING VetoAccounting; // 6 elements, 0x28 bytes (sizeof)  
/*0x0F0*/     UINT8        StateType;                                                         
/*0x0F1*/     UINT8        InterruptsEnabled;                                                 
/*0x0F2*/     UINT8        Interruptible;                                                     
/*0x0F3*/     UINT8        ContextRetained;                                                   
/*0x0F4*/     UINT8        CacheCoherent;                                                     
/*0x0F5*/     UINT8        WakesSpuriously;                                                   
/*0x0F6*/     UINT8        PlatformOnly;                                                      
/*0x0F7*/     UINT8        NoCState;                                                          
          }PPM_IDLE_STATE, *PPPM_IDLE_STATE;                                                  
                                                                                              
          typedef struct _PROCESSOR_IDLE_CONSTRAINTS // 13 elements, 0x30 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       TotalTime;                                                    
/*0x008*/     UINT64       IdleTime;                                                     
/*0x010*/     UINT64       ExpectedIdleDuration;                                         
/*0x018*/     UINT64       MaxIdleDuration;                                              
/*0x020*/     ULONG32      OverrideState;                                                
/*0x024*/     ULONG32      TimeCheck;                                                    
/*0x028*/     UINT8        PromotePercent;                                               
/*0x029*/     UINT8        DemotePercent;                                                
/*0x02A*/     UINT8        Parked;                                                       
/*0x02B*/     UINT8        Interruptible;                                                
/*0x02C*/     UINT8        PlatformIdle;                                                 
/*0x02D*/     UINT8        ExpectedWakeReason;                                           
/*0x02E*/     UINT8        IdleStateMax;                                                 
/*0x02F*/     UINT8        _PADDING0_[0x1];                                              
          }PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS;                                    
                                                                                         
          typedef struct _PROCESSOR_IDLE_PREPARE_INFO             // 8 elements, 0x58 bytes (sizeof)  
          {                                                                                           
/*0x000*/     VOID*        Context;                                                                   
/*0x008*/     struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;     // 13 elements, 0x30 bytes (sizeof) 
/*0x038*/     ULONG32      DependencyCount;                                                           
/*0x03C*/     ULONG32      DependencyUsed;                                                            
/*0x040*/     struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;                                     
/*0x048*/     ULONG32      PlatformIdleStateIndex;                                                    
/*0x04C*/     ULONG32      ProcessorIdleStateIndex;                                                   
/*0x050*/     ULONG32      IdleSelectFailureMask;                                                     
/*0x054*/     UINT8        _PADDING0_[0x4];                                                           
          }PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO;                                    
                                                                                                      
          typedef struct _PPM_SELECTION_MENU             // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      Count;                                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                                 
/*0x008*/     struct _PPM_SELECTION_MENU_ENTRY* Entries;                                    
          }PPM_SELECTION_MENU, *PPPM_SELECTION_MENU;                                        
                                                                                            
          typedef struct _PPM_IDLE_STATES                                                               // 41 elements, 0x428 bytes (sizeof) 
          {                                                                                                                                  
/*0x000*/     UINT8        InterfaceVersion;                                                                                                 
/*0x001*/     UINT8        IdleOverride;                                                                                                     
/*0x002*/     UINT8        EstimateIdleDuration;                                                                                             
/*0x003*/     UINT8        ExitLatencyTraceEnabled;                                                                                          
/*0x004*/     UINT8        NonInterruptibleTransition;                                                                                       
/*0x005*/     UINT8        UnaccountedTransition;                                                                                            
/*0x006*/     UINT8        IdleDurationLimited;                                                                                              
/*0x007*/     UINT8        IdleCheckLimited;                                                                                                 
/*0x008*/     UINT8        StrictVetoBias;                                                                                                   
/*0x009*/     UINT8        _PADDING0_[0x3];                                                                                                  
/*0x00C*/     ULONG32      ExitLatencyCountdown;                                                                                             
/*0x010*/     ULONG32      TargetState;                                                                                                      
/*0x014*/     ULONG32      ActualState;                                                                                                      
/*0x018*/     ULONG32      OldState;                                                                                                         
/*0x01C*/     ULONG32      OverrideIndex;                                                                                                    
/*0x020*/     ULONG32      ProcessorIdleCount;                                                                                               
/*0x024*/     ULONG32      Type;                                                                                                             
/*0x028*/     UINT64       LevelId;                                                                                                          
/*0x030*/     UINT16       ReasonFlags;                                                                                                      
/*0x032*/     UINT8        _PADDING1_[0x6];                                                                                                  
/*0x038*/     UINT64       InitiateWakeStamp;                                                                                                
/*0x040*/     LONG32       PreviousStatus;                                                                                                   
/*0x044*/     ULONG32      PreviousCancelReason;                                                                                             
/*0x048*/     struct _KAFFINITY_EX PrimaryProcessorMask;                                                // 4 elements, 0xA8 bytes (sizeof)   
/*0x0F0*/     struct _KAFFINITY_EX SecondaryProcessorMask;                                              // 4 elements, 0xA8 bytes (sizeof)   
/*0x198*/     FUNCT_00EF_097C_IdlePrepare* IdlePrepare;                                                                                      
/*0x1A0*/     FUNCT_00A0_099D_IdlePreExecute* IdlePreExecute;                                                                                
/*0x1A8*/     FUNCT_00A0_09A4_IdleExecute* IdleExecute;                                                                                      
/*0x1B0*/     FUNCT_0009_09AD_IdlePreselect* IdlePreselect;                                                                                  
/*0x1B8*/     FUNCT_0009_09B2_IdleTest* IdleTest;                                                                                            
/*0x1C0*/     FUNCT_0009_09B7_IdleAvailabilityCheck* IdleAvailabilityCheck;                                                                  
/*0x1C8*/     FUNCT_00EF_09BB_IdleComplete* IdleComplete;                                                                                    
/*0x1D0*/     FUNCT_00EF_09BD_IdleCancel_PassiveCooling_ComponentActive_ComponentIdle_Free* IdleCancel;                                      
/*0x1D8*/     FUNCT_00A9_09BF_IdleIsHalted_IdleInitiateWake_CompletionRoutine* IdleIsHalted;                                                 
/*0x1E0*/     FUNCT_00A9_09BF_IdleIsHalted_IdleInitiateWake_CompletionRoutine* IdleInitiateWake;                                             
/*0x1E8*/     struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;                                          // 8 elements, 0x58 bytes (sizeof)   
/*0x240*/     struct _KAFFINITY_EX DeepIdleSnapshot;                                                    // 4 elements, 0xA8 bytes (sizeof)   
/*0x2E8*/     struct _PERFINFO_PPM_STATE_SELECTION* Tracing;                                                                                 
/*0x2F0*/     struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;                                                                      
/*0x2F8*/     struct _PPM_SELECTION_MENU ProcessorMenu;                                                 // 2 elements, 0x10 bytes (sizeof)   
/*0x308*/     struct _PPM_SELECTION_MENU CoordinatedMenu;                                               // 2 elements, 0x10 bytes (sizeof)   
/*0x318*/     struct _PPM_COORDINATED_SELECTION CoordinatedSelection;                                   // 4 elements, 0x18 bytes (sizeof)   
/*0x330*/     struct _PPM_IDLE_STATE State[1];                                                                                               
          }PPM_IDLE_STATES, *PPPM_IDLE_STATES;                                                                                               
                                                                                                                                             
          typedef struct _PPM_PLATFORM_STATE                          // 14 elements, 0x180 bytes (sizeof) 
          {                                                                                                
/*0x000*/     UINT64       LevelId;                                                                        
/*0x008*/     ULONG32      Latency;                                                                        
/*0x00C*/     ULONG32      BreakEvenDuration;                                                              
/*0x010*/     struct _PPM_VETO_ACCOUNTING VetoAccounting;             // 6 elements, 0x28 bytes (sizeof)   
/*0x038*/     UINT8        TransitionDebugger;                                                             
/*0x039*/     UINT8        Platform;                                                                       
/*0x03A*/     UINT8        _PADDING0_[0x2];                                                                
/*0x03C*/     ULONG32      DependencyListCount;                                                            
/*0x040*/     struct _KAFFINITY_EX Processors;                        // 4 elements, 0xA8 bytes (sizeof)   
/*0x0E8*/     struct _UNICODE_STRING Name;                            // 3 elements, 0x10 bytes (sizeof)   
/*0x0F8*/     struct _PPM_SELECTION_DEPENDENCY* DependencyLists;                                           
/*0x100*/     union _PPM_COORDINATED_SYNCHRONIZATION Synchronization; // 6 elements, 0x4 bytes (sizeof)    
/*0x104*/     UINT8        _PADDING1_[0x4];                                                                
/*0x108*/     UINT64       EnterTime;                                                                      
/*0x110*/     UINT8        _PADDING2_[0x30];                                                               
              union                                                   // 2 elements, 0x40 bytes (sizeof)   
              {                                                                                            
/*0x140*/         LONG32       RefCount;                                                                   
/*0x140*/         UINT8        CacheAlign0[64];                                                            
              };                                                                                           
          }PPM_PLATFORM_STATE, *PPPM_PLATFORM_STATE;                                                       
                                                                                                           
          typedef struct _PPM_PLATFORM_STATES                                           // 11 elements, 0x1C0 bytes (sizeof) 
          {                                                                                                                  
/*0x000*/     ULONG32      StateCount;                                                                                       
/*0x004*/     ULONG32      InterfaceVersion;                                                                                 
/*0x008*/     ULONG32      ProcessorCount;                                                                                   
/*0x00C*/     UINT8        CoordinatedInterface;                                                                             
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                                                  
/*0x010*/     FUNCT_0009_09B2_IdleTest* IdleTest;                                                                            
/*0x018*/     FUNCT_00A0_099D_IdlePreExecute* IdlePreExecute;                                                                
/*0x020*/     FUNCT_00EF_09BB_IdleComplete* IdleComplete;                                                                    
/*0x028*/     FUNCT_00A0_2CAD_QueryPlatformStateResidency* QueryPlatformStateResidency;                                      
/*0x030*/     struct _PLATFORM_IDLE_ACCOUNTING* Accounting;                                                                  
/*0x038*/     UINT8        DeepSleepEnabled;                                                                                 
/*0x039*/     UINT8        _PADDING1_[0x7];                                                                                  
/*0x040*/     struct _PPM_PLATFORM_STATE State[1];                                                                           
          }PPM_PLATFORM_STATES, *PPPM_PLATFORM_STATES;                                                                       
                                                                                                                             
          typedef struct _PPM_SELECTION_DEPENDENCY // 2 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Processor;                                                 
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     struct _PPM_SELECTION_MENU Menu;     // 2 elements, 0x10 bytes (sizeof) 
          }PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY;                                   
                                                                                      
          typedef struct _PPM_SELECTION_MENU_ENTRY              // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT8        StrictDependency;                                                       
/*0x001*/     UINT8        InitiatingState;                                                        
/*0x002*/     UINT8        DependentState;                                                         
/*0x003*/     UINT8        _PADDING0_[0x1];                                                        
/*0x004*/     ULONG32      StateIndex;                                                             
/*0x008*/     ULONG32      Dependencies;                                                           
/*0x00C*/     UINT8        _PADDING1_[0x4];                                                        
/*0x010*/     struct _PPM_SELECTION_DEPENDENCY* DependencyList;                                    
          }PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY;                                   
                                                                                                   
          typedef struct _PPM_VETO_ENTRY       // 8 elements, 0x40 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _LIST_ENTRY Link;         // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      VetoReason;                                            
/*0x014*/     ULONG32      ReferenceCount;                                        
/*0x018*/     UINT64       HitCount;                                              
/*0x020*/     UINT64       LastActivationTime;                                    
/*0x028*/     UINT64       TotalActiveTime;                                       
/*0x030*/     UINT64       CsActivationTime;                                      
/*0x038*/     UINT64       CsActiveTime;                                          
          }PPM_VETO_ENTRY, *PPPM_VETO_ENTRY;                                      
                                                                                  
          typedef struct _PRIVATE_CACHE_MAP_FLAGS  // 6 elements, 0x4 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      DontUse : 16;           // 0 BitPosition                  
/*0x000*/     ULONG32      ReadAheadActive : 1;    // 16 BitPosition                 
/*0x000*/     ULONG32      ReadAheadEnabled : 1;   // 17 BitPosition                 
/*0x000*/     ULONG32      PagePriority : 3;       // 18 BitPosition                 
/*0x000*/     ULONG32      PipelineReadAheads : 1; // 21 BitPosition                 
/*0x000*/     ULONG32      Available : 10;         // 22 BitPosition                 
          }PRIVATE_CACHE_MAP_FLAGS, *PPRIVATE_CACHE_MAP_FLAGS;                                  
                                                                                     
          typedef struct _PRIVATE_CACHE_MAP                 // 18 elements, 0x78 bytes (sizeof) 
          {                                                                                     
              union                                         // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                 
/*0x000*/         INT16        NodeTypeCode;                                                    
/*0x000*/         struct _PRIVATE_CACHE_MAP_FLAGS Flags;    // 6 elements, 0x4 bytes (sizeof)   
              };                                                                                
/*0x004*/     ULONG32      ReadAheadMask;                                                       
/*0x008*/     struct _FILE_OBJECT* FileObject;                                                  
/*0x010*/     union _LARGE_INTEGER FileOffset1;             // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     union _LARGE_INTEGER BeyondLastByte1;         // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/     union _LARGE_INTEGER FileOffset2;             // 4 elements, 0x8 bytes (sizeof)   
/*0x028*/     union _LARGE_INTEGER BeyondLastByte2;         // 4 elements, 0x8 bytes (sizeof)   
/*0x030*/     ULONG32      SequentialReadCount;                                                 
/*0x034*/     ULONG32      ReadAheadLength;                                                     
/*0x038*/     union _LARGE_INTEGER ReadAheadOffset;         // 4 elements, 0x8 bytes (sizeof)   
/*0x040*/     union _LARGE_INTEGER ReadAheadBeyondLastByte; // 4 elements, 0x8 bytes (sizeof)   
/*0x048*/     UINT64       PrevReadAheadBeyondLastByte;                                         
/*0x050*/     UINT64       ReadAheadSpinLock;                                                   
/*0x058*/     ULONG32      PipelinedReadAheadRequestSize;                                       
/*0x05C*/     ULONG32      ReadAheadGrowth;                                                     
/*0x060*/     struct _LIST_ENTRY PrivateLinks;              // 2 elements, 0x10 bytes (sizeof)  
/*0x070*/     VOID*        ReadAheadWorkItem;                                                   
          }PRIVATE_CACHE_MAP, *PPRIVATE_CACHE_MAP;                                              
                                                                                                
          typedef struct _PROC_FEEDBACK_COUNTER                         // 10 elements, 0x30 bytes (sizeof) 
          {                                                                                                 
              union                                                     // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                             
/*0x000*/         FUNCT_00EF_0A58_InstantaneousRead* InstantaneousRead;                                     
/*0x000*/         FUNCT_00EF_0A5C_DifferentialRead* DifferentialRead;                                       
              };                                                                                            
/*0x008*/     UINT64       LastActualCount;                                                                 
/*0x010*/     UINT64       LastReferenceCount;                                                              
/*0x018*/     ULONG32      CachedValue;                                                                     
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                 
/*0x020*/     UINT8        Affinitized;                                                                     
/*0x021*/     UINT8        Differential;                                                                    
/*0x022*/     UINT8        DiscardIdleTime;                                                                 
/*0x023*/     UINT8        Scaling;                                                                         
/*0x024*/     UINT8        _PADDING1_[0x4];                                                                 
/*0x028*/     UINT64       Context;                                                                         
          }PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER;                                                  
                                                                                                            
          typedef struct _PROC_IDLE_STATE_ACCOUNTING                // 9 elements, 0x3E8 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT64       TotalTime;                                                                   
/*0x008*/     ULONG32      CancelCount;                                                                 
/*0x00C*/     ULONG32      FailureCount;                                                                
/*0x010*/     ULONG32      SuccessCount;                                                                
/*0x014*/     ULONG32      InvalidBucketIndex;                                                          
/*0x018*/     UINT64       MinTime;                                                                     
/*0x020*/     UINT64       MaxTime;                                                                     
/*0x028*/     struct _PPM_SELECTION_STATISTICS SelectionStatistics; // 16 elements, 0x80 bytes (sizeof) 
/*0x0A8*/     struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];                                       
          }PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING;                                    
                                                                                                        
          typedef struct _PROC_IDLE_ACCOUNTING             // 8 elements, 0x410 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      StateCount;                                                         
/*0x004*/     ULONG32      TotalTransitions;                                                   
/*0x008*/     ULONG32      ResetCount;                                                         
/*0x00C*/     ULONG32      AbortCount;                                                         
/*0x010*/     UINT64       StartTime;                                                          
/*0x018*/     UINT64       PriorIdleTime;                                                      
/*0x020*/     enum _PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                    
/*0x028*/     struct _PROC_IDLE_STATE_ACCOUNTING State[1];                                     
          }PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING;                                       
                                                                                               
          typedef struct _PROC_PERF_CHECK_SNAP            // 10 elements, 0x58 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT64       Time;                                                              
/*0x008*/     UINT64       Active;                                                            
/*0x010*/     UINT64       Stall;                                                             
/*0x018*/     UINT64       FrequencyScaledActive;                                             
/*0x020*/     UINT64       PerformanceScaledActive;                                           
/*0x028*/     UINT64       PerformanceScaledKernelActive;                                     
/*0x030*/     UINT64       CyclesActive;                                                      
/*0x038*/     UINT64       CyclesAffinitized;                                                 
/*0x040*/     UINT64       TaggedThreadCycles[2];                                             
/*0x050*/     ULONG32      ResponsivenessEvents;                                              
/*0x054*/     UINT8        _PADDING0_[0x4];                                                   
          }PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP;                                      
                                                                                              
          typedef struct _PROC_PERF_CHECK                     // 13 elements, 0x138 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       LastActive;                                                             
/*0x008*/     UINT64       LastTime;                                                               
/*0x010*/     UINT64       LastStall;                                                              
/*0x018*/     ULONG32      LastResponsivenessEvents;                                               
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                        
/*0x020*/     struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap; // 10 elements, 0x58 bytes (sizeof)  
/*0x078*/     struct _PROC_PERF_CHECK_SNAP CurrentSnap;       // 10 elements, 0x58 bytes (sizeof)  
/*0x0D0*/     struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap; // 10 elements, 0x58 bytes (sizeof)  
/*0x128*/     ULONG32      LastDeliveredPerformance;                                               
/*0x12C*/     ULONG32      LastDeliveredFrequency;                                                 
/*0x130*/     UINT8        TaggedThreadPercent[2];                                                 
/*0x132*/     UINT8        Class0FloorPerfSelection;                                               
/*0x133*/     UINT8        Class1MinimumPerfSelection;                                             
/*0x134*/     ULONG32      CurrentResponsivenessEvents;                                            
          }PROC_PERF_CHECK, *PPROC_PERF_CHECK;                                                     
                                                                                                   
          typedef struct _PROC_PERF_CONSTRAINT                // 19 elements, 0x80 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _KPRCB* Prcb;                                                                
/*0x008*/     UINT64       PerfContext;                                                           
/*0x010*/     ULONG32      PlatformCap;                                                           
/*0x014*/     ULONG32      ThermalCap;                                                            
/*0x018*/     ULONG32      LimitReasons;                                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                       
/*0x020*/     UINT64       PlatformCapStartTime;                                                  
/*0x028*/     ULONG32      ProcCap;                                                               
/*0x02C*/     ULONG32      ProcFloor;                                                             
/*0x030*/     ULONG32      TargetPercent;                                                         
/*0x034*/     UINT8        EngageResponsivenessOverrides;                                         
/*0x035*/     UINT8        ResponsivenessChangeCount;                                             
/*0x036*/     UINT8        _PADDING1_[0x2];                                                       
/*0x038*/     struct _PERF_CONTROL_STATE_SELECTION Selection; // 10 elements, 0x28 bytes (sizeof) 
/*0x060*/     ULONG32      DomainSelectionGeneration;                                             
/*0x064*/     ULONG32      PreviousFrequency;                                                     
/*0x068*/     ULONG32      PreviousPercent;                                                       
/*0x06C*/     ULONG32      LatestFrequencyPercent;                                                
/*0x070*/     UINT8        Force;                                                                 
/*0x071*/     UINT8        UseQosUpdateLock;                                                      
/*0x072*/     UINT8        _PADDING2_[0x6];                                                       
/*0x078*/     UINT64       QosUpdateLock;                                                         
          }PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT;                                          
                                                                                                  
          typedef struct _PROC_PERF_QOS_CLASS_POLICY      // 10 elements, 0x1C bytes (sizeof) 
          {                                                                                   
/*0x000*/     ULONG32      MaxPolicyPercent;                                                  
/*0x004*/     ULONG32      MaxEquivalentFrequencyPercent;                                     
/*0x008*/     ULONG32      MinPolicyPercent;                                                  
/*0x00C*/     ULONG32      AutonomousActivityWindow;                                          
/*0x010*/     ULONG32      EnergyPerfPreference;                                              
/*0x014*/     UINT8        ProvideGuidance;                                                   
/*0x015*/     UINT8        AllowThrottling;                                                   
/*0x016*/     UINT8        PerfBoostMode;                                                     
/*0x017*/     UINT8        LatencyHintPerf;                                                   
/*0x018*/     UINT8        TrackDesiredCrossClass;                                            
/*0x019*/     UINT8        _PADDING0_[0x3];                                                   
          }PROC_PERF_QOS_CLASS_POLICY, *PPROC_PERF_QOS_CLASS_POLICY;                                    
                                                                                              
          typedef struct _PROC_PERF_DOMAIN                                                                                                                                  // 49 elements, 0x2A8 bytes (sizeof) 
          {                                                                                                                                                                                                      
/*0x000*/     struct _LIST_ENTRY Link;                                                                                                                                      // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _KPRCB* Master;                                                                                                                                                                             
/*0x018*/     struct _KAFFINITY_EX Members;                                                                                                                                 // 4 elements, 0xA8 bytes (sizeof)   
/*0x0C0*/     UINT64       DomainContext;                                                                                                                                                                        
/*0x0C8*/     ULONG32      ProcessorCount;                                                                                                                                                                       
/*0x0CC*/     UINT8        EfficiencyClass;                                                                                                                                                                      
/*0x0CD*/     UINT8        NominalPerformanceClass;                                                                                                                                                              
/*0x0CE*/     UINT8        HighestPerformanceClass;                                                                                                                                                              
/*0x0CF*/     UINT8        Spare;                                                                                                                                                                                
/*0x0D0*/     struct _PROC_PERF_CONSTRAINT* Processors;                                                                                                                                                          
/*0x0D8*/     FUNCT_00EF_0ADE_GetFFHThrottleState* GetFFHThrottleState;                                                                                                                                          
/*0x0E0*/     FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* TimeWindowHandler;                                                    
/*0x0E8*/     FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* BoostPolicyHandler;                                                   
/*0x0F0*/     FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* BoostModeHandler;                                                     
/*0x0F8*/     FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* AutonomousActivityWindowHandler;                                      
/*0x100*/     FUNCT_00EF_0AE1_TimeWindowHandler_BoostPolicyHandler_BoostModeHandler_AutonomousActivityWindowHandler_AutonomousModeHandler* AutonomousModeHandler;                                                
/*0x108*/     FUNCT_00EF_0AE5_ReinitializeHandler* ReinitializeHandler;                                                                                                                                          
/*0x110*/     FUNCT_0009_0AE8_PerfSelectionHandler* PerfSelectionHandler;                                                                                                                                        
/*0x118*/     FUNCT_00EF_0AF3_PerfControlHandler_DomainPerfControlHandler* PerfControlHandler;                                                                                                                   
/*0x120*/     FUNCT_00EF_0AF3_PerfControlHandler_DomainPerfControlHandler* DomainPerfControlHandler;                                                                                                             
/*0x128*/     ULONG32      MaxFrequency;                                                                                                                                                                         
/*0x12C*/     ULONG32      NominalFrequency;                                                                                                                                                                     
/*0x130*/     ULONG32      MaxPercent;                                                                                                                                                                           
/*0x134*/     ULONG32      MinPerfPercent;                                                                                                                                                                       
/*0x138*/     ULONG32      MinThrottlePercent;                                                                                                                                                                   
/*0x13C*/     ULONG32      AdvertizedMaximumFrequency;                                                                                                                                                           
/*0x140*/     UINT64       MinimumRelativePerformance;                                                                                                                                                           
/*0x148*/     UINT64       NominalRelativePerformance;                                                                                                                                                           
/*0x150*/     UINT8        NominalRelativePerformancePercent;                                                                                                                                                    
/*0x151*/     UINT8        Coordination;                                                                                                                                                                         
/*0x152*/     UINT8        HardPlatformCap;                                                                                                                                                                      
/*0x153*/     UINT8        AffinitizeControl;                                                                                                                                                                    
/*0x154*/     UINT8        EfficientThrottle;                                                                                                                                                                    
/*0x155*/     UINT8        AllowSchedulerDirectedPerfStates;                                                                                                                                                     
/*0x156*/     UINT8        InitiateAllProcessors;                                                                                                                                                                
/*0x157*/     UINT8        AutonomousMode;                                                                                                                                                                       
/*0x158*/     UINT8        ProvideGuidance;                                                                                                                                                                      
/*0x159*/     UINT8        _PADDING0_[0x3];                                                                                                                                                                      
/*0x15C*/     ULONG32      DesiredPercent;                                                                                                                                                                       
/*0x160*/     ULONG32      GuaranteedPercent;                                                                                                                                                                    
/*0x164*/     UINT8        EngageResponsivenessOverrides;                                                                                                                                                        
/*0x165*/     UINT8        _PADDING1_[0x3];                                                                                                                                                                      
/*0x168*/     struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[4];                                                                                                                                                 
/*0x1D8*/     ULONG32      QosDisableReasons[4];                                                                                                                                                                 
/*0x1E8*/     UINT16       QosEquivalencyMasks[4];                                                                                                                                                               
/*0x1F0*/     UINT8        QosSupported;                                                                                                                                                                         
/*0x1F1*/     UINT8        _PADDING2_[0x3];                                                                                                                                                                      
/*0x1F4*/     ULONG32      SelectionGeneration;                                                                                                                                                                  
/*0x1F8*/     struct _PERF_CONTROL_STATE_SELECTION QosSelection[4];                                                                                                                                              
/*0x298*/     UINT64       PerfChangeTime;                                                                                                                                                                       
/*0x2A0*/     ULONG32      PerfChangeIntervalCount;                                                                                                                                                              
/*0x2A4*/     UINT8        Force;                                                                                                                                                                                
/*0x2A5*/     UINT8        _PADDING3_[0x3];                                                                                                                                                                      
          }PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN;                                                                                                                                                                 
                                                                                                                                                                                                                 
          typedef struct _PROC_PERF_HISTORY_ENTRY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Utility;                                                 
/*0x002*/     UINT16       AffinitizedUtility;                                      
/*0x004*/     UINT8        Frequency;                                               
/*0x005*/     UINT8        TaggedPercent[2];                                        
/*0x007*/     UINT8        _PADDING0_[0x1];                                         
          }PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY;                                  
                                                                                    
          typedef struct _PROC_PERF_HISTORY                   // 7 elements, 0x24 bytes (sizeof) 
          {                                                                                      
/*0x000*/     ULONG32      Count;                                                                
/*0x004*/     ULONG32      Slot;                                                                 
/*0x008*/     ULONG32      UtilityTotal;                                                         
/*0x00C*/     ULONG32      AffinitizedUtilityTotal;                                              
/*0x010*/     ULONG32      FrequencyTotal;                                                       
/*0x014*/     ULONG32      TaggedPercentTotal[2];                                                
/*0x01C*/     struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];                                    
          }PROC_PERF_HISTORY, *PPROC_PERF_HISTORY;                                               
                                                                                                 
          typedef struct _PROC_PERF_LOAD        // 2 elements, 0x2 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT8        BusyPercentage;                                        
/*0x001*/     UINT8        FrequencyPercentage;                                   
          }PROC_PERF_LOAD, *PPROC_PERF_LOAD;                                      
                                                                                  
          typedef struct _PROCESS_ENERGY_VALUES                            // 16 elements, 0x110 bytes (sizeof) 
          {                                                                                                     
/*0x000*/     UINT64       Cycles[2][4];                                                                        
/*0x040*/     UINT64       DiskEnergy;                                                                          
/*0x048*/     UINT64       NetworkTailEnergy;                                                                   
/*0x050*/     UINT64       MBBTailEnergy;                                                                       
/*0x058*/     UINT64       NetworkTxRxBytes;                                                                    
/*0x060*/     UINT64       MBBTxRxBytes;                                                                        
              union                                                        // 2 elements, 0x18 bytes (sizeof)   
              {                                                                                                 
/*0x068*/         union _ENERGY_STATE_DURATION Durations[3];                                                    
                  struct                                                   // 3 elements, 0x18 bytes (sizeof)   
                  {                                                                                             
/*0x068*/             union _ENERGY_STATE_DURATION ForegroundDuration;     // 4 elements, 0x8 bytes (sizeof)    
/*0x070*/             union _ENERGY_STATE_DURATION DesktopVisibleDuration; // 4 elements, 0x8 bytes (sizeof)    
/*0x078*/             union _ENERGY_STATE_DURATION PSMForegroundDuration;  // 4 elements, 0x8 bytes (sizeof)    
                  };                                                                                            
              };                                                                                                
/*0x080*/     ULONG32      CompositionRendered;                                                                 
/*0x084*/     ULONG32      CompositionDirtyGenerated;                                                           
/*0x088*/     ULONG32      CompositionDirtyPropagated;                                                          
/*0x08C*/     ULONG32      Reserved1;                                                                           
/*0x090*/     UINT64       AttributedCycles[2][4];                                                              
/*0x0D0*/     UINT64       WorkOnBehalfCycles[2][4];                                                            
          }PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES;                                                      
                                                                                                                
          typedef union _TIMELINE_BITMAP // 3 elements, 0x8 bytes (sizeof) 
          {                                                                
/*0x000*/     UINT64       Value;                                          
              struct                     // 2 elements, 0x8 bytes (sizeof) 
              {                                                            
/*0x000*/         ULONG32      EndTime;                                    
/*0x004*/         ULONG32      Bitmap;                                     
              };                                                           
          }TIMELINE_BITMAP, *PTIMELINE_BITMAP;                                  
                                                                           
          typedef struct _PROCESS_ENERGY_VALUES_EXTENSION                        // 23 elements, 0xA0 bytes (sizeof) 
          {                                                                                                          
              union                                                              // 2 elements, 0x70 bytes (sizeof)  
              {                                                                                                      
/*0x000*/         union _TIMELINE_BITMAP Timelines[14];                                                              
                  struct                                                         // 14 elements, 0x70 bytes (sizeof) 
                  {                                                                                                  
/*0x000*/             union _TIMELINE_BITMAP CpuTimeline;                        // 3 elements, 0x8 bytes (sizeof)   
/*0x008*/             union _TIMELINE_BITMAP DiskTimeline;                       // 3 elements, 0x8 bytes (sizeof)   
/*0x010*/             union _TIMELINE_BITMAP NetworkTimeline;                    // 3 elements, 0x8 bytes (sizeof)   
/*0x018*/             union _TIMELINE_BITMAP MBBTimeline;                        // 3 elements, 0x8 bytes (sizeof)   
/*0x020*/             union _TIMELINE_BITMAP ForegroundTimeline;                 // 3 elements, 0x8 bytes (sizeof)   
/*0x028*/             union _TIMELINE_BITMAP DesktopVisibleTimeline;             // 3 elements, 0x8 bytes (sizeof)   
/*0x030*/             union _TIMELINE_BITMAP CompositionRenderedTimeline;        // 3 elements, 0x8 bytes (sizeof)   
/*0x038*/             union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;  // 3 elements, 0x8 bytes (sizeof)   
/*0x040*/             union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline; // 3 elements, 0x8 bytes (sizeof)   
/*0x048*/             union _TIMELINE_BITMAP InputTimeline;                      // 3 elements, 0x8 bytes (sizeof)   
/*0x050*/             union _TIMELINE_BITMAP AudioInTimeline;                    // 3 elements, 0x8 bytes (sizeof)   
/*0x058*/             union _TIMELINE_BITMAP AudioOutTimeline;                   // 3 elements, 0x8 bytes (sizeof)   
/*0x060*/             union _TIMELINE_BITMAP DisplayRequiredTimeline;            // 3 elements, 0x8 bytes (sizeof)   
/*0x068*/             union _TIMELINE_BITMAP KeyboardInputTimeline;              // 3 elements, 0x8 bytes (sizeof)   
                  };                                                                                                 
              };                                                                                                     
              union                                                              // 2 elements, 0x28 bytes (sizeof)  
              {                                                                                                      
/*0x070*/         union _ENERGY_STATE_DURATION Durations[5];                                                         
                  struct                                                         // 5 elements, 0x28 bytes (sizeof)  
                  {                                                                                                  
/*0x070*/             union _ENERGY_STATE_DURATION InputDuration;                // 4 elements, 0x8 bytes (sizeof)   
/*0x078*/             union _ENERGY_STATE_DURATION AudioInDuration;              // 4 elements, 0x8 bytes (sizeof)   
/*0x080*/             union _ENERGY_STATE_DURATION AudioOutDuration;             // 4 elements, 0x8 bytes (sizeof)   
/*0x088*/             union _ENERGY_STATE_DURATION DisplayRequiredDuration;      // 4 elements, 0x8 bytes (sizeof)   
/*0x090*/             union _ENERGY_STATE_DURATION PSMBackgroundDuration;        // 4 elements, 0x8 bytes (sizeof)   
                  };                                                                                                 
              };                                                                                                     
/*0x098*/     ULONG32      KeyboardInput;                                                                            
/*0x09C*/     ULONG32      MouseInput;                                                                               
          }PROCESS_ENERGY_VALUES_EXTENSION, *PPROCESS_ENERGY_VALUES_EXTENSION;                                       
                                                                                                                     
          typedef struct _PROCESS_EXTENDED_ENERGY_VALUES         // 2 elements, 0x1B0 bytes (sizeof)  
          {                                                                                           
/*0x000*/     struct _PROCESS_ENERGY_VALUES Base;                // 16 elements, 0x110 bytes (sizeof) 
/*0x110*/     struct _PROCESS_ENERGY_VALUES_EXTENSION Extension; // 23 elements, 0xA0 bytes (sizeof)  
          }PROCESS_EXTENDED_ENERGY_VALUES, *PPROCESS_EXTENDED_ENERGY_VALUES;                                     
                                                                                                      
          typedef struct _PROCESSOR_IDLE_DEPENDENCY // 4 elements, 0x8 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      ProcessorIndex;                                            
/*0x004*/     UINT8        ExpectedState;                                             
/*0x005*/     UINT8        AllowDeeperStates;                                         
/*0x006*/     UINT8        LooseDependency;                                           
/*0x007*/     UINT8        _PADDING0_[0x1];                                           
          }PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY;                                  
                                                                                      
          typedef struct _PROCESSOR_IDLESTATE_INFO // 4 elements, 0x8 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      TimeCheck;                                                
/*0x004*/     UINT8        DemotePercent;                                            
/*0x005*/     UINT8        PromotePercent;                                           
/*0x006*/     UINT8        Spare[2];                                                 
          }PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;                                  
                                                                                     
          typedef struct _PROCESSOR_IDLESTATE_POLICY      // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Revision;                                                         
              union                                       // 4 elements, 0x2 bytes (sizeof)  
              {                                                                              
/*0x002*/         UINT16       AsUSHORT;                                                     
                  struct                                  // 3 elements, 0x2 bytes (sizeof)  
                  {                                                                          
/*0x002*/             UINT16       AllowScaling : 1;      // 0 BitPosition                   
/*0x002*/             UINT16       Disabled : 1;          // 1 BitPosition                   
/*0x002*/             UINT16       Reserved : 14;         // 2 BitPosition                   
                  };                                                                         
              }Flags;                                                                        
/*0x004*/     ULONG32      PolicyCount;                                                      
/*0x008*/     struct _PROCESSOR_IDLESTATE_INFO Policy[3];                                    
          }PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;                                   
                                                                                             
          typedef struct _PROCESSOR_NUMBER // 3 elements, 0x4 bytes (sizeof) 
          {                                                                  
/*0x000*/     UINT16       Group;                                            
/*0x002*/     UINT8        Number;                                           
/*0x003*/     UINT8        Reserved;                                         
          }PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;                                  
                                                                             
          typedef struct _PROCESSOR_PERFSTATE_POLICY           // 11 elements, 0x1C bytes (sizeof) 
          {                                                                                        
/*0x000*/     ULONG32      Revision;                                                               
/*0x004*/     UINT8        MaxThrottle;                                                            
/*0x005*/     UINT8        MinThrottle;                                                            
/*0x006*/     UINT8        BusyAdjThreshold;                                                       
              union                                            // 2 elements, 0x1 bytes (sizeof)   
              {                                                                                    
/*0x007*/         UINT8        Spare;                                                              
                  union                                        // 5 elements, 0x1 bytes (sizeof)   
                  {                                                                                
/*0x007*/             UINT8        AsUCHAR;                                                        
                      struct                                   // 4 elements, 0x1 bytes (sizeof)   
                      {                                                                            
/*0x007*/                 UINT8        NoDomainAccounting : 1; // 0 BitPosition                    
/*0x007*/                 UINT8        IncreasePolicy : 2;     // 1 BitPosition                    
/*0x007*/                 UINT8        DecreasePolicy : 2;     // 3 BitPosition                    
/*0x007*/                 UINT8        Reserved : 3;           // 5 BitPosition                    
                      };                                                                           
                  }Flags;                                                                          
              };                                                                                   
/*0x008*/     ULONG32      TimeCheck;                                                              
/*0x00C*/     ULONG32      IncreaseTime;                                                           
/*0x010*/     ULONG32      DecreaseTime;                                                           
/*0x014*/     ULONG32      IncreasePercent;                                                        
/*0x018*/     ULONG32      DecreasePercent;                                                        
          }PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;                                    
                                                                                                   
          typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT64       Residency;                                                           
/*0x008*/     UINT64       TransitionCount;                                                     
          }PROCESSOR_PLATFORM_STATE_RESIDENCY, *PPROCESSOR_PLATFORM_STATE_RESIDENCY;                                   
                                                                                                
          typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES      // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Count;                                                                      
/*0x004*/     UINT8        _PADDING0_[0x4];                                                            
/*0x008*/     struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];                                    
          }PROCESSOR_PLATFORM_STATE_RESIDENCIES, *PPROCESSOR_PLATFORM_STATE_RESIDENCIES;                                   
                                                                                                       
          typedef struct _PROCESSOR_PROFILE_CONTROL_AREA // 1 elements, 0x60 bytes (sizeof)  
          {                                                                                  
/*0x000*/     struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;  // 12 elements, 0x60 bytes (sizeof) 
          }PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA;                                    
                                                                                             
          typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP // 1 elements, 0x10 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT64       Map[2];                                                           
          }PS_MITIGATION_AUDIT_OPTIONS_MAP, *PPS_MITIGATION_AUDIT_OPTIONS_MAP;                                   
                                                                                             
          typedef struct _PS_MITIGATION_OPTIONS_MAP // 1 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Map[2];                                                     
          }PS_MITIGATION_OPTIONS_MAP, *PPS_MITIGATION_OPTIONS_MAP;                                   
                                                                                       
          typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS // 6 elements, 0x1 bytes (sizeof) 
          {                                                                                   
              struct                                        // 5 elements, 0x1 bytes (sizeof) 
              {                                                                               
/*0x000*/         UINT8        Trustlet : 1;                // 0 BitPosition                  
/*0x000*/         UINT8        Ntos : 1;                    // 1 BitPosition                  
/*0x000*/         UINT8        WriteHandle : 1;             // 2 BitPosition                  
/*0x000*/         UINT8        ReadHandle : 1;              // 3 BitPosition                  
/*0x000*/         UINT8        Reserved : 4;                // 4 BitPosition                  
              };                                                                              
/*0x000*/     UINT8        AccessRights;                                                      
          }PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, *PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;                                  
                                                                                              
          typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE                          // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                                     
              union                                                           // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                                 
                  struct                                                      // 4 elements, 0x4 bytes (sizeof) 
                  {                                                                                             
/*0x000*/             UINT8        Version;                                                                     
/*0x001*/             UINT8        DataCount;                                                                   
/*0x002*/             UINT8        SemanticType;                                                                
/*0x003*/             union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights; // 6 elements, 0x1 bytes (sizeof) 
                  };                                                                                            
/*0x000*/         ULONG32      AttributeType;                                                                   
              };                                                                                                
          }PS_TRUSTLET_ATTRIBUTE_TYPE, *PPS_TRUSTLET_ATTRIBUTE_TYPE;                                            
                                                                                                                
          typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER          // 3 elements, 0x8 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType; // 5 elements, 0x4 bytes (sizeof) 
              struct                                            // 2 elements, 0x4 bytes (sizeof) 
              {                                                                                   
/*0x004*/         ULONG32      InstanceNumber : 8;              // 0 BitPosition                  
/*0x004*/         ULONG32      Reserved : 24;                   // 8 BitPosition                  
              };                                                                                  
          }PS_TRUSTLET_ATTRIBUTE_HEADER, *PPS_TRUSTLET_ATTRIBUTE_HEADER;                                  
                                                                                                  
          typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header; // 3 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       Data[1];                                                           
          }PS_TRUSTLET_ATTRIBUTE_DATA, *PPS_TRUSTLET_ATTRIBUTE_DATA;                                   
                                                                                              
          typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES         // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT64       TrustletIdentity;                                                       
/*0x008*/     struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];                                    
          }PS_TRUSTLET_CREATE_ATTRIBUTES, *PPS_TRUSTLET_CREATE_ATTRIBUTES;                                   
                                                                                                   
          typedef struct _PS_TRUSTLET_TKSESSION_ID // 1 elements, 0x20 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       SessionId[4];                                              
          }PS_TRUSTLET_TKSESSION_ID, *PPS_TRUSTLET_TKSESSION_ID;                                   
                                                                                      
typedef struct _PSP_STORAGE // 0 elements, 0x0 bytes (sizeof) 
{                                                             
}PSP_STORAGE, *PPSP_STORAGE;                                  
                                                              
          typedef struct _PTE_TRACKER              // 14 elements, 0x80 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _LIST_ENTRY ListEntry;        // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     struct _MDL* Mdl;                                                        
/*0x018*/     UINT64       Count;                                                      
/*0x020*/     VOID*        SystemVa;                                                   
/*0x028*/     VOID*        StartVa;                                                    
/*0x030*/     ULONG32      Offset;                                                     
/*0x034*/     ULONG32      Length;                                                     
/*0x038*/     UINT64       Page;                                                       
              struct                               // 5 elements, 0x4 bytes (sizeof)   
              {                                                                        
/*0x040*/         ULONG32      IoMapping : 1;      // 0 BitPosition                    
/*0x040*/         ULONG32      Matched : 1;        // 1 BitPosition                    
/*0x040*/         ULONG32      CacheAttribute : 2; // 2 BitPosition                    
/*0x040*/         ULONG32      GuardPte : 1;       // 4 BitPosition                    
/*0x040*/         ULONG32      Spare : 27;         // 5 BitPosition                    
              };                                                                       
/*0x048*/     VOID*        StackTrace[7];                                              
          }PTE_TRACKER, *PPTE_TRACKER;                                                 
                                                                                       
          typedef struct _RELATION_LIST                     // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _DEVICE_OBJECT_LIST* DeviceObjectList;                                    
/*0x008*/     UINT8        Sorted;                                                             
/*0x009*/     UINT8        _PADDING0_[0x7];                                                    
          }RELATION_LIST, *PRELATION_LIST;                                                     
                                                                                               
          typedef struct _RELATIVE_SYMLINK_INFO                  // 6 elements, 0x20 bytes (sizeof) 
          {                                                                                         
/*0x000*/     UINT16       ExposedNamespaceLength;                                                  
/*0x002*/     UINT16       Flags;                                                                   
/*0x004*/     UINT16       DeviceNameLength;                                                        
/*0x006*/     UINT16       Reserved;                                                                
/*0x008*/     struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;                                    
/*0x010*/     struct _UNICODE_STRING OpenedName;                 // 3 elements, 0x10 bytes (sizeof) 
          }RELATIVE_SYMLINK_INFO, *PRELATIVE_SYMLINK_INFO;                                          
                                                                                                    
          typedef struct _REMOTE_PORT_VIEW  // 3 elements, 0x18 bytes (sizeof) 
          {                                                                    
/*0x000*/     ULONG32      Length;                                             
/*0x004*/     UINT8        _PADDING0_[0x4];                                    
/*0x008*/     UINT64       ViewSize;                                           
/*0x010*/     VOID*        ViewBase;                                           
          }REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW;                                   
                                                                               
          typedef struct _RH_OP_CONTEXT                     // 7 elements, 0x48 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _LIST_ENTRY Links;                     // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _IRP* OplockRequestIrp;                                                   
/*0x018*/     struct _FILE_OBJECT* OplockRequestFileObject;                                    
/*0x020*/     struct _EPROCESS* OplockRequestProcess;                                          
/*0x028*/     struct _ETHREAD* OplockOwnerThread;                                              
/*0x030*/     ULONG32      Flags;                                                              
/*0x034*/     UINT8        _PADDING0_[0x4];                                                    
/*0x038*/     struct _LIST_ENTRY AtomicLinks;               // 2 elements, 0x10 bytes (sizeof) 
          }RH_OP_CONTEXT, *PRH_OP_CONTEXT;                                                     
                                                                                               
          typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME        // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;                                    
/*0x008*/     struct _ACTIVATION_CONTEXT* ActivationContext;                                           
/*0x010*/     ULONG32      Flags;                                                                      
/*0x014*/     UINT8        _PADDING0_[0x4];                                                            
          }RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME;                                   
                                                                                                       
          typedef struct _RTL_ATOM_TABLE                // 7 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     ULONG32      Signature;                                                      
/*0x004*/     LONG32       ReferenceCount;                                                 
/*0x008*/     struct _EX_PUSH_LOCK PushLock;            // 7 elements, 0x8 bytes (sizeof)  
/*0x010*/     struct _HANDLE_TABLE* ExHandleTable;                                         
/*0x018*/     ULONG32      Flags;                                                          
/*0x01C*/     ULONG32      NumberOfBuckets;                                                
/*0x020*/     struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];                                    
          }RTL_ATOM_TABLE, *PRTL_ATOM_TABLE;                                               
                                                                                           
          typedef struct _RTL_ATOM_TABLE_REFERENCE // 4 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _LIST_ENTRY LowBoxList;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      LowBoxID;                                                  
/*0x014*/     UINT16       ReferenceCount;                                            
/*0x016*/     UINT16       Flags;                                                     
          }RTL_ATOM_TABLE_REFERENCE, *PRTL_ATOM_TABLE_REFERENCE;                                   
                                                                                      
          typedef struct _RTL_ATOM_TABLE_ENTRY            // 6 elements, 0x30 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _RTL_ATOM_TABLE_ENTRY* HashLink;                                        
/*0x008*/     UINT16       HandleIndex;                                                      
/*0x00A*/     UINT16       Atom;                                                             
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                  
/*0x010*/     struct _RTL_ATOM_TABLE_REFERENCE Reference; // 4 elements, 0x18 bytes (sizeof) 
/*0x028*/     UINT8        NameLength;                                                       
/*0x029*/     UINT8        _PADDING1_[0x1];                                                  
/*0x02A*/     WCHAR        Name[1];                                                          
/*0x02C*/     UINT8        _PADDING2_[0x4];                                                  
          }RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY;                                     
                                                                                             
          typedef struct _RTL_CHASH_ENTRY // 1 elements, 0x8 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Key;                                             
          }RTL_CHASH_ENTRY, *PRTL_CHASH_ENTRY;                                  
                                                                            
          typedef struct _RTL_CHASH_TABLE     // 4 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _RTL_CHASH_ENTRY* Table;                                    
/*0x008*/     ULONG32      EntrySizeShift;                                       
/*0x00C*/     ULONG32      EntryMax;                                             
/*0x010*/     ULONG32      EntryCount;                                           
/*0x014*/     UINT8        _PADDING0_[0x4];                                      
          }RTL_CHASH_TABLE, *PRTL_CHASH_TABLE;                                   
                                                                                 
          typedef struct _RTL_CRITICAL_SECTION_DEBUG         // 9 elements, 0x30 bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Type;                                                                
/*0x002*/     UINT16       CreatorBackTraceIndex;                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                     
/*0x008*/     struct _RTL_CRITICAL_SECTION* CriticalSection;                                    
/*0x010*/     struct _LIST_ENTRY ProcessLocksList;           // 2 elements, 0x10 bytes (sizeof) 
/*0x020*/     ULONG32      EntryCount;                                                          
/*0x024*/     ULONG32      ContentionCount;                                                     
/*0x028*/     ULONG32      Flags;                                                               
/*0x02C*/     UINT16       CreatorBackTraceIndexHigh;                                           
/*0x02E*/     UINT16       SpareUSHORT;                                                         
          }RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;                                   
                                                                                                
          typedef struct _RTL_DRIVE_LETTER_CURDIR // 4 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     UINT16       Flags;                                                    
/*0x002*/     UINT16       Length;                                                   
/*0x004*/     ULONG32      TimeStamp;                                                
/*0x008*/     struct _STRING DosPath;             // 3 elements, 0x10 bytes (sizeof) 
          }RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;                                   
                                                                                     
          typedef struct _RTL_DYNAMIC_HASH_TABLE // 9 elements, 0x28 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      Flags;                                                   
/*0x004*/     ULONG32      Shift;                                                   
/*0x008*/     ULONG32      TableSize;                                               
/*0x00C*/     ULONG32      Pivot;                                                   
/*0x010*/     ULONG32      DivisorMask;                                             
/*0x014*/     ULONG32      NumEntries;                                              
/*0x018*/     ULONG32      NonEmptyBuckets;                                         
/*0x01C*/     ULONG32      NumEnumerators;                                          
/*0x020*/     VOID*        Directory;                                               
          }RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE;                                   
                                                                                    
          typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY* ChainHead;                                                
/*0x008*/     struct _LIST_ENTRY* PrevLinkage;                                              
/*0x010*/     UINT64       Signature;                                                       
          }RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;                                   
                                                                                            
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY // 2 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     struct _LIST_ENTRY Linkage;              // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     UINT64       Signature;                                                     
          }RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY;                                   
                                                                                          
          typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR       // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                          
              union                                               // 2 elements, 0x18 bytes (sizeof) 
              {                                                                                      
/*0x000*/         struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // 2 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _LIST_ENTRY* CurEntry;                                                      
              };                                                                                     
/*0x018*/     struct _LIST_ENTRY* ChainHead;                                                         
/*0x020*/     ULONG32      BucketIndex;                                                              
/*0x024*/     UINT8        _PADDING0_[0x4];                                                          
          }RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;                                   
                                                                                                     
          typedef struct _RTL_HASH_ENTRY            // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _SINGLE_LIST_ENTRY BucketLink; // 1 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT64       Key;                                                        
          }RTL_HASH_ENTRY, *PRTL_HASH_ENTRY;                                           
                                                                                       
          typedef struct _RTL_HASH_TABLE_ITERATOR // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _RTL_HASH_TABLE* Hash;                                          
/*0x008*/     struct _RTL_HASH_ENTRY* HashEntry;                                     
/*0x010*/     struct _SINGLE_LIST_ENTRY* Bucket;                                     
          }RTL_HASH_TABLE_ITERATOR, *PRTL_HASH_TABLE_ITERATOR;                                   
                                                                                     
          typedef struct _RTL_HP_LFH_CONFIG               // 2 elements, 0x4 bytes (sizeof) 
          {                                                                                 
/*0x000*/     UINT16       MaxBlockSize;                                                    
/*0x002*/     UINT16       WitholdPageCrossingBlocks : 1; // 0 BitPosition                  
          }RTL_HP_LFH_CONFIG, *PRTL_HP_LFH_CONFIG;                                          
                                                                                            
          typedef struct _RTL_HP_VS_CONFIG               // 1 elements, 0x4 bytes (sizeof) 
          {                                                                                
              struct                                     // 3 elements, 0x4 bytes (sizeof) 
              {                                                                            
/*0x000*/         ULONG32      PageAlignLargeAllocs : 1; // 0 BitPosition                  
/*0x000*/         ULONG32      FullDecommit : 1;         // 1 BitPosition                  
/*0x000*/         ULONG32      EnableDelayFree : 1;      // 2 BitPosition                  
              }Flags;                                                                      
          }RTL_HP_VS_CONFIG, *PRTL_HP_VS_CONFIG;                                           
                                                                                           
          typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS // 2 elements, 0x8 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _RTL_HP_LFH_CONFIG LfhConfigs;    // 2 elements, 0x4 bytes (sizeof) 
/*0x004*/     struct _RTL_HP_VS_CONFIG VsConfigs;      // 1 elements, 0x4 bytes (sizeof) 
          }RTL_HP_SUB_ALLOCATOR_CONFIGS, *PRTL_HP_SUB_ALLOCATOR_CONFIGS;                                  
                                                                                         
          typedef struct _RTL_RANGE         // 6 elements, 0x28 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Start;                                              
/*0x008*/     UINT64       End;                                                
/*0x010*/     VOID*        UserData;                                           
/*0x018*/     VOID*        Owner;                                              
/*0x020*/     UINT8        Attributes;                                         
/*0x021*/     UINT8        Flags;                                              
/*0x022*/     UINT8        _PADDING0_[0x6];                                    
          }RTL_RANGE, *PRTL_RANGE;                                             
                                                                               
          typedef struct _RTL_RANGE_LIST    // 4 elements, 0x20 bytes (sizeof) 
          {                                                                    
/*0x000*/     struct _LIST_ENTRY ListHead;  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Flags;                                              
/*0x014*/     ULONG32      Count;                                              
/*0x018*/     ULONG32      Stamp;                                              
/*0x01C*/     UINT8        _PADDING0_[0x4];                                    
          }RTL_RANGE_LIST, *PRTL_RANGE_LIST;                                   
                                                                               
          typedef struct _RTL_SPLAY_LINKS          // 3 elements, 0x18 bytes (sizeof) 
          {                                                                           
/*0x000*/     struct _RTL_SPLAY_LINKS* Parent;                                        
/*0x008*/     struct _RTL_SPLAY_LINKS* LeftChild;                                     
/*0x010*/     struct _RTL_SPLAY_LINKS* RightChild;                                    
          }RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS;                                        
                                                                                      
          typedef struct _TIME_FIELDS    // 8 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     INT16        Year;                                            
/*0x002*/     INT16        Month;                                           
/*0x004*/     INT16        Day;                                             
/*0x006*/     INT16        Hour;                                            
/*0x008*/     INT16        Minute;                                          
/*0x00A*/     INT16        Second;                                          
/*0x00C*/     INT16        Milliseconds;                                    
/*0x00E*/     INT16        Weekday;                                         
          }TIME_FIELDS, *PTIME_FIELDS;                                      
                                                                            
          typedef struct _RTL_TIME_ZONE_INFORMATION // 7 elements, 0xAC bytes (sizeof) 
          {                                                                            
/*0x000*/     LONG32       Bias;                                                       
/*0x004*/     WCHAR        StandardName[32];                                           
/*0x044*/     struct _TIME_FIELDS StandardStart;    // 8 elements, 0x10 bytes (sizeof) 
/*0x054*/     LONG32       StandardBias;                                               
/*0x058*/     WCHAR        DaylightName[32];                                           
/*0x098*/     struct _TIME_FIELDS DaylightStart;    // 8 elements, 0x10 bytes (sizeof) 
/*0x0A8*/     LONG32       DaylightBias;                                               
          }RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION;                                   
                                                                                       
          typedef struct _RTL_UMS_CONTEXT                       // 20 elements, 0x520 bytes (sizeof) 
          {                                                                                          
/*0x000*/     struct _SINGLE_LIST_ENTRY Link;                   // 1 elements, 0x8 bytes (sizeof)    
/*0x008*/     UINT8        _PADDING0_[0x8];                                                          
/*0x010*/     struct _CONTEXT Context;                          // 64 elements, 0x4D0 bytes (sizeof) 
/*0x4E0*/     VOID*        Teb;                                                                      
/*0x4E8*/     VOID*        UserContext;                                                              
              union                                             // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                      
                  struct                                        // 7 elements, 0x4 bytes (sizeof)    
                  {                                                                                  
/*0x4F0*/             ULONG32      ScheduledThread : 1;         // 0 BitPosition                     
/*0x4F0*/             ULONG32      Suspended : 1;               // 1 BitPosition                     
/*0x4F0*/             ULONG32      VolatileContext : 1;         // 2 BitPosition                     
/*0x4F0*/             ULONG32      Terminated : 1;              // 3 BitPosition                     
/*0x4F0*/             ULONG32      DebugActive : 1;             // 4 BitPosition                     
/*0x4F0*/             ULONG32      RunningOnSelfThread : 1;     // 5 BitPosition                     
/*0x4F0*/             ULONG32      DenyRunningOnSelfThread : 1; // 6 BitPosition                     
                  };                                                                                 
/*0x4F0*/         LONG32       Flags;                                                                
              };                                                                                     
              union                                             // 2 elements, 0x8 bytes (sizeof)    
              {                                                                                      
                  struct                                        // 2 elements, 0x8 bytes (sizeof)    
                  {                                                                                  
/*0x4F8*/             UINT64       KernelUpdateLock : 2;        // 0 BitPosition                     
/*0x4F8*/             UINT64       PrimaryClientID : 62;        // 2 BitPosition                     
                  };                                                                                 
/*0x4F8*/         UINT64       ContextLock;                                                          
              };                                                                                     
/*0x500*/     struct _RTL_UMS_CONTEXT* PrimaryUmsContext;                                            
/*0x508*/     ULONG32      SwitchCount;                                                              
/*0x50C*/     ULONG32      KernelYieldCount;                                                         
/*0x510*/     ULONG32      MixedYieldCount;                                                          
/*0x514*/     ULONG32      YieldCount;                                                               
/*0x518*/     UINT8        _PADDING1_[0x8];                                                          
          }RTL_UMS_CONTEXT, *PRTL_UMS_CONTEXT;                                                       
                                                                                                     
          typedef struct _RTL_USER_PROCESS_PARAMETERS                // 34 elements, 0x420 bytes (sizeof) 
          {                                                                                               
/*0x000*/     ULONG32      MaximumLength;                                                                 
/*0x004*/     ULONG32      Length;                                                                        
/*0x008*/     ULONG32      Flags;                                                                         
/*0x00C*/     ULONG32      DebugFlags;                                                                    
/*0x010*/     VOID*        ConsoleHandle;                                                                 
/*0x018*/     ULONG32      ConsoleFlags;                                                                  
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                               
/*0x020*/     VOID*        StandardInput;                                                                 
/*0x028*/     VOID*        StandardOutput;                                                                
/*0x030*/     VOID*        StandardError;                                                                 
/*0x038*/     struct _CURDIR CurrentDirectory;                       // 2 elements, 0x18 bytes (sizeof)   
/*0x050*/     struct _UNICODE_STRING DllPath;                        // 3 elements, 0x10 bytes (sizeof)   
/*0x060*/     struct _UNICODE_STRING ImagePathName;                  // 3 elements, 0x10 bytes (sizeof)   
/*0x070*/     struct _UNICODE_STRING CommandLine;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x080*/     VOID*        Environment;                                                                   
/*0x088*/     ULONG32      StartingX;                                                                     
/*0x08C*/     ULONG32      StartingY;                                                                     
/*0x090*/     ULONG32      CountX;                                                                        
/*0x094*/     ULONG32      CountY;                                                                        
/*0x098*/     ULONG32      CountCharsX;                                                                   
/*0x09C*/     ULONG32      CountCharsY;                                                                   
/*0x0A0*/     ULONG32      FillAttribute;                                                                 
/*0x0A4*/     ULONG32      WindowFlags;                                                                   
/*0x0A8*/     ULONG32      ShowWindowFlags;                                                               
/*0x0AC*/     UINT8        _PADDING1_[0x4];                                                               
/*0x0B0*/     struct _UNICODE_STRING WindowTitle;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0C0*/     struct _UNICODE_STRING DesktopInfo;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0D0*/     struct _UNICODE_STRING ShellInfo;                      // 3 elements, 0x10 bytes (sizeof)   
/*0x0E0*/     struct _UNICODE_STRING RuntimeData;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x0F0*/     struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];                                      
/*0x3F0*/     UINT64       EnvironmentSize;                                                               
/*0x3F8*/     UINT64       EnvironmentVersion;                                                            
/*0x400*/     VOID*        PackageDependencyData;                                                         
/*0x408*/     ULONG32      ProcessGroupId;                                                                
/*0x40C*/     ULONG32      LoaderThreads;                                                                 
/*0x410*/     struct _UNICODE_STRING RedirectionDllName;             // 3 elements, 0x10 bytes (sizeof)   
          }RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;                                     
                                                                                                          
          typedef struct _RTLP_HP_ALLOC_TRACKER              // 2 elements, 0x48 bytes (sizeof)  
          {                                                                                      
/*0x000*/     struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap; // 11 elements, 0x40 bytes (sizeof) 
/*0x040*/     UINT64       BaseAddress;                                                          
          }RTLP_HP_ALLOC_TRACKER, *PRTLP_HP_ALLOC_TRACKER;                                       
                                                                                                 
          typedef struct _RTLP_HP_HEAP_GLOBALS                    // 4 elements, 0x38 bytes (sizeof) 
          {                                                                                          
/*0x000*/     UINT64       HeapKey;                                                                  
/*0x008*/     UINT64       LfhKey;                                                                   
/*0x010*/     struct _HEAP_FAILURE_INFORMATION* FailureInfo;                                         
/*0x018*/     struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData; // 4 elements, 0x20 bytes (sizeof) 
          }RTLP_HP_HEAP_GLOBALS, *PRTLP_HP_HEAP_GLOBALS;                                             
                                                                                                     
          typedef struct _RTLP_HP_METADATA_HEAP_CTX // 2 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _SEGMENT_HEAP* Heap;                                              
/*0x008*/     union _RTL_RUN_ONCE InitOnce;         // 3 elements, 0x8 bytes (sizeof)  
          }RTLP_HP_METADATA_HEAP_CTX, *PRTLP_HP_METADATA_HEAP_CTX;                                   
                                                                                       
           typedef struct _RTLP_HP_HEAP_MANAGER                      // 5 elements, 0x30C8 bytes (sizeof) 
           {                                                                                              
/*0x000*/      struct _RTLP_HP_HEAP_GLOBALS* Globals;                                                     
/*0x008*/      struct _RTLP_HP_ALLOC_TRACKER AllocTracker;           // 2 elements, 0x48 bytes (sizeof)   
/*0x050*/      struct _HEAP_VAMGR_CTX VaMgr;                         // 4 elements, 0x3040 bytes (sizeof) 
/*0x3090*/     struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];                                        
/*0x30C0*/     struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs; // 2 elements, 0x8 bytes (sizeof)    
           }RTLP_HP_HEAP_MANAGER, *PRTLP_HP_HEAP_MANAGER;                                                 
                                                                                                          
          typedef struct _RTLP_HP_PADDING_HEADER // 2 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT64       PaddingSize;                                             
/*0x008*/     UINT64       Spare;                                                   
          }RTLP_HP_PADDING_HEADER, *PRTLP_HP_PADDING_HEADER;                                   
                                                                                    
          typedef struct _RTLP_RANGE_LIST_ENTRY    // 8 elements, 0x38 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       Start;                                                     
/*0x008*/     UINT64       End;                                                       
              union                                // 2 elements, 0x10 bytes (sizeof) 
              {                                                                       
                  struct                           // 2 elements, 0x10 bytes (sizeof) 
                  {                                                                   
/*0x010*/             VOID*        UserData;                                          
/*0x018*/             VOID*        Owner;                                             
                  }Allocated;                                                         
                  struct                           // 1 elements, 0x10 bytes (sizeof) 
                  {                                                                   
/*0x010*/             struct _LIST_ENTRY ListHead; // 2 elements, 0x10 bytes (sizeof) 
                  }Merged;                                                            
              };                                                                      
/*0x020*/     UINT8        Attributes;                                                
/*0x021*/     UINT8        PublicFlags;                                               
/*0x022*/     UINT16       PrivateFlags;                                              
/*0x024*/     UINT8        _PADDING0_[0x4];                                           
/*0x028*/     struct _LIST_ENTRY ListEntry;        // 2 elements, 0x10 bytes (sizeof) 
          }RTLP_RANGE_LIST_ENTRY, *PRTLP_RANGE_LIST_ENTRY;                                   
                                                                                      
typedef struct _SCSI_REQUEST_BLOCK // 0 elements, 0x0 bytes (sizeof) 
{                                                                    
}SCSI_REQUEST_BLOCK, *PSCSI_REQUEST_BLOCK;                                  
                                                                     
          typedef struct _SECTION                             // 9 elements, 0x40 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _RTL_BALANCED_NODE SectionNode;          // 6 elements, 0x18 bytes (sizeof) 
/*0x018*/     UINT64       StartingVpn;                                                          
/*0x020*/     UINT64       EndingVpn;                                                            
              union                                           // 4 elements, 0x8 bytes (sizeof)  
              {                                                                                  
/*0x028*/         struct _CONTROL_AREA* ControlArea;                                             
/*0x028*/         struct _FILE_OBJECT* FileObject;                                               
                  struct                                      // 2 elements, 0x8 bytes (sizeof)  
                  {                                                                              
/*0x028*/             UINT64       RemoteImageFileObject : 1; // 0 BitPosition                   
/*0x028*/             UINT64       RemoteDataFileObject : 1;  // 1 BitPosition                   
                  };                                                                             
              }u1;                                                                               
/*0x030*/     UINT64       SizeOfSection;                                                        
              union                                           // 2 elements, 0x4 bytes (sizeof)  
              {                                                                                  
/*0x038*/         ULONG32      LongFlags;                                                        
/*0x038*/         struct _MMSECTION_FLAGS Flags;              // 27 elements, 0x4 bytes (sizeof) 
              }u;                                                                                
              struct                                          // 3 elements, 0x4 bytes (sizeof)  
              {                                                                                  
/*0x03C*/         ULONG32      InitialPageProtection : 12;    // 0 BitPosition                   
/*0x03C*/         ULONG32      SessionId : 19;                // 12 BitPosition                  
/*0x03C*/         ULONG32      NoValidationNeeded : 1;        // 31 BitPosition                  
              };                                                                                 
          }SECTION, *PSECTION;                                                                   
                                                                                                 
          typedef struct _SECTION_OBJECT_POINTERS // 3 elements, 0x18 bytes (sizeof) 
          {                                                                          
/*0x000*/     VOID*        DataSectionObject;                                        
/*0x008*/     VOID*        SharedCacheMap;                                           
/*0x010*/     VOID*        ImageSectionObject;                                       
          }SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS;                                   
                                                                                     
          typedef struct _SECURITY_DESCRIPTOR // 7 elements, 0x28 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        Revision;                                             
/*0x001*/     UINT8        Sbz1;                                                 
/*0x002*/     UINT16       Control;                                              
/*0x004*/     UINT8        _PADDING0_[0x4];                                      
/*0x008*/     VOID*        Owner;                                                
/*0x010*/     VOID*        Group;                                                
/*0x018*/     struct _ACL* Sacl;                                                 
/*0x020*/     struct _ACL* Dacl;                                                 
          }SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR;                                   
                                                                                 
          typedef struct _SEGMENT                                         // 11 elements, 0x48 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     struct _CONTROL_AREA* ControlArea;                                                              
/*0x008*/     ULONG32      TotalNumberOfPtes;                                                                 
/*0x00C*/     struct _SEGMENT_FLAGS SegmentFlags;                         // 16 elements, 0x4 bytes (sizeof)  
/*0x010*/     UINT64       NumberOfCommittedPages;                                                            
/*0x018*/     UINT64       SizeOfSegment;                                                                     
              union                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                               
/*0x020*/         struct _MMEXTEND_INFO* ExtendInfo;                                                          
/*0x020*/         VOID*        BasedAddress;                                                                  
              };                                                                                              
/*0x028*/     struct _EX_PUSH_LOCK SegmentLock;                           // 7 elements, 0x8 bytes (sizeof)   
              union                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                               
/*0x030*/         UINT64       ImageCommitment;                                                               
/*0x030*/         ULONG32      CreatingProcessId;                                                             
              }u1;                                                                                            
              union                                                       // 2 elements, 0x8 bytes (sizeof)   
              {                                                                                               
/*0x038*/         struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;                                     
/*0x038*/         VOID*        FirstMappedVa;                                                                 
              }u2;                                                                                            
/*0x040*/     struct _MMPTE* PrototypePte;                                                                    
          }SEGMENT, *PSEGMENT;                                                                                
                                                                                                              
typedef struct _SEGMENT_HEAP // 0 elements, 0x0 bytes (sizeof) 
{                                                              
}SEGMENT_HEAP, *PSEGMENT_HEAP;                                  
                                                               
          typedef struct _SEGMENT_HEAP_EXTRA         // 5 elements, 0x10 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT16       AllocationTag;                                               
              struct                                 // 2 elements, 0x1 bytes (sizeof)  
              {                                                                         
/*0x002*/         UINT8        InterceptorIndex : 4; // 0 BitPosition                   
/*0x002*/         UINT8        UserFlags : 4;        // 4 BitPosition                   
              };                                                                        
/*0x003*/     UINT8        ExtraSizeInUnits;                                            
/*0x004*/     UINT8        _PADDING0_[0x4];                                             
/*0x008*/     VOID*        Settable;                                                    
          }SEGMENT_HEAP_EXTRA, *PSEGMENT_HEAP_EXTRA;                                    
                                                                                        
          typedef struct _TOKEN_AUDIT_POLICY  // 1 elements, 0x1E bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        PerUserPolicy[30];                                    
          }TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;                                   
                                                                                 
          typedef struct _SEP_AUDIT_POLICY               // 2 elements, 0x1F bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _TOKEN_AUDIT_POLICY AdtTokenPolicy; // 1 elements, 0x1E bytes (sizeof) 
/*0x01E*/     UINT8        PolicySetStatus;                                                 
          }SEP_AUDIT_POLICY, *PSEP_AUDIT_POLICY;                                            
                                                                                            
          typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR     // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                          
/*0x000*/     enum _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;                                    
/*0x004*/     UINT8        _PADDING0_[0x4];                                                          
              union                                               // 2 elements, 0x10 bytes (sizeof) 
              {                                                                                      
/*0x008*/         VOID*        PackageSid;                                                           
/*0x008*/         struct _UNICODE_STRING IsolationPrefix;         // 3 elements, 0x10 bytes (sizeof) 
              };                                                                                     
          }SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR, *PSEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;                                   
                                                                                                     
          typedef struct _SEP_CACHED_HANDLES_ENTRY                         // 5 elements, 0x48 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;              // 2 elements, 0x18 bytes (sizeof) 
/*0x018*/     INT64        ReferenceCount;                                                                    
/*0x020*/     struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor; // 3 elements, 0x18 bytes (sizeof) 
/*0x038*/     ULONG32      HandleCount;                                                                       
/*0x03C*/     UINT8        _PADDING0_[0x4];                                                                   
/*0x040*/     VOID**       Handles;                                                                           
          }SEP_CACHED_HANDLES_ENTRY, *PSEP_CACHED_HANDLES_ENTRY;                                              
                                                                                                              
          typedef struct _SEP_CACHED_HANDLES_TABLE       // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _EX_PUSH_LOCK Lock;                 // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _RTL_DYNAMIC_HASH_TABLE* HashTable;                                    
          }SEP_CACHED_HANDLES_TABLE, *PSEP_CACHED_HANDLES_TABLE;                                   
                                                                                            
          typedef struct _SEP_LOGON_SESSION_REFERENCES                               // 17 elements, 0xC0 bytes (sizeof) 
          {                                                                                                              
/*0x000*/     struct _SEP_LOGON_SESSION_REFERENCES* Next;                                                                
/*0x008*/     struct _LUID LogonId;                                                  // 2 elements, 0x8 bytes (sizeof)   
/*0x010*/     struct _LUID BuddyLogonId;                                             // 2 elements, 0x8 bytes (sizeof)   
/*0x018*/     INT64        ReferenceCount;                                                                               
/*0x020*/     ULONG32      Flags;                                                                                        
/*0x024*/     UINT8        _PADDING0_[0x4];                                                                              
/*0x028*/     struct _DEVICE_MAP* pDeviceMap;                                                                            
/*0x030*/     VOID*        Token;                                                                                        
/*0x038*/     struct _UNICODE_STRING AccountName;                                    // 3 elements, 0x10 bytes (sizeof)  
/*0x048*/     struct _UNICODE_STRING AuthorityName;                                  // 3 elements, 0x10 bytes (sizeof)  
/*0x058*/     struct _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;                   // 2 elements, 0x10 bytes (sizeof)  
/*0x068*/     struct _EX_PUSH_LOCK SharedDataLock;                                   // 7 elements, 0x8 bytes (sizeof)   
/*0x070*/     struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* SharedClaimAttributes;                                     
/*0x078*/     struct _SEP_SID_VALUES_BLOCK* SharedSidValues;                                                             
/*0x080*/     struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;                    // 3 elements, 0x20 bytes (sizeof)  
/*0x0A0*/     struct _EJOB* ServerSilo;                                                                                  
/*0x0A8*/     struct _LUID SiblingAuthId;                                            // 2 elements, 0x8 bytes (sizeof)   
/*0x0B0*/     struct _LIST_ENTRY TokenList;                                          // 2 elements, 0x10 bytes (sizeof)  
          }SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES;                                                 
                                                                                                                         
          typedef struct _SEP_LOWBOX_NUMBER_ENTRY             // 5 elements, 0x38 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // 2 elements, 0x18 bytes (sizeof) 
/*0x018*/     INT64        ReferenceCount;                                                       
/*0x020*/     VOID*        PackageSid;                                                           
/*0x028*/     ULONG32      LowboxNumber;                                                         
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                      
/*0x030*/     VOID*        AtomTable;                                                            
          }SEP_LOWBOX_NUMBER_ENTRY, *PSEP_LOWBOX_NUMBER_ENTRY;                                   
                                                                                                 
          typedef struct _SEP_LOWBOX_NUMBER_MAPPING      // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                 
/*0x000*/     struct _EX_PUSH_LOCK Lock;                 // 7 elements, 0x8 bytes (sizeof)  
/*0x008*/     struct _RTL_BITMAP Bitmap;                 // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _RTL_DYNAMIC_HASH_TABLE* HashTable;                                    
/*0x020*/     UINT8        Active;                                                          
/*0x021*/     UINT8        _PADDING0_[0x7];                                                 
          }SEP_LOWBOX_NUMBER_MAPPING, *PSEP_LOWBOX_NUMBER_MAPPING;                                   
                                                                                            
          typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY         // 5 elements, 0x38 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry; // 2 elements, 0x18 bytes (sizeof) 
/*0x018*/     INT64        ReferenceCount;                                                       
/*0x020*/     UINT64       Luid;                                                                 
/*0x028*/     UINT64       IndexIntoGlobalSingletonTable;                                        
/*0x030*/     UINT8        MarkedForDeletion;                                                    
/*0x031*/     UINT8        _PADDING0_[0x7];                                                      
          }SEP_LUID_TO_INDEX_MAP_ENTRY, *PSEP_LUID_TO_INDEX_MAP_ENTRY;                                   
                                                                                                 
          typedef struct _SEP_SID_VALUES_BLOCK // 4 elements, 0x20 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      BlockLength;                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                       
/*0x008*/     INT64        ReferenceCount;                                        
/*0x010*/     ULONG32      SidCount;                                              
/*0x014*/     UINT8        _PADDING1_[0x4];                                       
/*0x018*/     UINT64       SidValuesStart;                                        
          }SEP_SID_VALUES_BLOCK, *PSEP_SID_VALUES_BLOCK;                                   
                                                                                  
          typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY // 7 elements, 0x120 bytes (sizeof) 
          {                                                                              
/*0x000*/     VOID*        ProcessCid;                                                   
/*0x008*/     VOID*        ThreadCid;                                                    
/*0x010*/     UINT8        ImageFileName[16];                                            
/*0x020*/     ULONG32      CreateMethod;                                                 
/*0x024*/     UINT8        _PADDING0_[0x4];                                              
/*0x028*/     UINT64       CreateTrace[30];                                              
/*0x118*/     LONG32       Count;                                                        
/*0x11C*/     LONG32       CaptureCount;                                                 
          }SEP_TOKEN_DIAG_TRACK_ENTRY, *PSEP_TOKEN_DIAG_TRACK_ENTRY;                                    
                                                                                         
          typedef struct _SEP_TOKEN_PRIVILEGES // 3 elements, 0x18 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       Present;                                               
/*0x008*/     UINT64       Enabled;                                               
/*0x010*/     UINT64       EnabledByDefault;                                      
          }SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES;                                   
                                                                                  
          typedef struct _SESSION_LOWBOX_MAP               // 3 elements, 0x40 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _LIST_ENTRY ListEntry;                // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SessionId;                                                         
/*0x014*/     UINT8        _PADDING0_[0x4];                                                   
/*0x018*/     struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap; // 4 elements, 0x28 bytes (sizeof) 
          }SESSION_LOWBOX_MAP, *PSESSION_LOWBOX_MAP;                                          
                                                                                              
          typedef struct _SHARED_CACHE_MAP                         // 44 elements, 0x220 bytes (sizeof) 
          {                                                                                             
/*0x000*/     INT16        NodeTypeCode;                                                                
/*0x002*/     INT16        NodeByteSize;                                                                
/*0x004*/     ULONG32      OpenCount;                                                                   
/*0x008*/     union _LARGE_INTEGER FileSize;                       // 4 elements, 0x8 bytes (sizeof)    
/*0x010*/     struct _LIST_ENTRY BcbList;                          // 2 elements, 0x10 bytes (sizeof)   
/*0x020*/     union _LARGE_INTEGER SectionSize;                    // 4 elements, 0x8 bytes (sizeof)    
/*0x028*/     union _LARGE_INTEGER ValidDataLength;                // 4 elements, 0x8 bytes (sizeof)    
/*0x030*/     union _LARGE_INTEGER ValidDataGoal;                  // 4 elements, 0x8 bytes (sizeof)    
/*0x038*/     struct _VACB* InitialVacbs[4];                                                            
/*0x058*/     struct _VACB** Vacbs;                                                                     
/*0x060*/     struct _EX_FAST_REF FileObjectFastRef;               // 3 elements, 0x8 bytes (sizeof)    
/*0x068*/     struct _EX_PUSH_LOCK VacbLock;                       // 7 elements, 0x8 bytes (sizeof)    
/*0x070*/     ULONG32      DirtyPages;                                                                  
/*0x074*/     UINT8        _PADDING0_[0x4];                                                             
/*0x078*/     struct _LIST_ENTRY LoggedStreamLinks;                // 2 elements, 0x10 bytes (sizeof)   
/*0x088*/     struct _LIST_ENTRY SharedCacheMapLinks;              // 2 elements, 0x10 bytes (sizeof)   
/*0x098*/     ULONG32      Flags;                                                                       
/*0x09C*/     LONG32       Status;                                                                      
/*0x0A0*/     struct _MBCB* Mbcb;                                                                       
/*0x0A8*/     VOID*        Section;                                                                     
/*0x0B0*/     struct _KEVENT* CreateEvent;                                                              
/*0x0B8*/     struct _KEVENT* WaitOnActiveCount;                                                        
/*0x0C0*/     ULONG32      PagesToWrite;                                                                
/*0x0C4*/     UINT8        _PADDING1_[0x4];                                                             
/*0x0C8*/     INT64        BeyondLastFlush;                                                             
/*0x0D0*/     struct _CACHE_MANAGER_CALLBACKS* Callbacks;                                               
/*0x0D8*/     VOID*        LazyWriteContext;                                                            
/*0x0E0*/     struct _LIST_ENTRY PrivateList;                      // 2 elements, 0x10 bytes (sizeof)   
              union                                                // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                         
/*0x0F0*/         struct _LOGGED_STREAM_CALLBACK_V1 V1;            // 2 elements, 0x10 bytes (sizeof)   
/*0x0F0*/         struct _LOGGED_STREAM_CALLBACK_V2 V2;            // 1 elements, 0x8 bytes (sizeof)    
              };                                                                                        
/*0x100*/     union _LARGE_INTEGER LargestLSN;                     // 4 elements, 0x8 bytes (sizeof)    
/*0x108*/     ULONG32      DirtyPageThreshold;                                                          
/*0x10C*/     ULONG32      LazyWritePassCount;                                                          
/*0x110*/     struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;                                      
/*0x118*/     struct _FAST_MUTEX BcbLock;                          // 5 elements, 0x38 bytes (sizeof)   
/*0x150*/     union _LARGE_INTEGER LastUnmapBehindOffset;          // 4 elements, 0x8 bytes (sizeof)    
/*0x158*/     struct _KEVENT Event;                                // 1 elements, 0x18 bytes (sizeof)   
/*0x170*/     union _LARGE_INTEGER HighWaterMappingOffset;         // 4 elements, 0x8 bytes (sizeof)    
/*0x178*/     struct _PRIVATE_CACHE_MAP PrivateCacheMap;           // 18 elements, 0x78 bytes (sizeof)  
/*0x1F0*/     VOID*        WriteBehindWorkQueueEntry;                                                   
/*0x1F8*/     struct _VOLUME_CACHE_MAP* VolumeCacheMap;                                                 
/*0x200*/     ULONG32      ProcImagePathHash;                                                           
/*0x204*/     ULONG32      WritesInProgress;                                                            
/*0x208*/     ULONG32      AsyncReadRequestCount;                                                       
/*0x20C*/     UINT8        _PADDING2_[0x4];                                                             
/*0x210*/     struct _CC_PARTITION* Partition;                                                          
/*0x218*/     ULONG32      InternalRefCount;                                                            
/*0x21C*/     UINT8        _PADDING3_[0x4];                                                             
          }SHARED_CACHE_MAP, *PSHARED_CACHE_MAP;                                                        
                                                                                                        
          typedef struct _SID_AND_ATTRIBUTES // 2 elements, 0x10 bytes (sizeof) 
          {                                                                     
/*0x000*/     VOID*        Sid;                                                 
/*0x008*/     ULONG32      Attributes;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                     
          }SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;                                   
                                                                                
          typedef struct _SILO_USER_SHARED_DATA               // 9 elements, 0x248 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      ServiceSessionId;                                                      
/*0x004*/     ULONG32      ActiveConsoleId;                                                       
/*0x008*/     INT64        ConsoleSessionForegroundProcessId;                                     
/*0x010*/     enum _NT_PRODUCT_TYPE NtProductType;                                                
/*0x014*/     ULONG32      SuiteMask;                                                             
/*0x018*/     ULONG32      SharedUserSessionId;                                                   
/*0x01C*/     UINT8        IsMultiSessionSku;                                                     
/*0x01D*/     UINT8        _PADDING0_[0x1];                                                       
/*0x01E*/     WCHAR        NtSystemRoot[260];                                                     
/*0x226*/     UINT16       UserModeGlobalLogger[16];                                              
/*0x246*/     UINT8        _PADDING1_[0x2];                                                       
          }SILO_USER_SHARED_DATA, *PSILO_USER_SHARED_DATA;                                        
                                                                                                  
          typedef struct _SINGLE_LIST_ENTRY32 // 1 elements, 0x4 bytes (sizeof) 
          {                                                                     
/*0x000*/     ULONG32      Next;                                                
          }SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32;                                  
                                                                                
          typedef struct _SK_CRASH_MODULE // 3 elements, 0x48 bytes (sizeof) 
          {                                                                  
/*0x000*/     WCHAR        ImageName[32];                                    
/*0x040*/     ULONG32      SizeOfImage;                                      
/*0x044*/     ULONG32      TimeDateStamp;                                    
          }SK_CRASH_MODULE, *PSK_CRASH_MODULE;                                   
                                                                             
          typedef struct _SK_CRASH_STACK_FRAME // 3 elements, 0x8 bytes (sizeof) 
          {                                                                      
              union                            // 2 elements, 0x8 bytes (sizeof) 
              {                                                                  
                  struct                       // 2 elements, 0x8 bytes (sizeof) 
                  {                                                              
/*0x000*/             ULONG32      ModuleId;                                     
/*0x004*/             ULONG32      Rva;                                          
                  };                                                             
/*0x000*/         UINT64       Pc;                                               
              };                                                                 
          }SK_CRASH_STACK_FRAME, *PSK_CRASH_STACK_FRAME;                                  
                                                                                 
          typedef struct _SK_CRASH_MINIDUMP                  // 6 elements, 0x1000 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Size;                                                                  
/*0x004*/     ULONG32      Version;                                                               
/*0x008*/     ULONG32      ModuleCount;                                                           
/*0x00C*/     ULONG32      FrameCount;                                                            
/*0x010*/     struct _SK_CRASH_MODULE Modules[16];                                                
/*0x490*/     struct _SK_CRASH_STACK_FRAME StackFrames[366];                                      
          }SK_CRASH_MINIDUMP, *PSK_CRASH_MINIDUMP;                                                
                                                                                                  
          typedef struct _SMBIOS3_TABLE_HEADER        // 10 elements, 0x18 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT8        Signature[5];                                                  
/*0x005*/     UINT8        Checksum;                                                      
/*0x006*/     UINT8        Length;                                                        
/*0x007*/     UINT8        MajorVersion;                                                  
/*0x008*/     UINT8        MinorVersion;                                                  
/*0x009*/     UINT8        Docrev;                                                        
/*0x00A*/     UINT8        EntryPointRevision;                                            
/*0x00B*/     UINT8        Reserved;                                                      
/*0x00C*/     ULONG32      StructureTableMaximumSize;                                     
/*0x010*/     UINT64       StructureTableAddress;                                         
          }SMBIOS3_TABLE_HEADER, *PSMBIOS3_TABLE_HEADER;                                    
                                                                                          
           typedef struct _STACK_TABLE                   // 4 elements, 0x8088 bytes (sizeof) 
           {                                                                                  
/*0x000*/      UINT16       NumStackTraces;                                                   
/*0x002*/      UINT16       TraceCapacity;                                                    
/*0x004*/      UINT8        _PADDING0_[0x4];                                                  
/*0x008*/      struct _OBJECT_REF_TRACE* StackTrace[16];                                      
/*0x088*/      UINT16       StackTableHash[16381];                                            
/*0x8082*/     UINT8        _PADDING1_[0x6];                                                  
           }STACK_TABLE, *PSTACK_TABLE;                                                       
                                                                                              
          typedef struct _SUPPORTED_RANGE      // 5 elements, 0x28 bytes (sizeof) 
          {                                                                       
/*0x000*/     struct _SUPPORTED_RANGE* Next;                                      
/*0x008*/     ULONG32      SystemAddressSpace;                                    
/*0x00C*/     UINT8        _PADDING0_[0x4];                                       
/*0x010*/     INT64        SystemBase;                                            
/*0x018*/     INT64        Base;                                                  
/*0x020*/     INT64        Limit;                                                 
          }SUPPORTED_RANGE, *PSUPPORTED_RANGE;                                    
                                                                                  
          typedef struct _SUPPORTED_RANGES            // 11 elements, 0xC0 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT16       Version;                                                       
/*0x002*/     UINT8        Sorted;                                                        
/*0x003*/     UINT8        Reserved;                                                      
/*0x004*/     ULONG32      NoIO;                                                          
/*0x008*/     struct _SUPPORTED_RANGE IO;             // 5 elements, 0x28 bytes (sizeof)  
/*0x030*/     ULONG32      NoMemory;                                                      
/*0x034*/     UINT8        _PADDING0_[0x4];                                               
/*0x038*/     struct _SUPPORTED_RANGE Memory;         // 5 elements, 0x28 bytes (sizeof)  
/*0x060*/     ULONG32      NoPrefetchMemory;                                              
/*0x064*/     UINT8        _PADDING1_[0x4];                                               
/*0x068*/     struct _SUPPORTED_RANGE PrefetchMemory; // 5 elements, 0x28 bytes (sizeof)  
/*0x090*/     ULONG32      NoDma;                                                         
/*0x094*/     UINT8        _PADDING2_[0x4];                                               
/*0x098*/     struct _SUPPORTED_RANGE Dma;            // 5 elements, 0x28 bytes (sizeof)  
          }SUPPORTED_RANGES, *PSUPPORTED_RANGES;                                          
                                                                                          
          typedef struct _tagSWITCH_CONTEXT_ATTRIBUTE // 4 elements, 0x18 bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT64       ulContextUpdateCounter;                                       
/*0x008*/     INT32        fAllowContextUpdate;                                          
/*0x00C*/     INT32        fEnableTrace;                                                 
/*0x010*/     UINT64       EtwHandle;                                                    
          }tagSWITCH_CONTEXT_ATTRIBUTE, *PtagSWITCH_CONTEXT_ATTRIBUTE;                                   
                                                                                         
          typedef struct _tagSWITCH_CONTEXT_DATA  // 8 elements, 0x340 bytes (sizeof) 
          {                                                                           
/*0x000*/     UINT64       ullOsMaxVersionTested;                                     
/*0x008*/     ULONG32      ulTargetPlatform;                                          
/*0x00C*/     UINT8        _PADDING0_[0x4];                                           
/*0x010*/     UINT64       ullContextMinimum;                                         
/*0x018*/     struct _GUID guPlatform;            // 4 elements, 0x10 bytes (sizeof)  
/*0x028*/     struct _GUID guMinPlatform;         // 4 elements, 0x10 bytes (sizeof)  
/*0x038*/     ULONG32      ulContextSource;                                           
/*0x03C*/     ULONG32      ulElementCount;                                            
/*0x040*/     struct _GUID guElements[48];                                            
          }tagSWITCH_CONTEXT_DATA, *PtagSWITCH_CONTEXT_DATA;                                    
                                                                                      
          typedef struct _tagSWITCH_CONTEXT                  // 2 elements, 0x358 bytes (sizeof) 
          {                                                                                      
/*0x000*/     struct _tagSWITCH_CONTEXT_ATTRIBUTE Attribute; // 4 elements, 0x18 bytes (sizeof)  
/*0x018*/     struct _tagSWITCH_CONTEXT_DATA Data;           // 8 elements, 0x340 bytes (sizeof) 
          }tagSWITCH_CONTEXT, *PtagSWITCH_CONTEXT;                                               
                                                                                                 
           typedef struct _TEB                                                  // 127 elements, 0x1838 bytes (sizeof) 
           {                                                                                                           
/*0x000*/      struct _NT_TIB NtTib;                                            // 8 elements, 0x38 bytes (sizeof)     
/*0x038*/      VOID*        EnvironmentPointer;                                                                        
/*0x040*/      struct _CLIENT_ID ClientId;                                      // 2 elements, 0x10 bytes (sizeof)     
/*0x050*/      VOID*        ActiveRpcHandle;                                                                           
/*0x058*/      VOID*        ThreadLocalStoragePointer;                                                                 
/*0x060*/      struct _PEB* ProcessEnvironmentBlock;                                                                   
/*0x068*/      ULONG32      LastErrorValue;                                                                            
/*0x06C*/      ULONG32      CountOfOwnedCriticalSections;                                                              
/*0x070*/      VOID*        CsrClientThread;                                                                           
/*0x078*/      VOID*        Win32ThreadInfo;                                                                           
/*0x080*/      ULONG32      User32Reserved[26];                                                                        
/*0x0E8*/      ULONG32      UserReserved[5];                                                                           
/*0x0FC*/      UINT8        _PADDING0_[0x4];                                                                           
/*0x100*/      VOID*        WOW32Reserved;                                                                             
/*0x108*/      ULONG32      CurrentLocale;                                                                             
/*0x10C*/      ULONG32      FpSoftwareStatusRegister;                                                                  
/*0x110*/      VOID*        ReservedForDebuggerInstrumentation[16];                                                    
/*0x190*/      VOID*        SystemReserved1[30];                                                                       
/*0x280*/      CHAR         PlaceholderCompatibilityMode;                                                              
/*0x281*/      UINT8        PlaceholderHydrationAlwaysExplicit;                                                        
/*0x282*/      CHAR         PlaceholderReserved[10];                                                                   
/*0x28C*/      ULONG32      ProxiedProcessId;                                                                          
/*0x290*/      struct _ACTIVATION_CONTEXT_STACK _ActivationStack;               // 5 elements, 0x28 bytes (sizeof)     
/*0x2B8*/      UINT8        WorkingOnBehalfTicket[8];                                                                  
/*0x2C0*/      LONG32       ExceptionCode;                                                                             
/*0x2C4*/      UINT8        Padding0[4];                                                                               
/*0x2C8*/      struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;                                        
/*0x2D0*/      UINT64       InstrumentationCallbackSp;                                                                 
/*0x2D8*/      UINT64       InstrumentationCallbackPreviousPc;                                                         
/*0x2E0*/      UINT64       InstrumentationCallbackPreviousSp;                                                         
/*0x2E8*/      ULONG32      TxFsContext;                                                                               
/*0x2EC*/      UINT8        InstrumentationCallbackDisabled;                                                           
/*0x2ED*/      UINT8        UnalignedLoadStoreExceptions;                                                              
/*0x2EE*/      UINT8        Padding1[2];                                                                               
/*0x2F0*/      struct _GDI_TEB_BATCH GdiTebBatch;                               // 4 elements, 0x4E8 bytes (sizeof)    
/*0x7D8*/      struct _CLIENT_ID RealClientId;                                  // 2 elements, 0x10 bytes (sizeof)     
/*0x7E8*/      VOID*        GdiCachedProcessHandle;                                                                    
/*0x7F0*/      ULONG32      GdiClientPID;                                                                              
/*0x7F4*/      ULONG32      GdiClientTID;                                                                              
/*0x7F8*/      VOID*        GdiThreadLocalInfo;                                                                        
/*0x800*/      UINT64       Win32ClientInfo[62];                                                                       
/*0x9F0*/      VOID*        glDispatchTable[233];                                                                      
/*0x1138*/     UINT64       glReserved1[29];                                                                           
/*0x1220*/     VOID*        glReserved2;                                                                               
/*0x1228*/     VOID*        glSectionInfo;                                                                             
/*0x1230*/     VOID*        glSection;                                                                                 
/*0x1238*/     VOID*        glTable;                                                                                   
/*0x1240*/     VOID*        glCurrentRC;                                                                               
/*0x1248*/     VOID*        glContext;                                                                                 
/*0x1250*/     ULONG32      LastStatusValue;                                                                           
/*0x1254*/     UINT8        Padding2[4];                                                                               
/*0x1258*/     struct _UNICODE_STRING StaticUnicodeString;                      // 3 elements, 0x10 bytes (sizeof)     
/*0x1268*/     WCHAR        StaticUnicodeBuffer[261];                                                                  
/*0x1472*/     UINT8        Padding3[6];                                                                               
/*0x1478*/     VOID*        DeallocationStack;                                                                         
/*0x1480*/     VOID*        TlsSlots[64];                                                                              
/*0x1680*/     struct _LIST_ENTRY TlsLinks;                                     // 2 elements, 0x10 bytes (sizeof)     
/*0x1690*/     VOID*        Vdm;                                                                                       
/*0x1698*/     VOID*        ReservedForNtRpc;                                                                          
/*0x16A0*/     VOID*        DbgSsReserved[2];                                                                          
/*0x16B0*/     ULONG32      HardErrorMode;                                                                             
/*0x16B4*/     UINT8        Padding4[4];                                                                               
/*0x16B8*/     VOID*        Instrumentation[11];                                                                       
/*0x1710*/     struct _GUID ActivityId;                                         // 4 elements, 0x10 bytes (sizeof)     
/*0x1720*/     VOID*        SubProcessTag;                                                                             
/*0x1728*/     VOID*        PerflibData;                                                                               
/*0x1730*/     VOID*        EtwTraceData;                                                                              
/*0x1738*/     VOID*        WinSockData;                                                                               
/*0x1740*/     ULONG32      GdiBatchCount;                                                                             
               union                                                            // 3 elements, 0x4 bytes (sizeof)      
               {                                                                                                       
/*0x1744*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;              // 3 elements, 0x4 bytes (sizeof)      
/*0x1744*/         ULONG32      IdealProcessorValue;                                                                   
                   struct                                                       // 4 elements, 0x4 bytes (sizeof)      
                   {                                                                                                   
/*0x1744*/             UINT8        ReservedPad0;                                                                      
/*0x1745*/             UINT8        ReservedPad1;                                                                      
/*0x1746*/             UINT8        ReservedPad2;                                                                      
/*0x1747*/             UINT8        IdealProcessor;                                                                    
                   };                                                                                                  
               };                                                                                                      
/*0x1748*/     ULONG32      GuaranteedStackBytes;                                                                      
/*0x174C*/     UINT8        Padding5[4];                                                                               
/*0x1750*/     VOID*        ReservedForPerf;                                                                           
/*0x1758*/     VOID*        ReservedForOle;                                                                            
/*0x1760*/     ULONG32      WaitingOnLoaderLock;                                                                       
/*0x1764*/     UINT8        Padding6[4];                                                                               
/*0x1768*/     VOID*        SavedPriorityState;                                                                        
/*0x1770*/     UINT64       ReservedForCodeCoverage;                                                                   
/*0x1778*/     VOID*        ThreadPoolData;                                                                            
/*0x1780*/     VOID**       TlsExpansionSlots;                                                                         
/*0x1788*/     VOID*        DeallocationBStore;                                                                        
/*0x1790*/     VOID*        BStoreLimit;                                                                               
/*0x1798*/     ULONG32      MuiGeneration;                                                                             
/*0x179C*/     ULONG32      IsImpersonating;                                                                           
/*0x17A0*/     VOID*        NlsCache;                                                                                  
/*0x17A8*/     VOID*        pShimData;                                                                                 
/*0x17B0*/     ULONG32      HeapData;                                                                                  
/*0x17B4*/     UINT8        Padding7[4];                                                                               
/*0x17B8*/     VOID*        CurrentTransactionHandle;                                                                  
/*0x17C0*/     struct _TEB_ACTIVE_FRAME* ActiveFrame;                                                                  
/*0x17C8*/     VOID*        FlsData;                                                                                   
/*0x17D0*/     VOID*        PreferredLanguages;                                                                        
/*0x17D8*/     VOID*        UserPrefLanguages;                                                                         
/*0x17E0*/     VOID*        MergedPrefLanguages;                                                                       
/*0x17E8*/     ULONG32      MuiImpersonation;                                                                          
               union                                                            // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                                       
/*0x17EC*/         UINT16       CrossTebFlags;                                                                         
/*0x17EC*/         UINT16       SpareCrossTebBits : 16;                         // 0 BitPosition                       
               };                                                                                                      
               union                                                            // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                                       
/*0x17EE*/         UINT16       SameTebFlags;                                                                          
                   struct                                                       // 16 elements, 0x2 bytes (sizeof)     
                   {                                                                                                   
/*0x17EE*/             UINT16       SafeThunkCall : 1;                          // 0 BitPosition                       
/*0x17EE*/             UINT16       InDebugPrint : 1;                           // 1 BitPosition                       
/*0x17EE*/             UINT16       HasFiberData : 1;                           // 2 BitPosition                       
/*0x17EE*/             UINT16       SkipThreadAttach : 1;                       // 3 BitPosition                       
/*0x17EE*/             UINT16       WerInShipAssertCode : 1;                    // 4 BitPosition                       
/*0x17EE*/             UINT16       RanProcessInit : 1;                         // 5 BitPosition                       
/*0x17EE*/             UINT16       ClonedThread : 1;                           // 6 BitPosition                       
/*0x17EE*/             UINT16       SuppressDebugMsg : 1;                       // 7 BitPosition                       
/*0x17EE*/             UINT16       DisableUserStackWalk : 1;                   // 8 BitPosition                       
/*0x17EE*/             UINT16       RtlExceptionAttached : 1;                   // 9 BitPosition                       
/*0x17EE*/             UINT16       InitialThread : 1;                          // 10 BitPosition                      
/*0x17EE*/             UINT16       SessionAware : 1;                           // 11 BitPosition                      
/*0x17EE*/             UINT16       LoadOwner : 1;                              // 12 BitPosition                      
/*0x17EE*/             UINT16       LoaderWorker : 1;                           // 13 BitPosition                      
/*0x17EE*/             UINT16       SkipLoaderInit : 1;                         // 14 BitPosition                      
/*0x17EE*/             UINT16       SpareSameTebBits : 1;                       // 15 BitPosition                      
                   };                                                                                                  
               };                                                                                                      
/*0x17F0*/     VOID*        TxnScopeEnterCallback;                                                                     
/*0x17F8*/     VOID*        TxnScopeExitCallback;                                                                      
/*0x1800*/     VOID*        TxnScopeContext;                                                                           
/*0x1808*/     ULONG32      LockCount;                                                                                 
/*0x180C*/     LONG32       WowTebOffset;                                                                              
/*0x1810*/     VOID*        ResourceRetValue;                                                                          
/*0x1818*/     VOID*        ReservedForWdf;                                                                            
/*0x1820*/     UINT64       ReservedForCrt;                                                                            
/*0x1828*/     struct _GUID EffectiveContainerId;                               // 4 elements, 0x10 bytes (sizeof)     
           }TEB, *PTEB;                                                                                                
                                                                                                                       
          typedef struct _TEB_ACTIVE_FRAME               // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      Flags;                                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                                 
/*0x008*/     struct _TEB_ACTIVE_FRAME* Previous;                                           
/*0x010*/     struct _TEB_ACTIVE_FRAME_CONTEXT* Context;                                    
          }TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME;                                            
                                                                                            
          typedef struct _TEB_ACTIVE_FRAME_CONTEXT // 2 elements, 0x10 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Flags;                                                     
/*0x004*/     UINT8        _PADDING0_[0x4];                                           
/*0x008*/     CHAR*        FrameName;                                                 
          }TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT;                                   
                                                                                      
          typedef struct _TEB32                                    // 117 elements, 0x1000 bytes (sizeof) 
          {                                                                                               
/*0x000*/     struct _NT_TIB32 NtTib;                              // 8 elements, 0x1C bytes (sizeof)     
/*0x01C*/     ULONG32      EnvironmentPointer;                                                            
/*0x020*/     struct _CLIENT_ID32 ClientId;                        // 2 elements, 0x8 bytes (sizeof)      
/*0x028*/     ULONG32      ActiveRpcHandle;                                                               
/*0x02C*/     ULONG32      ThreadLocalStoragePointer;                                                     
/*0x030*/     ULONG32      ProcessEnvironmentBlock;                                                       
/*0x034*/     ULONG32      LastErrorValue;                                                                
/*0x038*/     ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x03C*/     ULONG32      CsrClientThread;                                                               
/*0x040*/     ULONG32      Win32ThreadInfo;                                                               
/*0x044*/     ULONG32      User32Reserved[26];                                                            
/*0x0AC*/     ULONG32      UserReserved[5];                                                               
/*0x0C0*/     ULONG32      WOW32Reserved;                                                                 
/*0x0C4*/     ULONG32      CurrentLocale;                                                                 
/*0x0C8*/     ULONG32      FpSoftwareStatusRegister;                                                      
/*0x0CC*/     ULONG32      ReservedForDebuggerInstrumentation[16];                                        
/*0x10C*/     ULONG32      SystemReserved1[26];                                                           
/*0x174*/     CHAR         PlaceholderCompatibilityMode;                                                  
/*0x175*/     UINT8        PlaceholderHydrationAlwaysExplicit;                                            
/*0x176*/     CHAR         PlaceholderReserved[10];                                                       
/*0x180*/     ULONG32      ProxiedProcessId;                                                              
/*0x184*/     struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack; // 5 elements, 0x18 bytes (sizeof)     
/*0x19C*/     UINT8        WorkingOnBehalfTicket[8];                                                      
/*0x1A4*/     LONG32       ExceptionCode;                                                                 
/*0x1A8*/     ULONG32      ActivationContextStackPointer;                                                 
/*0x1AC*/     ULONG32      InstrumentationCallbackSp;                                                     
/*0x1B0*/     ULONG32      InstrumentationCallbackPreviousPc;                                             
/*0x1B4*/     ULONG32      InstrumentationCallbackPreviousSp;                                             
/*0x1B8*/     UINT8        InstrumentationCallbackDisabled;                                               
/*0x1B9*/     UINT8        SpareBytes[23];                                                                
/*0x1D0*/     ULONG32      TxFsContext;                                                                   
/*0x1D4*/     struct _GDI_TEB_BATCH32 GdiTebBatch;                 // 4 elements, 0x4E0 bytes (sizeof)    
/*0x6B4*/     struct _CLIENT_ID32 RealClientId;                    // 2 elements, 0x8 bytes (sizeof)      
/*0x6BC*/     ULONG32      GdiCachedProcessHandle;                                                        
/*0x6C0*/     ULONG32      GdiClientPID;                                                                  
/*0x6C4*/     ULONG32      GdiClientTID;                                                                  
/*0x6C8*/     ULONG32      GdiThreadLocalInfo;                                                            
/*0x6CC*/     ULONG32      Win32ClientInfo[62];                                                           
/*0x7C4*/     ULONG32      glDispatchTable[233];                                                          
/*0xB68*/     ULONG32      glReserved1[29];                                                               
/*0xBDC*/     ULONG32      glReserved2;                                                                   
/*0xBE0*/     ULONG32      glSectionInfo;                                                                 
/*0xBE4*/     ULONG32      glSection;                                                                     
/*0xBE8*/     ULONG32      glTable;                                                                       
/*0xBEC*/     ULONG32      glCurrentRC;                                                                   
/*0xBF0*/     ULONG32      glContext;                                                                     
/*0xBF4*/     ULONG32      LastStatusValue;                                                               
/*0xBF8*/     struct _STRING32 StaticUnicodeString;                // 3 elements, 0x8 bytes (sizeof)      
/*0xC00*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0xE0A*/     UINT8        _PADDING0_[0x2];                                                               
/*0xE0C*/     ULONG32      DeallocationStack;                                                             
/*0xE10*/     ULONG32      TlsSlots[64];                                                                  
/*0xF10*/     struct _LIST_ENTRY32 TlsLinks;                       // 2 elements, 0x8 bytes (sizeof)      
/*0xF18*/     ULONG32      Vdm;                                                                           
/*0xF1C*/     ULONG32      ReservedForNtRpc;                                                              
/*0xF20*/     ULONG32      DbgSsReserved[2];                                                              
/*0xF28*/     ULONG32      HardErrorMode;                                                                 
/*0xF2C*/     ULONG32      Instrumentation[9];                                                            
/*0xF50*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0xF60*/     ULONG32      SubProcessTag;                                                                 
/*0xF64*/     ULONG32      PerflibData;                                                                   
/*0xF68*/     ULONG32      EtwTraceData;                                                                  
/*0xF6C*/     ULONG32      WinSockData;                                                                   
/*0xF70*/     ULONG32      GdiBatchCount;                                                                 
              union                                                // 3 elements, 0x4 bytes (sizeof)      
              {                                                                                           
/*0xF74*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0xF74*/         ULONG32      IdealProcessorValue;                                                       
                  struct                                           // 4 elements, 0x4 bytes (sizeof)      
                  {                                                                                       
/*0xF74*/             UINT8        ReservedPad0;                                                          
/*0xF75*/             UINT8        ReservedPad1;                                                          
/*0xF76*/             UINT8        ReservedPad2;                                                          
/*0xF77*/             UINT8        IdealProcessor;                                                        
                  };                                                                                      
              };                                                                                          
/*0xF78*/     ULONG32      GuaranteedStackBytes;                                                          
/*0xF7C*/     ULONG32      ReservedForPerf;                                                               
/*0xF80*/     ULONG32      ReservedForOle;                                                                
/*0xF84*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0xF88*/     ULONG32      SavedPriorityState;                                                            
/*0xF8C*/     ULONG32      ReservedForCodeCoverage;                                                       
/*0xF90*/     ULONG32      ThreadPoolData;                                                                
/*0xF94*/     ULONG32      TlsExpansionSlots;                                                             
/*0xF98*/     ULONG32      MuiGeneration;                                                                 
/*0xF9C*/     ULONG32      IsImpersonating;                                                               
/*0xFA0*/     ULONG32      NlsCache;                                                                      
/*0xFA4*/     ULONG32      pShimData;                                                                     
/*0xFA8*/     ULONG32      HeapData;                                                                      
/*0xFAC*/     ULONG32      CurrentTransactionHandle;                                                      
/*0xFB0*/     ULONG32      ActiveFrame;                                                                   
/*0xFB4*/     ULONG32      FlsData;                                                                       
/*0xFB8*/     ULONG32      PreferredLanguages;                                                            
/*0xFBC*/     ULONG32      UserPrefLanguages;                                                             
/*0xFC0*/     ULONG32      MergedPrefLanguages;                                                           
/*0xFC4*/     ULONG32      MuiImpersonation;                                                              
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFC8*/         UINT16       CrossTebFlags;                                                             
/*0xFC8*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
              };                                                                                          
              union                                                // 2 elements, 0x2 bytes (sizeof)      
              {                                                                                           
/*0xFCA*/         UINT16       SameTebFlags;                                                              
                  struct                                           // 16 elements, 0x2 bytes (sizeof)     
                  {                                                                                       
/*0xFCA*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0xFCA*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0xFCA*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0xFCA*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0xFCA*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0xFCA*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0xFCA*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0xFCA*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0xFCA*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0xFCA*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0xFCA*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0xFCA*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0xFCA*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0xFCA*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0xFCA*/             UINT16       SkipLoaderInit : 1;             // 14 BitPosition                      
/*0xFCA*/             UINT16       SpareSameTebBits : 1;           // 15 BitPosition                      
                  };                                                                                      
              };                                                                                          
/*0xFCC*/     ULONG32      TxnScopeEnterCallback;                                                         
/*0xFD0*/     ULONG32      TxnScopeExitCallback;                                                          
/*0xFD4*/     ULONG32      TxnScopeContext;                                                               
/*0xFD8*/     ULONG32      LockCount;                                                                     
/*0xFDC*/     LONG32       WowTebOffset;                                                                  
/*0xFE0*/     ULONG32      ResourceRetValue;                                                              
/*0xFE4*/     ULONG32      ReservedForWdf;                                                                
/*0xFE8*/     UINT64       ReservedForCrt;                                                                
/*0xFF0*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
          }TEB32, *PTEB32;                                                                                
                                                                                                          
           typedef struct _TEB64                                    // 127 elements, 0x1838 bytes (sizeof) 
           {                                                                                               
/*0x000*/      struct _NT_TIB64 NtTib;                              // 8 elements, 0x38 bytes (sizeof)     
/*0x038*/      UINT64       EnvironmentPointer;                                                            
/*0x040*/      struct _CLIENT_ID64 ClientId;                        // 2 elements, 0x10 bytes (sizeof)     
/*0x050*/      UINT64       ActiveRpcHandle;                                                               
/*0x058*/      UINT64       ThreadLocalStoragePointer;                                                     
/*0x060*/      UINT64       ProcessEnvironmentBlock;                                                       
/*0x068*/      ULONG32      LastErrorValue;                                                                
/*0x06C*/      ULONG32      CountOfOwnedCriticalSections;                                                  
/*0x070*/      UINT64       CsrClientThread;                                                               
/*0x078*/      UINT64       Win32ThreadInfo;                                                               
/*0x080*/      ULONG32      User32Reserved[26];                                                            
/*0x0E8*/      ULONG32      UserReserved[5];                                                               
/*0x0FC*/      UINT8        _PADDING0_[0x4];                                                               
/*0x100*/      UINT64       WOW32Reserved;                                                                 
/*0x108*/      ULONG32      CurrentLocale;                                                                 
/*0x10C*/      ULONG32      FpSoftwareStatusRegister;                                                      
/*0x110*/      UINT64       ReservedForDebuggerInstrumentation[16];                                        
/*0x190*/      UINT64       SystemReserved1[30];                                                           
/*0x280*/      CHAR         PlaceholderCompatibilityMode;                                                  
/*0x281*/      UINT8        PlaceholderHydrationAlwaysExplicit;                                            
/*0x282*/      CHAR         PlaceholderReserved[10];                                                       
/*0x28C*/      ULONG32      ProxiedProcessId;                                                              
/*0x290*/      struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack; // 5 elements, 0x28 bytes (sizeof)     
/*0x2B8*/      UINT8        WorkingOnBehalfTicket[8];                                                      
/*0x2C0*/      LONG32       ExceptionCode;                                                                 
/*0x2C4*/      UINT8        Padding0[4];                                                                   
/*0x2C8*/      UINT64       ActivationContextStackPointer;                                                 
/*0x2D0*/      UINT64       InstrumentationCallbackSp;                                                     
/*0x2D8*/      UINT64       InstrumentationCallbackPreviousPc;                                             
/*0x2E0*/      UINT64       InstrumentationCallbackPreviousSp;                                             
/*0x2E8*/      ULONG32      TxFsContext;                                                                   
/*0x2EC*/      UINT8        InstrumentationCallbackDisabled;                                               
/*0x2ED*/      UINT8        UnalignedLoadStoreExceptions;                                                  
/*0x2EE*/      UINT8        Padding1[2];                                                                   
/*0x2F0*/      struct _GDI_TEB_BATCH64 GdiTebBatch;                 // 4 elements, 0x4E8 bytes (sizeof)    
/*0x7D8*/      struct _CLIENT_ID64 RealClientId;                    // 2 elements, 0x10 bytes (sizeof)     
/*0x7E8*/      UINT64       GdiCachedProcessHandle;                                                        
/*0x7F0*/      ULONG32      GdiClientPID;                                                                  
/*0x7F4*/      ULONG32      GdiClientTID;                                                                  
/*0x7F8*/      UINT64       GdiThreadLocalInfo;                                                            
/*0x800*/      UINT64       Win32ClientInfo[62];                                                           
/*0x9F0*/      UINT64       glDispatchTable[233];                                                          
/*0x1138*/     UINT64       glReserved1[29];                                                               
/*0x1220*/     UINT64       glReserved2;                                                                   
/*0x1228*/     UINT64       glSectionInfo;                                                                 
/*0x1230*/     UINT64       glSection;                                                                     
/*0x1238*/     UINT64       glTable;                                                                       
/*0x1240*/     UINT64       glCurrentRC;                                                                   
/*0x1248*/     UINT64       glContext;                                                                     
/*0x1250*/     ULONG32      LastStatusValue;                                                               
/*0x1254*/     UINT8        Padding2[4];                                                                   
/*0x1258*/     struct _STRING64 StaticUnicodeString;                // 3 elements, 0x10 bytes (sizeof)     
/*0x1268*/     WCHAR        StaticUnicodeBuffer[261];                                                      
/*0x1472*/     UINT8        Padding3[6];                                                                   
/*0x1478*/     UINT64       DeallocationStack;                                                             
/*0x1480*/     UINT64       TlsSlots[64];                                                                  
/*0x1680*/     struct _LIST_ENTRY64 TlsLinks;                       // 2 elements, 0x10 bytes (sizeof)     
/*0x1690*/     UINT64       Vdm;                                                                           
/*0x1698*/     UINT64       ReservedForNtRpc;                                                              
/*0x16A0*/     UINT64       DbgSsReserved[2];                                                              
/*0x16B0*/     ULONG32      HardErrorMode;                                                                 
/*0x16B4*/     UINT8        Padding4[4];                                                                   
/*0x16B8*/     UINT64       Instrumentation[11];                                                           
/*0x1710*/     struct _GUID ActivityId;                             // 4 elements, 0x10 bytes (sizeof)     
/*0x1720*/     UINT64       SubProcessTag;                                                                 
/*0x1728*/     UINT64       PerflibData;                                                                   
/*0x1730*/     UINT64       EtwTraceData;                                                                  
/*0x1738*/     UINT64       WinSockData;                                                                   
/*0x1740*/     ULONG32      GdiBatchCount;                                                                 
               union                                                // 3 elements, 0x4 bytes (sizeof)      
               {                                                                                           
/*0x1744*/         struct _PROCESSOR_NUMBER CurrentIdealProcessor;  // 3 elements, 0x4 bytes (sizeof)      
/*0x1744*/         ULONG32      IdealProcessorValue;                                                       
                   struct                                           // 4 elements, 0x4 bytes (sizeof)      
                   {                                                                                       
/*0x1744*/             UINT8        ReservedPad0;                                                          
/*0x1745*/             UINT8        ReservedPad1;                                                          
/*0x1746*/             UINT8        ReservedPad2;                                                          
/*0x1747*/             UINT8        IdealProcessor;                                                        
                   };                                                                                      
               };                                                                                          
/*0x1748*/     ULONG32      GuaranteedStackBytes;                                                          
/*0x174C*/     UINT8        Padding5[4];                                                                   
/*0x1750*/     UINT64       ReservedForPerf;                                                               
/*0x1758*/     UINT64       ReservedForOle;                                                                
/*0x1760*/     ULONG32      WaitingOnLoaderLock;                                                           
/*0x1764*/     UINT8        Padding6[4];                                                                   
/*0x1768*/     UINT64       SavedPriorityState;                                                            
/*0x1770*/     UINT64       ReservedForCodeCoverage;                                                       
/*0x1778*/     UINT64       ThreadPoolData;                                                                
/*0x1780*/     UINT64       TlsExpansionSlots;                                                             
/*0x1788*/     UINT64       DeallocationBStore;                                                            
/*0x1790*/     UINT64       BStoreLimit;                                                                   
/*0x1798*/     ULONG32      MuiGeneration;                                                                 
/*0x179C*/     ULONG32      IsImpersonating;                                                               
/*0x17A0*/     UINT64       NlsCache;                                                                      
/*0x17A8*/     UINT64       pShimData;                                                                     
/*0x17B0*/     ULONG32      HeapData;                                                                      
/*0x17B4*/     UINT8        Padding7[4];                                                                   
/*0x17B8*/     UINT64       CurrentTransactionHandle;                                                      
/*0x17C0*/     UINT64       ActiveFrame;                                                                   
/*0x17C8*/     UINT64       FlsData;                                                                       
/*0x17D0*/     UINT64       PreferredLanguages;                                                            
/*0x17D8*/     UINT64       UserPrefLanguages;                                                             
/*0x17E0*/     UINT64       MergedPrefLanguages;                                                           
/*0x17E8*/     ULONG32      MuiImpersonation;                                                              
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EC*/         UINT16       CrossTebFlags;                                                             
/*0x17EC*/         UINT16       SpareCrossTebBits : 16;             // 0 BitPosition                       
               };                                                                                          
               union                                                // 2 elements, 0x2 bytes (sizeof)      
               {                                                                                           
/*0x17EE*/         UINT16       SameTebFlags;                                                              
                   struct                                           // 16 elements, 0x2 bytes (sizeof)     
                   {                                                                                       
/*0x17EE*/             UINT16       SafeThunkCall : 1;              // 0 BitPosition                       
/*0x17EE*/             UINT16       InDebugPrint : 1;               // 1 BitPosition                       
/*0x17EE*/             UINT16       HasFiberData : 1;               // 2 BitPosition                       
/*0x17EE*/             UINT16       SkipThreadAttach : 1;           // 3 BitPosition                       
/*0x17EE*/             UINT16       WerInShipAssertCode : 1;        // 4 BitPosition                       
/*0x17EE*/             UINT16       RanProcessInit : 1;             // 5 BitPosition                       
/*0x17EE*/             UINT16       ClonedThread : 1;               // 6 BitPosition                       
/*0x17EE*/             UINT16       SuppressDebugMsg : 1;           // 7 BitPosition                       
/*0x17EE*/             UINT16       DisableUserStackWalk : 1;       // 8 BitPosition                       
/*0x17EE*/             UINT16       RtlExceptionAttached : 1;       // 9 BitPosition                       
/*0x17EE*/             UINT16       InitialThread : 1;              // 10 BitPosition                      
/*0x17EE*/             UINT16       SessionAware : 1;               // 11 BitPosition                      
/*0x17EE*/             UINT16       LoadOwner : 1;                  // 12 BitPosition                      
/*0x17EE*/             UINT16       LoaderWorker : 1;               // 13 BitPosition                      
/*0x17EE*/             UINT16       SkipLoaderInit : 1;             // 14 BitPosition                      
/*0x17EE*/             UINT16       SpareSameTebBits : 1;           // 15 BitPosition                      
                   };                                                                                      
               };                                                                                          
/*0x17F0*/     UINT64       TxnScopeEnterCallback;                                                         
/*0x17F8*/     UINT64       TxnScopeExitCallback;                                                          
/*0x1800*/     UINT64       TxnScopeContext;                                                               
/*0x1808*/     ULONG32      LockCount;                                                                     
/*0x180C*/     LONG32       WowTebOffset;                                                                  
/*0x1810*/     UINT64       ResourceRetValue;                                                              
/*0x1818*/     UINT64       ReservedForWdf;                                                                
/*0x1820*/     UINT64       ReservedForCrt;                                                                
/*0x1828*/     struct _GUID EffectiveContainerId;                   // 4 elements, 0x10 bytes (sizeof)     
           }TEB64, *PTEB64;                                                                                
                                                                                                           
          typedef struct _TERMINATION_PORT    // 2 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _TERMINATION_PORT* Next;                                    
/*0x008*/     VOID*        Port;                                                 
          }TERMINATION_PORT, *PTERMINATION_PORT;                                   
                                                                                 
          typedef struct _THERMAL_INFORMATION    // 10 elements, 0x58 bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      ThermalStamp;                                             
/*0x004*/     ULONG32      ThermalConstant1;                                         
/*0x008*/     ULONG32      ThermalConstant2;                                         
/*0x00C*/     UINT8        _PADDING0_[0x4];                                          
/*0x010*/     UINT64       Processors;                                               
/*0x018*/     ULONG32      SamplingPeriod;                                           
/*0x01C*/     ULONG32      CurrentTemperature;                                       
/*0x020*/     ULONG32      PassiveTripPoint;                                         
/*0x024*/     ULONG32      CriticalTripPoint;                                        
/*0x028*/     UINT8        ActiveTripPointCount;                                     
/*0x029*/     UINT8        _PADDING1_[0x3];                                          
/*0x02C*/     ULONG32      ActiveTripPoint[10];                                      
/*0x054*/     UINT8        _PADDING2_[0x4];                                          
          }THERMAL_INFORMATION, *PTHERMAL_INFORMATION;                                    
                                                                                     
          typedef struct _THERMAL_ZONE_COUNTERS      // 4 elements, 0x10 bytes (sizeof) 
          {                                                                             
/*0x000*/     ULONG32      Temperature;                                                 
/*0x004*/     ULONG32      ThrottleLimit;                                               
/*0x008*/     ULONG32      ThrottleReasons;                                             
/*0x00C*/     ULONG32      TemperatureHighPrecision;                                    
          }THERMAL_ZONE_COUNTERS, *PTHERMAL_ZONE_COUNTERS;                                   
                                                                                        
          typedef struct _THREAD_ENERGY_VALUES       // 4 elements, 0xC8 bytes (sizeof) 
          {                                                                             
/*0x000*/     UINT64       Cycles[2][4];                                                
/*0x040*/     UINT64       AttributedCycles[2][4];                                      
/*0x080*/     UINT64       WorkOnBehalfCycles[2][4];                                    
/*0x0C0*/     union _TIMELINE_BITMAP CpuTimeline;    // 3 elements, 0x8 bytes (sizeof)  
          }THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES;                                   
                                                                                        
          typedef struct _THREAD_PERFORMANCE_DATA       // 10 elements, 0x1C0 bytes (sizeof) 
          {                                                                                  
/*0x000*/     UINT16       Size;                                                             
/*0x002*/     UINT16       Version;                                                          
/*0x004*/     struct _PROCESSOR_NUMBER ProcessorNumber; // 3 elements, 0x4 bytes (sizeof)    
/*0x008*/     ULONG32      ContextSwitches;                                                  
/*0x00C*/     ULONG32      HwCountersCount;                                                  
/*0x010*/     UINT64       UpdateCount;                                                      
/*0x018*/     UINT64       WaitReasonBitMap;                                                 
/*0x020*/     UINT64       HardwareCounters;                                                 
/*0x028*/     struct _COUNTER_READING CycleTime;        // 4 elements, 0x18 bytes (sizeof)   
/*0x040*/     struct _COUNTER_READING HwCounters[16];                                        
          }THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA;                                     
                                                                                             
          typedef struct _TlgProvider_t                       // 7 elements, 0x38 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT32       LevelPlus1;                                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                                      
/*0x008*/     UINT16*      ProviderMetadataPtr;                                                  
/*0x010*/     UINT64       KeywordAny;                                                           
/*0x018*/     UINT64       KeywordAll;                                                           
/*0x020*/     UINT64       RegHandle;                                                            
/*0x028*/     FUNCT_00EF_1E8A_EnableCallback* EnableCallback;                                    
/*0x030*/     VOID*        CallbackContext;                                                      
          }TlgProvider_t, *PTlgProvider_t;                                                       
                                                                                                 
          typedef struct _TlgProviderMetadata_t // 3 elements, 0x13 bytes (sizeof) 
          {                                                                        
/*0x000*/     UINT8        Type;                                                   
/*0x001*/     struct _GUID ProviderId;          // 4 elements, 0x10 bytes (sizeof) 
/*0x011*/     UINT16       RemainingSize;                                          
          }TlgProviderMetadata_t, *PTlgProviderMetadata_t;                                   
                                                                                   
          typedef struct _TOKEN                                                        // 48 elements, 0x498 bytes (sizeof) 
          {                                                                                                                 
/*0x000*/     struct _TOKEN_SOURCE TokenSource;                                        // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     struct _LUID TokenId;                                                    // 2 elements, 0x8 bytes (sizeof)    
/*0x018*/     struct _LUID AuthenticationId;                                           // 2 elements, 0x8 bytes (sizeof)    
/*0x020*/     struct _LUID ParentTokenId;                                              // 2 elements, 0x8 bytes (sizeof)    
/*0x028*/     union _LARGE_INTEGER ExpirationTime;                                     // 4 elements, 0x8 bytes (sizeof)    
/*0x030*/     struct _ERESOURCE* TokenLock;                                                                                 
/*0x038*/     struct _LUID ModifiedId;                                                 // 2 elements, 0x8 bytes (sizeof)    
/*0x040*/     struct _SEP_TOKEN_PRIVILEGES Privileges;                                 // 3 elements, 0x18 bytes (sizeof)   
/*0x058*/     struct _SEP_AUDIT_POLICY AuditPolicy;                                    // 2 elements, 0x1F bytes (sizeof)   
/*0x077*/     UINT8        _PADDING0_[0x1];                                                                                 
/*0x078*/     ULONG32      SessionId;                                                                                       
/*0x07C*/     ULONG32      UserAndGroupCount;                                                                               
/*0x080*/     ULONG32      RestrictedSidCount;                                                                              
/*0x084*/     ULONG32      VariableLength;                                                                                  
/*0x088*/     ULONG32      DynamicCharged;                                                                                  
/*0x08C*/     ULONG32      DynamicAvailable;                                                                                
/*0x090*/     ULONG32      DefaultOwnerIndex;                                                                               
/*0x094*/     UINT8        _PADDING1_[0x4];                                                                                 
/*0x098*/     struct _SID_AND_ATTRIBUTES* UserAndGroups;                                                                    
/*0x0A0*/     struct _SID_AND_ATTRIBUTES* RestrictedSids;                                                                   
/*0x0A8*/     VOID*        PrimaryGroup;                                                                                    
/*0x0B0*/     ULONG32*     DynamicPart;                                                                                     
/*0x0B8*/     struct _ACL* DefaultDacl;                                                                                     
/*0x0C0*/     enum _TOKEN_TYPE TokenType;                                                                                   
/*0x0C4*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                                        
/*0x0C8*/     ULONG32      TokenFlags;                                                                                      
/*0x0CC*/     UINT8        TokenInUse;                                                                                      
/*0x0CD*/     UINT8        _PADDING2_[0x3];                                                                                 
/*0x0D0*/     ULONG32      IntegrityLevelIndex;                                                                             
/*0x0D4*/     ULONG32      MandatoryPolicy;                                                                                 
/*0x0D8*/     struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;                                                           
/*0x0E0*/     struct _LUID OriginatingLogonSession;                                    // 2 elements, 0x8 bytes (sizeof)    
/*0x0E8*/     struct _SID_AND_ATTRIBUTES_HASH SidHash;                                 // 3 elements, 0x110 bytes (sizeof)  
/*0x1F8*/     struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;                       // 3 elements, 0x110 bytes (sizeof)  
/*0x308*/     struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;                                      
/*0x310*/     VOID*        Package;                                                                                         
/*0x318*/     struct _SID_AND_ATTRIBUTES* Capabilities;                                                                     
/*0x320*/     ULONG32      CapabilityCount;                                                                                 
/*0x324*/     UINT8        _PADDING3_[0x4];                                                                                 
/*0x328*/     struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;                        // 3 elements, 0x110 bytes (sizeof)  
/*0x438*/     struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;                                                           
/*0x440*/     struct _SEP_CACHED_HANDLES_ENTRY* LowboxHandlesEntry;                                                         
/*0x448*/     struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;                                             
/*0x450*/     VOID*        TrustLevelSid;                                                                                   
/*0x458*/     struct _TOKEN* TrustLinkedToken;                                                                              
/*0x460*/     VOID*        IntegrityLevelSidValue;                                                                          
/*0x468*/     struct _SEP_SID_VALUES_BLOCK* TokenSidValues;                                                                 
/*0x470*/     struct _SEP_LUID_TO_INDEX_MAP_ENTRY* IndexEntry;                                                              
/*0x478*/     struct _SEP_TOKEN_DIAG_TRACK_ENTRY* DiagnosticInfo;                                                           
/*0x480*/     struct _SEP_CACHED_HANDLES_ENTRY* BnoIsolationHandlesEntry;                                                   
/*0x488*/     VOID*        SessionObject;                                                                                   
/*0x490*/     UINT64       VariablePart;                                                                                    
          }TOKEN, *PTOKEN;                                                                                                  
                                                                                                                            
          typedef struct _TOKEN_MANDATORY_POLICY // 1 elements, 0x4 bytes (sizeof) 
          {                                                                        
/*0x000*/     ULONG32      Policy;                                                 
          }TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;                                  
                                                                                   
          typedef struct _TOKEN_ACCESS_INFORMATION                   // 13 elements, 0x58 bytes (sizeof) 
          {                                                                                              
/*0x000*/     struct _SID_AND_ATTRIBUTES_HASH* SidHash;                                                  
/*0x008*/     struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;                                        
/*0x010*/     struct _TOKEN_PRIVILEGES* Privileges;                                                      
/*0x018*/     struct _LUID AuthenticationId;                         // 2 elements, 0x8 bytes (sizeof)   
/*0x020*/     enum _TOKEN_TYPE TokenType;                                                                
/*0x024*/     enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;                                     
/*0x028*/     struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;        // 1 elements, 0x4 bytes (sizeof)   
/*0x02C*/     ULONG32      Flags;                                                                        
/*0x030*/     ULONG32      AppContainerNumber;                                                           
/*0x034*/     UINT8        _PADDING0_[0x4];                                                              
/*0x038*/     VOID*        PackageSid;                                                                   
/*0x040*/     struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;                                         
/*0x048*/     VOID*        TrustLevelSid;                                                                
/*0x050*/     VOID*        SecurityAttributes;                                                           
          }TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;                                         
                                                                                                         
          typedef struct _TOKEN_PRIVILEGES               // 2 elements, 0x10 bytes (sizeof) 
          {                                                                                 
/*0x000*/     ULONG32      PrivilegeCount;                                                  
/*0x004*/     struct _LUID_AND_ATTRIBUTES Privileges[1];                                    
          }TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;                                            
                                                                                            
          typedef struct _TP_CALLBACK_ENVIRON_V3                                                                          // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                                                                                   
/*0x000*/     ULONG32      Version;                                                                                                                           
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                                                                   
/*0x008*/     struct _TP_POOL* Pool;                                                                                                                          
/*0x010*/     struct _TP_CLEANUP_GROUP* CleanupGroup;                                                                                                         
/*0x018*/     FUNCT_00EF_00EE_CleanupGroupCancelCallback_DeRefSecurityDescriptor_PostRoutine* CleanupGroupCancelCallback;                                     
/*0x020*/     VOID*        RaceDll;                                                                                                                           
/*0x028*/     struct _ACTIVATION_CONTEXT* ActivationContext;                                                                                                  
/*0x030*/     FUNCT_00EF_00F6_FinalizationCallback* FinalizationCallback;                                                                                     
              union                                                                                                       // 2 elements, 0x4 bytes (sizeof)   
              {                                                                                                                                               
/*0x038*/         ULONG32      Flags;                                                                                                                         
                  struct                                                                                                  // 3 elements, 0x4 bytes (sizeof)   
                  {                                                                                                                                           
/*0x038*/             ULONG32      LongFunction : 1;                                                                      // 0 BitPosition                    
/*0x038*/             ULONG32      Persistent : 1;                                                                        // 1 BitPosition                    
/*0x038*/             ULONG32      Private : 30;                                                                          // 2 BitPosition                    
                  }s;                                                                                                                                         
              }u;                                                                                                                                             
/*0x03C*/     enum _TP_CALLBACK_PRIORITY CallbackPriority;                                                                                                    
/*0x040*/     ULONG32      Size;                                                                                                                              
/*0x044*/     UINT8        _PADDING1_[0x4];                                                                                                                   
          }TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3;                                                                                                  
                                                                                                                                                              
typedef struct _TP_CALLBACK_INSTANCE // 0 elements, 0x0 bytes (sizeof) 
{                                                                      
}TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;                                  
                                                                       
typedef struct _TP_CLEANUP_GROUP // 0 elements, 0x0 bytes (sizeof) 
{                                                                  
}TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;                                  
                                                                   
typedef struct _TP_POOL // 0 elements, 0x0 bytes (sizeof) 
{                                                         
}TP_POOL, *PTP_POOL;                                      
                                                          
          typedef struct _TRACE_LOGFILE_HEADER            // 23 elements, 0x118 bytes (sizeof) 
          {                                                                                    
/*0x000*/     ULONG32      BufferSize;                                                         
              union                                       // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                
/*0x004*/         ULONG32      Version;                                                        
                  struct                                  // 4 elements, 0x4 bytes (sizeof)    
                  {                                                                            
/*0x004*/             UINT8        MajorVersion;                                               
/*0x005*/             UINT8        MinorVersion;                                               
/*0x006*/             UINT8        SubVersion;                                                 
/*0x007*/             UINT8        SubMinorVersion;                                            
                  }VersionDetail;                                                              
              };                                                                               
/*0x008*/     ULONG32      ProviderVersion;                                                    
/*0x00C*/     ULONG32      NumberOfProcessors;                                                 
/*0x010*/     union _LARGE_INTEGER EndTime;               // 4 elements, 0x8 bytes (sizeof)    
/*0x018*/     ULONG32      TimerResolution;                                                    
/*0x01C*/     ULONG32      MaximumFileSize;                                                    
/*0x020*/     ULONG32      LogFileMode;                                                        
/*0x024*/     ULONG32      BuffersWritten;                                                     
              union                                       // 2 elements, 0x10 bytes (sizeof)   
              {                                                                                
/*0x028*/         struct _GUID LogInstanceGuid;           // 4 elements, 0x10 bytes (sizeof)   
                  struct                                  // 4 elements, 0x10 bytes (sizeof)   
                  {                                                                            
/*0x028*/             ULONG32      StartBuffers;                                               
/*0x02C*/             ULONG32      PointerSize;                                                
/*0x030*/             ULONG32      EventsLost;                                                 
/*0x034*/             ULONG32      CpuSpeedInMHz;                                              
                  };                                                                           
              };                                                                               
/*0x038*/     WCHAR*       LoggerName;                                                         
/*0x040*/     WCHAR*       LogFileName;                                                        
/*0x048*/     struct _RTL_TIME_ZONE_INFORMATION TimeZone; // 7 elements, 0xAC bytes (sizeof)   
/*0x0F4*/     UINT8        _PADDING0_[0x4];                                                    
/*0x0F8*/     union _LARGE_INTEGER BootTime;              // 4 elements, 0x8 bytes (sizeof)    
/*0x100*/     union _LARGE_INTEGER PerfFreq;              // 4 elements, 0x8 bytes (sizeof)    
/*0x108*/     union _LARGE_INTEGER StartTime;             // 4 elements, 0x8 bytes (sizeof)    
/*0x110*/     ULONG32      ReservedFlags;                                                      
/*0x114*/     ULONG32      BuffersLost;                                                        
          }TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER;                                       
                                                                                               
          typedef struct _TraceLoggingMetadata_t // 5 elements, 0x10 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT32       Signature;                                               
/*0x004*/     UINT16       Size;                                                    
/*0x006*/     UINT8        Version;                                                 
/*0x007*/     UINT8        Flags;                                                   
/*0x008*/     UINT64       Magic;                                                   
          }TraceLoggingMetadata_t, *PTraceLoggingMetadata_t;                                   
                                                                                    
          typedef struct _TRIAGE_9F_PNP                                    // 5 elements, 0x20 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     UINT16       Signature;                                                                         
/*0x002*/     UINT16       Revision;                                                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                                                   
/*0x008*/     struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE* CompletionQueue;                                    
/*0x010*/     struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;                                                 
/*0x018*/     struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;                                               
          }TRIAGE_9F_PNP, *PTRIAGE_9F_PNP;                                                                    
                                                                                                              
          typedef struct _TRIAGE_9F_POWER                       // 6 elements, 0x28 bytes (sizeof) 
          {                                                                                        
/*0x000*/     UINT16       Signature;                                                              
/*0x002*/     UINT16       Revision;                                                               
/*0x004*/     UINT8        _PADDING0_[0x4];                                                        
/*0x008*/     struct _LIST_ENTRY* IrpList;                                                         
/*0x010*/     struct _LIST_ENTRY* ThreadList;                                                      
/*0x018*/     struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;                                      
/*0x020*/     struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;                                    
          }TRIAGE_9F_POWER, *PTRIAGE_9F_POWER;                                                     
                                                                                                   
          typedef struct _TRIAGE_DEVICE_NODE               // 9 elements, 0x58 bytes (sizeof) 
          {                                                                                   
/*0x000*/     struct _TRIAGE_DEVICE_NODE* Sibling;                                            
/*0x008*/     struct _TRIAGE_DEVICE_NODE* Child;                                              
/*0x010*/     struct _TRIAGE_DEVICE_NODE* Parent;                                             
/*0x018*/     struct _TRIAGE_DEVICE_NODE* LastChild;                                          
/*0x020*/     struct _DEVICE_OBJECT* PhysicalDeviceObject;                                    
/*0x028*/     struct _UNICODE_STRING InstancePath;         // 3 elements, 0x10 bytes (sizeof) 
/*0x038*/     struct _UNICODE_STRING ServiceName;          // 3 elements, 0x10 bytes (sizeof) 
/*0x048*/     struct _IRP* PendingIrp;                                                        
/*0x050*/     struct _TRIAGE_POP_FX_DEVICE* FxDevice;                                         
          }TRIAGE_DEVICE_NODE, *PTRIAGE_DEVICE_NODE;                                          
                                                                                              
          typedef struct _TRIAGE_EX_WORK_QUEUE // 1 elements, 0x2B0 bytes (sizeof) 
          {                                                                        
/*0x000*/     struct _KPRIQUEUE WorkPriQueue;  // 5 elements, 0x2B0 bytes (sizeof) 
          }TRIAGE_EX_WORK_QUEUE, *PTRIAGE_EX_WORK_QUEUE;                                    
                                                                                   
          typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE // 1 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _LIST_ENTRY DispatchedList;             // 2 elements, 0x10 bytes (sizeof) 
          }TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, *PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE;                                   
                                                                                                
          typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST // 2 elements, 0x18 bytes (sizeof) 
          {                                                                                       
/*0x000*/     struct _LIST_ENTRY ListEntry;                    // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _TRIAGE_DEVICE_NODE* DeviceNode;                                             
          }TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, *PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST;                                   
                                                                                                  
          typedef struct _TRIAGE_POP_FX_DEVICE        // 7 elements, 0x38 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _LIST_ENTRY Link;                // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _IRP* Irp;                                                          
/*0x018*/     struct _TRIAGE_POP_IRP_DATA* IrpData;                                      
/*0x020*/     LONG32       Status;                                                       
/*0x024*/     LONG32       PowerReqCall;                                                 
/*0x028*/     LONG32       PowerNotReqCall;                                              
/*0x02C*/     UINT8        _PADDING0_[0x4];                                              
/*0x030*/     struct _TRIAGE_DEVICE_NODE* DeviceNode;                                    
          }TRIAGE_POP_FX_DEVICE, *PTRIAGE_POP_FX_DEVICE;                                   
                                                                                         
          typedef struct _TRIAGE_POP_IRP_DATA // 3 elements, 0x20 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _LIST_ENTRY Link;        // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _IRP* Irp;                                                  
/*0x018*/     struct _DEVICE_OBJECT* Pdo;                                        
          }TRIAGE_POP_IRP_DATA, *PTRIAGE_POP_IRP_DATA;                                   
                                                                                 
          typedef struct _TRUSTLET_COLLABORATION_ID // 1 elements, 0x10 bytes (sizeof) 
          {                                                                            
/*0x000*/     UINT64       Value[2];                                                   
          }TRUSTLET_COLLABORATION_ID, *PTRUSTLET_COLLABORATION_ID;                                   
                                                                                       
          typedef struct _TRUSTLET_MAILBOX_KEY // 1 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       SecretValue[2];                                        
          }TRUSTLET_MAILBOX_KEY, *PTRUSTLET_MAILBOX_KEY;                                   
                                                                                  
          typedef struct _TXN_PARAMETER_BLOCK // 3 elements, 0x10 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT16       Length;                                               
/*0x002*/     UINT16       TxFsContext;                                          
/*0x004*/     UINT8        _PADDING0_[0x4];                                      
/*0x008*/     VOID*        TransactionObject;                                    
          }TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;                                   
                                                                                 
          typedef struct _UMS_CONTROL_BLOCK                                // 17 elements, 0x88 bytes (sizeof) 
          {                                                                                                    
/*0x000*/     struct _RTL_UMS_CONTEXT* UmsContext;                                                             
/*0x008*/     struct _SINGLE_LIST_ENTRY* CompletionListEntry;                                                  
/*0x010*/     struct _KEVENT* CompletionListEvent;                                                             
/*0x018*/     ULONG32      ServiceSequenceNumber;                                                              
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                                    
              union                                                        // 2 elements, 0x68 bytes (sizeof)  
              {                                                                                                
                  struct                                                   // 5 elements, 0x68 bytes (sizeof)  
                  {                                                                                            
/*0x020*/             struct _KQUEUE UmsQueue;                             // 5 elements, 0x40 bytes (sizeof)  
/*0x060*/             struct _LIST_ENTRY QueueEntry;                       // 2 elements, 0x10 bytes (sizeof)  
/*0x070*/             struct _RTL_UMS_CONTEXT* YieldingUmsContext;                                             
/*0x078*/             VOID*        YieldingParam;                                                              
/*0x080*/             VOID*        UmsTeb;                                                                     
                  };                                                                                           
                  struct                                                   // 5 elements, 0x68 bytes (sizeof)  
                  {                                                                                            
/*0x020*/             struct _KQUEUE* UmsAssociatedQueue;                                                      
/*0x028*/             struct _LIST_ENTRY* UmsQueueListEntry;                                                   
/*0x030*/             struct _KEVENT UmsWaitEvent;                         // 1 elements, 0x18 bytes (sizeof)  
/*0x048*/             VOID*        StagingArea;                                                                
                      union                                                // 2 elements, 0x38 bytes (sizeof)  
                      {                                                                                        
                          struct                                           // 3 elements, 0x4 bytes (sizeof)   
                          {                                                                                    
/*0x050*/                     ULONG32      UmsPrimaryDeliveredContext : 1; // 0 BitPosition                    
/*0x050*/                     ULONG32      UmsAssociatedQueueUsed : 1;     // 1 BitPosition                    
/*0x050*/                     ULONG32      UmsThreadParked : 1;            // 2 BitPosition                    
                          };                                                                                   
/*0x050*/                 ULONG32      UmsFlags;                                                               
                      };                                                                                       
                  };                                                                                           
              };                                                                                               
          }UMS_CONTROL_BLOCK, *PUMS_CONTROL_BLOCK;                                                             
                                                                                                               
          typedef struct _UNEXPECTED_INTERRUPT // 5 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     UINT8        PushImm;                                              
/*0x001*/     UINT8        Vector;                                               
/*0x002*/     UINT8        PushRbp;                                              
/*0x003*/     UINT8        JmpOp;                                                
/*0x004*/     LONG32       JmpOffset;                                            
          }UNEXPECTED_INTERRUPT, *PUNEXPECTED_INTERRUPT;                                  
                                                                                 
          typedef struct _VACB                          // 4 elements, 0x28 bytes (sizeof) 
          {                                                                                
/*0x000*/     VOID*        BaseAddress;                                                    
/*0x008*/     struct _SHARED_CACHE_MAP* SharedCacheMap;                                    
              union                                     // 3 elements, 0x10 bytes (sizeof) 
              {                                                                            
/*0x010*/         union _LARGE_INTEGER FileOffset;      // 4 elements, 0x8 bytes (sizeof)  
/*0x010*/         UINT16       ActiveCount;                                                
/*0x010*/         struct _LIST_ENTRY Links;             // 2 elements, 0x10 bytes (sizeof) 
              }Overlay;                                                                    
/*0x020*/     struct _VACB_ARRAY_HEADER* ArrayHead;                                        
          }VACB, *PVACB;                                                                   
                                                                                           
          typedef struct _VACB_ARRAY_HEADER    // 4 elements, 0x10 bytes (sizeof) 
          {                                                                       
/*0x000*/     ULONG32      VacbArrayIndex;                                        
/*0x004*/     ULONG32      MappingCount;                                          
/*0x008*/     ULONG32      HighestMappedIndex;                                    
/*0x00C*/     ULONG32      Reserved;                                              
          }VACB_ARRAY_HEADER, *PVACB_ARRAY_HEADER;                                   
                                                                                  
          typedef struct _VACB_LEVEL_ALLOCATION_LIST  // 3 elements, 0x20 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _LIST_ENTRY VacbLevelList;       // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     VOID*        VacbLevelWithBcbListHeads;                                    
/*0x018*/     ULONG32      VacbLevelsAllocated;                                          
/*0x01C*/     UINT8        _PADDING0_[0x4];                                              
          }VACB_LEVEL_ALLOCATION_LIST, *PVACB_LEVEL_ALLOCATION_LIST;                                   
                                                                                         
          typedef struct _VACB_LEVEL_REFERENCE // 2 elements, 0x8 bytes (sizeof) 
          {                                                                      
/*0x000*/     LONG32       Reference;                                            
/*0x004*/     LONG32       SpecialReference;                                     
          }VACB_LEVEL_REFERENCE, *PVACB_LEVEL_REFERENCE;                                  
                                                                                 
typedef struct _VERIFIER_SHARED_EXPORT_THUNK // 0 elements, 0x0 bytes (sizeof) 
{                                                                              
}VERIFIER_SHARED_EXPORT_THUNK, *PVERIFIER_SHARED_EXPORT_THUNK;                                  
                                                                               
          typedef struct _VF_ADDRESS_RANGE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     UINT8*       Start;                                             
/*0x008*/     UINT8*       End;                                               
          }VF_ADDRESS_RANGE, *PVF_ADDRESS_RANGE;                                   
                                                                              
          typedef struct _VF_AVL_TABLE                // 4 elements, 0xC0 bytes (sizeof)  
          {                                                                               
/*0x000*/     struct _RTL_AVL_TABLE RtlTable;         // 11 elements, 0x68 bytes (sizeof) 
/*0x068*/     struct _VF_AVL_TREE_NODE* ReservedNode;                                     
/*0x070*/     VOID*        NodeToFree;                                                    
/*0x078*/     UINT8        _PADDING0_[0x8];                                               
/*0x080*/     LONG32       Lock;                                                          
/*0x084*/     UINT8        _PADDING1_[0x3C];                                              
          }VF_AVL_TABLE, *PVF_AVL_TABLE;                                                  
                                                                                          
          typedef struct _VF_AVL_TREE        // 6 elements, 0x28 bytes (sizeof) 
          {                                                                     
/*0x000*/     UINT64       NodeRangeSize;                                       
/*0x008*/     UINT64       NodeCount;                                           
/*0x010*/     struct _VF_AVL_TABLE* Tables;                                     
/*0x018*/     ULONG32      TablesNo;                                            
/*0x01C*/     UINT8        UseSessionId;                                        
/*0x01D*/     UINT8        _PADDING0_[0x3];                                     
              union                          // 2 elements, 0x4 bytes (sizeof)  
              {                                                                 
/*0x020*/         ULONG32      NodeSize;                                        
/*0x020*/         ULONG32      UseLookaside;                                    
              }u1;                                                              
          }VF_AVL_TREE, *PVF_AVL_TREE;                                          
                                                                                
          typedef struct _VF_AVL_TREE_NODE // 2 elements, 0x10 bytes (sizeof) 
          {                                                                   
/*0x000*/     VOID*        p;                                                 
/*0x008*/     UINT64       RangeSize;                                         
          }VF_AVL_TREE_NODE, *PVF_AVL_TREE_NODE;                                   
                                                                              
          typedef struct _VF_AVL_TREE_NODE_EX // 2 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _VF_AVL_TREE_NODE Base;  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      SessionId;                                            
/*0x014*/     UINT8        _PADDING0_[0x4];                                      
          }VF_AVL_TREE_NODE_EX, *PVF_AVL_TREE_NODE_EX;                                   
                                                                                 
          typedef struct _VF_DRIVER_IO_CALLBACKS                          // 5 elements, 0x100 bytes (sizeof) 
          {                                                                                                   
/*0x000*/     FUNCT_00A0_0EEE_DriverInit* DriverInit;                                                         
/*0x008*/     FUNCT_00EF_0EF2_CancelRoutine_DriverStartIo* DriverStartIo;                                     
/*0x010*/     FUNCT_00EF_0EF6_DriverUnload_Function* DriverUnload;                                            
/*0x018*/     FUNCT_00A0_0D24_AddDevice* AddDevice;                                                           
/*0x020*/     FUNCT_00A0_0EFA_MajorFunction* MajorFunction[28];                                               
          }VF_DRIVER_IO_CALLBACKS, *PVF_DRIVER_IO_CALLBACKS;                                                  
                                                                                                              
          typedef struct _VF_KE_CRITICAL_REGION_TRACE // 2 elements, 0x40 bytes (sizeof) 
          {                                                                              
/*0x000*/     struct _ETHREAD* Thread;                                                   
/*0x008*/     VOID*        StackTrace[7];                                                
          }VF_KE_CRITICAL_REGION_TRACE, *PVF_KE_CRITICAL_REGION_TRACE;                                   
                                                                                         
          typedef struct _VF_POOL_TRACE    // 4 elements, 0x80 bytes (sizeof) 
          {                                                                   
/*0x000*/     VOID*        Address;                                           
/*0x008*/     UINT64       Size;                                              
/*0x010*/     struct _ETHREAD* Thread;                                        
/*0x018*/     VOID*        StackTrace[13];                                    
          }VF_POOL_TRACE, *PVF_POOL_TRACE;                                    
                                                                              
          typedef struct _VF_SUSPECT_DRIVER_ENTRY // 4 elements, 0x28 bytes (sizeof) 
          {                                                                          
/*0x000*/     struct _LIST_ENTRY Links;           // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Loads;                                                    
/*0x014*/     ULONG32      Unloads;                                                  
/*0x018*/     struct _UNICODE_STRING BaseName;    // 3 elements, 0x10 bytes (sizeof) 
          }VF_SUSPECT_DRIVER_ENTRY, *PVF_SUSPECT_DRIVER_ENTRY;                                   
                                                                                     
          typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS                          // 4 elements, 0x20 bytes (sizeof) 
          {                                                                                                              
/*0x000*/     struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;                                                  
/*0x008*/     struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;                                              
/*0x010*/     struct _VERIFIER_SHARED_EXPORT_THUNK* OrderDependentSharedExportThunks;                                    
/*0x018*/     struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;                                               
          }VF_TARGET_ALL_SHARED_EXPORT_THUNKS, *PVF_TARGET_ALL_SHARED_EXPORT_THUNKS;                                     
                                                                                                                         
          typedef struct _VF_TARGET_DRIVER                                          // 3 elements, 0x40 bytes (sizeof) 
          {                                                                                                            
/*0x000*/     struct _VF_AVL_TREE_NODE_EX TreeNode;                                 // 2 elements, 0x18 bytes (sizeof) 
              union                                                                 // 2 elements, 0x20 bytes (sizeof) 
              {                                                                                                        
/*0x018*/         struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks; // 4 elements, 0x20 bytes (sizeof) 
                  struct                                                            // 2 elements, 0x4 bytes (sizeof)  
                  {                                                                                                    
/*0x018*/             ULONG32      SnapSharedExportsFailed : 1;                     // 0 BitPosition                   
/*0x018*/             ULONG32      Spare : 31;                                      // 1 BitPosition                   
                  }Flags;                                                                                              
              }u1;                                                                                                     
/*0x038*/     struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;                                                    
          }VF_TARGET_DRIVER, *PVF_TARGET_DRIVER;                                                                       
                                                                                                                       
          typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA           // 39 elements, 0x120 bytes (sizeof) 
          {                                                                                             
/*0x000*/     struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;                                      
/*0x008*/     VOID*        WMICallback;                                                                 
/*0x010*/     struct _LIST_ENTRY EtwHandlesListHead;               // 2 elements, 0x10 bytes (sizeof)   
              union                                                // 2 elements, 0x4 bytes (sizeof)    
              {                                                                                         
                  struct                                           // 2 elements, 0x4 bytes (sizeof)    
                  {                                                                                     
/*0x020*/             ULONG32      MissedEtwRegistration : 1;      // 0 BitPosition                     
/*0x020*/             ULONG32      Spare : 31;                     // 1 BitPosition                     
                  }Flags;                                                                               
/*0x020*/         ULONG32      Whole;                                                                   
              }u1;                                                                                      
/*0x028*/     UINT64       Signature;                                                                   
/*0x030*/     UINT8        SeSigningLevel;                                                              
/*0x031*/     UINT8        _PADDING0_[0xF];                                                             
/*0x040*/     union _SLIST_HEADER PoolPageHeaders;                 // 3 elements, 0x10 bytes (sizeof)   
/*0x050*/     union _SLIST_HEADER PoolTrackers;                    // 3 elements, 0x10 bytes (sizeof)   
/*0x060*/     ULONG32      CurrentPagedPoolAllocations;                                                 
/*0x064*/     ULONG32      CurrentNonPagedPoolAllocations;                                              
/*0x068*/     ULONG32      PeakPagedPoolAllocations;                                                    
/*0x06C*/     ULONG32      PeakNonPagedPoolAllocations;                                                 
/*0x070*/     UINT64       PagedBytes;                                                                  
/*0x078*/     UINT64       NonPagedBytes;                                                               
/*0x080*/     UINT64       PeakPagedBytes;                                                              
/*0x088*/     UINT64       PeakNonPagedBytes;                                                           
/*0x090*/     ULONG32      RaiseIrqls;                                                                  
/*0x094*/     ULONG32      AcquireSpinLocks;                                                            
/*0x098*/     ULONG32      SynchronizeExecutions;                                                       
/*0x09C*/     ULONG32      AllocationsWithNoTag;                                                        
/*0x0A0*/     ULONG32      AllocationsFailed;                                                           
/*0x0A4*/     ULONG32      AllocationsFailedDeliberately;                                               
/*0x0A8*/     UINT64       LockedBytes;                                                                 
/*0x0B0*/     UINT64       PeakLockedBytes;                                                             
/*0x0B8*/     UINT64       MappedLockedBytes;                                                           
/*0x0C0*/     UINT64       PeakMappedLockedBytes;                                                       
/*0x0C8*/     UINT64       MappedIoSpaceBytes;                                                          
/*0x0D0*/     UINT64       PeakMappedIoSpaceBytes;                                                      
/*0x0D8*/     UINT64       PagesForMdlBytes;                                                            
/*0x0E0*/     UINT64       PeakPagesForMdlBytes;                                                        
/*0x0E8*/     UINT64       ContiguousMemoryBytes;                                                       
/*0x0F0*/     UINT64       PeakContiguousMemoryBytes;                                                   
/*0x0F8*/     struct _LIST_ENTRY ContiguousMemoryListHead;         // 2 elements, 0x10 bytes (sizeof)   
/*0x108*/     ULONG32      ExecutePoolTypes;                                                            
/*0x10C*/     ULONG32      ExecutePageProtections;                                                      
/*0x110*/     ULONG32      ExecutePageMappings;                                                         
/*0x114*/     ULONG32      ExecuteWriteSections;                                                        
/*0x118*/     ULONG32      SectionAlignmentFailures;                                                    
/*0x11C*/     ULONG32      IATInExecutableSection;                                                      
          }VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA;                                     
                                                                                                        
          typedef struct _VF_TRACKER     // 4 elements, 0x10 bytes (sizeof) 
          {                                                                 
/*0x000*/     ULONG32      TrackerFlags;                                    
/*0x004*/     ULONG32      TrackerSize;                                     
/*0x008*/     ULONG32      TrackerIndex;                                    
/*0x00C*/     ULONG32      TraceDepth;                                      
          }VF_TRACKER, *PVF_TRACKER;                                        
                                                                            
          typedef struct _VF_TRACKER_STAMP  // 5 elements, 0x10 bytes (sizeof) 
          {                                                                    
/*0x000*/     VOID*        Thread;                                             
/*0x008*/     UINT8        Flags : 8;       // 0 BitPosition                   
/*0x009*/     UINT8        OldIrql : 8;     // 0 BitPosition                   
/*0x00A*/     UINT8        NewIrql : 8;     // 0 BitPosition                   
/*0x00B*/     UINT8        Processor : 8;   // 0 BitPosition                   
/*0x00C*/     UINT8        _PADDING0_[0x4];                                    
          }VF_TRACKER_STAMP, *PVF_TRACKER_STAMP;                                   
                                                                               
          typedef struct _VF_WATCHDOG_IRP        // 6 elements, 0x20 bytes (sizeof) 
          {                                                                         
/*0x000*/     struct _LIST_ENTRY ListEntry;      // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _IRP* Irp;                                                     
/*0x018*/     ULONG32      DueTickCount;                                            
/*0x01C*/     UINT8        Inserted;                                                
/*0x01D*/     CHAR         TrackedStackLocation;                                    
/*0x01E*/     UINT16       CancelTimeoutTicks;                                      
          }VF_WATCHDOG_IRP, *PVF_WATCHDOG_IRP;                                      
                                                                                    
           typedef struct _VI_DEADLOCK_GLOBALS                      // 32 elements, 0x8180 bytes (sizeof) 
           {                                                                                              
/*0x000*/      INT64        TimeAcquire;                                                                  
/*0x008*/      INT64        TimeRelease;                                                                  
/*0x010*/      struct _LIST_ENTRY* ResourceDatabase;                                                      
/*0x018*/      UINT64       ResourceDatabaseCount;                                                        
/*0x020*/      struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];                                       
/*0x4010*/     struct _LIST_ENTRY* ThreadDatabase;                                                        
/*0x4018*/     UINT64       ThreadDatabaseCount;                                                          
/*0x4020*/     struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];                                         
/*0x8010*/     ULONG32      AllocationFailures;                                                           
/*0x8014*/     ULONG32      NodesTrimmedBasedOnAge;                                                       
/*0x8018*/     ULONG32      NodesTrimmedBasedOnCount;                                                     
/*0x801C*/     ULONG32      NodesSearched;                                                                
/*0x8020*/     ULONG32      MaxNodesSearched;                                                             
/*0x8024*/     ULONG32      SequenceNumber;                                                               
/*0x8028*/     ULONG32      RecursionDepthLimit;                                                          
/*0x802C*/     ULONG32      SearchedNodesLimit;                                                           
/*0x8030*/     ULONG32      DepthLimitHits;                                                               
/*0x8034*/     ULONG32      SearchLimitHits;                                                              
/*0x8038*/     ULONG32      StackLimitHits;                                                               
/*0x803C*/     ULONG32      ABC_ACB_Skipped;                                                              
/*0x8040*/     ULONG32      OutOfOrderReleases;                                                           
/*0x8044*/     ULONG32      NodesReleasedOutOfOrder;                                                      
/*0x8048*/     ULONG32      TotalReleases;                                                                
/*0x804C*/     ULONG32      RootNodesDeleted;                                                             
/*0x8050*/     ULONG32      ForgetHistoryCounter;                                                         
/*0x8054*/     UINT8        _PADDING0_[0x4];                                                              
/*0x8058*/     VOID*        Instigator;                                                                   
/*0x8060*/     ULONG32      NumberOfParticipants;                                                         
/*0x8064*/     UINT8        _PADDING1_[0x4];                                                              
/*0x8068*/     struct _VI_DEADLOCK_NODE* Participant[32];                                                 
/*0x8168*/     LONG32       ChildrenCountWatermark;                                                       
/*0x816C*/     enum _KERNEL_STACK_LIMITS StackType;                                                       
/*0x8170*/     UINT64       StackLowLimit;                                                                
/*0x8178*/     UINT64       StackHighLimit;                                                               
           }VI_DEADLOCK_GLOBALS, *PVI_DEADLOCK_GLOBALS;                                                   
                                                                                                          
          typedef struct _VI_DEADLOCK_NODE                 // 11 elements, 0xD0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     struct _VI_DEADLOCK_NODE* Parent;                                                
/*0x008*/     struct _LIST_ENTRY ChildrenList;             // 2 elements, 0x10 bytes (sizeof)  
/*0x018*/     struct _LIST_ENTRY SiblingsList;             // 2 elements, 0x10 bytes (sizeof)  
              union                                        // 2 elements, 0x10 bytes (sizeof)  
              {                                                                                
/*0x028*/         struct _LIST_ENTRY ResourceList;         // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/         struct _LIST_ENTRY FreeListEntry;        // 2 elements, 0x10 bytes (sizeof)  
              };                                                                               
/*0x038*/     struct _VI_DEADLOCK_RESOURCE* Root;                                              
/*0x040*/     struct _VI_DEADLOCK_THREAD* ThreadEntry;                                         
              union                                        // 5 elements, 0x4 bytes (sizeof)   
              {                                                                                
                  struct                                   // 4 elements, 0x4 bytes (sizeof)   
                  {                                                                            
/*0x048*/             ULONG32      Active : 1;             // 0 BitPosition                    
/*0x048*/             ULONG32      OnlyTryAcquireUsed : 1; // 1 BitPosition                    
/*0x048*/             ULONG32      ReleasedOutOfOrder : 1; // 2 BitPosition                    
/*0x048*/             ULONG32      SequenceNumber : 29;    // 3 BitPosition                    
                  };                                                                           
/*0x048*/         ULONG32      Whole;                                                          
              }u1;                                                                             
/*0x04C*/     LONG32       ChildrenCount;                                                      
/*0x050*/     VOID*        StackTrace[8];                                                      
/*0x090*/     VOID*        ParentStackTrace[8];                                                
          }VI_DEADLOCK_NODE, *PVI_DEADLOCK_NODE;                                               
                                                                                               
          typedef struct _VI_DEADLOCK_RESOURCE         // 11 elements, 0xF8 bytes (sizeof) 
          {                                                                                
/*0x000*/     enum _VI_DEADLOCK_RESOURCE_TYPE Type;                                        
              struct                                   // 2 elements, 0x4 bytes (sizeof)   
              {                                                                            
/*0x004*/         ULONG32      NodeCount : 16;         // 0 BitPosition                    
/*0x004*/         ULONG32      RecursionCount : 16;    // 16 BitPosition                   
              };                                                                           
/*0x008*/     VOID*        ResourceAddress;                                                
/*0x010*/     struct _VI_DEADLOCK_THREAD* ThreadOwner;                                     
/*0x018*/     struct _LIST_ENTRY ResourceList;         // 2 elements, 0x10 bytes (sizeof)  
              union                                    // 2 elements, 0x10 bytes (sizeof)  
              {                                                                            
/*0x028*/         struct _LIST_ENTRY HashChainList;    // 2 elements, 0x10 bytes (sizeof)  
/*0x028*/         struct _LIST_ENTRY FreeListEntry;    // 2 elements, 0x10 bytes (sizeof)  
              };                                                                           
/*0x038*/     VOID*        StackTrace[8];                                                  
/*0x078*/     VOID*        LastAcquireTrace[8];                                            
/*0x0B8*/     VOID*        LastReleaseTrace[8];                                            
          }VI_DEADLOCK_RESOURCE, *PVI_DEADLOCK_RESOURCE;                                    
                                                                                           
          typedef struct _VI_DEADLOCK_THREAD              // 8 elements, 0x38 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _KTHREAD* Thread;                                                       
/*0x008*/     struct _VI_DEADLOCK_NODE* CurrentSpinNode;                                     
/*0x010*/     struct _VI_DEADLOCK_NODE* CurrentOtherNode;                                    
              union                                       // 2 elements, 0x10 bytes (sizeof) 
              {                                                                              
/*0x018*/         struct _LIST_ENTRY ListEntry;           // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/         struct _LIST_ENTRY FreeListEntry;       // 2 elements, 0x10 bytes (sizeof) 
              };                                                                             
/*0x028*/     ULONG32      NodeCount;                                                        
/*0x02C*/     ULONG32      PagingCount;                                                      
/*0x030*/     UINT8        ThreadUsesEresources;                                             
/*0x031*/     UINT8        _PADDING0_[0x7];                                                  
          }VI_DEADLOCK_THREAD, *PVI_DEADLOCK_THREAD;                                         
                                                                                             
          typedef struct _VI_FAULT_TRACE  // 2 elements, 0x48 bytes (sizeof) 
          {                                                                  
/*0x000*/     struct _ETHREAD* Thread;                                       
/*0x008*/     VOID*        StackTrace[8];                                    
          }VI_FAULT_TRACE, *PVI_FAULT_TRACE;                                   
                                                                             
          typedef struct _VI_POOL_PAGE_HEADER // 3 elements, 0x18 bytes (sizeof) 
          {                                                                      
/*0x000*/     struct _SLIST_ENTRY* NextPage;                                     
/*0x008*/     VOID*        VerifierEntry;                                        
/*0x010*/     UINT64       Signature;                                            
          }VI_POOL_PAGE_HEADER, *PVI_POOL_PAGE_HEADER;                                   
                                                                                 
          typedef struct _VI_POOL_ENTRY_INUSE // 4 elements, 0x20 bytes (sizeof) 
          {                                                                      
/*0x000*/     VOID*        VirtualAddress;                                       
/*0x008*/     VOID*        CallingAddress;                                       
/*0x010*/     UINT64       NumberOfBytes;                                        
/*0x018*/     UINT64       Tag;                                                  
          }VI_POOL_ENTRY_INUSE, *PVI_POOL_ENTRY_INUSE;                                   
                                                                                 
          typedef struct _VI_POOL_ENTRY                   // 3 elements, 0x20 bytes (sizeof) 
          {                                                                                  
              union                                       // 3 elements, 0x20 bytes (sizeof) 
              {                                                                              
/*0x000*/         struct _VI_POOL_PAGE_HEADER PageHeader; // 3 elements, 0x18 bytes (sizeof) 
/*0x000*/         struct _VI_POOL_ENTRY_INUSE InUse;      // 4 elements, 0x20 bytes (sizeof) 
/*0x000*/         struct _SLIST_ENTRY* NextFree;                                             
              };                                                                             
          }VI_POOL_ENTRY, *PVI_POOL_ENTRY;                                                   
                                                                                             
          typedef struct _VI_TRACK_IRQL   // 6 elements, 0x38 bytes (sizeof) 
          {                                                                  
/*0x000*/     VOID*        Thread;                                           
/*0x008*/     UINT8        OldIrql;                                          
/*0x009*/     UINT8        NewIrql;                                          
/*0x00A*/     UINT16       Processor;                                        
/*0x00C*/     ULONG32      TickCount;                                        
/*0x010*/     VOID*        StackTrace[5];                                    
          }VI_TRACK_IRQL, *PVI_TRACK_IRQL;                                   
                                                                             
          typedef struct _VI_VERIFIER_ISSUE // 3 elements, 0x20 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       IssueType;                                          
/*0x008*/     VOID*        Address;                                            
/*0x010*/     UINT64       Parameters[2];                                      
          }VI_VERIFIER_ISSUE, *PVI_VERIFIER_ISSUE;                                   
                                                                               
          typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES // 14 elements, 0x70 bytes (sizeof) 
          {                                                                                
/*0x000*/     UINT64       GetTime;                                                        
/*0x008*/     UINT64       SetTime;                                                        
/*0x010*/     UINT64       GetWakeupTime;                                                  
/*0x018*/     UINT64       SetWakeupTime;                                                  
/*0x020*/     UINT64       SetVirtualAddressMap;                                           
/*0x028*/     UINT64       ConvertPointer;                                                 
/*0x030*/     UINT64       GetVariable;                                                    
/*0x038*/     UINT64       GetNextVariableName;                                            
/*0x040*/     UINT64       SetVariable;                                                    
/*0x048*/     UINT64       GetNextHighMonotonicCount;                                      
/*0x050*/     UINT64       ResetSystem;                                                    
/*0x058*/     UINT64       UpdateCapsule;                                                  
/*0x060*/     UINT64       QueryCapsuleCapabilities;                                       
/*0x068*/     UINT64       QueryVariableInfo;                                              
          }VIRTUAL_EFI_RUNTIME_SERVICES, *PVIRTUAL_EFI_RUNTIME_SERVICES;                                    
                                                                                           
          typedef struct _VOLUME_CACHE_MAP                 // 10 elements, 0xD0 bytes (sizeof) 
          {                                                                                    
/*0x000*/     INT16        NodeTypeCode;                                                       
/*0x002*/     INT16        NodeByteCode;                                                       
/*0x004*/     ULONG32      UseCount;                                                           
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                             
/*0x010*/     struct _LIST_ENTRY VolumeCacheMapLinks;      // 2 elements, 0x10 bytes (sizeof)  
/*0x020*/     UINT64       DirtyPages;                                                         
/*0x028*/     struct _LOG_HANDLE_CONTEXT LogHandleContext; // 12 elements, 0x98 bytes (sizeof) 
/*0x0C0*/     ULONG32      Flags;                                                              
/*0x0C4*/     ULONG32      PagesQueuedToDisk;                                                  
/*0x0C8*/     ULONG32      LoggedPagesQueuedToDisk;                                            
/*0x0CC*/     UINT8        _PADDING0_[0x4];                                                    
          }VOLUME_CACHE_MAP, *PVOLUME_CACHE_MAP;                                               
                                                                                               
          typedef struct _VPB                      // 9 elements, 0x60 bytes (sizeof) 
          {                                                                           
/*0x000*/     INT16        Type;                                                      
/*0x002*/     INT16        Size;                                                      
/*0x004*/     UINT16       Flags;                                                     
/*0x006*/     UINT16       VolumeLabelLength;                                         
/*0x008*/     struct _DEVICE_OBJECT* DeviceObject;                                    
/*0x010*/     struct _DEVICE_OBJECT* RealDevice;                                      
/*0x018*/     ULONG32      SerialNumber;                                              
/*0x01C*/     ULONG32      ReferenceCount;                                            
/*0x020*/     WCHAR        VolumeLabel[32];                                           
          }VPB, *PVPB;                                                                
                                                                                      
          typedef struct _WAITING_IRP                               // 9 elements, 0x40 bytes (sizeof) 
          {                                                                                            
/*0x000*/     struct _LIST_ENTRY Links;                             // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     struct _IRP* Irp;                                                                        
/*0x018*/     FUNCT_00EF_4C0B_CompletionRoutine* CompletionRoutine;                                    
/*0x020*/     VOID*        Context;                                                                    
/*0x028*/     struct _KEVENT* Event;                                                                   
/*0x030*/     ULONG32      Information;                                                                
/*0x034*/     UINT8        BreakAllRH;                                                                 
/*0x035*/     UINT8        OplockBreakNotify;                                                          
/*0x036*/     UINT8        _PADDING0_[0x2];                                                            
/*0x038*/     struct _FILE_OBJECT* FileObject;                                                         
          }WAITING_IRP, *PWAITING_IRP;                                                                 
                                                                                                       
          typedef struct _WHEA_PCI_SLOT_NUMBER         // 1 elements, 0x4 bytes (sizeof) 
          {                                                                              
              union                                    // 2 elements, 0x4 bytes (sizeof) 
              {                                                                          
                  struct                               // 3 elements, 0x4 bytes (sizeof) 
                  {                                                                      
/*0x000*/             ULONG32      DeviceNumber : 5;   // 0 BitPosition                  
/*0x000*/             ULONG32      FunctionNumber : 3; // 5 BitPosition                  
/*0x000*/             ULONG32      Reserved : 24;      // 8 BitPosition                  
                  }bits;                                                                 
/*0x000*/         ULONG32      AsULONG;                                                  
              }u;                                                                        
          }WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER;                                  
                                                                                         
          typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR        // 14 elements, 0x2C bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT16       Type;                                                                
/*0x002*/     UINT8        Enabled;                                                             
/*0x003*/     UINT8        Reserved;                                                            
/*0x004*/     ULONG32      BusNumber;                                                           
/*0x008*/     struct _WHEA_PCI_SLOT_NUMBER Slot;            // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/     UINT16       DeviceControl;                                                       
/*0x00E*/     union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;     // 9 elements, 0x2 bytes (sizeof)   
/*0x010*/     ULONG32      UncorrectableErrorMask;                                              
/*0x014*/     ULONG32      UncorrectableErrorSeverity;                                          
/*0x018*/     ULONG32      CorrectableErrorMask;                                                
/*0x01C*/     ULONG32      AdvancedCapsAndControl;                                              
/*0x020*/     ULONG32      SecondaryUncorrectableErrorMask;                                     
/*0x024*/     ULONG32      SecondaryUncorrectableErrorSev;                                      
/*0x028*/     ULONG32      SecondaryCapsAndControl;                                             
          }WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR;                                    
                                                                                                
          typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR    // 11 elements, 0x20 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT16       Type;                                                              
/*0x002*/     UINT8        Enabled;                                                           
/*0x003*/     UINT8        Reserved;                                                          
/*0x004*/     ULONG32      BusNumber;                                                         
/*0x008*/     struct _WHEA_PCI_SLOT_NUMBER Slot;          // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/     UINT16       DeviceControl;                                                     
/*0x00E*/     union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags; // 6 elements, 0x2 bytes (sizeof)   
/*0x010*/     ULONG32      UncorrectableErrorMask;                                            
/*0x014*/     ULONG32      UncorrectableErrorSeverity;                                        
/*0x018*/     ULONG32      CorrectableErrorMask;                                              
/*0x01C*/     ULONG32      AdvancedCapsAndControl;                                            
          }WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR;                                    
                                                                                              
          typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR    // 12 elements, 0x24 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT16       Type;                                                              
/*0x002*/     UINT8        Enabled;                                                           
/*0x003*/     UINT8        Reserved;                                                          
/*0x004*/     ULONG32      BusNumber;                                                         
/*0x008*/     struct _WHEA_PCI_SLOT_NUMBER Slot;          // 1 elements, 0x4 bytes (sizeof)   
/*0x00C*/     UINT16       DeviceControl;                                                     
/*0x00E*/     union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags; // 7 elements, 0x2 bytes (sizeof)   
/*0x010*/     ULONG32      UncorrectableErrorMask;                                            
/*0x014*/     ULONG32      UncorrectableErrorSeverity;                                        
/*0x018*/     ULONG32      CorrectableErrorMask;                                              
/*0x01C*/     ULONG32      AdvancedCapsAndControl;                                            
/*0x020*/     ULONG32      RootErrorCommand;                                                  
          }WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR;                                    
                                                                                              
          typedef union _WHEA_ERROR_PACKET_FLAGS            // 8 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 7 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PreviousError : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      Reserved1 : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      HypervisorError : 1;         // 2 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      PlatformPfaControl : 1;      // 4 BitPosition                  
/*0x000*/         ULONG32      PlatformDirectedOffline : 1; // 5 BitPosition                  
/*0x000*/         ULONG32      Reserved2 : 26;              // 6 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS;                                  
                                                                                              
          typedef struct _WHEA_ERROR_PACKET_V2                // 16 elements, 0x50 bytes (sizeof) 
          {                                                                                       
/*0x000*/     ULONG32      Signature;                                                             
/*0x004*/     ULONG32      Version;                                                               
/*0x008*/     ULONG32      Length;                                                                
/*0x00C*/     union _WHEA_ERROR_PACKET_FLAGS Flags;           // 8 elements, 0x4 bytes (sizeof)   
/*0x010*/     enum _WHEA_ERROR_TYPE ErrorType;                                                    
/*0x014*/     enum _WHEA_ERROR_SEVERITY ErrorSeverity;                                            
/*0x018*/     ULONG32      ErrorSourceId;                                                         
/*0x01C*/     enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;                                       
/*0x020*/     struct _GUID NotifyType;                        // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     UINT64       Context;                                                               
/*0x038*/     enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;                                     
/*0x03C*/     ULONG32      Reserved1;                                                             
/*0x040*/     ULONG32      DataOffset;                                                            
/*0x044*/     ULONG32      DataLength;                                                            
/*0x048*/     ULONG32      PshedDataOffset;                                                       
/*0x04C*/     ULONG32      PshedDataLength;                                                       
          }WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2;                                          
                                                                                                  
          typedef union _WHEA_REVISION        // 3 elements, 0x2 bytes (sizeof) 
          {                                                                     
              struct                          // 2 elements, 0x2 bytes (sizeof) 
              {                                                                 
/*0x000*/         UINT8        MinorRevision;                                   
/*0x001*/         UINT8        MajorRevision;                                   
              };                                                                
/*0x000*/     UINT16       AsUSHORT;                                            
          }WHEA_REVISION, *PWHEA_REVISION;                                      
                                                                                
          typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 4 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      PlatformId : 1;              // 0 BitPosition                  
/*0x000*/         ULONG32      Timestamp : 1;               // 1 BitPosition                  
/*0x000*/         ULONG32      PartitionId : 1;             // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;               // 3 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS;                                  
                                                                                              
          typedef union _WHEA_TIMESTAMP             // 10 elements, 0x8 bytes (sizeof) 
          {                                                                            
              struct                                // 9 elements, 0x8 bytes (sizeof)  
              {                                                                        
/*0x000*/         UINT64       Seconds : 8;         // 0 BitPosition                   
/*0x000*/         UINT64       Minutes : 8;         // 8 BitPosition                   
/*0x000*/         UINT64       Hours : 8;           // 16 BitPosition                  
/*0x000*/         UINT64       Precise : 1;         // 24 BitPosition                  
/*0x000*/         UINT64       Reserved : 7;        // 25 BitPosition                  
/*0x000*/         UINT64       Day : 8;             // 32 BitPosition                  
/*0x000*/         UINT64       Month : 8;           // 40 BitPosition                  
/*0x000*/         UINT64       Year : 8;            // 48 BitPosition                  
/*0x000*/         UINT64       Century : 8;         // 56 BitPosition                  
              };                                                                       
/*0x000*/     union _LARGE_INTEGER AsLARGE_INTEGER; // 4 elements, 0x8 bytes (sizeof)  
          }WHEA_TIMESTAMP, *PWHEA_TIMESTAMP;                                           
                                                                                       
          typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS // 5 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 4 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      Recovered : 1;           // 0 BitPosition                  
/*0x000*/         ULONG32      PreviousError : 1;       // 1 BitPosition                  
/*0x000*/         ULONG32      Simulated : 1;           // 2 BitPosition                  
/*0x000*/         ULONG32      Reserved : 29;           // 3 BitPosition                  
              };                                                                          
/*0x000*/     ULONG32      AsULONG;                                                       
          }WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS;                                  
                                                                                          
          typedef union _WHEA_PERSISTENCE_INFO  // 7 elements, 0x8 bytes (sizeof) 
          {                                                                       
              struct                            // 6 elements, 0x8 bytes (sizeof) 
              {                                                                   
/*0x000*/         UINT64       Signature : 16;  // 0 BitPosition                  
/*0x000*/         UINT64       Length : 24;     // 16 BitPosition                 
/*0x000*/         UINT64       Identifier : 16; // 40 BitPosition                 
/*0x000*/         UINT64       Attributes : 2;  // 56 BitPosition                 
/*0x000*/         UINT64       DoNotLog : 1;    // 58 BitPosition                 
/*0x000*/         UINT64       Reserved : 5;    // 59 BitPosition                 
              };                                                                  
/*0x000*/     UINT64       AsULONGLONG;                                           
          }WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO;                                  
                                                                                  
          typedef struct _WHEA_ERROR_RECORD_HEADER                 // 16 elements, 0x80 bytes (sizeof) 
          {                                                                                            
/*0x000*/     ULONG32      Signature;                                                                  
/*0x004*/     union _WHEA_REVISION Revision;                       // 3 elements, 0x2 bytes (sizeof)   
/*0x006*/     ULONG32      SignatureEnd;                                                               
/*0x00A*/     UINT16       SectionCount;                                                               
/*0x00C*/     enum _WHEA_ERROR_SEVERITY Severity;                                                      
/*0x010*/     union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits; // 5 elements, 0x4 bytes (sizeof)   
/*0x014*/     ULONG32      Length;                                                                     
/*0x018*/     union _WHEA_TIMESTAMP Timestamp;                     // 10 elements, 0x8 bytes (sizeof)  
/*0x020*/     struct _GUID PlatformId;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     struct _GUID PartitionId;                            // 4 elements, 0x10 bytes (sizeof)  
/*0x040*/     struct _GUID CreatorId;                              // 4 elements, 0x10 bytes (sizeof)  
/*0x050*/     struct _GUID NotifyType;                             // 4 elements, 0x10 bytes (sizeof)  
/*0x060*/     UINT64       RecordId;                                                                   
/*0x068*/     union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;         // 5 elements, 0x4 bytes (sizeof)   
/*0x06C*/     union _WHEA_PERSISTENCE_INFO PersistenceInfo;        // 7 elements, 0x8 bytes (sizeof)   
/*0x074*/     UINT8        Reserved[12];                                                               
          }WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER;                                       
                                                                                                       
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS // 4 elements, 0x1 bytes (sizeof) 
          {                                                                                               
              struct                                                    // 3 elements, 0x1 bytes (sizeof) 
              {                                                                                           
/*0x000*/         UINT8        FRUId : 1;                               // 0 BitPosition                  
/*0x000*/         UINT8        FRUText : 1;                             // 1 BitPosition                  
/*0x000*/         UINT8        Reserved : 6;                            // 2 BitPosition                  
              };                                                                                          
/*0x000*/     UINT8        AsUCHAR;                                                                       
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;                                  
                                                                                                          
          typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS // 9 elements, 0x4 bytes (sizeof) 
          {                                                                                           
              struct                                                // 8 elements, 0x4 bytes (sizeof) 
              {                                                                                       
/*0x000*/         ULONG32      Primary : 1;                         // 0 BitPosition                  
/*0x000*/         ULONG32      ContainmentWarning : 1;              // 1 BitPosition                  
/*0x000*/         ULONG32      Reset : 1;                           // 2 BitPosition                  
/*0x000*/         ULONG32      ThresholdExceeded : 1;               // 3 BitPosition                  
/*0x000*/         ULONG32      ResourceNotAvailable : 1;            // 4 BitPosition                  
/*0x000*/         ULONG32      LatentError : 1;                     // 5 BitPosition                  
/*0x000*/         ULONG32      Propagated : 1;                      // 6 BitPosition                  
/*0x000*/         ULONG32      Reserved : 25;                       // 7 BitPosition                  
              };                                                                                      
/*0x000*/     ULONG32      AsULONG;                                                                   
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;                                  
                                                                                                      
          typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR                 // 10 elements, 0x48 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     ULONG32      SectionOffset;                                                                          
/*0x004*/     ULONG32      SectionLength;                                                                          
/*0x008*/     union _WHEA_REVISION Revision;                                   // 3 elements, 0x2 bytes (sizeof)   
/*0x00A*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits; // 4 elements, 0x1 bytes (sizeof)   
/*0x00B*/     UINT8        Reserved;                                                                               
/*0x00C*/     union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;         // 9 elements, 0x4 bytes (sizeof)   
/*0x010*/     struct _GUID SectionType;                                        // 4 elements, 0x10 bytes (sizeof)  
/*0x020*/     struct _GUID FRUId;                                              // 4 elements, 0x10 bytes (sizeof)  
/*0x030*/     enum _WHEA_ERROR_SEVERITY SectionSeverity;                                                           
/*0x034*/     CHAR         FRUText[20];                                                                            
          }WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;                                    
                                                                                                                   
          typedef struct _WHEA_ERROR_RECORD                                      // 2 elements, 0xC8 bytes (sizeof)  
          {                                                                                                          
/*0x000*/     struct _WHEA_ERROR_RECORD_HEADER Header;                           // 16 elements, 0x80 bytes (sizeof) 
/*0x080*/     struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];                                     
          }WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD;                                                                   
                                                                                                                     
          typedef union _XPF_MCE_FLAGS                  // 4 elements, 0x4 bytes (sizeof) 
          {                                                                               
              struct                                    // 3 elements, 0x4 bytes (sizeof) 
              {                                                                           
/*0x000*/         ULONG32      MCG_CapabilityRW : 1;    // 0 BitPosition                  
/*0x000*/         ULONG32      MCG_GlobalControlRW : 1; // 1 BitPosition                  
/*0x000*/         ULONG32      Reserved : 30;           // 2 BitPosition                  
              };                                                                          
/*0x000*/     ULONG32      AsULONG;                                                       
          }XPF_MCE_FLAGS, *PXPF_MCE_FLAGS;                                                
                                                                                          
          typedef union _XPF_MC_BANK_FLAGS                  // 4 elements, 0x1 bytes (sizeof) 
          {                                                                                   
              struct                                        // 3 elements, 0x1 bytes (sizeof) 
              {                                                                               
/*0x000*/         UINT8        ClearOnInitializationRW : 1; // 0 BitPosition                  
/*0x000*/         UINT8        ControlDataRW : 1;           // 1 BitPosition                  
/*0x000*/         UINT8        Reserved : 6;                // 2 BitPosition                  
              };                                                                              
/*0x000*/     UINT8        AsUCHAR;                                                           
          }XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS;                                            
                                                                                              
          typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR // 9 elements, 0x1C bytes (sizeof) 
          {                                                                              
/*0x000*/     UINT8        BankNumber;                                                   
/*0x001*/     UINT8        ClearOnInitialization;                                        
/*0x002*/     UINT8        StatusDataFormat;                                             
/*0x003*/     union _XPF_MC_BANK_FLAGS Flags;         // 4 elements, 0x1 bytes (sizeof)  
/*0x004*/     ULONG32      ControlMsr;                                                   
/*0x008*/     ULONG32      StatusMsr;                                                    
/*0x00C*/     ULONG32      AddressMsr;                                                   
/*0x010*/     ULONG32      MiscMsr;                                                      
/*0x014*/     UINT64       ControlData;                                                  
          }WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR;                                   
                                                                                         
          typedef struct _WHEA_XPF_MCE_DESCRIPTOR            // 7 elements, 0x398 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT16       Type;                                                                 
/*0x002*/     UINT8        Enabled;                                                              
/*0x003*/     UINT8        NumberOfBanks;                                                        
/*0x004*/     union _XPF_MCE_FLAGS Flags;                    // 4 elements, 0x4 bytes (sizeof)   
/*0x008*/     UINT64       MCG_Capability;                                                       
/*0x010*/     UINT64       MCG_GlobalControl;                                                    
/*0x018*/     struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                                     
          }WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR;                                    
                                                                                                 
          typedef union _WHEA_NOTIFICATION_FLAGS               // 7 elements, 0x2 bytes (sizeof) 
          {                                                                                      
              struct                                           // 6 elements, 0x2 bytes (sizeof) 
              {                                                                                  
/*0x000*/         UINT16       PollIntervalRW : 1;             // 0 BitPosition                  
/*0x000*/         UINT16       SwitchToPollingThresholdRW : 1; // 1 BitPosition                  
/*0x000*/         UINT16       SwitchToPollingWindowRW : 1;    // 2 BitPosition                  
/*0x000*/         UINT16       ErrorThresholdRW : 1;           // 3 BitPosition                  
/*0x000*/         UINT16       ErrorThresholdWindowRW : 1;     // 4 BitPosition                  
/*0x000*/         UINT16       Reserved : 11;                  // 5 BitPosition                  
              };                                                                                 
/*0x000*/     UINT16       AsUSHORT;                                                             
          }WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS;                                   
                                                                                                 
          typedef struct _WHEA_NOTIFICATION_DESCRIPTOR       // 4 elements, 0x1C bytes (sizeof) 
          {                                                                                     
/*0x000*/     UINT8        Type;                                                                
/*0x001*/     UINT8        Length;                                                              
/*0x002*/     union _WHEA_NOTIFICATION_FLAGS Flags;          // 7 elements, 0x2 bytes (sizeof)  
              union                                          // 8 elements, 0x18 bytes (sizeof) 
              {                                                                                 
                  struct                                     // 1 elements, 0x4 bytes (sizeof)  
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
                  }Polled;                                                                      
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Interrupt;                                                                   
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }LocalInterrupt;                                                              
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Sci;                                                                         
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Nmi;                                                                         
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Sea;                                                                         
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Sei;                                                                         
                  struct                                     // 6 elements, 0x18 bytes (sizeof) 
                  {                                                                             
/*0x004*/             ULONG32      PollInterval;                                                
/*0x008*/             ULONG32      Vector;                                                      
/*0x00C*/             ULONG32      SwitchToPollingThreshold;                                    
/*0x010*/             ULONG32      SwitchToPollingWindow;                                       
/*0x014*/             ULONG32      ErrorThreshold;                                              
/*0x018*/             ULONG32      ErrorThresholdWindow;                                        
                  }Gsiv;                                                                        
              }u;                                                                               
          }WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR;                                   
                                                                                                
          typedef struct _WHEA_XPF_CMC_DESCRIPTOR            // 6 elements, 0x3A4 bytes (sizeof) 
          {                                                                                      
/*0x000*/     UINT16       Type;                                                                 
/*0x002*/     UINT8        Enabled;                                                              
/*0x003*/     UINT8        NumberOfBanks;                                                        
/*0x004*/     ULONG32      Reserved;                                                             
/*0x008*/     struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;   // 4 elements, 0x1C bytes (sizeof)  
/*0x024*/     struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];                                     
          }WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR;                                    
                                                                                                 
          typedef struct _WHEA_XPF_NMI_DESCRIPTOR // 2 elements, 0x3 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Type;                                                    
/*0x002*/     UINT8        Enabled;                                                 
          }WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR;                                  
                                                                                    
          typedef struct _WHEA_IPF_MCA_DESCRIPTOR // 3 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Type;                                                    
/*0x002*/     UINT8        Enabled;                                                 
/*0x003*/     UINT8        Reserved;                                                
          }WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR;                                  
                                                                                    
          typedef struct _WHEA_IPF_CMC_DESCRIPTOR // 3 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Type;                                                    
/*0x002*/     UINT8        Enabled;                                                 
/*0x003*/     UINT8        Reserved;                                                
          }WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR;                                  
                                                                                    
          typedef struct _WHEA_IPF_CPE_DESCRIPTOR // 3 elements, 0x4 bytes (sizeof) 
          {                                                                         
/*0x000*/     UINT16       Type;                                                    
/*0x002*/     UINT8        Enabled;                                                 
/*0x003*/     UINT8        Reserved;                                                
          }WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR;                                  
                                                                                    
          typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR    // 11 elements, 0x34 bytes (sizeof) 
          {                                                                                    
/*0x000*/     UINT16       Type;                                                               
/*0x002*/     UINT8        Reserved;                                                           
/*0x003*/     UINT8        Enabled;                                                            
/*0x004*/     ULONG32      ErrStatusBlockLength;                                               
/*0x008*/     ULONG32      RelatedErrorSourceId;                                               
/*0x00C*/     UINT8        ErrStatusAddressSpaceID;                                            
/*0x00D*/     UINT8        ErrStatusAddressBitWidth;                                           
/*0x00E*/     UINT8        ErrStatusAddressBitOffset;                                          
/*0x00F*/     UINT8        ErrStatusAddressAccessSize;                                         
/*0x010*/     union _LARGE_INTEGER ErrStatusAddress;       // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _WHEA_NOTIFICATION_DESCRIPTOR Notify; // 4 elements, 0x1C bytes (sizeof)  
          }WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR;                                    
                                                                                               
          typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 // 18 elements, 0x50 bytes (sizeof) 
          {                                                                                    
/*0x000*/     UINT16       Type;                                                               
/*0x002*/     UINT8        Reserved;                                                           
/*0x003*/     UINT8        Enabled;                                                            
/*0x004*/     ULONG32      ErrStatusBlockLength;                                               
/*0x008*/     ULONG32      RelatedErrorSourceId;                                               
/*0x00C*/     UINT8        ErrStatusAddressSpaceID;                                            
/*0x00D*/     UINT8        ErrStatusAddressBitWidth;                                           
/*0x00E*/     UINT8        ErrStatusAddressBitOffset;                                          
/*0x00F*/     UINT8        ErrStatusAddressAccessSize;                                         
/*0x010*/     union _LARGE_INTEGER ErrStatusAddress;       // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     struct _WHEA_NOTIFICATION_DESCRIPTOR Notify; // 4 elements, 0x1C bytes (sizeof)  
/*0x034*/     UINT8        ReadAckAddressSpaceID;                                              
/*0x035*/     UINT8        ReadAckAddressBitWidth;                                             
/*0x036*/     UINT8        ReadAckAddressBitOffset;                                            
/*0x037*/     UINT8        ReadAckAddressAccessSize;                                           
/*0x038*/     union _LARGE_INTEGER ReadAckAddress;         // 4 elements, 0x8 bytes (sizeof)   
/*0x040*/     UINT64       ReadAckPreserveMask;                                                
/*0x048*/     UINT64       ReadAckWriteMask;                                                   
          }WHEA_GENERIC_ERROR_DESCRIPTOR_V2, *PWHEA_GENERIC_ERROR_DESCRIPTOR_V2;                                    
                                                                                               
          typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR                         // 11 elements, 0x3CC bytes (sizeof) 
          {                                                                                                         
/*0x000*/     ULONG32      Length;                                                                                  
/*0x004*/     ULONG32      Version;                                                                                 
/*0x008*/     enum _WHEA_ERROR_SOURCE_TYPE Type;                                                                    
/*0x00C*/     enum _WHEA_ERROR_SOURCE_STATE State;                                                                  
/*0x010*/     ULONG32      MaxRawDataLength;                                                                        
/*0x014*/     ULONG32      NumRecordsToPreallocate;                                                                 
/*0x018*/     ULONG32      MaxSectionsPerRecord;                                                                    
/*0x01C*/     ULONG32      ErrorSourceId;                                                                           
/*0x020*/     ULONG32      PlatformErrorSourceId;                                                                   
/*0x024*/     ULONG32      Flags;                                                                                   
              union                                                            // 11 elements, 0x3A4 bytes (sizeof) 
              {                                                                                                     
/*0x028*/         struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;            // 7 elements, 0x398 bytes (sizeof)  
/*0x028*/         struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;            // 6 elements, 0x3A4 bytes (sizeof)  
/*0x028*/         struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;            // 2 elements, 0x3 bytes (sizeof)    
/*0x028*/         struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;            // 3 elements, 0x4 bytes (sizeof)    
/*0x028*/         struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;            // 3 elements, 0x4 bytes (sizeof)    
/*0x028*/         struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;            // 3 elements, 0x4 bytes (sizeof)    
/*0x028*/         struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;  // 12 elements, 0x24 bytes (sizeof)  
/*0x028*/         struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;  // 11 elements, 0x20 bytes (sizeof)  
/*0x028*/         struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;      // 14 elements, 0x2C bytes (sizeof)  
/*0x028*/         struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;      // 11 elements, 0x34 bytes (sizeof)  
/*0x028*/         struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2; // 18 elements, 0x50 bytes (sizeof)  
              }Info;                                                                                                
          }WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR;                                            
                                                                                                                    
          typedef union _WHEA_ERROR_STATUS     // 11 elements, 0x8 bytes (sizeof) 
          {                                                                       
/*0x000*/     UINT64       ErrorStatus;                                           
              struct                           // 10 elements, 0x8 bytes (sizeof) 
              {                                                                   
/*0x000*/         UINT64       Reserved1 : 8;  // 0 BitPosition                   
/*0x000*/         UINT64       ErrorType : 8;  // 8 BitPosition                   
/*0x000*/         UINT64       Address : 1;    // 16 BitPosition                  
/*0x000*/         UINT64       Control : 1;    // 17 BitPosition                  
/*0x000*/         UINT64       Data : 1;       // 18 BitPosition                  
/*0x000*/         UINT64       Responder : 1;  // 19 BitPosition                  
/*0x000*/         UINT64       Requester : 1;  // 20 BitPosition                  
/*0x000*/         UINT64       FirstError : 1; // 21 BitPosition                  
/*0x000*/         UINT64       Overflow : 1;   // 22 BitPosition                  
/*0x000*/         UINT64       Reserved2 : 41; // 23 BitPosition                  
              };                                                                  
          }WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS;                                   
                                                                                  
          typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS // 2 elements, 0x4 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Reserved : 32;           // 0 BitPosition                  
/*0x000*/     ULONG32      AsULONG;                                                   
          }WHEA_EVENT_LOG_ENTRY_FLAGS, *PWHEA_EVENT_LOG_ENTRY_FLAGS;                                  
                                                                                      
          typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER  // 8 elements, 0x20 bytes (sizeof) 
          {                                                                               
/*0x000*/     ULONG32      Signature;                                                     
/*0x004*/     ULONG32      Version;                                                       
/*0x008*/     ULONG32      Length;                                                        
/*0x00C*/     enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;                                       
/*0x010*/     ULONG32      OwnerTag;                                                      
/*0x014*/     enum _WHEA_EVENT_LOG_ENTRY_ID Id;                                           
/*0x018*/     union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags; // 2 elements, 0x4 bytes (sizeof)  
/*0x01C*/     ULONG32      PayloadLength;                                                 
          }WHEA_EVENT_LOG_ENTRY_HEADER, *PWHEA_EVENT_LOG_ENTRY_HEADER;                                   
                                                                                          
          typedef struct _WHEA_EVENT_LOG_ENTRY            // 1 elements, 0x20 bytes (sizeof) 
          {                                                                                  
/*0x000*/     struct _WHEA_EVENT_LOG_ENTRY_HEADER Header; // 8 elements, 0x20 bytes (sizeof) 
          }WHEA_EVENT_LOG_ENTRY, *PWHEA_EVENT_LOG_ENTRY;                                     
                                                                                             
          typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS // 24 elements, 0x8 bytes (sizeof) 
          {                                                                                     
              struct                                         // 23 elements, 0x8 bytes (sizeof) 
              {                                                                                 
/*0x000*/         UINT64       ErrorStatus : 1;              // 0 BitPosition                   
/*0x000*/         UINT64       PhysicalAddress : 1;          // 1 BitPosition                   
/*0x000*/         UINT64       PhysicalAddressMask : 1;      // 2 BitPosition                   
/*0x000*/         UINT64       Node : 1;                     // 3 BitPosition                   
/*0x000*/         UINT64       Card : 1;                     // 4 BitPosition                   
/*0x000*/         UINT64       Module : 1;                   // 5 BitPosition                   
/*0x000*/         UINT64       Bank : 1;                     // 6 BitPosition                   
/*0x000*/         UINT64       Device : 1;                   // 7 BitPosition                   
/*0x000*/         UINT64       Row : 1;                      // 8 BitPosition                   
/*0x000*/         UINT64       Column : 1;                   // 9 BitPosition                   
/*0x000*/         UINT64       BitPosition : 1;              // 10 BitPosition                  
/*0x000*/         UINT64       RequesterId : 1;              // 11 BitPosition                  
/*0x000*/         UINT64       ResponderId : 1;              // 12 BitPosition                  
/*0x000*/         UINT64       TargetId : 1;                 // 13 BitPosition                  
/*0x000*/         UINT64       ErrorType : 1;                // 14 BitPosition                  
/*0x000*/         UINT64       RankNumber : 1;               // 15 BitPosition                  
/*0x000*/         UINT64       CardHandle : 1;               // 16 BitPosition                  
/*0x000*/         UINT64       ModuleHandle : 1;             // 17 BitPosition                  
/*0x000*/         UINT64       ExtendedRow : 1;              // 18 BitPosition                  
/*0x000*/         UINT64       BankGroup : 1;                // 19 BitPosition                  
/*0x000*/         UINT64       BankAddress : 1;              // 20 BitPosition                  
/*0x000*/         UINT64       ChipIdentification : 1;       // 21 BitPosition                  
/*0x000*/         UINT64       Reserved : 42;                // 22 BitPosition                  
              };                                                                                
/*0x000*/     UINT64       ValidBits;                                                           
          }WHEA_MEMORY_ERROR_SECTION_VALIDBITS, *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS;                                   
                                                                                                
          typedef struct _WHEA_MEMORY_ERROR_SECTION                 // 20 elements, 0x50 bytes (sizeof) 
          {                                                                                             
/*0x000*/     union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits; // 24 elements, 0x8 bytes (sizeof)  
/*0x008*/     union _WHEA_ERROR_STATUS ErrorStatus;                 // 11 elements, 0x8 bytes (sizeof)  
/*0x010*/     UINT64       PhysicalAddress;                                                             
/*0x018*/     UINT64       PhysicalAddressMask;                                                         
/*0x020*/     UINT16       Node;                                                                        
/*0x022*/     UINT16       Card;                                                                        
/*0x024*/     UINT16       Module;                                                                      
/*0x026*/     UINT16       Bank;                                                                        
/*0x028*/     UINT16       Device;                                                                      
/*0x02A*/     UINT16       Row;                                                                         
/*0x02C*/     UINT16       Column;                                                                      
/*0x02E*/     UINT16       BitPosition;                                                                 
/*0x030*/     UINT64       RequesterId;                                                                 
/*0x038*/     UINT64       ResponderId;                                                                 
/*0x040*/     UINT64       TargetId;                                                                    
/*0x048*/     UINT8        ErrorType;                                                                   
/*0x049*/     UINT8        Extended;                                                                    
/*0x04A*/     UINT16       RankNumber;                                                                  
/*0x04C*/     UINT16       CardHandle;                                                                  
/*0x04E*/     UINT16       ModuleHandle;                                                                
          }WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION;                                      
                                                                                                        
          typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS // 15 elements, 0x8 bytes (sizeof) 
          {                                                                                                
              struct                                                    // 14 elements, 0x8 bytes (sizeof) 
              {                                                                                            
/*0x000*/         UINT64       ProcessorType : 1;                       // 0 BitPosition                   
/*0x000*/         UINT64       InstructionSet : 1;                      // 1 BitPosition                   
/*0x000*/         UINT64       ErrorType : 1;                           // 2 BitPosition                   
/*0x000*/         UINT64       Operation : 1;                           // 3 BitPosition                   
/*0x000*/         UINT64       Flags : 1;                               // 4 BitPosition                   
/*0x000*/         UINT64       Level : 1;                               // 5 BitPosition                   
/*0x000*/         UINT64       CPUVersion : 1;                          // 6 BitPosition                   
/*0x000*/         UINT64       CPUBrandString : 1;                      // 7 BitPosition                   
/*0x000*/         UINT64       ProcessorId : 1;                         // 8 BitPosition                   
/*0x000*/         UINT64       TargetAddress : 1;                       // 9 BitPosition                   
/*0x000*/         UINT64       RequesterId : 1;                         // 10 BitPosition                  
/*0x000*/         UINT64       ResponderId : 1;                         // 11 BitPosition                  
/*0x000*/         UINT64       InstructionPointer : 1;                  // 12 BitPosition                  
/*0x000*/         UINT64       Reserved : 51;                           // 13 BitPosition                  
              };                                                                                           
/*0x000*/     UINT64       ValidBits;                                                                      
          }WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;                                   
                                                                                                           
          typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION                 // 15 elements, 0xC0 bytes (sizeof) 
          {                                                                                                        
/*0x000*/     union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits; // 15 elements, 0x8 bytes (sizeof)  
/*0x008*/     UINT8        ProcessorType;                                                                          
/*0x009*/     UINT8        InstructionSet;                                                                         
/*0x00A*/     UINT8        ErrorType;                                                                              
/*0x00B*/     UINT8        Operation;                                                                              
/*0x00C*/     UINT8        Flags;                                                                                  
/*0x00D*/     UINT8        Level;                                                                                  
/*0x00E*/     UINT16       Reserved;                                                                               
/*0x010*/     UINT64       CPUVersion;                                                                             
/*0x018*/     UINT8        CPUBrandString[128];                                                                    
/*0x098*/     UINT64       ProcessorId;                                                                            
/*0x0A0*/     UINT64       TargetAddress;                                                                          
/*0x0A8*/     UINT64       RequesterId;                                                                            
/*0x0B0*/     UINT64       ResponderId;                                                                            
/*0x0B8*/     UINT64       InstructionPointer;                                                                     
          }WHEA_PROCESSOR_GENERIC_ERROR_SECTION, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION;                                    
                                                                                                                   
          typedef struct _WHEA_RECOVERY_CONTEXT // 3 elements, 0x20 bytes (sizeof) 
          {                                                                        
              struct                            // 5 elements, 0x10 bytes (sizeof) 
              {                                                                    
/*0x000*/         UINT64       Address;                                            
/*0x008*/         UINT8        Consumed;                                           
/*0x009*/         UINT8        _PADDING0_[0x1];                                    
/*0x00A*/         UINT16       ErrorCode;                                          
/*0x00C*/         UINT8        ErrorIpValid;                                       
/*0x00D*/         UINT8        RestartIpValid;                                     
/*0x00E*/         UINT8        _PADDING1_[0x2];                                    
              }MemoryError;                                                        
/*0x010*/     UINT64       PartitionId;                                            
/*0x018*/     UINT32       VpIndex;                                                
/*0x01C*/     UINT8        _PADDING0_[0x4];                                        
          }WHEA_RECOVERY_CONTEXT, *PWHEA_RECOVERY_CONTEXT;                                   
                                                                                   
          typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS   // 6 elements, 0x4 bytes (sizeof) 
          {                                                                                   
              struct                                        // 5 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x000*/         ULONG32      Preallocated : 1;            // 0 BitPosition                  
/*0x000*/         ULONG32      FromPersistentStore : 1;     // 1 BitPosition                  
/*0x000*/         ULONG32      PlatformPfaControl : 1;      // 2 BitPosition                  
/*0x000*/         ULONG32      PlatformDirectedOffline : 1; // 3 BitPosition                  
/*0x000*/         ULONG32      Reserved : 28;               // 4 BitPosition                  
              };                                                                              
/*0x000*/     ULONG32      AsULONG;                                                           
          }WHEAP_ERROR_RECORD_WRAPPER_FLAGS, *PWHEAP_ERROR_RECORD_WRAPPER_FLAGS;                                  
                                                                                              
          typedef struct _WHEAP_ERROR_RECORD_WRAPPER         // 7 elements, 0xF0 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _LIST_ENTRY WorkEntry;                  // 2 elements, 0x10 bytes (sizeof) 
/*0x010*/     ULONG32      Length;                                                              
/*0x014*/     ULONG32      ProcessorNumber;                                                     
/*0x018*/     union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags; // 6 elements, 0x4 bytes (sizeof)  
/*0x01C*/     LONG32       InUse;                                                               
/*0x020*/     struct _WHEAP_ERROR_SOURCE* ErrorSource;                                          
/*0x028*/     struct _WHEA_ERROR_RECORD ErrorRecord;         // 2 elements, 0xC8 bytes (sizeof) 
          }WHEAP_ERROR_RECORD_WRAPPER, *PWHEAP_ERROR_RECORD_WRAPPER;                                   
                                                                                                
          typedef struct _WHEAP_ERROR_SOURCE                   // 17 elements, 0x428 bytes (sizeof) 
          {                                                                                         
/*0x000*/     struct _LIST_ENTRY ListEntry;                    // 2 elements, 0x10 bytes (sizeof)   
/*0x010*/     ULONG32      FailedAllocations;                                                       
/*0x014*/     ULONG32      PlatformErrorSourceId;                                                   
/*0x018*/     LONG32       ErrorCount;                                                              
/*0x01C*/     ULONG32      RecordCount;                                                             
/*0x020*/     ULONG32      RecordLength;                                                            
/*0x024*/     ULONG32      PoolTag;                                                                 
/*0x028*/     enum _WHEA_ERROR_SOURCE_TYPE Type;                                                    
/*0x02C*/     UINT8        _PADDING0_[0x4];                                                         
/*0x030*/     struct _WHEAP_ERROR_RECORD_WRAPPER* Records;                                          
/*0x038*/     VOID*        Context;                                                                 
/*0x040*/     ULONG32      SectionCount;                                                            
/*0x044*/     ULONG32      SectionLength;                                                           
/*0x048*/     union _LARGE_INTEGER TickCountAtLastError;       // 4 elements, 0x8 bytes (sizeof)    
/*0x050*/     ULONG32      AccumulatedErrors;                                                       
/*0x054*/     ULONG32      TotalErrors;                                                             
/*0x058*/     UINT8        Deferred;                                                                
/*0x059*/     struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor; // 11 elements, 0x3CC bytes (sizeof) 
/*0x425*/     UINT8        _PADDING1_[0x3];                                                         
          }WHEAP_ERROR_SOURCE, *PWHEAP_ERROR_SOURCE;                                                
                                                                                                    
          typedef struct _WHEAP_ERROR_SOURCE_TABLE // 4 elements, 0x30 bytes (sizeof) 
          {                                                                           
/*0x000*/     ULONG32      Signature;                                                 
/*0x004*/     LONG32       Count;                                                     
/*0x008*/     struct _LIST_ENTRY Items;            // 2 elements, 0x10 bytes (sizeof) 
/*0x018*/     struct _KEVENT InsertLock;           // 1 elements, 0x18 bytes (sizeof) 
          }WHEAP_ERROR_SOURCE_TABLE, *PWHEAP_ERROR_SOURCE_TABLE;                                   
                                                                                      
          typedef struct _WHEAP_INFO_BLOCK                        // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                          
/*0x000*/     ULONG32      ErrorSourceCount;                                                         
/*0x004*/     UINT8        _PADDING0_[0x4];                                                          
/*0x008*/     struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;                                    
/*0x010*/     struct _WHEAP_WORK_QUEUE* WorkQueue;                                                   
          }WHEAP_INFO_BLOCK, *PWHEAP_INFO_BLOCK;                                                     
                                                                                                     
          typedef struct _WHEAP_WORK_QUEUE              // 6 elements, 0x88 bytes (sizeof)  
          {                                                                                 
/*0x000*/     struct _LIST_ENTRY ListHead;              // 2 elements, 0x10 bytes (sizeof)  
/*0x010*/     UINT64       ListLock;                                                        
/*0x018*/     LONG32       ItemCount;                                                       
/*0x01C*/     UINT8        _PADDING0_[0x4];                                                 
/*0x020*/     struct _KDPC Dpc;                         // 11 elements, 0x40 bytes (sizeof) 
/*0x060*/     struct _WORK_QUEUE_ITEM WorkItem;         // 3 elements, 0x20 bytes (sizeof)  
/*0x080*/     FUNCT_00EF_3414_WorkRoutine* WorkRoutine;                                     
          }WHEAP_WORK_QUEUE, *PWHEAP_WORK_QUEUE;                                            
                                                                                            
          typedef struct _wil_details_FeatureProperties             // 16 elements, 0x4 bytes (sizeof) 
          {                                                                                            
/*0x000*/     UINT32       enabledState : 2;                        // 0 BitPosition                   
/*0x000*/     UINT32       isVariant : 1;                           // 2 BitPosition                   
/*0x000*/     UINT32       queuedForReporting : 1;                  // 3 BitPosition                   
/*0x000*/     UINT32       hasNotificationState : 2;                // 4 BitPosition                   
/*0x000*/     UINT32       usageCount : 9;                          // 6 BitPosition                   
/*0x000*/     UINT32       usageCountRepresentsPotential : 1;       // 15 BitPosition                  
/*0x000*/     UINT32       reportedDeviceUsage : 1;                 // 16 BitPosition                  
/*0x000*/     UINT32       reportedDevicePotential : 1;             // 17 BitPosition                  
/*0x000*/     UINT32       reportedDeviceOpportunity : 1;           // 18 BitPosition                  
/*0x000*/     UINT32       reportedDevicePotentialOpportunity : 1;  // 19 BitPosition                  
/*0x000*/     UINT32       recordedDeviceUsage : 1;                 // 20 BitPosition                  
/*0x000*/     UINT32       recordedDevicePotential : 1;             // 21 BitPosition                  
/*0x000*/     UINT32       recordedDeviceOpportunity : 1;           // 22 BitPosition                  
/*0x000*/     UINT32       recordedDevicePotentialOpportunity : 1;  // 23 BitPosition                  
/*0x000*/     UINT32       opportunityCount : 7;                    // 24 BitPosition                  
/*0x000*/     UINT32       opportunityCountRepresentsPotential : 1; // 31 BitPosition                  
          }wil_details_FeatureProperties, *Pwil_details_FeatureProperties;                                   
                                                                                                       
          typedef struct _wil_details_VariantProperties // 7 elements, 0x4 bytes (sizeof) 
          {                                                                               
/*0x000*/     UINT32       enabledState : 2;            // 0 BitPosition                  
/*0x000*/     UINT32       isVariant : 1;               // 2 BitPosition                  
/*0x000*/     UINT32       queuedForReporting : 1;      // 3 BitPosition                  
/*0x000*/     UINT32       hasNotificationState : 2;    // 4 BitPosition                  
/*0x000*/     UINT32       recordedDeviceUsage : 1;     // 6 BitPosition                  
/*0x000*/     UINT32       variant : 6;                 // 7 BitPosition                  
/*0x000*/     UINT32       unused : 19;                 // 13 BitPosition                 
          }wil_details_VariantProperties, *Pwil_details_VariantProperties;                                  
                                                                                          
          typedef union _wil_details_FeaturePropertyCache    // 3 elements, 0x4 bytes (sizeof)  
          {                                                                                     
/*0x000*/     struct _wil_details_FeatureProperties cache;   // 16 elements, 0x4 bytes (sizeof) 
/*0x000*/     struct _wil_details_VariantProperties variant; // 7 elements, 0x4 bytes (sizeof)  
/*0x000*/     LONG32       var;                                                                 
          }wil_details_FeaturePropertyCache, *Pwil_details_FeaturePropertyCache;                                   
                                                                                                
          typedef struct _wil_details_FeatureTestState     // 6 elements, 0x20 bytes (sizeof) 
          {                                                                                   
/*0x000*/     enum _wil_details_FeatureTestStateKind kind;                                    
/*0x004*/     UINT32       featureId;                                                         
/*0x008*/     enum _wil_FeatureEnabledState state;                                            
/*0x00C*/     UINT8        variant;                                                           
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                   
/*0x010*/     UINT32       payload;                                                           
/*0x014*/     UINT8        _PADDING1_[0x4];                                                   
/*0x018*/     struct _wil_details_FeatureTestState* next;                                     
          }wil_details_FeatureTestState, *Pwil_details_FeatureTestState;                                   
                                                                                              
          typedef struct _wil_details_FeatureVariantPropertyCache    // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                            
/*0x000*/     union _wil_details_FeaturePropertyCache propertyCache; // 3 elements, 0x4 bytes (sizeof) 
/*0x004*/     UINT32       payloadId;                                                                  
          }wil_details_FeatureVariantPropertyCache, *Pwil_details_FeatureVariantPropertyCache;                                  
                                                                                                       
          typedef struct _wil_details_RecordUsageResult             // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                            
/*0x000*/     INT32        queueBackground;                                                            
/*0x004*/     UINT32       countImmediate;                                                             
/*0x008*/     enum _wil_details_ServiceReportingKind kindImmediate;                                    
/*0x00C*/     UINT32       payloadId;                                                                  
/*0x010*/     INT32        ignoredUse;                                                                 
/*0x014*/     INT32        isVariantConfiguration;                                                     
          }wil_details_RecordUsageResult, *Pwil_details_RecordUsageResult;                                   
                                                                                                       
          typedef struct _wil_details_SetPropertyCacheUsageContext // 3 elements, 0x18 bytes (sizeof) 
          {                                                                                           
/*0x000*/     struct _wil_details_RecordUsageResult* result;                                          
/*0x008*/     enum _wil_details_ServiceReportingKind kind;                                            
/*0x00C*/     UINT8        _PADDING0_[0x4];                                                           
/*0x010*/     UINT64       addend;                                                                    
          }wil_details_SetPropertyCacheUsageContext, *Pwil_details_SetPropertyCacheUsageContext;                                   
                                                                                                      
          typedef struct _wil_details_SetPropertyFlagContext // 3 elements, 0x10 bytes (sizeof) 
          {                                                                                     
/*0x000*/     struct _wil_details_RecordUsageResult* result;                                    
/*0x008*/     ULONG32      flags;                                                               
/*0x00C*/     INT32        ignoreReporting;                                                     
          }wil_details_SetPropertyFlagContext, *Pwil_details_SetPropertyFlagContext;                                   
                                                                                                
          typedef struct _wil_details_StagingConfig                    // 13 elements, 0x58 bytes (sizeof) 
          {                                                                                                
/*0x000*/     enum _wil_FeatureStore store;                                                                
/*0x004*/     INT32        forUpdate;                                                                      
/*0x008*/     ULONG32      readChangeStamp;                                                                
/*0x00C*/     UINT8        readVersion;                                                                    
/*0x00D*/     UINT8        _PADDING0_[0x3];                                                                
/*0x010*/     INT32        modified;                                                                       
/*0x014*/     UINT8        _PADDING1_[0x4];                                                                
/*0x018*/     struct _wil_details_StagingConfigHeader* header;                                             
/*0x020*/     struct _wil_details_StagingConfigFeature* features;                                          
/*0x028*/     struct _wil_details_StagingConfigUsageTrigger* triggers;                                     
/*0x030*/     INT32        changedInSession;                                                               
/*0x034*/     UINT8        _PADDING2_[0x4];                                                                
/*0x038*/     VOID*        buffer;                                                                         
/*0x040*/     UINT64       bufferSize;                                                                     
/*0x048*/     UINT64       bufferAlloc;                                                                    
/*0x050*/     INT32        bufferOwned;                                                                    
/*0x054*/     UINT8        _PADDING3_[0x4];                                                                
          }wil_details_StagingConfig, *Pwil_details_StagingConfig;                                         
                                                                                                           
          typedef struct _wil_details_StagingConfigFeature // 12 elements, 0xC bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT32       featureId;                                                         
              struct                                       // 10 elements, 0x4 bytes (sizeof) 
              {                                                                               
/*0x004*/         UINT32       changedInSession : 1;       // 0 BitPosition                   
/*0x004*/         UINT32       isVariantConfig : 1;        // 1 BitPosition                   
/*0x004*/         UINT32       unused1 : 6;                // 2 BitPosition                   
/*0x004*/         UINT32       serviceState : 2;           // 8 BitPosition                   
/*0x004*/         UINT32       userState : 2;              // 10 BitPosition                  
/*0x004*/         UINT32       testState : 2;              // 12 BitPosition                  
/*0x004*/         UINT32       unused2 : 2;                // 14 BitPosition                  
/*0x004*/         UINT32       unused3 : 8;                // 16 BitPosition                  
/*0x004*/         UINT32       variant : 6;                // 24 BitPosition                  
/*0x004*/         UINT32       payloadKind : 2;            // 30 BitPosition                  
              };                                                                              
/*0x008*/     UINT32       payload;                                                           
          }wil_details_StagingConfigFeature, *Pwil_details_StagingConfigFeature;                                   
                                                                                              
          typedef struct _wil_details_StagingConfigHeaderProperties // 5 elements, 0x4 bytes (sizeof) 
          {                                                                                           
/*0x000*/     UINT32       ignoreServiceState : 1;                  // 0 BitPosition                  
/*0x000*/     UINT32       ignoreUserState : 1;                     // 1 BitPosition                  
/*0x000*/     UINT32       ignoreTestState : 1;                     // 2 BitPosition                  
/*0x000*/     UINT32       ignoreVariants : 1;                      // 3 BitPosition                  
/*0x000*/     UINT32       unused : 28;                             // 4 BitPosition                  
          }wil_details_StagingConfigHeaderProperties, *Pwil_details_StagingConfigHeaderProperties;                                  
                                                                                                      
          typedef struct _wil_details_StagingConfigHeader                          // 7 elements, 0x10 bytes (sizeof) 
          {                                                                                                           
/*0x000*/     UINT8        version;                                                                                   
/*0x001*/     UINT8        versionMinor;                                                                              
/*0x002*/     UINT16       headerSizeBytes;                                                                           
/*0x004*/     UINT16       featureCount;                                                                              
/*0x006*/     UINT16       featureUsageTriggerCount;                                                                  
/*0x008*/     struct _wil_details_StagingConfigHeaderProperties sessionProperties; // 5 elements, 0x4 bytes (sizeof)  
/*0x00C*/     struct _wil_details_StagingConfigHeaderProperties properties;        // 5 elements, 0x4 bytes (sizeof)  
          }wil_details_StagingConfigHeader, *Pwil_details_StagingConfigHeader;                                        
                                                                                                                      
          typedef struct _wil_details_StagingConfigWnfStateName // 1 elements, 0x8 bytes (sizeof) 
          {                                                                                       
/*0x000*/     UINT32       Data[2];                                                               
          }wil_details_StagingConfigWnfStateName, *Pwil_details_StagingConfigWnfStateName;                                  
                                                                                                  
          typedef struct _wil_details_StagingConfigUsageTrigger      // 5 elements, 0x10 bytes (sizeof) 
          {                                                                                             
/*0x000*/     UINT32       featureId;                                                                   
/*0x004*/     struct _wil_details_StagingConfigWnfStateName trigger; // 1 elements, 0x8 bytes (sizeof)  
              struct                                                 // 3 elements, 0x4 bytes (sizeof)  
              {                                                                                         
/*0x00C*/         UINT32       serviceReportingKind : 16;            // 0 BitPosition                   
/*0x00C*/         UINT32       isVariantConfig : 1;                  // 16 BitPosition                  
/*0x00C*/         UINT32       unused : 15;                          // 17 BitPosition                  
              };                                                                                        
          }wil_details_StagingConfigUsageTrigger, *Pwil_details_StagingConfigUsageTrigger;                                   
                                                                                                        
          typedef struct _wil_details_UsageSubscriptionData // 2 elements, 0x8 bytes (sizeof) 
          {                                                                                   
/*0x000*/     UINT32       featureId;                                                         
/*0x004*/     UINT16       serviceReportingKind;                                              
/*0x006*/     UINT8        _PADDING0_[0x2];                                                   
          }wil_details_UsageSubscriptionData, *Pwil_details_UsageSubscriptionData;                                  
                                                                                              
          typedef struct _wil_FeatureState                     // 6 elements, 0x18 bytes (sizeof) 
          {                                                                                       
/*0x000*/     enum _wil_FeatureEnabledState enabledState;                                         
/*0x004*/     UINT8        variant;                                                               
/*0x005*/     UINT8        _PADDING0_[0x3];                                                       
/*0x008*/     enum _wil_FeatureVariantPayloadKind payloadKind;                                    
/*0x00C*/     UINT32       payload;                                                               
/*0x010*/     INT32        hasNotification;                                                       
/*0x014*/     INT32        isVariantConfiguration;                                                
          }wil_FeatureState, *Pwil_FeatureState;                                                  
                                                                                                  
typedef struct _wil_StagingConfig // 0 elements, 0x0 bytes (sizeof) 
{                                                                   
}wil_StagingConfig, *Pwil_StagingConfig;                                  
                                                                    
          typedef struct _WMI_BUFFER_HEADER              // 20 elements, 0x48 bytes (sizeof) 
          {                                                                                  
/*0x000*/     ULONG32      BufferSize;                                                       
/*0x004*/     ULONG32      SavedOffset;                                                      
/*0x008*/     ULONG32      CurrentOffset;                                                    
/*0x00C*/     LONG32       ReferenceCount;                                                   
/*0x010*/     union _LARGE_INTEGER TimeStamp;            // 4 elements, 0x8 bytes (sizeof)   
/*0x018*/     INT64        SequenceNumber;                                                   
              union                                      // 3 elements, 0x8 bytes (sizeof)   
              {                                                                              
                  struct                                 // 2 elements, 0x8 bytes (sizeof)   
                  {                                                                          
/*0x020*/             UINT64       ClockType : 3;        // 0 BitPosition                    
/*0x020*/             UINT64       Frequency : 61;       // 3 BitPosition                    
                  };                                                                         
/*0x020*/         struct _SINGLE_LIST_ENTRY SlistEntry;  // 1 elements, 0x8 bytes (sizeof)   
/*0x020*/         struct _WMI_BUFFER_HEADER* NextBuffer;                                     
              };                                                                             
/*0x028*/     struct _ETW_BUFFER_CONTEXT ClientContext;  // 4 elements, 0x4 bytes (sizeof)   
/*0x02C*/     enum _ETW_BUFFER_STATE State;                                                  
/*0x030*/     ULONG32      Offset;                                                           
/*0x034*/     UINT16       BufferFlag;                                                       
/*0x036*/     UINT16       BufferType;                                                       
              union                                      // 4 elements, 0x10 bytes (sizeof)  
              {                                                                              
/*0x038*/         ULONG32      Padding1[4];                                                  
/*0x038*/         struct _ETW_REF_CLOCK ReferenceTime;   // 2 elements, 0x10 bytes (sizeof)  
/*0x038*/         struct _LIST_ENTRY GlobalEntry;        // 2 elements, 0x10 bytes (sizeof)  
                  struct                                 // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                          
/*0x038*/             VOID*        Pointer0;                                                 
/*0x040*/             VOID*        Pointer1;                                                 
                  };                                                                         
              };                                                                             
          }WMI_BUFFER_HEADER, *PWMI_BUFFER_HEADER;                                           
                                                                                             
          typedef struct _WMI_LOGGER_CONTEXT                                   // 143 elements, 0x520 bytes (sizeof) 
          {                                                                                                          
/*0x000*/     ULONG32      LoggerId;                                                                                 
/*0x004*/     ULONG32      BufferSize;                                                                               
/*0x008*/     ULONG32      MaximumEventSize;                                                                         
/*0x00C*/     ULONG32      LoggerMode;                                                                               
/*0x010*/     LONG32       AcceptNewEvents;                                                                          
/*0x014*/     ULONG32      EventMarker[2];                                                                           
/*0x01C*/     ULONG32      ErrorMarker;                                                                              
/*0x020*/     ULONG32      SizeMask;                                                                                 
/*0x024*/     UINT8        _PADDING0_[0x4];                                                                          
/*0x028*/     FUNCT_00B9_1210_GetCpuClock* GetCpuClock;                                                              
/*0x030*/     struct _ETHREAD* LoggerThread;                                                                         
/*0x038*/     LONG32       LoggerStatus;                                                                             
/*0x03C*/     ULONG32      FailureReason;                                                                            
/*0x040*/     struct _ETW_BUFFER_QUEUE BufferQueue;                            // 2 elements, 0x10 bytes (sizeof)    
/*0x050*/     struct _ETW_BUFFER_QUEUE OverflowQueue;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x060*/     struct _LIST_ENTRY GlobalList;                                   // 2 elements, 0x10 bytes (sizeof)    
/*0x070*/     struct _LIST_ENTRY DebugIdTrackingList;                          // 2 elements, 0x10 bytes (sizeof)    
/*0x080*/     struct _ETW_DECODE_CONTROL_ENTRY* DecodeControlList;                                                   
/*0x088*/     ULONG32      DecodeControlCount;                                                                       
/*0x08C*/     UINT8        _PADDING1_[0x4];                                                                          
              union                                                            // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                      
/*0x090*/         struct _WMI_BUFFER_HEADER* BatchedBufferList;                                                      
/*0x090*/         struct _EX_FAST_REF CurrentBuffer;                           // 3 elements, 0x8 bytes (sizeof)     
              };                                                                                                     
/*0x098*/     struct _UNICODE_STRING LoggerName;                               // 3 elements, 0x10 bytes (sizeof)    
/*0x0A8*/     struct _UNICODE_STRING LogFileName;                              // 3 elements, 0x10 bytes (sizeof)    
/*0x0B8*/     struct _UNICODE_STRING LogFilePattern;                           // 3 elements, 0x10 bytes (sizeof)    
/*0x0C8*/     struct _UNICODE_STRING NewLogFileName;                           // 3 elements, 0x10 bytes (sizeof)    
/*0x0D8*/     ULONG32      ClockType;                                                                                
/*0x0DC*/     ULONG32      LastFlushedBuffer;                                                                        
/*0x0E0*/     ULONG32      FlushTimer;                                                                               
/*0x0E4*/     ULONG32      FlushThreshold;                                                                           
/*0x0E8*/     union _LARGE_INTEGER ByteOffset;                                 // 4 elements, 0x8 bytes (sizeof)     
/*0x0F0*/     ULONG32      MinimumBuffers;                                                                           
/*0x0F4*/     LONG32       BuffersAvailable;                                                                         
/*0x0F8*/     LONG32       NumberOfBuffers;                                                                          
/*0x0FC*/     ULONG32      MaximumBuffers;                                                                           
/*0x100*/     ULONG32      EventsLost;                                                                               
/*0x104*/     LONG32       PeakBuffersCount;                                                                         
/*0x108*/     ULONG32      BuffersWritten;                                                                           
/*0x10C*/     ULONG32      LogBuffersLost;                                                                           
/*0x110*/     ULONG32      RealTimeBuffersDelivered;                                                                 
/*0x114*/     ULONG32      RealTimeBuffersLost;                                                                      
/*0x118*/     LONG32*      SequencePtr;                                                                              
/*0x120*/     ULONG32      LocalSequence;                                                                            
/*0x124*/     struct _GUID InstanceGuid;                                       // 4 elements, 0x10 bytes (sizeof)    
/*0x134*/     ULONG32      MaximumFileSize;                                                                          
/*0x138*/     LONG32       FileCounter;                                                                              
/*0x13C*/     enum _POOL_TYPE PoolType;                                                                              
/*0x140*/     struct _ETW_REF_CLOCK ReferenceTime;                             // 2 elements, 0x10 bytes (sizeof)    
/*0x150*/     LONG32       CollectionOn;                                                                             
/*0x154*/     ULONG32      ProviderInfoSize;                                                                         
/*0x158*/     struct _LIST_ENTRY Consumers;                                    // 2 elements, 0x10 bytes (sizeof)    
/*0x168*/     ULONG32      NumConsumers;                                                                             
/*0x16C*/     UINT8        _PADDING2_[0x4];                                                                          
/*0x170*/     struct _ETW_REALTIME_CONSUMER* TransitionConsumer;                                                     
/*0x178*/     VOID*        RealtimeLogfileHandle;                                                                    
/*0x180*/     struct _UNICODE_STRING RealtimeLogfileName;                      // 3 elements, 0x10 bytes (sizeof)    
/*0x190*/     union _LARGE_INTEGER RealtimeWriteOffset;                        // 4 elements, 0x8 bytes (sizeof)     
/*0x198*/     union _LARGE_INTEGER RealtimeReadOffset;                         // 4 elements, 0x8 bytes (sizeof)     
/*0x1A0*/     union _LARGE_INTEGER RealtimeLogfileSize;                        // 4 elements, 0x8 bytes (sizeof)     
/*0x1A8*/     UINT64       RealtimeLogfileUsage;                                                                     
/*0x1B0*/     UINT64       RealtimeMaximumFileSize;                                                                  
/*0x1B8*/     ULONG32      RealtimeBuffersSaved;                                                                     
/*0x1BC*/     UINT8        _PADDING3_[0x4];                                                                          
/*0x1C0*/     struct _ETW_REF_CLOCK RealtimeReferenceTime;                     // 2 elements, 0x10 bytes (sizeof)    
/*0x1D0*/     enum _ETW_RT_EVENT_LOSS NewRTEventsLost;                                                               
/*0x1D4*/     UINT8        _PADDING4_[0x4];                                                                          
/*0x1D8*/     struct _KEVENT LoggerEvent;                                      // 1 elements, 0x18 bytes (sizeof)    
/*0x1F0*/     struct _KEVENT FlushEvent;                                       // 1 elements, 0x18 bytes (sizeof)    
/*0x208*/     struct _KTIMER FlushTimeOutTimer;                                // 6 elements, 0x40 bytes (sizeof)    
/*0x248*/     struct _KDPC LoggerDpc;                                          // 11 elements, 0x40 bytes (sizeof)   
/*0x288*/     struct _KMUTANT LoggerMutex;                                     // 5 elements, 0x38 bytes (sizeof)    
/*0x2C0*/     struct _EX_PUSH_LOCK LoggerLock;                                 // 7 elements, 0x8 bytes (sizeof)     
              union                                                            // 2 elements, 0x8 bytes (sizeof)     
              {                                                                                                      
/*0x2C8*/         UINT64       BufferListSpinLock;                                                                   
/*0x2C8*/         struct _EX_PUSH_LOCK BufferListPushLock;                     // 7 elements, 0x8 bytes (sizeof)     
              };                                                                                                     
/*0x2D0*/     struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;           // 6 elements, 0x48 bytes (sizeof)    
/*0x318*/     struct _TOKEN_ACCESS_INFORMATION* TokenAccessInformation;                                              
/*0x320*/     struct _EX_FAST_REF SecurityDescriptor;                          // 3 elements, 0x8 bytes (sizeof)     
/*0x328*/     union _LARGE_INTEGER StartTime;                                  // 4 elements, 0x8 bytes (sizeof)     
/*0x330*/     VOID*        LogFileHandle;                                                                            
/*0x338*/     INT64        BufferSequenceNumber;                                                                     
              union                                                            // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                      
/*0x340*/         ULONG32      Flags;                                                                                
                  struct                                                       // 22 elements, 0x4 bytes (sizeof)    
                  {                                                                                                  
/*0x340*/             ULONG32      Persistent : 1;                             // 0 BitPosition                      
/*0x340*/             ULONG32      AutoLogger : 1;                             // 1 BitPosition                      
/*0x340*/             ULONG32      FsReady : 1;                                // 2 BitPosition                      
/*0x340*/             ULONG32      RealTime : 1;                               // 3 BitPosition                      
/*0x340*/             ULONG32      Wow : 1;                                    // 4 BitPosition                      
/*0x340*/             ULONG32      KernelTrace : 1;                            // 5 BitPosition                      
/*0x340*/             ULONG32      NoMoreEnable : 1;                           // 6 BitPosition                      
/*0x340*/             ULONG32      StackTracing : 1;                           // 7 BitPosition                      
/*0x340*/             ULONG32      ErrorLogged : 1;                            // 8 BitPosition                      
/*0x340*/             ULONG32      RealtimeLoggerContextFreed : 1;             // 9 BitPosition                      
/*0x340*/             ULONG32      PebsTracing : 1;                            // 10 BitPosition                     
/*0x340*/             ULONG32      PmcCounters : 1;                            // 11 BitPosition                     
/*0x340*/             ULONG32      PageAlignBuffers : 1;                       // 12 BitPosition                     
/*0x340*/             ULONG32      StackLookasideListAllocated : 1;            // 13 BitPosition                     
/*0x340*/             ULONG32      SecurityTrace : 1;                          // 14 BitPosition                     
/*0x340*/             ULONG32      LastBranchTracing : 1;                      // 15 BitPosition                     
/*0x340*/             ULONG32      SystemLoggerIndex : 8;                      // 16 BitPosition                     
/*0x340*/             ULONG32      StackCaching : 1;                           // 24 BitPosition                     
/*0x340*/             ULONG32      ProviderTracking : 1;                       // 25 BitPosition                     
/*0x340*/             ULONG32      ProcessorTrace : 1;                         // 26 BitPosition                     
/*0x340*/             ULONG32      QpcDeltaTracking : 1;                       // 27 BitPosition                     
/*0x340*/             ULONG32      SpareFlags2 : 4;                            // 28 BitPosition                     
                  };                                                                                                 
              };                                                                                                     
              union                                                            // 2 elements, 0x4 bytes (sizeof)     
              {                                                                                                      
/*0x344*/         ULONG32      RequestFlag;                                                                          
                  struct                                                       // 13 elements, 0x4 bytes (sizeof)    
                  {                                                                                                  
/*0x344*/             ULONG32      DbgRequestNewFile : 1;                      // 0 BitPosition                      
/*0x344*/             ULONG32      DbgRequestUpdateFile : 1;                   // 1 BitPosition                      
/*0x344*/             ULONG32      DbgRequestFlush : 1;                        // 2 BitPosition                      
/*0x344*/             ULONG32      DbgRequestDisableRealtime : 1;              // 3 BitPosition                      
/*0x344*/             ULONG32      DbgRequestDisconnectConsumer : 1;           // 4 BitPosition                      
/*0x344*/             ULONG32      DbgRequestConnectConsumer : 1;              // 5 BitPosition                      
/*0x344*/             ULONG32      DbgRequestNotifyConsumer : 1;               // 6 BitPosition                      
/*0x344*/             ULONG32      DbgRequestUpdateHeader : 1;                 // 7 BitPosition                      
/*0x344*/             ULONG32      DbgRequestDeferredFlush : 1;                // 8 BitPosition                      
/*0x344*/             ULONG32      DbgRequestDeferredFlushTimer : 1;           // 9 BitPosition                      
/*0x344*/             ULONG32      DbgRequestFlushTimer : 1;                   // 10 BitPosition                     
/*0x344*/             ULONG32      DbgRequestUpdateDebugger : 1;               // 11 BitPosition                     
/*0x344*/             ULONG32      DbgSpareRequestFlags : 20;                  // 12 BitPosition                     
                  };                                                                                                 
              };                                                                                                     
/*0x350*/     struct _ETW_STACK_TRACE_BLOCK StackTraceBlock;                   // 9 elements, 0x80 bytes (sizeof)    
/*0x3D0*/     struct _RTL_BITMAP HookIdMap;                                    // 2 elements, 0x10 bytes (sizeof)    
/*0x3E0*/     struct _ETW_STACK_CACHE* StackCache;                                                                   
/*0x3E8*/     struct _ETW_PMC_SUPPORT* PmcData;                                                                      
/*0x3F0*/     struct _ETW_LBR_SUPPORT* LbrData;                                                                      
/*0x3F8*/     struct _ETW_IPT_SUPPORT* IptData;                                                                      
/*0x400*/     struct _LIST_ENTRY BinaryTrackingList;                           // 2 elements, 0x10 bytes (sizeof)    
/*0x410*/     struct _WMI_BUFFER_HEADER** ScratchArray;                                                              
/*0x418*/     struct _DISALLOWED_GUIDS DisallowedGuids;                        // 2 elements, 0x10 bytes (sizeof)    
/*0x428*/     INT64        RelativeTimerDueTime;                                                                     
/*0x430*/     struct _PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids;  // 2 elements, 0x10 bytes (sizeof)    
/*0x440*/     struct _EX_TIMER* PeriodicCaptureStateTimer;                                                           
/*0x448*/     enum _ETW_PERIODIC_TIMER_STATE PeriodicCaptureStateTimerState;                                         
/*0x44C*/     UINT8        _PADDING5_[0x4];                                                                          
/*0x450*/     struct _ETW_SOFT_RESTART_CONTEXT* SoftRestartContext;                                                  
/*0x458*/     struct _ETW_SILODRIVERSTATE* SiloState;                                                                
/*0x460*/     struct _WORK_QUEUE_ITEM CompressionWorkItem;                     // 3 elements, 0x20 bytes (sizeof)    
/*0x480*/     LONG32       CompressionWorkItemState;                                                                 
/*0x484*/     UINT8        _PADDING6_[0x4];                                                                          
/*0x488*/     struct _EX_PUSH_LOCK CompressionLock;                            // 7 elements, 0x8 bytes (sizeof)     
/*0x490*/     struct _WMI_BUFFER_HEADER* CompressionTarget;                                                          
/*0x498*/     VOID*        CompressionWorkspace;                                                                     
/*0x4A0*/     LONG32       CompressionOn;                                                                            
/*0x4A4*/     ULONG32      CompressionRatioGuess;                                                                    
/*0x4A8*/     ULONG32      PartialBufferCompressionLevel;                                                            
/*0x4AC*/     enum _ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;                                       
/*0x4B0*/     struct _SINGLE_LIST_ENTRY PlaceholderList;                       // 1 elements, 0x8 bytes (sizeof)     
/*0x4B8*/     struct _KDPC CompressionDpc;                                     // 11 elements, 0x40 bytes (sizeof)   
/*0x4F8*/     union _LARGE_INTEGER LastBufferSwitchTime;                       // 4 elements, 0x8 bytes (sizeof)     
/*0x500*/     union _LARGE_INTEGER BufferWriteDuration;                        // 4 elements, 0x8 bytes (sizeof)     
/*0x508*/     union _LARGE_INTEGER BufferCompressDuration;                     // 4 elements, 0x8 bytes (sizeof)     
/*0x510*/     INT64        ReferenceQpcDelta;                                                                        
/*0x518*/     struct _ETW_EVENT_CALLBACK_CONTEXT* CallbackContext;                                                   
          }WMI_LOGGER_CONTEXT, *PWMI_LOGGER_CONTEXT;                                                                 
                                                                                                                     
typedef struct _WNF_SCOPE_MAP // 0 elements, 0x0 bytes (sizeof) 
{                                                               
}WNF_SCOPE_MAP, *PWNF_SCOPE_MAP;                                  
                                                                
          typedef struct _WNF_TYPE_ID // 1 elements, 0x10 bytes (sizeof) 
          {                                                              
/*0x000*/     struct _GUID TypeId;    // 4 elements, 0x10 bytes (sizeof) 
          }WNF_TYPE_ID, *PWNF_TYPE_ID;                                   
                                                                         
          typedef struct _WORK_QUEUE_ENTRY                            // 4 elements, 0x88 bytes (sizeof)  
          {                                                                                               
/*0x000*/     struct _LIST_ENTRY WorkQueueLinks;                      // 2 elements, 0x10 bytes (sizeof)  
              union                                                   // 6 elements, 0x68 bytes (sizeof)  
              {                                                                                           
                  struct                                              // 2 elements, 0x10 bytes (sizeof)  
                  {                                                                                       
/*0x010*/             struct _FILE_OBJECT* FileObject;                                                    
/*0x018*/             VOID*        DiskIoAttribution;                                                     
                  }Read;                                                                                  
                  struct                                              // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                       
/*0x010*/             struct _SHARED_CACHE_MAP* SharedCacheMap;                                           
                  }Write;                                                                                 
                  struct                                              // 1 elements, 0x8 bytes (sizeof)   
                  {                                                                                       
/*0x010*/             struct _KEVENT* Event;                                                              
                  }Event;                                                                                 
                  struct                                              // 1 elements, 0x4 bytes (sizeof)   
                  {                                                                                       
/*0x010*/             ULONG32      Reason;                                                                
                  }Notification;                                                                          
                  struct                                              // 4 elements, 0x30 bytes (sizeof)  
                  {                                                                                       
/*0x010*/             struct _SHARED_CACHE_MAP* SharedCacheMap;                                           
/*0x018*/             struct _IO_STATUS_BLOCK* IoStatus;                                                  
/*0x020*/             struct _KEVENT CallerWaitEvent;                 // 1 elements, 0x18 bytes (sizeof)  
/*0x038*/             UINT8        IsLowPriWriteBehind;                                                   
/*0x039*/             UINT8        _PADDING0_[0x7];                                                       
                  }LowPriWrite;                                                                           
                  struct                                              // 14 elements, 0x68 bytes (sizeof) 
                  {                                                                                       
/*0x010*/             struct _SHARED_CACHE_MAP* SharedCacheMap;                                           
/*0x018*/             union _LARGE_INTEGER FileOffset;                // 4 elements, 0x8 bytes (sizeof)   
/*0x020*/             struct _FILE_OBJECT* FileObject;                                                    
/*0x028*/             ULONG32      Length;                                                                
/*0x02C*/             UINT8        _PADDING0_[0x4];                                                       
/*0x030*/             struct _SINGLE_LIST_ENTRY* PrefetchList;                                            
/*0x038*/             ULONG32      PrefetchPagePriority;                                                  
/*0x03C*/             UINT8        _PADDING1_[0x4];                                                       
/*0x040*/             struct _MDL* Mdl;                                                                   
/*0x048*/             struct _IO_STATUS_BLOCK* IoStatusBlock;                                             
/*0x050*/             struct _CC_ASYNC_READ_CONTEXT* CallbackContext;                                     
/*0x058*/             struct _EPROCESS* OriginatingProcess;                                               
/*0x060*/             struct _ETHREAD* IoIssuerThread;                                                    
/*0x068*/             VOID*        DiskIoAttribution;                                                     
/*0x070*/             CHAR         RequestorMode;                                                         
/*0x071*/             UINT8        _PADDING2_[0x3];                                                       
/*0x074*/             ULONG32      NestingLevel;                                                          
                  }AsyncRead;                                                                             
              }Parameters;                                                                                
/*0x078*/     UINT8        Function;                                                                      
/*0x079*/     UINT8        _PADDING0_[0x7];                                                               
/*0x080*/     struct _CC_PARTITION* Partition;                                                            
          }WORK_QUEUE_ENTRY, *PWORK_QUEUE_ENTRY;                                                          
                                                                                                          
          typedef struct _WRITE_BEHIND_THROUGHPUT // 2 elements, 0x8 bytes (sizeof) 
          {                                                                         
/*0x000*/     ULONG32      PagesYetToWrite;                                         
/*0x004*/     ULONG32      Throughput;                                              
          }WRITE_BEHIND_THROUGHPUT, *PWRITE_BEHIND_THROUGHPUT;                                  
                                                                                    
          typedef struct _X86_KTRAP_FRAME        // 37 elements, 0x8C bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      DbgEbp;                                                   
/*0x004*/     ULONG32      DbgEip;                                                   
/*0x008*/     ULONG32      DbgArgMark;                                               
/*0x00C*/     ULONG32      DbgArgPointer;                                            
/*0x010*/     ULONG32      TempSegCs;                                                
/*0x014*/     ULONG32      TempEsp;                                                  
/*0x018*/     ULONG32      Dr0;                                                      
/*0x01C*/     ULONG32      Dr1;                                                      
/*0x020*/     ULONG32      Dr2;                                                      
/*0x024*/     ULONG32      Dr3;                                                      
/*0x028*/     ULONG32      Dr6;                                                      
/*0x02C*/     ULONG32      Dr7;                                                      
/*0x030*/     ULONG32      SegGs;                                                    
/*0x034*/     ULONG32      SegEs;                                                    
/*0x038*/     ULONG32      SegDs;                                                    
/*0x03C*/     ULONG32      Edx;                                                      
/*0x040*/     ULONG32      Ecx;                                                      
/*0x044*/     ULONG32      Eax;                                                      
/*0x048*/     UINT8        PreviousPreviousMode;                                     
/*0x049*/     UINT8        EntropyQueueDpc;                                          
/*0x04A*/     UINT8        Reserved[2];                                              
/*0x04C*/     ULONG32      ExceptionList;                                            
/*0x050*/     ULONG32      SegFs;                                                    
/*0x054*/     ULONG32      Edi;                                                      
/*0x058*/     ULONG32      Esi;                                                      
/*0x05C*/     ULONG32      Ebx;                                                      
/*0x060*/     ULONG32      Ebp;                                                      
/*0x064*/     ULONG32      ErrCode;                                                  
/*0x068*/     ULONG32      Eip;                                                      
/*0x06C*/     ULONG32      SegCs;                                                    
/*0x070*/     ULONG32      EFlags;                                                   
/*0x074*/     ULONG32      HardwareEsp;                                              
/*0x078*/     ULONG32      HardwareSegSs;                                            
/*0x07C*/     ULONG32      V86Es;                                                    
/*0x080*/     ULONG32      V86Ds;                                                    
/*0x084*/     ULONG32      V86Fs;                                                    
/*0x088*/     ULONG32      V86Gs;                                                    
          }X86_KTRAP_FRAME, *PX86_KTRAP_FRAME;                                       
                                                                                     
          typedef struct _X86_KTRAP_FRAME_BLUE   // 39 elements, 0x8C bytes (sizeof) 
          {                                                                          
/*0x000*/     ULONG32      DbgEbp;                                                   
/*0x004*/     ULONG32      DbgEip;                                                   
/*0x008*/     ULONG32      DbgArgMark;                                               
/*0x00C*/     UINT16       TempSegCs;                                                
/*0x00E*/     UINT8        Logging;                                                  
/*0x00F*/     UINT8        FrameType;                                                
/*0x010*/     ULONG32      TempEsp;                                                  
/*0x014*/     ULONG32      Dr0;                                                      
/*0x018*/     ULONG32      Dr1;                                                      
/*0x01C*/     ULONG32      Dr2;                                                      
/*0x020*/     ULONG32      Dr3;                                                      
/*0x024*/     ULONG32      Dr6;                                                      
/*0x028*/     ULONG32      Dr7;                                                      
/*0x02C*/     ULONG32      SegGs;                                                    
/*0x030*/     ULONG32      SegEs;                                                    
/*0x034*/     ULONG32      SegDs;                                                    
/*0x038*/     ULONG32      Edx;                                                      
/*0x03C*/     ULONG32      Ecx;                                                      
/*0x040*/     ULONG32      Eax;                                                      
/*0x044*/     UINT8        PreviousPreviousMode;                                     
/*0x045*/     UINT8        EntropyQueueDpc;                                          
/*0x046*/     UINT8        Reserved[2];                                              
/*0x048*/     ULONG32      MxCsr;                                                    
/*0x04C*/     ULONG32      ExceptionList;                                            
/*0x050*/     ULONG32      SegFs;                                                    
/*0x054*/     ULONG32      Edi;                                                      
/*0x058*/     ULONG32      Esi;                                                      
/*0x05C*/     ULONG32      Ebx;                                                      
/*0x060*/     ULONG32      Ebp;                                                      
/*0x064*/     ULONG32      ErrCode;                                                  
/*0x068*/     ULONG32      Eip;                                                      
/*0x06C*/     ULONG32      SegCs;                                                    
/*0x070*/     ULONG32      EFlags;                                                   
/*0x074*/     ULONG32      HardwareEsp;                                              
/*0x078*/     ULONG32      HardwareSegSs;                                            
/*0x07C*/     ULONG32      V86Es;                                                    
/*0x080*/     ULONG32      V86Ds;                                                    
/*0x084*/     ULONG32      V86Fs;                                                    
/*0x088*/     ULONG32      V86Gs;                                                    
          }X86_KTRAP_FRAME_BLUE, *PX86_KTRAP_FRAME_BLUE;                                    
                                                                                     
          typedef struct _XSAVE_AREA_HEADER // 3 elements, 0x40 bytes (sizeof) 
          {                                                                    
/*0x000*/     UINT64       Mask;                                               
/*0x008*/     UINT64       CompactionMask;                                     
/*0x010*/     UINT64       Reserved2[6];                                       
          }XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;                                   
                                                                               
          typedef struct _XSAVE_AREA            // 2 elements, 0x240 bytes (sizeof)  
          {                                                                          
/*0x000*/     struct _XSAVE_FORMAT LegacyState; // 16 elements, 0x200 bytes (sizeof) 
/*0x200*/     struct _XSAVE_AREA_HEADER Header; // 3 elements, 0x40 bytes (sizeof)   
          }XSAVE_AREA, *PXSAVE_AREA;                                                 
                                                                                     
          typedef struct _XSTATE_CONTEXT // 5 elements, 0x20 bytes (sizeof) 
          {                                                                 
/*0x000*/     UINT64       Mask;                                            
/*0x008*/     ULONG32      Length;                                          
/*0x00C*/     ULONG32      Reserved1;                                       
/*0x010*/     struct _XSAVE_AREA* Area;                                     
/*0x018*/     VOID*        Buffer;                                          
          }XSTATE_CONTEXT, *PXSTATE_CONTEXT;                                   
                                                                            
          typedef struct _XSTATE_SAVE               // 4 elements, 0x38 bytes (sizeof) 
          {                                                                            
/*0x000*/     struct _XSTATE_SAVE* Prev;                                               
/*0x008*/     struct _KTHREAD* Thread;                                                 
/*0x010*/     UINT8        Level;                                                      
/*0x011*/     UINT8        _PADDING0_[0x7];                                            
/*0x018*/     struct _XSTATE_CONTEXT XStateContext; // 5 elements, 0x20 bytes (sizeof) 
          }XSTATE_SAVE, *PXSTATE_SAVE;                                                 
                                                                                       

#ifdef __cplusplus
}
#endif

